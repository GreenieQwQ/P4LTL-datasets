Stem:
[L360]  CALL        call mainProcedure();
[L647]  COND TRUE   true
[L648]  CALL        call main();
[L633]  CALL        call havocProcedure();
[L463]              hdr.ethernet.valid := false;
[L464]              emit[hdr.ethernet] := false;
[L465]              havoc hdr.ethernet.dstAddr;
[L466]              _old_hdr.ethernet.dstAddr := hdr.ethernet.dstAddr;
[L467]              havoc hdr.ethernet.srcAddr;
[L468]              _old_hdr.ethernet.srcAddr := hdr.ethernet.srcAddr;
[L469]              havoc hdr.ethernet.etherType;
[L470]              assume 0 <= hdr.ethernet.etherType && hdr.ethernet.etherType <= 65536;
[L471]              _old_hdr.ethernet.etherType := hdr.ethernet.etherType;
[L472]              hdr.ipv6.valid := false;
[L473]              emit[hdr.ipv6] := false;
[L474]              havoc hdr.ipv6.version;
[L475]              assume 0 <= hdr.ipv6.version && hdr.ipv6.version <= 16;
[L476]              _old_hdr.ipv6.version := hdr.ipv6.version;
[L477]              havoc hdr.ipv6.trafclass;
[L478]              assume 0 <= hdr.ipv6.trafclass && hdr.ipv6.trafclass <= 256;
[L479]              _old_hdr.ipv6.trafclass := hdr.ipv6.trafclass;
[L480]              havoc hdr.ipv6.flowlabel;
[L481]              assume 0 <= hdr.ipv6.flowlabel && hdr.ipv6.flowlabel <= 1048576;
[L482]              _old_hdr.ipv6.flowlabel := hdr.ipv6.flowlabel;
[L483]              havoc hdr.ipv6.payloadlen;
[L484]              assume 0 <= hdr.ipv6.payloadlen && hdr.ipv6.payloadlen <= 65536;
[L485]              _old_hdr.ipv6.payloadlen := hdr.ipv6.payloadlen;
[L486]              havoc hdr.ipv6.nextheader;
[L487]              assume 0 <= hdr.ipv6.nextheader && hdr.ipv6.nextheader <= 256;
[L488]              _old_hdr.ipv6.nextheader := hdr.ipv6.nextheader;
[L489]              havoc hdr.ipv6.hoplimit;
[L490]              assume 0 <= hdr.ipv6.hoplimit && hdr.ipv6.hoplimit <= 256;
[L491]              _old_hdr.ipv6.hoplimit := hdr.ipv6.hoplimit;
[L492]              havoc hdr.ipv6.srcAddr;
[L493]              _old_hdr.ipv6.srcAddr := hdr.ipv6.srcAddr;
[L494]              havoc hdr.ipv6.dstAddr;
[L495]              _old_hdr.ipv6.dstAddr := hdr.ipv6.dstAddr;
[L496]              hdr.ipv4_tunnel.valid := false;
[L497]              emit[hdr.ipv4_tunnel] := false;
[L498]              havoc hdr.ipv4_tunnel.version;
[L499]              assume 0 <= hdr.ipv4_tunnel.version && hdr.ipv4_tunnel.version <= 16;
[L500]              _old_hdr.ipv4_tunnel.version := hdr.ipv4_tunnel.version;
[L501]              havoc hdr.ipv4_tunnel.ihl;
[L502]              assume 0 <= hdr.ipv4_tunnel.ihl && hdr.ipv4_tunnel.ihl <= 16;
[L503]              _old_hdr.ipv4_tunnel.ihl := hdr.ipv4_tunnel.ihl;
[L504]              havoc hdr.ipv4_tunnel.diffserv;
[L505]              assume 0 <= hdr.ipv4_tunnel.diffserv && hdr.ipv4_tunnel.diffserv <= 256;
[L506]              _old_hdr.ipv4_tunnel.diffserv := hdr.ipv4_tunnel.diffserv;
[L507]              havoc hdr.ipv4_tunnel.totalLen;
[L508]              assume 0 <= hdr.ipv4_tunnel.totalLen && hdr.ipv4_tunnel.totalLen <= 65536;
[L509]              _old_hdr.ipv4_tunnel.totalLen := hdr.ipv4_tunnel.totalLen;
[L510]              havoc hdr.ipv4_tunnel.identification;
[L511]              assume 0 <= hdr.ipv4_tunnel.identification && hdr.ipv4_tunnel.identification <= 65536;
[L512]              _old_hdr.ipv4_tunnel.identification := hdr.ipv4_tunnel.identification;
[L513]              havoc hdr.ipv4_tunnel.flags;
[L514]              assume 0 <= hdr.ipv4_tunnel.flags && hdr.ipv4_tunnel.flags <= 8;
[L515]              _old_hdr.ipv4_tunnel.flags := hdr.ipv4_tunnel.flags;
[L516]              havoc hdr.ipv4_tunnel.fragOffset;
[L517]              assume 0 <= hdr.ipv4_tunnel.fragOffset && hdr.ipv4_tunnel.fragOffset <= 8192;
[L518]              _old_hdr.ipv4_tunnel.fragOffset := hdr.ipv4_tunnel.fragOffset;
[L519]              havoc hdr.ipv4_tunnel.ttl;
[L520]              assume 0 <= hdr.ipv4_tunnel.ttl && hdr.ipv4_tunnel.ttl <= 256;
[L521]              _old_hdr.ipv4_tunnel.ttl := hdr.ipv4_tunnel.ttl;
[L522]              havoc hdr.ipv4_tunnel.protocol;
[L523]              assume 0 <= hdr.ipv4_tunnel.protocol && hdr.ipv4_tunnel.protocol <= 256;
[L524]              _old_hdr.ipv4_tunnel.protocol := hdr.ipv4_tunnel.protocol;
[L525]              havoc hdr.ipv4_tunnel.hdrChecksum;
[L526]              assume 0 <= hdr.ipv4_tunnel.hdrChecksum && hdr.ipv4_tunnel.hdrChecksum <= 65536;
[L527]              _old_hdr.ipv4_tunnel.hdrChecksum := hdr.ipv4_tunnel.hdrChecksum;
[L528]              havoc hdr.ipv4_tunnel.srcAddr;
[L529]              _old_hdr.ipv4_tunnel.srcAddr := hdr.ipv4_tunnel.srcAddr;
[L530]              havoc hdr.ipv4_tunnel.dstAddr;
[L531]              _old_hdr.ipv4_tunnel.dstAddr := hdr.ipv4_tunnel.dstAddr;
[L532]              hdr.ipv4.valid := false;
[L533]              emit[hdr.ipv4] := false;
[L534]              havoc hdr.ipv4.version;
[L535]              assume 0 <= hdr.ipv4.version && hdr.ipv4.version <= 16;
[L536]              _old_hdr.ipv4.version := hdr.ipv4.version;
[L537]              havoc hdr.ipv4.ihl;
[L538]              assume 0 <= hdr.ipv4.ihl && hdr.ipv4.ihl <= 16;
[L539]              _old_hdr.ipv4.ihl := hdr.ipv4.ihl;
[L540]              havoc hdr.ipv4.diffserv;
[L541]              assume 0 <= hdr.ipv4.diffserv && hdr.ipv4.diffserv <= 256;
[L542]              _old_hdr.ipv4.diffserv := hdr.ipv4.diffserv;
[L543]              havoc hdr.ipv4.totalLen;
[L544]              assume 0 <= hdr.ipv4.totalLen && hdr.ipv4.totalLen <= 65536;
[L545]              _old_hdr.ipv4.totalLen := hdr.ipv4.totalLen;
[L546]              havoc hdr.ipv4.identification;
[L547]              assume 0 <= hdr.ipv4.identification && hdr.ipv4.identification <= 65536;
[L548]              _old_hdr.ipv4.identification := hdr.ipv4.identification;
[L549]              havoc hdr.ipv4.flags;
[L550]              assume 0 <= hdr.ipv4.flags && hdr.ipv4.flags <= 8;
[L551]              _old_hdr.ipv4.flags := hdr.ipv4.flags;
[L552]              havoc hdr.ipv4.fragOffset;
[L553]              assume 0 <= hdr.ipv4.fragOffset && hdr.ipv4.fragOffset <= 8192;
[L554]              _old_hdr.ipv4.fragOffset := hdr.ipv4.fragOffset;
[L555]              havoc hdr.ipv4.ttl;
[L556]              assume 0 <= hdr.ipv4.ttl && hdr.ipv4.ttl <= 256;
[L557]              _old_hdr.ipv4.ttl := hdr.ipv4.ttl;
[L558]              havoc hdr.ipv4.protocol;
[L559]              assume 0 <= hdr.ipv4.protocol && hdr.ipv4.protocol <= 256;
[L560]              _old_hdr.ipv4.protocol := hdr.ipv4.protocol;
[L561]              havoc hdr.ipv4.hdrChecksum;
[L562]              assume 0 <= hdr.ipv4.hdrChecksum && hdr.ipv4.hdrChecksum <= 65536;
[L563]              _old_hdr.ipv4.hdrChecksum := hdr.ipv4.hdrChecksum;
[L564]              havoc hdr.ipv4.srcAddr;
[L565]              _old_hdr.ipv4.srcAddr := hdr.ipv4.srcAddr;
[L566]              havoc hdr.ipv4.dstAddr;
[L567]              _old_hdr.ipv4.dstAddr := hdr.ipv4.dstAddr;
[L568]              hdr.tcp.valid := false;
[L569]              emit[hdr.tcp] := false;
[L570]              havoc hdr.tcp.srcport;
[L571]              assume 0 <= hdr.tcp.srcport && hdr.tcp.srcport <= 65536;
[L572]              _old_hdr.tcp.srcport := hdr.tcp.srcport;
[L573]              havoc hdr.tcp.dstport;
[L574]              assume 0 <= hdr.tcp.dstport && hdr.tcp.dstport <= 65536;
[L575]              _old_hdr.tcp.dstport := hdr.tcp.dstport;
[L576]              havoc hdr.tcp.sequence;
[L577]              assume 0 <= hdr.tcp.sequence && hdr.tcp.sequence <= 4294967296;
[L578]              _old_hdr.tcp.sequence := hdr.tcp.sequence;
[L579]              havoc hdr.tcp.ackseq;
[L580]              assume 0 <= hdr.tcp.ackseq && hdr.tcp.ackseq <= 4294967296;
[L581]              _old_hdr.tcp.ackseq := hdr.tcp.ackseq;
[L582]              havoc hdr.tcp.headerlength;
[L583]              assume 0 <= hdr.tcp.headerlength && hdr.tcp.headerlength <= 16;
[L584]              _old_hdr.tcp.headerlength := hdr.tcp.headerlength;
[L585]              havoc hdr.tcp.reservation;
[L586]              assume 0 <= hdr.tcp.reservation && hdr.tcp.reservation <= 64;
[L587]              _old_hdr.tcp.reservation := hdr.tcp.reservation;
[L588]              havoc hdr.tcp.URG;
[L589]              assume 0 <= hdr.tcp.URG && hdr.tcp.URG <= 2;
[L590]              _old_hdr.tcp.URG := hdr.tcp.URG;
[L591]              havoc hdr.tcp.ACK;
[L592]              assume 0 <= hdr.tcp.ACK && hdr.tcp.ACK <= 2;
[L593]              _old_hdr.tcp.ACK := hdr.tcp.ACK;
[L594]              havoc hdr.tcp.PSH;
[L595]              assume 0 <= hdr.tcp.PSH && hdr.tcp.PSH <= 2;
[L596]              _old_hdr.tcp.PSH := hdr.tcp.PSH;
[L597]              havoc hdr.tcp.RST;
[L598]              assume 0 <= hdr.tcp.RST && hdr.tcp.RST <= 2;
[L599]              _old_hdr.tcp.RST := hdr.tcp.RST;
[L600]              havoc hdr.tcp.SYN;
[L601]              assume 0 <= hdr.tcp.SYN && hdr.tcp.SYN <= 2;
[L602]              _old_hdr.tcp.SYN := hdr.tcp.SYN;
[L603]              havoc hdr.tcp.FIN;
[L604]              assume 0 <= hdr.tcp.FIN && hdr.tcp.FIN <= 2;
[L605]              _old_hdr.tcp.FIN := hdr.tcp.FIN;
[L606]              havoc hdr.tcp.windowsize;
[L607]              assume 0 <= hdr.tcp.windowsize && hdr.tcp.windowsize <= 65536;
[L608]              _old_hdr.tcp.windowsize := hdr.tcp.windowsize;
[L609]              havoc hdr.tcp.checksum;
[L610]              assume 0 <= hdr.tcp.checksum && hdr.tcp.checksum <= 65536;
[L611]              _old_hdr.tcp.checksum := hdr.tcp.checksum;
[L612]              havoc hdr.tcp.pointer;
[L613]              assume 0 <= hdr.tcp.pointer && hdr.tcp.pointer <= 65536;
[L614]              _old_hdr.tcp.pointer := hdr.tcp.pointer;
[L615]              hdr.udp_tunnel.valid := false;
[L616]              emit[hdr.udp_tunnel] := false;
[L617]              havoc hdr.udp_tunnel.srcport;
[L618]              assume 0 <= hdr.udp_tunnel.srcport && hdr.udp_tunnel.srcport <= 65536;
[L619]              _old_hdr.udp_tunnel.srcport := hdr.udp_tunnel.srcport;
[L620]              havoc hdr.udp_tunnel.dstport;
[L621]              assume 0 <= hdr.udp_tunnel.dstport && hdr.udp_tunnel.dstport <= 65536;
[L622]              _old_hdr.udp_tunnel.dstport := hdr.udp_tunnel.dstport;
[L623]              havoc hdr.udp_tunnel.userlength;
[L624]              assume 0 <= hdr.udp_tunnel.userlength && hdr.udp_tunnel.userlength <= 65536;
[L625]              _old_hdr.udp_tunnel.userlength := hdr.udp_tunnel.userlength;
[L626]              havoc hdr.udp_tunnel.checksum;
[L627]              assume 0 <= hdr.udp_tunnel.checksum && hdr.udp_tunnel.checksum <= 65536;
[L628]              _old_hdr.udp_tunnel.checksum := hdr.udp_tunnel.checksum;
[L633]  RET         call havocProcedure();
[L636]  CALL        call _parser_MyParser();
[L367]  CALL        call start();
[L797]              hdr.ethernet.valid := true;
[L798]  COND FALSE  !(hdr.ethernet.etherType == 34525)
[L801]  COND FALSE  !(hdr.ethernet.etherType == 2048)
[L367]  RET         call start();
[L636]  RET         call _parser_MyParser();
[L637]  CALL        call MyVerifyChecksum();
[L637]  RET         call MyVerifyChecksum();
[L638]  CALL        call MyIngress();
[L300]  COND TRUE   standard_metadata.ingress_port == 0
[L301]  COND FALSE  !(hdr.ipv4.dstAddr == 2071690107)
[L307]  COND TRUE   hdr.ethernet.dstAddr != 281474976710655 && hdr.ethernet.srcAddr != 0
[L308]  CALL        call store_user_mac();
[L811]  CALL        call user_mac.write(0, hdr.ethernet.srcAddr);
[L817]              user_mac[index] := value;
[L811]  RET         call user_mac.write(0, hdr.ethernet.srcAddr);
[L308]  RET         call store_user_mac();
[L310]  CALL        call do_read_count();
[L446]              temp_0 := count[0];
[L310]  RET         call do_read_count();
[L311]  COND FALSE  !(temp_0 == 0)
[L318]  COND FALSE  !(temp_0 == 1)
[L325]  COND FALSE  !(temp_0 == 2)
[L638]  RET         call MyIngress();
[L639]  CALL        call MyEgress();
[L291]  COND FALSE  !(standard_metadata.egress_port == 0 && hdr.tcp.valid)
[L639]  RET         call MyEgress();
[L640]  CALL        call MyComputeChecksum();
[L640]  RET         call MyComputeChecksum();
[L648]  RET         call main();
Loop:
[L647]  COND TRUE   true
[L648]  CALL        call main();
[L633]  CALL        call havocProcedure();
[L463]              hdr.ethernet.valid := false;
[L464]              emit[hdr.ethernet] := false;
[L465]              havoc hdr.ethernet.dstAddr;
[L466]              _old_hdr.ethernet.dstAddr := hdr.ethernet.dstAddr;
[L467]              havoc hdr.ethernet.srcAddr;
[L468]              _old_hdr.ethernet.srcAddr := hdr.ethernet.srcAddr;
[L469]              havoc hdr.ethernet.etherType;
[L470]              assume 0 <= hdr.ethernet.etherType && hdr.ethernet.etherType <= 65536;
[L471]              _old_hdr.ethernet.etherType := hdr.ethernet.etherType;
[L472]              hdr.ipv6.valid := false;
[L473]              emit[hdr.ipv6] := false;
[L474]              havoc hdr.ipv6.version;
[L475]              assume 0 <= hdr.ipv6.version && hdr.ipv6.version <= 16;
[L476]              _old_hdr.ipv6.version := hdr.ipv6.version;
[L477]              havoc hdr.ipv6.trafclass;
[L478]              assume 0 <= hdr.ipv6.trafclass && hdr.ipv6.trafclass <= 256;
[L479]              _old_hdr.ipv6.trafclass := hdr.ipv6.trafclass;
[L480]              havoc hdr.ipv6.flowlabel;
[L481]              assume 0 <= hdr.ipv6.flowlabel && hdr.ipv6.flowlabel <= 1048576;
[L482]              _old_hdr.ipv6.flowlabel := hdr.ipv6.flowlabel;
[L483]              havoc hdr.ipv6.payloadlen;
[L484]              assume 0 <= hdr.ipv6.payloadlen && hdr.ipv6.payloadlen <= 65536;
[L485]              _old_hdr.ipv6.payloadlen := hdr.ipv6.payloadlen;
[L486]              havoc hdr.ipv6.nextheader;
[L487]              assume 0 <= hdr.ipv6.nextheader && hdr.ipv6.nextheader <= 256;
[L488]              _old_hdr.ipv6.nextheader := hdr.ipv6.nextheader;
[L489]              havoc hdr.ipv6.hoplimit;
[L490]              assume 0 <= hdr.ipv6.hoplimit && hdr.ipv6.hoplimit <= 256;
[L491]              _old_hdr.ipv6.hoplimit := hdr.ipv6.hoplimit;
[L492]              havoc hdr.ipv6.srcAddr;
[L493]              _old_hdr.ipv6.srcAddr := hdr.ipv6.srcAddr;
[L494]              havoc hdr.ipv6.dstAddr;
[L495]              _old_hdr.ipv6.dstAddr := hdr.ipv6.dstAddr;
[L496]              hdr.ipv4_tunnel.valid := false;
[L497]              emit[hdr.ipv4_tunnel] := false;
[L498]              havoc hdr.ipv4_tunnel.version;
[L499]              assume 0 <= hdr.ipv4_tunnel.version && hdr.ipv4_tunnel.version <= 16;
[L500]              _old_hdr.ipv4_tunnel.version := hdr.ipv4_tunnel.version;
[L501]              havoc hdr.ipv4_tunnel.ihl;
[L502]              assume 0 <= hdr.ipv4_tunnel.ihl && hdr.ipv4_tunnel.ihl <= 16;
[L503]              _old_hdr.ipv4_tunnel.ihl := hdr.ipv4_tunnel.ihl;
[L504]              havoc hdr.ipv4_tunnel.diffserv;
[L505]              assume 0 <= hdr.ipv4_tunnel.diffserv && hdr.ipv4_tunnel.diffserv <= 256;
[L506]              _old_hdr.ipv4_tunnel.diffserv := hdr.ipv4_tunnel.diffserv;
[L507]              havoc hdr.ipv4_tunnel.totalLen;
[L508]              assume 0 <= hdr.ipv4_tunnel.totalLen && hdr.ipv4_tunnel.totalLen <= 65536;
[L509]              _old_hdr.ipv4_tunnel.totalLen := hdr.ipv4_tunnel.totalLen;
[L510]              havoc hdr.ipv4_tunnel.identification;
[L511]              assume 0 <= hdr.ipv4_tunnel.identification && hdr.ipv4_tunnel.identification <= 65536;
[L512]              _old_hdr.ipv4_tunnel.identification := hdr.ipv4_tunnel.identification;
[L513]              havoc hdr.ipv4_tunnel.flags;
[L514]              assume 0 <= hdr.ipv4_tunnel.flags && hdr.ipv4_tunnel.flags <= 8;
[L515]              _old_hdr.ipv4_tunnel.flags := hdr.ipv4_tunnel.flags;
[L516]              havoc hdr.ipv4_tunnel.fragOffset;
[L517]              assume 0 <= hdr.ipv4_tunnel.fragOffset && hdr.ipv4_tunnel.fragOffset <= 8192;
[L518]              _old_hdr.ipv4_tunnel.fragOffset := hdr.ipv4_tunnel.fragOffset;
[L519]              havoc hdr.ipv4_tunnel.ttl;
[L520]              assume 0 <= hdr.ipv4_tunnel.ttl && hdr.ipv4_tunnel.ttl <= 256;
[L521]              _old_hdr.ipv4_tunnel.ttl := hdr.ipv4_tunnel.ttl;
[L522]              havoc hdr.ipv4_tunnel.protocol;
[L523]              assume 0 <= hdr.ipv4_tunnel.protocol && hdr.ipv4_tunnel.protocol <= 256;
[L524]              _old_hdr.ipv4_tunnel.protocol := hdr.ipv4_tunnel.protocol;
[L525]              havoc hdr.ipv4_tunnel.hdrChecksum;
[L526]              assume 0 <= hdr.ipv4_tunnel.hdrChecksum && hdr.ipv4_tunnel.hdrChecksum <= 65536;
[L527]              _old_hdr.ipv4_tunnel.hdrChecksum := hdr.ipv4_tunnel.hdrChecksum;
[L528]              havoc hdr.ipv4_tunnel.srcAddr;
[L529]              _old_hdr.ipv4_tunnel.srcAddr := hdr.ipv4_tunnel.srcAddr;
[L530]              havoc hdr.ipv4_tunnel.dstAddr;
[L531]              _old_hdr.ipv4_tunnel.dstAddr := hdr.ipv4_tunnel.dstAddr;
[L532]              hdr.ipv4.valid := false;
[L533]              emit[hdr.ipv4] := false;
[L534]              havoc hdr.ipv4.version;
[L535]              assume 0 <= hdr.ipv4.version && hdr.ipv4.version <= 16;
[L536]              _old_hdr.ipv4.version := hdr.ipv4.version;
[L537]              havoc hdr.ipv4.ihl;
[L538]              assume 0 <= hdr.ipv4.ihl && hdr.ipv4.ihl <= 16;
[L539]              _old_hdr.ipv4.ihl := hdr.ipv4.ihl;
[L540]              havoc hdr.ipv4.diffserv;
[L541]              assume 0 <= hdr.ipv4.diffserv && hdr.ipv4.diffserv <= 256;
[L542]              _old_hdr.ipv4.diffserv := hdr.ipv4.diffserv;
[L543]              havoc hdr.ipv4.totalLen;
[L544]              assume 0 <= hdr.ipv4.totalLen && hdr.ipv4.totalLen <= 65536;
[L545]              _old_hdr.ipv4.totalLen := hdr.ipv4.totalLen;
[L546]              havoc hdr.ipv4.identification;
[L547]              assume 0 <= hdr.ipv4.identification && hdr.ipv4.identification <= 65536;
[L548]              _old_hdr.ipv4.identification := hdr.ipv4.identification;
[L549]              havoc hdr.ipv4.flags;
[L550]              assume 0 <= hdr.ipv4.flags && hdr.ipv4.flags <= 8;
[L551]              _old_hdr.ipv4.flags := hdr.ipv4.flags;
[L552]              havoc hdr.ipv4.fragOffset;
[L553]              assume 0 <= hdr.ipv4.fragOffset && hdr.ipv4.fragOffset <= 8192;
[L554]              _old_hdr.ipv4.fragOffset := hdr.ipv4.fragOffset;
[L555]              havoc hdr.ipv4.ttl;
[L556]              assume 0 <= hdr.ipv4.ttl && hdr.ipv4.ttl <= 256;
[L557]              _old_hdr.ipv4.ttl := hdr.ipv4.ttl;
[L558]              havoc hdr.ipv4.protocol;
[L559]              assume 0 <= hdr.ipv4.protocol && hdr.ipv4.protocol <= 256;
[L560]              _old_hdr.ipv4.protocol := hdr.ipv4.protocol;
[L561]              havoc hdr.ipv4.hdrChecksum;
[L562]              assume 0 <= hdr.ipv4.hdrChecksum && hdr.ipv4.hdrChecksum <= 65536;
[L563]              _old_hdr.ipv4.hdrChecksum := hdr.ipv4.hdrChecksum;
[L564]              havoc hdr.ipv4.srcAddr;
[L565]              _old_hdr.ipv4.srcAddr := hdr.ipv4.srcAddr;
[L566]              havoc hdr.ipv4.dstAddr;
[L567]              _old_hdr.ipv4.dstAddr := hdr.ipv4.dstAddr;
[L568]              hdr.tcp.valid := false;
[L569]              emit[hdr.tcp] := false;
[L570]              havoc hdr.tcp.srcport;
[L571]              assume 0 <= hdr.tcp.srcport && hdr.tcp.srcport <= 65536;
[L572]              _old_hdr.tcp.srcport := hdr.tcp.srcport;
[L573]              havoc hdr.tcp.dstport;
[L574]              assume 0 <= hdr.tcp.dstport && hdr.tcp.dstport <= 65536;
[L575]              _old_hdr.tcp.dstport := hdr.tcp.dstport;
[L576]              havoc hdr.tcp.sequence;
[L577]              assume 0 <= hdr.tcp.sequence && hdr.tcp.sequence <= 4294967296;
[L578]              _old_hdr.tcp.sequence := hdr.tcp.sequence;
[L579]              havoc hdr.tcp.ackseq;
[L580]              assume 0 <= hdr.tcp.ackseq && hdr.tcp.ackseq <= 4294967296;
[L581]              _old_hdr.tcp.ackseq := hdr.tcp.ackseq;
[L582]              havoc hdr.tcp.headerlength;
[L583]              assume 0 <= hdr.tcp.headerlength && hdr.tcp.headerlength <= 16;
[L584]              _old_hdr.tcp.headerlength := hdr.tcp.headerlength;
[L585]              havoc hdr.tcp.reservation;
[L586]              assume 0 <= hdr.tcp.reservation && hdr.tcp.reservation <= 64;
[L587]              _old_hdr.tcp.reservation := hdr.tcp.reservation;
[L588]              havoc hdr.tcp.URG;
[L589]              assume 0 <= hdr.tcp.URG && hdr.tcp.URG <= 2;
[L590]              _old_hdr.tcp.URG := hdr.tcp.URG;
[L591]              havoc hdr.tcp.ACK;
[L592]              assume 0 <= hdr.tcp.ACK && hdr.tcp.ACK <= 2;
[L593]              _old_hdr.tcp.ACK := hdr.tcp.ACK;
[L594]              havoc hdr.tcp.PSH;
[L595]              assume 0 <= hdr.tcp.PSH && hdr.tcp.PSH <= 2;
[L596]              _old_hdr.tcp.PSH := hdr.tcp.PSH;
[L597]              havoc hdr.tcp.RST;
[L598]              assume 0 <= hdr.tcp.RST && hdr.tcp.RST <= 2;
[L599]              _old_hdr.tcp.RST := hdr.tcp.RST;
[L600]              havoc hdr.tcp.SYN;
[L601]              assume 0 <= hdr.tcp.SYN && hdr.tcp.SYN <= 2;
[L602]              _old_hdr.tcp.SYN := hdr.tcp.SYN;
[L603]              havoc hdr.tcp.FIN;
[L604]              assume 0 <= hdr.tcp.FIN && hdr.tcp.FIN <= 2;
[L605]              _old_hdr.tcp.FIN := hdr.tcp.FIN;
[L606]              havoc hdr.tcp.windowsize;
[L607]              assume 0 <= hdr.tcp.windowsize && hdr.tcp.windowsize <= 65536;
[L608]              _old_hdr.tcp.windowsize := hdr.tcp.windowsize;
[L609]              havoc hdr.tcp.checksum;
[L610]              assume 0 <= hdr.tcp.checksum && hdr.tcp.checksum <= 65536;
[L611]              _old_hdr.tcp.checksum := hdr.tcp.checksum;
[L612]              havoc hdr.tcp.pointer;
[L613]              assume 0 <= hdr.tcp.pointer && hdr.tcp.pointer <= 65536;
[L614]              _old_hdr.tcp.pointer := hdr.tcp.pointer;
[L615]              hdr.udp_tunnel.valid := false;
[L616]              emit[hdr.udp_tunnel] := false;
[L617]              havoc hdr.udp_tunnel.srcport;
[L618]              assume 0 <= hdr.udp_tunnel.srcport && hdr.udp_tunnel.srcport <= 65536;
[L619]              _old_hdr.udp_tunnel.srcport := hdr.udp_tunnel.srcport;
[L620]              havoc hdr.udp_tunnel.dstport;
[L621]              assume 0 <= hdr.udp_tunnel.dstport && hdr.udp_tunnel.dstport <= 65536;
[L622]              _old_hdr.udp_tunnel.dstport := hdr.udp_tunnel.dstport;
[L623]              havoc hdr.udp_tunnel.userlength;
[L624]              assume 0 <= hdr.udp_tunnel.userlength && hdr.udp_tunnel.userlength <= 65536;
[L625]              _old_hdr.udp_tunnel.userlength := hdr.udp_tunnel.userlength;
[L626]              havoc hdr.udp_tunnel.checksum;
[L627]              assume 0 <= hdr.udp_tunnel.checksum && hdr.udp_tunnel.checksum <= 65536;
[L628]              _old_hdr.udp_tunnel.checksum := hdr.udp_tunnel.checksum;
[L633]  RET         call havocProcedure();
[L636]  CALL        call _parser_MyParser();
[L367]  CALL        call start();
[L797]              hdr.ethernet.valid := true;
[L798]  COND FALSE  !(hdr.ethernet.etherType == 34525)
[L801]  COND FALSE  !(hdr.ethernet.etherType == 2048)
[L367]  RET         call start();
[L636]  RET         call _parser_MyParser();
[L637]  CALL        call MyVerifyChecksum();
[L637]  RET         call MyVerifyChecksum();
[L638]  CALL        call MyIngress();
[L300]  COND TRUE   standard_metadata.ingress_port == 0
[L301]  COND FALSE  !(hdr.ipv4.dstAddr == 2071690107)
[L307]  COND TRUE   hdr.ethernet.dstAddr != 281474976710655 && hdr.ethernet.srcAddr != 0
[L308]  CALL        call store_user_mac();
[L811]  CALL        call user_mac.write(0, hdr.ethernet.srcAddr);
[L817]              user_mac[index] := value;
[L811]  RET         call user_mac.write(0, hdr.ethernet.srcAddr);
[L308]  RET         call store_user_mac();
[L310]  CALL        call do_read_count();
[L446]              temp_0 := count[0];
[L310]  RET         call do_read_count();
[L311]  COND FALSE  !(temp_0 == 0)
[L318]  COND FALSE  !(temp_0 == 1)
[L325]  COND FALSE  !(temp_0 == 2)
[L638]  RET         call MyIngress();
[L639]  CALL        call MyEgress();
[L291]  COND FALSE  !(standard_metadata.egress_port == 0 && hdr.tcp.valid)
[L639]  RET         call MyEgress();
[L640]  CALL        call MyComputeChecksum();
[L640]  RET         call MyComputeChecksum();
[L648]  RET         call main();
End of lasso representation.