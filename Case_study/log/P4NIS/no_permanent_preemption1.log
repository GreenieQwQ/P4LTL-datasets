Total verification running time: 00:00:24
Result: Proved
Path: P4NIS/main.p4

[P4 + P4LTL->Boogie]:
P4LTL parsing result: (!(([](AP((((((standard_metadata.ingress_port == 0) && (old(hdr.ethernet.dstAddr) != 281474976710655)) && (old(hdr.ipv4.dstAddr) != 2071690107)) && (old(hdr.ethernet.srcAddr) != 0)) ==> fwd(1)))))))

P4LTL parsing result: ([]((<>(AP(((((standard_metadata.ingress_port == 0) && (old(hdr.ethernet.dstAddr) != 281474976710655)) && (old(hdr.ipv4.dstAddr) != 2071690107)) && (old(hdr.ethernet.srcAddr) != 0)))))))

//#LTLProperty:
 (!(([](AP((((((_p4ltl_3 == true) && (_p4ltl_2 == true)) && (_p4ltl_1 == true)) && (_p4ltl_0 == true)) ==> fwd(1)))))))
//#LTLFairness:
 ([]((<>(AP(((((_p4ltl_3 == true) && (_p4ltl_2 == true)) && (_p4ltl_1 == true)) && (_p4ltl_0 == true)))))))
backend cpu time 0.004908 s
program cpu time 0.378338 s

[Boogie Line Num]
756 /home/p4ltl/Desktop/UP4LTL-linux/p4ltl_boogie.bpl

[Boogie->Verified Result]:
This is Ultimate 0.2.2-P4LTL-348d754-m
[2023-02-07 04:58:45,591 INFO  L177        SettingsManager]: Resetting all preferences to default values...
[2023-02-07 04:58:45,593 INFO  L181        SettingsManager]: Resetting UltimateCore preferences to default values
[2023-02-07 04:58:45,621 INFO  L184        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2023-02-07 04:58:45,621 INFO  L181        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2023-02-07 04:58:45,621 INFO  L181        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2023-02-07 04:58:45,622 INFO  L181        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2023-02-07 04:58:45,623 INFO  L181        SettingsManager]: Resetting LassoRanker preferences to default values
[2023-02-07 04:58:45,624 INFO  L181        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2023-02-07 04:58:45,625 INFO  L181        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2023-02-07 04:58:45,625 INFO  L181        SettingsManager]: Resetting Sifa preferences to default values
[2023-02-07 04:58:45,626 INFO  L184        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2023-02-07 04:58:45,626 INFO  L181        SettingsManager]: Resetting LTL2Aut preferences to default values
[2023-02-07 04:58:45,627 INFO  L181        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2023-02-07 04:58:45,627 INFO  L181        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2023-02-07 04:58:45,628 INFO  L181        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2023-02-07 04:58:45,628 INFO  L181        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2023-02-07 04:58:45,629 INFO  L181        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2023-02-07 04:58:45,630 INFO  L181        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2023-02-07 04:58:45,630 INFO  L181        SettingsManager]: Resetting CodeCheck preferences to default values
[2023-02-07 04:58:45,631 INFO  L181        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2023-02-07 04:58:45,632 INFO  L181        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2023-02-07 04:58:45,632 INFO  L181        SettingsManager]: Resetting Referee preferences to default values
[2023-02-07 04:58:45,633 INFO  L181        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2023-02-07 04:58:45,634 INFO  L184        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2023-02-07 04:58:45,634 INFO  L184        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2023-02-07 04:58:45,634 INFO  L181        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2023-02-07 04:58:45,635 INFO  L181        SettingsManager]: Resetting IcfgToChc preferences to default values
[2023-02-07 04:58:45,636 INFO  L181        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2023-02-07 04:58:45,637 INFO  L184        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2023-02-07 04:58:45,637 INFO  L181        SettingsManager]: Resetting ThufvLTL2Aut preferences to default values
[2023-02-07 04:58:45,638 INFO  L181        SettingsManager]: Resetting ThufvSpecLang preferences to default values
[2023-02-07 04:58:45,638 INFO  L181        SettingsManager]: Resetting Boogie Printer preferences to default values
[2023-02-07 04:58:45,639 INFO  L181        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2023-02-07 04:58:45,639 INFO  L181        SettingsManager]: Resetting ReqPrinter preferences to default values
[2023-02-07 04:58:45,640 INFO  L181        SettingsManager]: Resetting Witness Printer preferences to default values
[2023-02-07 04:58:45,641 INFO  L184        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2023-02-07 04:58:45,641 INFO  L181        SettingsManager]: Resetting CDTParser preferences to default values
[2023-02-07 04:58:45,642 INFO  L184        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2023-02-07 04:58:45,642 INFO  L184        SettingsManager]: ReqParser provides no preferences, ignoring...
[2023-02-07 04:58:45,642 INFO  L181        SettingsManager]: Resetting SmtParser preferences to default values
[2023-02-07 04:58:45,643 INFO  L181        SettingsManager]: Resetting Witness Parser preferences to default values
[2023-02-07 04:58:45,644 INFO  L188        SettingsManager]: Finished resetting all preferences to default values...
[2023-02-07 04:58:45,644 INFO  L101        SettingsManager]: Beginning loading settings from /home/p4ltl/Desktop/UP4LTL-linux/config/P4LTL.epf
[2023-02-07 04:58:45,652 INFO  L113        SettingsManager]: Loading preferences was successful
[2023-02-07 04:58:45,652 INFO  L115        SettingsManager]: Preferences different from defaults after loading the file:
[2023-02-07 04:58:45,653 INFO  L136        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2023-02-07 04:58:45,653 INFO  L138        SettingsManager]:  * Read property from file=true
[2023-02-07 04:58:45,653 INFO  L136        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2023-02-07 04:58:45,653 INFO  L138        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2023-02-07 04:58:45,653 INFO  L136        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2023-02-07 04:58:45,654 INFO  L138        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2023-02-07 04:58:45,654 INFO  L138        SettingsManager]:  * Use old map elimination=false
[2023-02-07 04:58:45,654 INFO  L138        SettingsManager]:  * Try twofold refinement=false
[2023-02-07 04:58:45,654 INFO  L136        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2023-02-07 04:58:45,654 INFO  L138        SettingsManager]:  * Overapproximate operations on floating types=true
[2023-02-07 04:58:45,654 INFO  L138        SettingsManager]:  * Check division by zero=IGNORE
[2023-02-07 04:58:45,654 INFO  L138        SettingsManager]:  * Pointer to allocated memory at dereference=IGNORE
[2023-02-07 04:58:45,654 INFO  L138        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=IGNORE
[2023-02-07 04:58:45,655 INFO  L138        SettingsManager]:  * Check array bounds for arrays that are off heap=IGNORE
[2023-02-07 04:58:45,655 INFO  L138        SettingsManager]:  * Check if freed pointer was valid=false
[2023-02-07 04:58:45,655 INFO  L138        SettingsManager]:  * Pointer base address is valid at dereference=IGNORE
[2023-02-07 04:58:45,655 INFO  L136        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2023-02-07 04:58:45,655 INFO  L138        SettingsManager]:  * Size of a code block=SingleStatement
[2023-02-07 04:58:45,655 INFO  L138        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2023-02-07 04:58:45,655 INFO  L138        SettingsManager]:  * Remove assume true statements=false
[2023-02-07 04:58:45,655 INFO  L136        SettingsManager]: Preferences of TraceAbstraction differ from their defaults:
[2023-02-07 04:58:45,656 INFO  L138        SettingsManager]:  * Compute Interpolants along a Counterexample=FPandBP
[2023-02-07 04:58:45,656 INFO  L138        SettingsManager]:  * Trace refinement strategy=CAMEL
[2023-02-07 04:58:45,656 INFO  L138        SettingsManager]:  * Command for external solver=z3 SMTLIB2_COMPLIANT=true -memory:2024 -smt2 -in
[2023-02-07 04:58:45,656 INFO  L138        SettingsManager]:  * SMT solver=External_ModelsAndUnsatCoreMode
[2023-02-07 04:58:45,657 INFO  L136        SettingsManager]: Preferences of Boogie Printer differ from their defaults:
[2023-02-07 04:58:45,657 INFO  L138        SettingsManager]:  * Dump path:=C:\Users\Greenie\Desktop\Project\P4LTL\trunk\examples\P4LTL
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.sun.xml.bind.v2.runtime.reflect.opt.Injector$1 (file:/home/p4ltl/Desktop/UP4LTL-linux/plugins/com.sun.xml.bind_2.2.0.v201505121915.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
WARNING: Please consider reporting this to the maintainers of com.sun.xml.bind.v2.runtime.reflect.opt.Injector$1
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
[2023-02-07 04:58:45,852 INFO  L75    nceAwareModelManager]: Repository-Root is: /tmp
[2023-02-07 04:58:45,875 INFO  L261   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2023-02-07 04:58:45,876 INFO  L217   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2023-02-07 04:58:45,877 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2023-02-07 04:58:45,878 INFO  L275        PluginConnector]: Boogie PL CUP Parser initialized
[2023-02-07 04:58:45,879 INFO  L432   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /home/p4ltl/Desktop/UP4LTL-linux/p4ltl_boogie.bpl
[2023-02-07 04:58:45,879 INFO  L110           BoogieParser]: Parsing: '/home/p4ltl/Desktop/UP4LTL-linux/p4ltl_boogie.bpl'
[2023-02-07 04:58:45,907 INFO  L299   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2023-02-07 04:58:45,908 INFO  L131        ToolchainWalker]: Walking toolchain with 7 elements.
[2023-02-07 04:58:45,909 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2023-02-07 04:58:45,909 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2023-02-07 04:58:45,909 INFO  L275        PluginConnector]: Boogie Preprocessor initialized
[2023-02-07 04:58:45,919 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "p4ltl_boogie.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 07.02 04:58:45" (1/1) ...
[2023-02-07 04:58:45,919 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "p4ltl_boogie.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 07.02 04:58:45" (1/1) ...
[2023-02-07 04:58:45,929 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "p4ltl_boogie.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 07.02 04:58:45" (1/1) ...
[2023-02-07 04:58:45,929 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "p4ltl_boogie.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 07.02 04:58:45" (1/1) ...
[2023-02-07 04:58:45,938 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "p4ltl_boogie.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 07.02 04:58:45" (1/1) ...
[2023-02-07 04:58:45,940 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "p4ltl_boogie.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 07.02 04:58:45" (1/1) ...
[2023-02-07 04:58:45,946 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "p4ltl_boogie.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 07.02 04:58:45" (1/1) ...
[2023-02-07 04:58:45,948 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2023-02-07 04:58:45,949 INFO  L113        PluginConnector]: ------------------------ThufvSpecLang----------------------------
[2023-02-07 04:58:45,949 INFO  L271        PluginConnector]: Initializing ThufvSpecLang...
[2023-02-07 04:58:45,952 INFO  L275        PluginConnector]: ThufvSpecLang initialized
[2023-02-07 04:58:45,955 INFO  L185        PluginConnector]: Executing the observer ThufvSpecLangObserver from plugin ThufvSpecLang for "p4ltl_boogie.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 07.02 04:58:45" (1/1) ...
[2023-02-07 04:58:45,959 INFO  L184   hufvSpecLangObserver]: P4LTL Spec is: (!(([](AP((((((_p4ltl_3 == true) && (_p4ltl_2 == true)) && (_p4ltl_1 == true)) && (_p4ltl_0 == true)) ==> fwd(1)))))))
[2023-02-07 04:58:45,959 INFO  L312   hufvSpecLangObserver]: translating P4LTL formula: (!(([](AP((((((_p4ltl_3 == true) && (_p4ltl_2 == true)) && (_p4ltl_1 == true)) && (_p4ltl_0 == true)) ==> fwd(1)))))))
[2023-02-07 04:58:45,959 INFO  L331   hufvSpecLangObserver]: Starting to parse P4LTL Formula to AstNode: (!(([](AP((((((_p4ltl_3 == true) && (_p4ltl_2 == true)) && (_p4ltl_1 == true)) && (_p4ltl_0 == true)) ==> fwd(1)))))))
Token: (
Token: !
Token: (
Token: (
Token: []
Token: (
Token: AP
Token: (
Token: (
Token: (
Token: (
Token: (
Token: (
Token: _p4ltl_3
Token: ==
Token: true
Token: )
Token: &&
Token: (
Token: _p4ltl_2
Token: ==
Token: true
Token: )
Token: )
Token: &&
Token: (
Token: _p4ltl_1
Token: ==
Token: true
Token: )
Token: )
Token: &&
Token: (
Token: _p4ltl_0
Token: ==
Token: true
Token: )
Token: )
Token: ==>
Token: fwd
Token: (
Token: 1
Token: )
Token: )
Token: )
Token: )
Token: )
Token: )
Token: )
Token: 
Token: 
[2023-02-07 04:58:45,968 INFO  L336   hufvSpecLangObserver]: Successfully lexed and parsed: (!(([](AP((((((_p4ltl_3 == true) && (_p4ltl_2 == true)) && (_p4ltl_1 == true)) && (_p4ltl_0 == true)) ==> fwd(1)))))))
[2023-02-07 04:58:45,969 INFO  L316   hufvSpecLangObserver]: translated to regular LTL formula: ( !(( [](AP(( ( ( ( _p4ltl_3==true && _p4ltl_2==true ) && _p4ltl_1==true ) && _p4ltl_0==true ) ==> (standard_metadata.egress_port == 1) ))) )) )
==== class: class ast.UnaryTemporalOperator
==== class: class ast.UnaryTemporalOperator
==== class: class ast.P4LTLAtomicProposition
==== class: class de.uni_freiburg.informatik.ultimate.ltl2aut.ast.BinaryOperator
==== class: class de.uni_freiburg.informatik.ultimate.ltl2aut.ast.BinaryOperator
==== class: class de.uni_freiburg.informatik.ultimate.ltl2aut.ast.BinaryOperator
==== class: class de.uni_freiburg.informatik.ultimate.ltl2aut.ast.BinaryOperator
==== class: class ast.ExtendedComparativeOperator
==== class: class de.uni_freiburg.informatik.ultimate.ltl2aut.ast.Name
==== class: class de.uni_freiburg.informatik.ultimate.ltl2aut.ast.BoolLiteral
==== class: class ast.ExtendedComparativeOperator
==== class: class de.uni_freiburg.informatik.ultimate.ltl2aut.ast.Name
==== class: class de.uni_freiburg.informatik.ultimate.ltl2aut.ast.BoolLiteral
==== class: class ast.ExtendedComparativeOperator
==== class: class de.uni_freiburg.informatik.ultimate.ltl2aut.ast.Name
==== class: class de.uni_freiburg.informatik.ultimate.ltl2aut.ast.BoolLiteral
==== class: class ast.ExtendedComparativeOperator
==== class: class de.uni_freiburg.informatik.ultimate.ltl2aut.ast.Name
==== class: class de.uni_freiburg.informatik.ultimate.ltl2aut.ast.BoolLiteral
==== class: class ast.Forward
[2023-02-07 04:58:45,971 INFO  L218   hufvSpecLangObserver]: P4LTL Fairness Spec is: ([]((<>(AP(((((_p4ltl_3 == true) && (_p4ltl_2 == true)) && (_p4ltl_1 == true)) && (_p4ltl_0 == true)))))))
[2023-02-07 04:58:45,971 INFO  L312   hufvSpecLangObserver]: translating P4LTL formula: ([]((<>(AP(((((_p4ltl_3 == true) && (_p4ltl_2 == true)) && (_p4ltl_1 == true)) && (_p4ltl_0 == true)))))))
[2023-02-07 04:58:45,971 INFO  L331   hufvSpecLangObserver]: Starting to parse P4LTL Formula to AstNode: ([]((<>(AP(((((_p4ltl_3 == true) && (_p4ltl_2 == true)) && (_p4ltl_1 == true)) && (_p4ltl_0 == true)))))))
Token: (
Token: []
Token: (
Token: (
Token: <>
Token: (
Token: AP
Token: (
Token: (
Token: (
Token: (
Token: (
Token: _p4ltl_3
Token: ==
Token: true
Token: )
Token: &&
Token: (
Token: _p4ltl_2
Token: ==
Token: true
Token: )
Token: )
Token: &&
Token: (
Token: _p4ltl_1
Token: ==
Token: true
Token: )
Token: )
Token: &&
Token: (
Token: _p4ltl_0
Token: ==
Token: true
Token: )
Token: )
Token: )
Token: )
Token: )
Token: )
Token: )
Token: 
Token: 
[2023-02-07 04:58:45,972 INFO  L336   hufvSpecLangObserver]: Successfully lexed and parsed: ([]((<>(AP(((((_p4ltl_3 == true) && (_p4ltl_2 == true)) && (_p4ltl_1 == true)) && (_p4ltl_0 == true)))))))
[2023-02-07 04:58:45,972 INFO  L316   hufvSpecLangObserver]: translated to regular LTL formula: ( [](( <>(AP(( ( ( _p4ltl_3==true && _p4ltl_2==true ) && _p4ltl_1==true ) && _p4ltl_0==true ))) )) )
==== class: class ast.UnaryTemporalOperator
==== class: class ast.UnaryTemporalOperator
==== class: class ast.P4LTLAtomicProposition
==== class: class de.uni_freiburg.informatik.ultimate.ltl2aut.ast.BinaryOperator
==== class: class de.uni_freiburg.informatik.ultimate.ltl2aut.ast.BinaryOperator
==== class: class de.uni_freiburg.informatik.ultimate.ltl2aut.ast.BinaryOperator
==== class: class ast.ExtendedComparativeOperator
==== class: class de.uni_freiburg.informatik.ultimate.ltl2aut.ast.Name
==== class: class de.uni_freiburg.informatik.ultimate.ltl2aut.ast.BoolLiteral
==== class: class ast.ExtendedComparativeOperator
==== class: class de.uni_freiburg.informatik.ultimate.ltl2aut.ast.Name
==== class: class de.uni_freiburg.informatik.ultimate.ltl2aut.ast.BoolLiteral
==== class: class ast.ExtendedComparativeOperator
==== class: class de.uni_freiburg.informatik.ultimate.ltl2aut.ast.Name
==== class: class de.uni_freiburg.informatik.ultimate.ltl2aut.ast.BoolLiteral
==== class: class ast.ExtendedComparativeOperator
==== class: class de.uni_freiburg.informatik.ultimate.ltl2aut.ast.Name
==== class: class de.uni_freiburg.informatik.ultimate.ltl2aut.ast.BoolLiteral
[2023-02-07 04:58:45,974 INFO  L288   hufvSpecLangObserver]: File already exists and will be overwritten: /home/p4ltl/Desktop/UP4LTL-linux/__p4ltl_ast.json
[2023-02-07 04:58:45,974 INFO  L291   hufvSpecLangObserver]: Writing to file /home/p4ltl/Desktop/UP4LTL-linux/__p4ltl_ast.json
[2023-02-07 04:58:45,977 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.tsinghua.ss.thufv.specLang AST 07.02 04:58:45 PropertyContainer
[2023-02-07 04:58:45,977 INFO  L132        PluginConnector]: ------------------------ END ThufvSpecLang----------------------------
[2023-02-07 04:58:45,978 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2023-02-07 04:58:45,978 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2023-02-07 04:58:45,978 INFO  L275        PluginConnector]: RCFGBuilder initialized
[2023-02-07 04:58:45,979 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "p4ltl_boogie.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 07.02 04:58:45" (1/2) ...
[2023-02-07 04:58:45,984 INFO  L127          SolverBuilder]: Constructing new instance of SMTInterpol with explicit timeout -1 ms and remaining time -1 ms
[2023-02-07 04:58:46,045 INFO  L124     BoogieDeclarations]: Specification and implementation of procedure MyComputeChecksum given in one single declaration
[2023-02-07 04:58:46,045 INFO  L130     BoogieDeclarations]: Found specification of procedure MyComputeChecksum
[2023-02-07 04:58:46,045 INFO  L138     BoogieDeclarations]: Found implementation of procedure MyComputeChecksum
[2023-02-07 04:58:46,045 INFO  L124     BoogieDeclarations]: Specification and implementation of procedure MyEgress given in one single declaration
[2023-02-07 04:58:46,045 INFO  L130     BoogieDeclarations]: Found specification of procedure MyEgress
[2023-02-07 04:58:46,045 INFO  L138     BoogieDeclarations]: Found implementation of procedure MyEgress
[2023-02-07 04:58:46,045 INFO  L124     BoogieDeclarations]: Specification and implementation of procedure MyIngress given in one single declaration
[2023-02-07 04:58:46,045 INFO  L130     BoogieDeclarations]: Found specification of procedure MyIngress
[2023-02-07 04:58:46,046 INFO  L138     BoogieDeclarations]: Found implementation of procedure MyIngress
[2023-02-07 04:58:46,046 INFO  L124     BoogieDeclarations]: Specification and implementation of procedure MyVerifyChecksum given in one single declaration
[2023-02-07 04:58:46,046 INFO  L130     BoogieDeclarations]: Found specification of procedure MyVerifyChecksum
[2023-02-07 04:58:46,046 INFO  L138     BoogieDeclarations]: Found implementation of procedure MyVerifyChecksum
[2023-02-07 04:58:46,046 INFO  L124     BoogieDeclarations]: Specification and implementation of procedure ULTIMATE.start given in one single declaration
[2023-02-07 04:58:46,046 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2023-02-07 04:58:46,046 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2023-02-07 04:58:46,046 INFO  L124     BoogieDeclarations]: Specification and implementation of procedure _parser_MyParser given in one single declaration
[2023-02-07 04:58:46,047 INFO  L130     BoogieDeclarations]: Found specification of procedure _parser_MyParser
[2023-02-07 04:58:46,047 INFO  L138     BoogieDeclarations]: Found implementation of procedure _parser_MyParser
[2023-02-07 04:58:46,047 INFO  L124     BoogieDeclarations]: Specification and implementation of procedure accept given in one single declaration
[2023-02-07 04:58:46,047 INFO  L130     BoogieDeclarations]: Found specification of procedure accept
[2023-02-07 04:58:46,047 INFO  L138     BoogieDeclarations]: Found implementation of procedure accept
[2023-02-07 04:58:46,047 INFO  L124     BoogieDeclarations]: Specification and implementation of procedure count.write given in one single declaration
[2023-02-07 04:58:46,047 INFO  L130     BoogieDeclarations]: Found specification of procedure count.write
[2023-02-07 04:58:46,047 INFO  L138     BoogieDeclarations]: Found implementation of procedure count.write
[2023-02-07 04:58:46,047 INFO  L124     BoogieDeclarations]: Specification and implementation of procedure creatipv6_1 given in one single declaration
[2023-02-07 04:58:46,047 INFO  L130     BoogieDeclarations]: Found specification of procedure creatipv6_1
[2023-02-07 04:58:46,047 INFO  L138     BoogieDeclarations]: Found implementation of procedure creatipv6_1
[2023-02-07 04:58:46,047 INFO  L124     BoogieDeclarations]: Specification and implementation of procedure creatipv6_2 given in one single declaration
[2023-02-07 04:58:46,047 INFO  L130     BoogieDeclarations]: Found specification of procedure creatipv6_2
[2023-02-07 04:58:46,047 INFO  L138     BoogieDeclarations]: Found implementation of procedure creatipv6_2
[2023-02-07 04:58:46,048 INFO  L124     BoogieDeclarations]: Specification and implementation of procedure creatmytunnel given in one single declaration
[2023-02-07 04:58:46,048 INFO  L130     BoogieDeclarations]: Found specification of procedure creatmytunnel
[2023-02-07 04:58:46,048 INFO  L138     BoogieDeclarations]: Found implementation of procedure creatmytunnel
[2023-02-07 04:58:46,048 INFO  L124     BoogieDeclarations]: Specification and implementation of procedure do_read_count given in one single declaration
[2023-02-07 04:58:46,048 INFO  L130     BoogieDeclarations]: Found specification of procedure do_read_count
[2023-02-07 04:58:46,048 INFO  L138     BoogieDeclarations]: Found implementation of procedure do_read_count
[2023-02-07 04:58:46,048 INFO  L124     BoogieDeclarations]: Specification and implementation of procedure ds_box.write given in one single declaration
[2023-02-07 04:58:46,048 INFO  L130     BoogieDeclarations]: Found specification of procedure ds_box.write
[2023-02-07 04:58:46,048 INFO  L138     BoogieDeclarations]: Found implementation of procedure ds_box.write
[2023-02-07 04:58:46,048 INFO  L124     BoogieDeclarations]: Specification and implementation of procedure es_box.write given in one single declaration
[2023-02-07 04:58:46,048 INFO  L130     BoogieDeclarations]: Found specification of procedure es_box.write
[2023-02-07 04:58:46,048 INFO  L138     BoogieDeclarations]: Found implementation of procedure es_box.write
[2023-02-07 04:58:46,049 INFO  L124     BoogieDeclarations]: Specification and implementation of procedure havocProcedure given in one single declaration
[2023-02-07 04:58:46,049 INFO  L130     BoogieDeclarations]: Found specification of procedure havocProcedure
[2023-02-07 04:58:46,049 INFO  L138     BoogieDeclarations]: Found implementation of procedure havocProcedure
[2023-02-07 04:58:46,049 INFO  L124     BoogieDeclarations]: Specification and implementation of procedure main given in one single declaration
[2023-02-07 04:58:46,049 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2023-02-07 04:58:46,049 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2023-02-07 04:58:46,049 INFO  L124     BoogieDeclarations]: Specification and implementation of procedure mainProcedure given in one single declaration
[2023-02-07 04:58:46,049 INFO  L130     BoogieDeclarations]: Found specification of procedure mainProcedure
[2023-02-07 04:58:46,049 INFO  L138     BoogieDeclarations]: Found implementation of procedure mainProcedure
[2023-02-07 04:58:46,049 INFO  L130     BoogieDeclarations]: Found specification of procedure mark_to_drop
[2023-02-07 04:58:46,049 INFO  L124     BoogieDeclarations]: Specification and implementation of procedure parse_ipv4 given in one single declaration
[2023-02-07 04:58:46,049 INFO  L130     BoogieDeclarations]: Found specification of procedure parse_ipv4
[2023-02-07 04:58:46,049 INFO  L138     BoogieDeclarations]: Found implementation of procedure parse_ipv4
[2023-02-07 04:58:46,050 INFO  L124     BoogieDeclarations]: Specification and implementation of procedure parse_ipv6 given in one single declaration
[2023-02-07 04:58:46,050 INFO  L130     BoogieDeclarations]: Found specification of procedure parse_ipv6
[2023-02-07 04:58:46,050 INFO  L138     BoogieDeclarations]: Found implementation of procedure parse_ipv6
[2023-02-07 04:58:46,050 INFO  L124     BoogieDeclarations]: Specification and implementation of procedure parse_myTunnel given in one single declaration
[2023-02-07 04:58:46,050 INFO  L130     BoogieDeclarations]: Found specification of procedure parse_myTunnel
[2023-02-07 04:58:46,050 INFO  L138     BoogieDeclarations]: Found implementation of procedure parse_myTunnel
[2023-02-07 04:58:46,050 INFO  L124     BoogieDeclarations]: Specification and implementation of procedure parse_select given in one single declaration
[2023-02-07 04:58:46,050 INFO  L130     BoogieDeclarations]: Found specification of procedure parse_select
[2023-02-07 04:58:46,050 INFO  L138     BoogieDeclarations]: Found implementation of procedure parse_select
[2023-02-07 04:58:46,050 INFO  L124     BoogieDeclarations]: Specification and implementation of procedure parse_tcp given in one single declaration
[2023-02-07 04:58:46,050 INFO  L130     BoogieDeclarations]: Found specification of procedure parse_tcp
[2023-02-07 04:58:46,051 INFO  L138     BoogieDeclarations]: Found implementation of procedure parse_tcp
[2023-02-07 04:58:46,051 INFO  L124     BoogieDeclarations]: Specification and implementation of procedure parse_udp given in one single declaration
[2023-02-07 04:58:46,051 INFO  L130     BoogieDeclarations]: Found specification of procedure parse_udp
[2023-02-07 04:58:46,051 INFO  L138     BoogieDeclarations]: Found implementation of procedure parse_udp
[2023-02-07 04:58:46,051 INFO  L124     BoogieDeclarations]: Specification and implementation of procedure read_dsbox given in one single declaration
[2023-02-07 04:58:46,051 INFO  L130     BoogieDeclarations]: Found specification of procedure read_dsbox
[2023-02-07 04:58:46,051 INFO  L138     BoogieDeclarations]: Found implementation of procedure read_dsbox
[2023-02-07 04:58:46,051 INFO  L124     BoogieDeclarations]: Specification and implementation of procedure read_esbox given in one single declaration
[2023-02-07 04:58:46,051 INFO  L130     BoogieDeclarations]: Found specification of procedure read_esbox
[2023-02-07 04:58:46,051 INFO  L138     BoogieDeclarations]: Found implementation of procedure read_esbox
[2023-02-07 04:58:46,051 INFO  L130     BoogieDeclarations]: Found specification of procedure reject
[2023-02-07 04:58:46,052 INFO  L130     BoogieDeclarations]: Found specification of procedure setInvalid
[2023-02-07 04:58:46,052 INFO  L130     BoogieDeclarations]: Found specification of procedure setValid
[2023-02-07 04:58:46,052 INFO  L124     BoogieDeclarations]: Specification and implementation of procedure start given in one single declaration
[2023-02-07 04:58:46,052 INFO  L130     BoogieDeclarations]: Found specification of procedure start
[2023-02-07 04:58:46,052 INFO  L138     BoogieDeclarations]: Found implementation of procedure start
[2023-02-07 04:58:46,052 INFO  L124     BoogieDeclarations]: Specification and implementation of procedure store_user_mac given in one single declaration
[2023-02-07 04:58:46,052 INFO  L130     BoogieDeclarations]: Found specification of procedure store_user_mac
[2023-02-07 04:58:46,052 INFO  L138     BoogieDeclarations]: Found implementation of procedure store_user_mac
[2023-02-07 04:58:46,052 INFO  L124     BoogieDeclarations]: Specification and implementation of procedure user_mac.write given in one single declaration
[2023-02-07 04:58:46,052 INFO  L130     BoogieDeclarations]: Found specification of procedure user_mac.write
[2023-02-07 04:58:46,052 INFO  L138     BoogieDeclarations]: Found implementation of procedure user_mac.write
[2023-02-07 04:58:46,087 INFO  L234             CfgBuilder]: Building ICFG
[2023-02-07 04:58:46,088 INFO  L260             CfgBuilder]: Building CFG for each procedure with an implementation
[2023-02-07 04:58:46,433 INFO  L275             CfgBuilder]: Performing block encoding
[2023-02-07 04:58:46,442 INFO  L294             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2023-02-07 04:58:46,442 INFO  L299             CfgBuilder]: Removed 0 assume(true) statements.
[2023-02-07 04:58:46,444 INFO  L202        PluginConnector]: Adding new model p4ltl_boogie.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 07.02 04:58:46 BoogieIcfgContainer
[2023-02-07 04:58:46,444 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.tsinghua.ss.thufv.specLang AST 07.02 04:58:45" (2/2) ...
[2023-02-07 04:58:46,445 INFO  L82     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2023-02-07 04:58:46,445 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@3bc7da5 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 07.02 04:58:46, skipping insertion in model container
[2023-02-07 04:58:46,445 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2023-02-07 04:58:46,446 INFO  L113        PluginConnector]: ------------------------ThufvLTL2Aut----------------------------
[2023-02-07 04:58:46,446 INFO  L271        PluginConnector]: Initializing ThufvLTL2Aut...
[2023-02-07 04:58:46,446 INFO  L275        PluginConnector]: ThufvLTL2Aut initialized
[2023-02-07 04:58:46,447 INFO  L185        PluginConnector]: Executing the observer ThufvLTL2AutObserver from plugin ThufvLTL2Aut for "Hardcoded edu.tsinghua.ss.thufv.specLang AST 07.02 04:58:45" (2/3) ...
[2023-02-07 04:58:46,447 INFO  L119   ThufvLTL2AutObserver]: Checking fairness + property: !(( [](( <>(AP(( ( ( _p4ltl_3==true && _p4ltl_2==true ) && _p4ltl_1==true ) && _p4ltl_0==true ))) )) )) || ( ( !(( [](AP(( ( ( ( _p4ltl_3==true && _p4ltl_2==true ) && _p4ltl_1==true ) && _p4ltl_0==true ) ==> (standard_metadata.egress_port == 1) ))) )) ))
[2023-02-07 04:58:46,454 INFO  L189       MonitoredProcess]: No working directory specified, using /home/p4ltl/Desktop/UP4LTL-linux/ltl2ba
[2023-02-07 04:58:46,465 INFO  L229       MonitoredProcess]: Starting monitored process 1 with /home/p4ltl/Desktop/UP4LTL-linux/ltl2ba -f ! ( ! ( ( [] ( ( <> ( a ) ) ) ) ) || ( ( ! ( ( [] ( b ) ) ) ) ) )  (exit command is null, workingDir is null)
[2023-02-07 04:58:46,471 INFO  L552       MonitoredProcess]: [MP /home/p4ltl/Desktop/UP4LTL-linux/ltl2ba -f ! ( ! ( ( [] ( ( <> ( a ) ) ) ) ) || ( ( ! ( ( [] ( b ) ) ) ) ) )  (1)] Ended with exit code 0
[2023-02-07 04:58:46,485 INFO  L133   ThufvLTL2AutObserver]: LTL Property is: !(( [](( <>((((_p4ltl_3 == true && _p4ltl_2 == true) && _p4ltl_1 == true) && _p4ltl_0 == true)) )) )) || ( ( !(( []((((_p4ltl_3 == true && _p4ltl_2 == true) && _p4ltl_1 == true) && _p4ltl_0 == true ==> standard_metadata.egress_port == 1)) )) ))
[2023-02-07 04:58:46,486 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.tsinghua.ss.thufv.ltl2aut AST 07.02 04:58:46 NWAContainer
[2023-02-07 04:58:46,486 INFO  L132        PluginConnector]: ------------------------ END ThufvLTL2Aut----------------------------
[2023-02-07 04:58:46,486 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2023-02-07 04:58:46,486 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2023-02-07 04:58:46,487 INFO  L275        PluginConnector]: BÃ¼chi Program Product initialized
[2023-02-07 04:58:46,487 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "p4ltl_boogie.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 07.02 04:58:46" (3/4) ...
[2023-02-07 04:58:46,488 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@37d8fb76 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 07.02 04:58:46, skipping insertion in model container
[2023-02-07 04:58:46,488 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.tsinghua.ss.thufv.ltl2aut AST 07.02 04:58:46" (4/4) ...
[2023-02-07 04:58:46,491 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 4 edges
[2023-02-07 04:58:46,492 INFO  L110   BuchiProductObserver]: Initial RCFG 362 locations, 409 edges
[2023-02-07 04:58:46,493 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2023-02-07 04:58:46,495 INFO  L170       ProductGenerator]: ----- Annotating TransactionInfo ...
[2023-02-07 04:58:46,496 INFO  L189       ProductGenerator]: +++++ Call method name: mainProcedure
[2023-02-07 04:58:46,496 INFO  L189       ProductGenerator]: +++++ Call method name: MyIngress
[2023-02-07 04:58:46,496 INFO  L189       ProductGenerator]: +++++ Call method name: MyEgress
[2023-02-07 04:58:46,496 INFO  L189       ProductGenerator]: +++++ Call method name: MyVerifyChecksum
[2023-02-07 04:58:46,496 INFO  L189       ProductGenerator]: +++++ Call method name: main
[2023-02-07 04:58:46,496 INFO  L192       ProductGenerator]: ----- Handling transaction edge from mainEXIT to L586-1
[2023-02-07 04:58:46,497 INFO  L189       ProductGenerator]: +++++ Call method name: MyComputeChecksum
[2023-02-07 04:58:46,497 INFO  L189       ProductGenerator]: +++++ Call method name: parse_select
[2023-02-07 04:58:46,497 INFO  L189       ProductGenerator]: +++++ Call method name: parse_myTunnel
[2023-02-07 04:58:46,497 INFO  L189       ProductGenerator]: +++++ Call method name: do_read_count
[2023-02-07 04:58:46,497 INFO  L189       ProductGenerator]: +++++ Call method name: parse_tcp
[2023-02-07 04:58:46,497 INFO  L189       ProductGenerator]: +++++ Call method name: store_user_mac
[2023-02-07 04:58:46,497 INFO  L189       ProductGenerator]: +++++ Call method name: read_esbox
[2023-02-07 04:58:46,497 INFO  L189       ProductGenerator]: +++++ Call method name: count.write
[2023-02-07 04:58:46,498 INFO  L189       ProductGenerator]: +++++ Call method name: count.write
[2023-02-07 04:58:46,498 INFO  L189       ProductGenerator]: +++++ Call method name: count.write
[2023-02-07 04:58:46,498 INFO  L189       ProductGenerator]: +++++ Call method name: start
[2023-02-07 04:58:46,498 INFO  L189       ProductGenerator]: +++++ Call method name: user_mac.write
[2023-02-07 04:58:46,498 INFO  L189       ProductGenerator]: +++++ Call method name: _parser_MyParser
[2023-02-07 04:58:46,498 INFO  L189       ProductGenerator]: +++++ Call method name: accept
[2023-02-07 04:58:46,498 INFO  L189       ProductGenerator]: +++++ Call method name: creatipv6_2
[2023-02-07 04:58:46,498 INFO  L189       ProductGenerator]: +++++ Call method name: parse_ipv6
[2023-02-07 04:58:46,498 INFO  L189       ProductGenerator]: +++++ Call method name: creatipv6_1
[2023-02-07 04:58:46,498 INFO  L189       ProductGenerator]: +++++ Call method name: parse_ipv4
[2023-02-07 04:58:46,498 INFO  L189       ProductGenerator]: +++++ Call method name: parse_ipv4
[2023-02-07 04:58:46,499 INFO  L189       ProductGenerator]: +++++ Call method name: parse_udp
[2023-02-07 04:58:46,499 INFO  L189       ProductGenerator]: +++++ Call method name: read_dsbox
[2023-02-07 04:58:46,499 INFO  L189       ProductGenerator]: +++++ Call method name: creatmytunnel
[2023-02-07 04:58:46,499 INFO  L189       ProductGenerator]: +++++ Call method name: havocProcedure
[2023-02-07 04:58:46,503 INFO  L244       ProductGenerator]: Creating Product States...
[2023-02-07 04:58:46,503 INFO  L277       ProductGenerator]: ==== location: L532
[2023-02-07 04:58:46,503 INFO  L277       ProductGenerator]: ==== location: L390
[2023-02-07 04:58:46,503 INFO  L277       ProductGenerator]: ==== location: L391-1
[2023-02-07 04:58:46,503 INFO  L277       ProductGenerator]: ==== location: L517
[2023-02-07 04:58:46,503 INFO  L277       ProductGenerator]: ==== location: L528
[2023-02-07 04:58:46,503 INFO  L277       ProductGenerator]: ==== location: MyVerifyChecksumFINAL
[2023-02-07 04:58:46,503 INFO  L277       ProductGenerator]: ==== location: L386
[2023-02-07 04:58:46,504 INFO  L277       ProductGenerator]: ==== location: L664
[2023-02-07 04:58:46,504 INFO  L277       ProductGenerator]: ==== location: havocProcedureEXIT
[2023-02-07 04:58:46,504 INFO  L277       ProductGenerator]: ==== location: L637
[2023-02-07 04:58:46,504 INFO  L277       ProductGenerator]: ==== location: L608
[2023-02-07 04:58:46,504 INFO  L277       ProductGenerator]: ==== location: L306-1
[2023-02-07 04:58:46,504 INFO  L277       ProductGenerator]: ==== location: creatmytunnelEXIT
[2023-02-07 04:58:46,504 INFO  L277       ProductGenerator]: ==== location: L458
[2023-02-07 04:58:46,504 INFO  L277       ProductGenerator]: ==== location: creatipv6_1ENTRY
[2023-02-07 04:58:46,504 INFO  L277       ProductGenerator]: ==== location: L598-1
[2023-02-07 04:58:46,504 INFO  L277       ProductGenerator]: ==== location: L492
[2023-02-07 04:58:46,504 INFO  L277       ProductGenerator]: ==== location: L367
[2023-02-07 04:58:46,505 INFO  L277       ProductGenerator]: ==== location: ds_box.writeENTRY
[2023-02-07 04:58:46,505 INFO  L277       ProductGenerator]: ==== location: L501
[2023-02-07 04:58:46,505 INFO  L277       ProductGenerator]: ==== location: L260
[2023-02-07 04:58:46,505 INFO  L277       ProductGenerator]: ==== location: L609
[2023-02-07 04:58:46,505 INFO  L277       ProductGenerator]: ==== location: L468
[2023-02-07 04:58:46,505 INFO  L277       ProductGenerator]: ==== location: L267-1
[2023-02-07 04:58:46,505 INFO  L277       ProductGenerator]: ==== location: L698
[2023-02-07 04:58:46,505 INFO  L277       ProductGenerator]: ==== location: L511
[2023-02-07 04:58:46,505 INFO  L277       ProductGenerator]: ==== location: L571
[2023-02-07 04:58:46,505 INFO  L277       ProductGenerator]: ==== location: L271
[2023-02-07 04:58:46,505 INFO  L277       ProductGenerator]: ==== location: L287
[2023-02-07 04:58:46,505 INFO  L277       ProductGenerator]: ==== location: L499
[2023-02-07 04:58:46,505 INFO  L277       ProductGenerator]: ==== location: L423
[2023-02-07 04:58:46,506 INFO  L277       ProductGenerator]: ==== location: L506
[2023-02-07 04:58:46,506 INFO  L277       ProductGenerator]: ==== location: mainProcedureFINAL
[2023-02-07 04:58:46,506 INFO  L277       ProductGenerator]: ==== location: L368
[2023-02-07 04:58:46,506 INFO  L277       ProductGenerator]: ==== location: L497
[2023-02-07 04:58:46,506 INFO  L277       ProductGenerator]: ==== location: L542
[2023-02-07 04:58:46,506 INFO  L277       ProductGenerator]: ==== location: L739
[2023-02-07 04:58:46,506 INFO  L277       ProductGenerator]: ==== location: L298
[2023-02-07 04:58:46,506 INFO  L277       ProductGenerator]: ==== location: L535
[2023-02-07 04:58:46,506 INFO  L277       ProductGenerator]: ==== location: L570
[2023-02-07 04:58:46,506 INFO  L277       ProductGenerator]: ==== location: L712
[2023-02-07 04:58:46,506 INFO  L277       ProductGenerator]: ==== location: L502
[2023-02-07 04:58:46,507 INFO  L277       ProductGenerator]: ==== location: L557
[2023-02-07 04:58:46,507 INFO  L277       ProductGenerator]: ==== location: do_read_countENTRY
[2023-02-07 04:58:46,507 INFO  L277       ProductGenerator]: ==== location: mainProcedureEXIT
[2023-02-07 04:58:46,507 INFO  L277       ProductGenerator]: ==== location: user_mac.writeFINAL
[2023-02-07 04:58:46,507 INFO  L277       ProductGenerator]: ==== location: L714
[2023-02-07 04:58:46,507 INFO  L277       ProductGenerator]: ==== location: L489
[2023-02-07 04:58:46,507 INFO  L277       ProductGenerator]: ==== location: L619
[2023-02-07 04:58:46,507 INFO  L277       ProductGenerator]: ==== location: L348
[2023-02-07 04:58:46,507 INFO  L277       ProductGenerator]: ==== location: L312
[2023-02-07 04:58:46,507 INFO  L277       ProductGenerator]: ==== location: L507
[2023-02-07 04:58:46,507 INFO  L277       ProductGenerator]: ==== location: creatipv6_1EXIT
[2023-02-07 04:58:46,507 INFO  L277       ProductGenerator]: ==== location: user_mac.writeENTRY
[2023-02-07 04:58:46,507 INFO  L277       ProductGenerator]: ==== location: _parser_MyParserENTRY
[2023-02-07 04:58:46,507 INFO  L277       ProductGenerator]: ==== location: read_dsboxFINAL
[2023-02-07 04:58:46,508 INFO  L277       ProductGenerator]: ==== location: L371
[2023-02-07 04:58:46,508 INFO  L277       ProductGenerator]: ==== location: L430
[2023-02-07 04:58:46,508 INFO  L277       ProductGenerator]: ==== location: L578
[2023-02-07 04:58:46,508 INFO  L277       ProductGenerator]: ==== location: L349
[2023-02-07 04:58:46,508 INFO  L277       ProductGenerator]: ==== location: parse_udpENTRY
[2023-02-07 04:58:46,508 INFO  L277       ProductGenerator]: ==== location: L380
[2023-02-07 04:58:46,508 INFO  L277       ProductGenerator]: ==== location: L421
[2023-02-07 04:58:46,508 INFO  L277       ProductGenerator]: ==== location: L504
[2023-02-07 04:58:46,508 INFO  L277       ProductGenerator]: ==== location: L654
[2023-02-07 04:58:46,508 INFO  L277       ProductGenerator]: ==== location: L444
[2023-02-07 04:58:46,508 INFO  L277       ProductGenerator]: ==== location: L465
[2023-02-07 04:58:46,508 INFO  L277       ProductGenerator]: ==== location: L520
[2023-02-07 04:58:46,508 INFO  L277       ProductGenerator]: ==== location: L575
[2023-02-07 04:58:46,508 INFO  L277       ProductGenerator]: ==== location: L518
[2023-02-07 04:58:46,509 INFO  L277       ProductGenerator]: ==== location: L258
[2023-02-07 04:58:46,509 INFO  L277       ProductGenerator]: ==== location: L672
[2023-02-07 04:58:46,509 INFO  L277       ProductGenerator]: ==== location: user_mac.writeEXIT
[2023-02-07 04:58:46,509 INFO  L277       ProductGenerator]: ==== location: startEXIT
[2023-02-07 04:58:46,509 INFO  L277       ProductGenerator]: ==== location: L666
[2023-02-07 04:58:46,509 INFO  L277       ProductGenerator]: ==== location: L484
[2023-02-07 04:58:46,509 INFO  L277       ProductGenerator]: ==== location: L586
[2023-02-07 04:58:46,509 INFO  L277       ProductGenerator]: ==== location: L369
[2023-02-07 04:58:46,509 INFO  L277       ProductGenerator]: ==== location: L436
[2023-02-07 04:58:46,509 INFO  L277       ProductGenerator]: ==== location: L670
[2023-02-07 04:58:46,509 INFO  L277       ProductGenerator]: ==== location: L509
[2023-02-07 04:58:46,509 INFO  L277       ProductGenerator]: ==== location: L530
[2023-02-07 04:58:46,509 INFO  L277       ProductGenerator]: ==== location: L618
[2023-02-07 04:58:46,509 INFO  L277       ProductGenerator]: ==== location: L572
[2023-02-07 04:58:46,510 INFO  L277       ProductGenerator]: ==== location: L284
[2023-02-07 04:58:46,510 INFO  L277       ProductGenerator]: ==== location: L525
[2023-02-07 04:58:46,510 INFO  L277       ProductGenerator]: ==== location: L510
[2023-02-07 04:58:46,510 INFO  L277       ProductGenerator]: ==== location: es_box.writeENTRY
[2023-02-07 04:58:46,510 INFO  L277       ProductGenerator]: ==== location: L493
[2023-02-07 04:58:46,510 INFO  L277       ProductGenerator]: ==== location: L522
[2023-02-07 04:58:46,510 INFO  L277       ProductGenerator]: ==== location: L259
[2023-02-07 04:58:46,510 INFO  L277       ProductGenerator]: ==== location: read_esboxENTRY
[2023-02-07 04:58:46,510 INFO  L277       ProductGenerator]: ==== location: L472
[2023-02-07 04:58:46,510 INFO  L277       ProductGenerator]: ==== location: L278-1
[2023-02-07 04:58:46,510 INFO  L277       ProductGenerator]: ==== location: L306
[2023-02-07 04:58:46,510 INFO  L277       ProductGenerator]: ==== location: L466
[2023-02-07 04:58:46,510 INFO  L277       ProductGenerator]: ==== location: L540
[2023-02-07 04:58:46,510 INFO  L277       ProductGenerator]: ==== location: L479
[2023-02-07 04:58:46,511 INFO  L277       ProductGenerator]: ==== location: L378
[2023-02-07 04:58:46,511 INFO  L277       ProductGenerator]: ==== location: L346
[2023-02-07 04:58:46,511 INFO  L277       ProductGenerator]: ==== location: L475
[2023-02-07 04:58:46,511 INFO  L277       ProductGenerator]: ==== location: L706
[2023-02-07 04:58:46,511 INFO  L277       ProductGenerator]: ==== location: L275
[2023-02-07 04:58:46,511 INFO  L277       ProductGenerator]: ==== location: L389
[2023-02-07 04:58:46,511 INFO  L277       ProductGenerator]: ==== location: L440
[2023-02-07 04:58:46,511 INFO  L277       ProductGenerator]: ==== location: L488
[2023-02-07 04:58:46,511 INFO  L277       ProductGenerator]: ==== location: store_user_macEXIT
[2023-02-07 04:58:46,511 INFO  L277       ProductGenerator]: ==== location: L487
[2023-02-07 04:58:46,511 INFO  L277       ProductGenerator]: ==== location: L477
[2023-02-07 04:58:46,511 INFO  L277       ProductGenerator]: ==== location: parse_ipv4ENTRY
[2023-02-07 04:58:46,511 INFO  L277       ProductGenerator]: ==== location: havocProcedureFINAL
[2023-02-07 04:58:46,511 INFO  L277       ProductGenerator]: ==== location: MyIngressENTRY
[2023-02-07 04:58:46,511 INFO  L277       ProductGenerator]: ==== location: parse_selectEXIT
[2023-02-07 04:58:46,511 INFO  L277       ProductGenerator]: ==== location: creatipv6_2ENTRY
[2023-02-07 04:58:46,512 INFO  L277       ProductGenerator]: ==== location: L521
[2023-02-07 04:58:46,512 INFO  L277       ProductGenerator]: ==== location: L355
[2023-02-07 04:58:46,512 INFO  L277       ProductGenerator]: ==== location: L716
[2023-02-07 04:58:46,512 INFO  L277       ProductGenerator]: ==== location: count.writeFINAL
[2023-02-07 04:58:46,512 INFO  L277       ProductGenerator]: ==== location: L383
[2023-02-07 04:58:46,512 INFO  L277       ProductGenerator]: ==== location: startENTRY
[2023-02-07 04:58:46,512 INFO  L277       ProductGenerator]: ==== location: L287-1
[2023-02-07 04:58:46,512 INFO  L277       ProductGenerator]: ==== location: L553
[2023-02-07 04:58:46,512 INFO  L277       ProductGenerator]: ==== location: MyEgressENTRY
[2023-02-07 04:58:46,512 INFO  L277       ProductGenerator]: ==== location: L550
[2023-02-07 04:58:46,512 INFO  L277       ProductGenerator]: ==== location: L281
[2023-02-07 04:58:46,512 INFO  L277       ProductGenerator]: ==== location: L704
[2023-02-07 04:58:46,512 INFO  L277       ProductGenerator]: ==== location: L514
[2023-02-07 04:58:46,512 INFO  L277       ProductGenerator]: ==== location: mainEXIT
[2023-02-07 04:58:46,512 INFO  L310       ProductGenerator]: ####final State Node: L586-1
[2023-02-07 04:58:46,513 INFO  L310       ProductGenerator]: ####final State Node: L586
[2023-02-07 04:58:46,513 INFO  L263       ProductGenerator]: ------- Adding ACCEPTING State: L586_accept_S1
[2023-02-07 04:58:46,514 INFO  L263       ProductGenerator]: ------- Adding ACCEPTING State: L586-1_accept_S1
[2023-02-07 04:58:46,516 INFO  L479       ProductGenerator]: L532_accept_S1 --> L532_accept_S1
[2023-02-07 04:58:46,516 INFO  L479       ProductGenerator]: L532_T0_init --> L532_T0_init
[2023-02-07 04:58:46,516 INFO  L479       ProductGenerator]: L390_accept_S1 --> L390_accept_S1
[2023-02-07 04:58:46,516 INFO  L479       ProductGenerator]: L390_T0_init --> L390_T0_init
[2023-02-07 04:58:46,516 INFO  L479       ProductGenerator]: L391-1_accept_S1 --> L391-1_accept_S1
[2023-02-07 04:58:46,516 INFO  L479       ProductGenerator]: L391-1_T0_init --> L391-1_T0_init
[2023-02-07 04:58:46,516 INFO  L479       ProductGenerator]: L517_accept_S1 --> L517_accept_S1
[2023-02-07 04:58:46,516 INFO  L479       ProductGenerator]: L517_T0_init --> L517_T0_init
[2023-02-07 04:58:46,516 INFO  L479       ProductGenerator]: L528_accept_S1 --> L528_accept_S1
[2023-02-07 04:58:46,516 INFO  L479       ProductGenerator]: L528_T0_init --> L528_T0_init
[2023-02-07 04:58:46,516 INFO  L479       ProductGenerator]: MyVerifyChecksumFINAL_accept_S1 --> MyVerifyChecksumFINAL_accept_S1
[2023-02-07 04:58:46,516 INFO  L479       ProductGenerator]: MyVerifyChecksumFINAL_T0_init --> MyVerifyChecksumFINAL_T0_init
[2023-02-07 04:58:46,516 INFO  L479       ProductGenerator]: L386_accept_S1 --> L386_accept_S1
[2023-02-07 04:58:46,516 INFO  L479       ProductGenerator]: L386_T0_init --> L386_T0_init
[2023-02-07 04:58:46,516 INFO  L479       ProductGenerator]: L664_accept_S1 --> L664_accept_S1
[2023-02-07 04:58:46,516 INFO  L479       ProductGenerator]: L664_T0_init --> L664_T0_init
[2023-02-07 04:58:46,516 INFO  L483       ProductGenerator]: Handling product edge call: call accept();
[2023-02-07 04:58:46,517 INFO  L483       ProductGenerator]: Handling product edge call: call accept();
[2023-02-07 04:58:46,517 INFO  L479       ProductGenerator]: L608_accept_S1 --> L608_accept_S1
[2023-02-07 04:58:46,517 INFO  L479       ProductGenerator]: L608_T0_init --> L608_T0_init
[2023-02-07 04:58:46,517 INFO  L479       ProductGenerator]: L608_accept_S1 --> L608_accept_S1
[2023-02-07 04:58:46,517 INFO  L479       ProductGenerator]: L608_T0_init --> L608_T0_init
[2023-02-07 04:58:46,517 INFO  L479       ProductGenerator]: L306-1_accept_S1 --> L306-1_accept_S1
[2023-02-07 04:58:46,517 INFO  L479       ProductGenerator]: L306-1_T0_init --> L306-1_T0_init
[2023-02-07 04:58:46,517 INFO  L479       ProductGenerator]: L458_accept_S1 --> L458_accept_S1
[2023-02-07 04:58:46,517 INFO  L479       ProductGenerator]: L458_T0_init --> L458_T0_init
[2023-02-07 04:58:46,517 INFO  L486       ProductGenerator]: Handling product edge summary: SUMMARY for call setValid(hdr.ipv6); srcloc: creatipv6_1ENTRY
[2023-02-07 04:58:46,531 INFO  L486       ProductGenerator]: Handling product edge summary: SUMMARY for call setValid(hdr.ipv6); srcloc: creatipv6_1ENTRY
[2023-02-07 04:58:46,532 INFO  L479       ProductGenerator]: L598-1_accept_S1 --> L598-1_accept_S1
[2023-02-07 04:58:46,532 INFO  L479       ProductGenerator]: L598-1_T0_init --> L598-1_T0_init
[2023-02-07 04:58:46,532 INFO  L479       ProductGenerator]: L492_accept_S1 --> L492_accept_S1
[2023-02-07 04:58:46,533 INFO  L479       ProductGenerator]: L492_T0_init --> L492_T0_init
[2023-02-07 04:58:46,533 INFO  L479       ProductGenerator]: L367_accept_S1 --> L367_accept_S1
[2023-02-07 04:58:46,533 INFO  L479       ProductGenerator]: L367_T0_init --> L367_T0_init
[2023-02-07 04:58:46,533 INFO  L479       ProductGenerator]: ds_box.writeENTRY_accept_S1 --> ds_box.writeENTRY_accept_S1
[2023-02-07 04:58:46,533 INFO  L479       ProductGenerator]: ds_box.writeENTRY_T0_init --> ds_box.writeENTRY_T0_init
[2023-02-07 04:58:46,533 INFO  L479       ProductGenerator]: L501_accept_S1 --> L501_accept_S1
[2023-02-07 04:58:46,533 INFO  L479       ProductGenerator]: L501_T0_init --> L501_T0_init
[2023-02-07 04:58:46,533 INFO  L479       ProductGenerator]: L260_accept_S1 --> L260_accept_S1
[2023-02-07 04:58:46,533 INFO  L479       ProductGenerator]: L260_T0_init --> L260_T0_init
[2023-02-07 04:58:46,533 INFO  L483       ProductGenerator]: Handling product edge call: call parse_ipv4();
[2023-02-07 04:58:46,533 INFO  L483       ProductGenerator]: Handling product edge call: call parse_ipv4();
[2023-02-07 04:58:46,534 INFO  L479       ProductGenerator]: L468_accept_S1 --> L468_accept_S1
[2023-02-07 04:58:46,534 INFO  L479       ProductGenerator]: L468_T0_init --> L468_T0_init
[2023-02-07 04:58:46,534 INFO  L483       ProductGenerator]: Handling product edge call: call read_esbox();
[2023-02-07 04:58:46,534 INFO  L483       ProductGenerator]: Handling product edge call: call read_esbox();
[2023-02-07 04:58:46,534 INFO  L479       ProductGenerator]: L698_accept_S1 --> L698_accept_S1
[2023-02-07 04:58:46,534 INFO  L479       ProductGenerator]: L698_T0_init --> L698_T0_init
[2023-02-07 04:58:46,534 INFO  L479       ProductGenerator]: L511_accept_S1 --> L511_accept_S1
[2023-02-07 04:58:46,534 INFO  L479       ProductGenerator]: L511_T0_init --> L511_T0_init
[2023-02-07 04:58:46,534 INFO  L483       ProductGenerator]: Handling product edge call: call MyEgress();
[2023-02-07 04:58:46,534 INFO  L483       ProductGenerator]: Handling product edge call: call MyEgress();
[2023-02-07 04:58:46,534 INFO  L483       ProductGenerator]: Handling product edge call: call creatipv6_1();
[2023-02-07 04:58:46,535 INFO  L483       ProductGenerator]: Handling product edge call: call creatipv6_1();
[2023-02-07 04:58:46,535 INFO  L483       ProductGenerator]: Handling product edge call: call creatipv6_2();
[2023-02-07 04:58:46,535 INFO  L483       ProductGenerator]: Handling product edge call: call creatipv6_2();
[2023-02-07 04:58:46,535 INFO  L479       ProductGenerator]: L499_accept_S1 --> L499_accept_S1
[2023-02-07 04:58:46,535 INFO  L479       ProductGenerator]: L499_T0_init --> L499_T0_init
[2023-02-07 04:58:46,535 INFO  L479       ProductGenerator]: L423_accept_S1 --> L423_accept_S1
[2023-02-07 04:58:46,535 INFO  L479       ProductGenerator]: L423_T0_init --> L423_T0_init
[2023-02-07 04:58:46,535 INFO  L479       ProductGenerator]: L506_accept_S1 --> L506_accept_S1
[2023-02-07 04:58:46,535 INFO  L479       ProductGenerator]: L506_T0_init --> L506_T0_init
[2023-02-07 04:58:46,535 INFO  L479       ProductGenerator]: mainProcedureFINAL_accept_S1 --> mainProcedureFINAL_accept_S1
[2023-02-07 04:58:46,535 INFO  L479       ProductGenerator]: mainProcedureFINAL_T0_init --> mainProcedureFINAL_T0_init
[2023-02-07 04:58:46,535 INFO  L479       ProductGenerator]: L368_accept_S1 --> L368_accept_S1
[2023-02-07 04:58:46,536 INFO  L479       ProductGenerator]: L368_T0_init --> L368_T0_init
[2023-02-07 04:58:46,536 INFO  L479       ProductGenerator]: L497_accept_S1 --> L497_accept_S1
[2023-02-07 04:58:46,536 INFO  L479       ProductGenerator]: L497_T0_init --> L497_T0_init
[2023-02-07 04:58:46,536 INFO  L479       ProductGenerator]: L542_accept_S1 --> L542_accept_S1
[2023-02-07 04:58:46,536 INFO  L479       ProductGenerator]: L542_T0_init --> L542_T0_init
[2023-02-07 04:58:46,536 INFO  L479       ProductGenerator]: L739_accept_S1 --> L739_accept_S1
[2023-02-07 04:58:46,536 INFO  L479       ProductGenerator]: L739_T0_init --> L739_T0_init
[2023-02-07 04:58:46,536 INFO  L479       ProductGenerator]: L739_accept_S1 --> L739_accept_S1
[2023-02-07 04:58:46,536 INFO  L479       ProductGenerator]: L739_T0_init --> L739_T0_init
[2023-02-07 04:58:46,536 INFO  L479       ProductGenerator]: L298_accept_S1 --> L298_accept_S1
[2023-02-07 04:58:46,536 INFO  L479       ProductGenerator]: L298_T0_init --> L298_T0_init
[2023-02-07 04:58:46,536 INFO  L479       ProductGenerator]: L535_accept_S1 --> L535_accept_S1
[2023-02-07 04:58:46,536 INFO  L479       ProductGenerator]: L535_T0_init --> L535_T0_init
[2023-02-07 04:58:46,537 INFO  L483       ProductGenerator]: Handling product edge call: call MyIngress();
[2023-02-07 04:58:46,537 INFO  L483       ProductGenerator]: Handling product edge call: call MyIngress();
[2023-02-07 04:58:46,537 INFO  L479       ProductGenerator]: L712_accept_S1 --> L712_accept_S1
[2023-02-07 04:58:46,537 INFO  L479       ProductGenerator]: L712_T0_init --> L712_T0_init
[2023-02-07 04:58:46,537 INFO  L479       ProductGenerator]: L502_accept_S1 --> L502_accept_S1
[2023-02-07 04:58:46,537 INFO  L479       ProductGenerator]: L502_T0_init --> L502_T0_init
[2023-02-07 04:58:46,537 INFO  L479       ProductGenerator]: L557_accept_S1 --> L557_accept_S1
[2023-02-07 04:58:46,537 INFO  L479       ProductGenerator]: L557_T0_init --> L557_T0_init
[2023-02-07 04:58:46,537 INFO  L479       ProductGenerator]: do_read_countENTRY_accept_S1 --> do_read_countENTRY_accept_S1
[2023-02-07 04:58:46,537 INFO  L479       ProductGenerator]: do_read_countENTRY_T0_init --> do_read_countENTRY_T0_init
[2023-02-07 04:58:46,537 INFO  L479       ProductGenerator]: mainProcedureEXIT_accept_S1 --> mainProcedureEXIT_accept_S1
[2023-02-07 04:58:46,538 INFO  L479       ProductGenerator]: mainProcedureEXIT_T0_init --> mainProcedureEXIT_T0_init
[2023-02-07 04:58:46,538 INFO  L479       ProductGenerator]: user_mac.writeFINAL_accept_S1 --> user_mac.writeFINAL_accept_S1
[2023-02-07 04:58:46,538 INFO  L479       ProductGenerator]: user_mac.writeFINAL_T0_init --> user_mac.writeFINAL_T0_init
[2023-02-07 04:58:46,538 INFO  L479       ProductGenerator]: L714_accept_S1 --> L714_accept_S1
[2023-02-07 04:58:46,538 INFO  L479       ProductGenerator]: L714_T0_init --> L714_T0_init
[2023-02-07 04:58:46,538 INFO  L479       ProductGenerator]: L489_accept_S1 --> L489_accept_S1
[2023-02-07 04:58:46,538 INFO  L479       ProductGenerator]: L489_T0_init --> L489_T0_init
[2023-02-07 04:58:46,538 INFO  L483       ProductGenerator]: Handling product edge call: call parse_udp();
[2023-02-07 04:58:46,538 INFO  L483       ProductGenerator]: Handling product edge call: call parse_udp();
[2023-02-07 04:58:46,538 INFO  L479       ProductGenerator]: L348_accept_S1 --> L348_accept_S1
[2023-02-07 04:58:46,538 INFO  L479       ProductGenerator]: L348_T0_init --> L348_T0_init
[2023-02-07 04:58:46,538 INFO  L479       ProductGenerator]: L312_accept_S1 --> L312_accept_S1
[2023-02-07 04:58:46,539 INFO  L479       ProductGenerator]: L312_T0_init --> L312_T0_init
[2023-02-07 04:58:46,539 INFO  L479       ProductGenerator]: L507_accept_S1 --> L507_accept_S1
[2023-02-07 04:58:46,539 INFO  L479       ProductGenerator]: L507_T0_init --> L507_T0_init
[2023-02-07 04:58:46,539 INFO  L479       ProductGenerator]: user_mac.writeENTRY_accept_S1 --> user_mac.writeENTRY_accept_S1
[2023-02-07 04:58:46,539 INFO  L479       ProductGenerator]: user_mac.writeENTRY_T0_init --> user_mac.writeENTRY_T0_init
[2023-02-07 04:58:46,539 INFO  L483       ProductGenerator]: Handling product edge call: call start();
[2023-02-07 04:58:46,539 INFO  L483       ProductGenerator]: Handling product edge call: call start();
[2023-02-07 04:58:46,539 INFO  L479       ProductGenerator]: read_dsboxFINAL_accept_S1 --> read_dsboxFINAL_accept_S1
[2023-02-07 04:58:46,539 INFO  L479       ProductGenerator]: read_dsboxFINAL_T0_init --> read_dsboxFINAL_T0_init
[2023-02-07 04:58:46,539 INFO  L479       ProductGenerator]: L371_accept_S1 --> L371_accept_S1
[2023-02-07 04:58:46,539 INFO  L479       ProductGenerator]: L371_T0_init --> L371_T0_init
[2023-02-07 04:58:46,539 INFO  L479       ProductGenerator]: L430_accept_S1 --> L430_accept_S1
[2023-02-07 04:58:46,539 INFO  L479       ProductGenerator]: L430_T0_init --> L430_T0_init
[2023-02-07 04:58:46,539 INFO  L479       ProductGenerator]: L578_accept_S1 --> L578_accept_S1
[2023-02-07 04:58:46,540 INFO  L479       ProductGenerator]: L578_T0_init --> L578_T0_init
[2023-02-07 04:58:46,540 INFO  L479       ProductGenerator]: L349_accept_S1 --> L349_accept_S1
[2023-02-07 04:58:46,540 INFO  L479       ProductGenerator]: L349_T0_init --> L349_T0_init
[2023-02-07 04:58:46,540 INFO  L479       ProductGenerator]: parse_udpENTRY_accept_S1 --> parse_udpENTRY_accept_S1
[2023-02-07 04:58:46,540 INFO  L479       ProductGenerator]: parse_udpENTRY_T0_init --> parse_udpENTRY_T0_init
[2023-02-07 04:58:46,540 INFO  L479       ProductGenerator]: L380_accept_S1 --> L380_accept_S1
[2023-02-07 04:58:46,540 INFO  L479       ProductGenerator]: L380_T0_init --> L380_T0_init
[2023-02-07 04:58:46,540 INFO  L479       ProductGenerator]: L421_accept_S1 --> L421_accept_S1
[2023-02-07 04:58:46,540 INFO  L479       ProductGenerator]: L421_T0_init --> L421_T0_init
[2023-02-07 04:58:46,540 INFO  L479       ProductGenerator]: L504_accept_S1 --> L504_accept_S1
[2023-02-07 04:58:46,540 INFO  L479       ProductGenerator]: L504_T0_init --> L504_T0_init
[2023-02-07 04:58:46,541 INFO  L479       ProductGenerator]: L654_accept_S1 --> L654_accept_S1
[2023-02-07 04:58:46,541 INFO  L479       ProductGenerator]: L654_T0_init --> L654_T0_init
[2023-02-07 04:58:46,541 INFO  L479       ProductGenerator]: L444_accept_S1 --> L444_accept_S1
[2023-02-07 04:58:46,541 INFO  L479       ProductGenerator]: L444_T0_init --> L444_T0_init
[2023-02-07 04:58:46,541 INFO  L479       ProductGenerator]: L465_accept_S1 --> L465_accept_S1
[2023-02-07 04:58:46,541 INFO  L479       ProductGenerator]: L465_T0_init --> L465_T0_init
[2023-02-07 04:58:46,541 INFO  L479       ProductGenerator]: L520_accept_S1 --> L520_accept_S1
[2023-02-07 04:58:46,541 INFO  L479       ProductGenerator]: L520_T0_init --> L520_T0_init
[2023-02-07 04:58:46,541 INFO  L479       ProductGenerator]: L575_accept_S1 --> L575_accept_S1
[2023-02-07 04:58:46,541 INFO  L479       ProductGenerator]: L575_T0_init --> L575_T0_init
[2023-02-07 04:58:46,541 INFO  L479       ProductGenerator]: L518_accept_S1 --> L518_accept_S1
[2023-02-07 04:58:46,541 INFO  L479       ProductGenerator]: L518_T0_init --> L518_T0_init
[2023-02-07 04:58:46,542 INFO  L479       ProductGenerator]: L258_accept_S1 --> L258_accept_S1
[2023-02-07 04:58:46,542 INFO  L479       ProductGenerator]: L258_T0_init --> L258_T0_init
[2023-02-07 04:58:46,542 INFO  L479       ProductGenerator]: L672_accept_S1 --> L672_accept_S1
[2023-02-07 04:58:46,542 INFO  L479       ProductGenerator]: L672_T0_init --> L672_T0_init
[2023-02-07 04:58:46,542 INFO  L479       ProductGenerator]: L666_accept_S1 --> L666_accept_S1
[2023-02-07 04:58:46,542 INFO  L479       ProductGenerator]: L666_T0_init --> L666_T0_init
[2023-02-07 04:58:46,542 INFO  L479       ProductGenerator]: L484_accept_S1 --> L484_accept_S1
[2023-02-07 04:58:46,542 INFO  L479       ProductGenerator]: L484_T0_init --> L484_T0_init
[2023-02-07 04:58:46,542 INFO  L483       ProductGenerator]: Handling product edge call: call main();
[2023-02-07 04:58:46,542 INFO  L483       ProductGenerator]: Handling product edge call: call main();
[2023-02-07 04:58:46,542 INFO  L479       ProductGenerator]: L369_accept_S1 --> L369_accept_S1
[2023-02-07 04:58:46,542 INFO  L479       ProductGenerator]: L369_T0_init --> L369_T0_init
[2023-02-07 04:58:46,543 INFO  L479       ProductGenerator]: L436_accept_S1 --> L436_accept_S1
[2023-02-07 04:58:46,543 INFO  L479       ProductGenerator]: L436_T0_init --> L436_T0_init
[2023-02-07 04:58:46,543 INFO  L479       ProductGenerator]: L670_accept_S1 --> L670_accept_S1
[2023-02-07 04:58:46,543 INFO  L479       ProductGenerator]: L670_T0_init --> L670_T0_init
[2023-02-07 04:58:46,543 INFO  L479       ProductGenerator]: L509_accept_S1 --> L509_accept_S1
[2023-02-07 04:58:46,543 INFO  L479       ProductGenerator]: L509_T0_init --> L509_T0_init
[2023-02-07 04:58:46,543 INFO  L479       ProductGenerator]: L530_accept_S1 --> L530_accept_S1
[2023-02-07 04:58:46,543 INFO  L479       ProductGenerator]: L530_T0_init --> L530_T0_init
[2023-02-07 04:58:46,543 INFO  L479       ProductGenerator]: L618_accept_S1 --> L618_accept_S1
[2023-02-07 04:58:46,543 INFO  L479       ProductGenerator]: L618_T0_init --> L618_T0_init
[2023-02-07 04:58:46,543 INFO  L479       ProductGenerator]: L618_accept_S1 --> L618_accept_S1
[2023-02-07 04:58:46,543 INFO  L479       ProductGenerator]: L618_T0_init --> L618_T0_init
[2023-02-07 04:58:46,544 INFO  L483       ProductGenerator]: Handling product edge call: call MyComputeChecksum();
[2023-02-07 04:58:46,544 INFO  L483       ProductGenerator]: Handling product edge call: call MyComputeChecksum();
[2023-02-07 04:58:46,544 INFO  L479       ProductGenerator]: L284_accept_S1 --> L284_accept_S1
[2023-02-07 04:58:46,544 INFO  L479       ProductGenerator]: L284_T0_init --> L284_T0_init
[2023-02-07 04:58:46,544 INFO  L479       ProductGenerator]: L525_accept_S1 --> L525_accept_S1
[2023-02-07 04:58:46,544 INFO  L479       ProductGenerator]: L525_T0_init --> L525_T0_init
[2023-02-07 04:58:46,544 INFO  L479       ProductGenerator]: L510_accept_S1 --> L510_accept_S1
[2023-02-07 04:58:46,544 INFO  L479       ProductGenerator]: L510_T0_init --> L510_T0_init
[2023-02-07 04:58:46,544 INFO  L479       ProductGenerator]: es_box.writeENTRY_accept_S1 --> es_box.writeENTRY_accept_S1
[2023-02-07 04:58:46,544 INFO  L479       ProductGenerator]: es_box.writeENTRY_T0_init --> es_box.writeENTRY_T0_init
[2023-02-07 04:58:46,544 INFO  L479       ProductGenerator]: L493_accept_S1 --> L493_accept_S1
[2023-02-07 04:58:46,544 INFO  L479       ProductGenerator]: L493_T0_init --> L493_T0_init
[2023-02-07 04:58:46,544 INFO  L479       ProductGenerator]: L522_accept_S1 --> L522_accept_S1
[2023-02-07 04:58:46,544 INFO  L479       ProductGenerator]: L522_T0_init --> L522_T0_init
[2023-02-07 04:58:46,544 INFO  L479       ProductGenerator]: L259_accept_S1 --> L259_accept_S1
[2023-02-07 04:58:46,545 INFO  L479       ProductGenerator]: L259_T0_init --> L259_T0_init
[2023-02-07 04:58:46,545 INFO  L479       ProductGenerator]: L259_accept_S1 --> L259_accept_S1
[2023-02-07 04:58:46,545 INFO  L479       ProductGenerator]: L259_T0_init --> L259_T0_init
[2023-02-07 04:58:46,545 INFO  L479       ProductGenerator]: read_esboxENTRY_accept_S1 --> read_esboxENTRY_accept_S1
[2023-02-07 04:58:46,545 INFO  L479       ProductGenerator]: read_esboxENTRY_T0_init --> read_esboxENTRY_T0_init
[2023-02-07 04:58:46,545 INFO  L479       ProductGenerator]: L472_accept_S1 --> L472_accept_S1
[2023-02-07 04:58:46,545 INFO  L479       ProductGenerator]: L472_T0_init --> L472_T0_init
[2023-02-07 04:58:46,545 INFO  L479       ProductGenerator]: L278-1_accept_S1 --> L278-1_accept_S1
[2023-02-07 04:58:46,545 INFO  L479       ProductGenerator]: L278-1_T0_init --> L278-1_T0_init
[2023-02-07 04:58:46,545 INFO  L479       ProductGenerator]: L278-1_accept_S1 --> L278-1_accept_S1
[2023-02-07 04:58:46,545 INFO  L479       ProductGenerator]: L278-1_T0_init --> L278-1_T0_init
[2023-02-07 04:58:46,545 INFO  L479       ProductGenerator]: L306_accept_S1 --> L306_accept_S1
[2023-02-07 04:58:46,545 INFO  L479       ProductGenerator]: L306_T0_init --> L306_T0_init
[2023-02-07 04:58:46,545 INFO  L479       ProductGenerator]: L306_accept_S1 --> L306_accept_S1
[2023-02-07 04:58:46,545 INFO  L479       ProductGenerator]: L306_T0_init --> L306_T0_init
[2023-02-07 04:58:46,546 INFO  L479       ProductGenerator]: L466_accept_S1 --> L466_accept_S1
[2023-02-07 04:58:46,546 INFO  L479       ProductGenerator]: L466_T0_init --> L466_T0_init
[2023-02-07 04:58:46,546 INFO  L479       ProductGenerator]: L540_accept_S1 --> L540_accept_S1
[2023-02-07 04:58:46,546 INFO  L479       ProductGenerator]: L540_T0_init --> L540_T0_init
[2023-02-07 04:58:46,546 INFO  L479       ProductGenerator]: L479_accept_S1 --> L479_accept_S1
[2023-02-07 04:58:46,546 INFO  L479       ProductGenerator]: L479_T0_init --> L479_T0_init
[2023-02-07 04:58:46,546 INFO  L479       ProductGenerator]: L378_accept_S1 --> L378_accept_S1
[2023-02-07 04:58:46,546 INFO  L479       ProductGenerator]: L378_T0_init --> L378_T0_init
[2023-02-07 04:58:46,546 INFO  L479       ProductGenerator]: L346_accept_S1 --> L346_accept_S1
[2023-02-07 04:58:46,546 INFO  L479       ProductGenerator]: L346_T0_init --> L346_T0_init
[2023-02-07 04:58:46,546 INFO  L479       ProductGenerator]: L475_accept_S1 --> L475_accept_S1
[2023-02-07 04:58:46,546 INFO  L479       ProductGenerator]: L475_T0_init --> L475_T0_init
[2023-02-07 04:58:46,546 INFO  L479       ProductGenerator]: L706_accept_S1 --> L706_accept_S1
[2023-02-07 04:58:46,547 INFO  L479       ProductGenerator]: L706_T0_init --> L706_T0_init
[2023-02-07 04:58:46,547 INFO  L479       ProductGenerator]: L275_accept_S1 --> L275_accept_S1
[2023-02-07 04:58:46,547 INFO  L479       ProductGenerator]: L275_T0_init --> L275_T0_init
[2023-02-07 04:58:46,547 INFO  L479       ProductGenerator]: L389_accept_S1 --> L389_accept_S1
[2023-02-07 04:58:46,547 INFO  L479       ProductGenerator]: L389_T0_init --> L389_T0_init
[2023-02-07 04:58:46,547 INFO  L479       ProductGenerator]: L440_accept_S1 --> L440_accept_S1
[2023-02-07 04:58:46,547 INFO  L479       ProductGenerator]: L440_T0_init --> L440_T0_init
[2023-02-07 04:58:46,547 INFO  L479       ProductGenerator]: L488_accept_S1 --> L488_accept_S1
[2023-02-07 04:58:46,547 INFO  L479       ProductGenerator]: L488_T0_init --> L488_T0_init
[2023-02-07 04:58:46,547 INFO  L479       ProductGenerator]: L487_accept_S1 --> L487_accept_S1
[2023-02-07 04:58:46,547 INFO  L479       ProductGenerator]: L487_T0_init --> L487_T0_init
[2023-02-07 04:58:46,547 INFO  L479       ProductGenerator]: L477_accept_S1 --> L477_accept_S1
[2023-02-07 04:58:46,547 INFO  L479       ProductGenerator]: L477_T0_init --> L477_T0_init
[2023-02-07 04:58:46,547 INFO  L479       ProductGenerator]: parse_ipv4ENTRY_accept_S1 --> parse_ipv4ENTRY_accept_S1
[2023-02-07 04:58:46,547 INFO  L479       ProductGenerator]: parse_ipv4ENTRY_T0_init --> parse_ipv4ENTRY_T0_init
[2023-02-07 04:58:46,548 INFO  L479       ProductGenerator]: havocProcedureFINAL_accept_S1 --> havocProcedureFINAL_accept_S1
[2023-02-07 04:58:46,548 INFO  L479       ProductGenerator]: havocProcedureFINAL_T0_init --> havocProcedureFINAL_T0_init
[2023-02-07 04:58:46,548 INFO  L479       ProductGenerator]: MyIngressENTRY_accept_S1 --> MyIngressENTRY_accept_S1
[2023-02-07 04:58:46,548 INFO  L479       ProductGenerator]: MyIngressENTRY_T0_init --> MyIngressENTRY_T0_init
[2023-02-07 04:58:46,548 INFO  L479       ProductGenerator]: MyIngressENTRY_accept_S1 --> MyIngressENTRY_accept_S1
[2023-02-07 04:58:46,548 INFO  L479       ProductGenerator]: MyIngressENTRY_T0_init --> MyIngressENTRY_T0_init
[2023-02-07 04:58:46,548 INFO  L486       ProductGenerator]: Handling product edge summary: SUMMARY for call setValid(hdr.ipv6); srcloc: creatipv6_2ENTRY
[2023-02-07 04:58:46,549 INFO  L486       ProductGenerator]: Handling product edge summary: SUMMARY for call setValid(hdr.ipv6); srcloc: creatipv6_2ENTRY
[2023-02-07 04:58:46,550 INFO  L479       ProductGenerator]: L521_accept_S1 --> L521_accept_S1
[2023-02-07 04:58:46,550 INFO  L479       ProductGenerator]: L521_T0_init --> L521_T0_init
[2023-02-07 04:58:46,550 INFO  L479       ProductGenerator]: L355_accept_S1 --> L355_accept_S1
[2023-02-07 04:58:46,551 INFO  L479       ProductGenerator]: L355_T0_init --> L355_T0_init
[2023-02-07 04:58:46,551 INFO  L479       ProductGenerator]: L716_accept_S1 --> L716_accept_S1
[2023-02-07 04:58:46,551 INFO  L479       ProductGenerator]: L716_T0_init --> L716_T0_init
[2023-02-07 04:58:46,551 INFO  L479       ProductGenerator]: count.writeFINAL_accept_S1 --> count.writeFINAL_accept_S1
[2023-02-07 04:58:46,551 INFO  L479       ProductGenerator]: count.writeFINAL_T0_init --> count.writeFINAL_T0_init
[2023-02-07 04:58:46,551 INFO  L479       ProductGenerator]: L383_accept_S1 --> L383_accept_S1
[2023-02-07 04:58:46,551 INFO  L479       ProductGenerator]: L383_T0_init --> L383_T0_init
[2023-02-07 04:58:46,551 INFO  L479       ProductGenerator]: startENTRY_accept_S1 --> startENTRY_accept_S1
[2023-02-07 04:58:46,551 INFO  L479       ProductGenerator]: startENTRY_T0_init --> startENTRY_T0_init
[2023-02-07 04:58:46,551 INFO  L483       ProductGenerator]: Handling product edge call: call count.write(0, 0);
[2023-02-07 04:58:46,551 INFO  L483       ProductGenerator]: Handling product edge call: call count.write(0, 0);
[2023-02-07 04:58:46,551 INFO  L479       ProductGenerator]: L553_accept_S1 --> L553_accept_S1
[2023-02-07 04:58:46,551 INFO  L479       ProductGenerator]: L553_T0_init --> L553_T0_init
[2023-02-07 04:58:46,552 INFO  L479       ProductGenerator]: MyEgressENTRY_accept_S1 --> MyEgressENTRY_accept_S1
[2023-02-07 04:58:46,552 INFO  L479       ProductGenerator]: MyEgressENTRY_T0_init --> MyEgressENTRY_T0_init
[2023-02-07 04:58:46,552 INFO  L479       ProductGenerator]: MyEgressENTRY_accept_S1 --> MyEgressENTRY_accept_S1
[2023-02-07 04:58:46,552 INFO  L479       ProductGenerator]: MyEgressENTRY_T0_init --> MyEgressENTRY_T0_init
[2023-02-07 04:58:46,552 INFO  L479       ProductGenerator]: L550_accept_S1 --> L550_accept_S1
[2023-02-07 04:58:46,552 INFO  L479       ProductGenerator]: L550_T0_init --> L550_T0_init
[2023-02-07 04:58:46,552 INFO  L479       ProductGenerator]: L281_accept_S1 --> L281_accept_S1
[2023-02-07 04:58:46,552 INFO  L479       ProductGenerator]: L281_T0_init --> L281_T0_init
[2023-02-07 04:58:46,552 INFO  L479       ProductGenerator]: L704_accept_S1 --> L704_accept_S1
[2023-02-07 04:58:46,552 INFO  L479       ProductGenerator]: L704_T0_init --> L704_T0_init
[2023-02-07 04:58:46,552 INFO  L479       ProductGenerator]: L514_accept_S1 --> L514_accept_S1
[2023-02-07 04:58:46,552 INFO  L479       ProductGenerator]: L514_T0_init --> L514_T0_init
[2023-02-07 04:58:46,552 INFO  L479       ProductGenerator]: L663_accept_S1 --> L663_accept_S1
[2023-02-07 04:58:46,552 INFO  L479       ProductGenerator]: L663_T0_init --> L663_T0_init
[2023-02-07 04:58:46,553 INFO  L479       ProductGenerator]: L543_accept_S1 --> L543_accept_S1
[2023-02-07 04:58:46,553 INFO  L479       ProductGenerator]: L543_T0_init --> L543_T0_init
[2023-02-07 04:58:46,553 INFO  L479       ProductGenerator]: L659_accept_S1 --> L659_accept_S1
[2023-02-07 04:58:46,553 INFO  L479       ProductGenerator]: L659_T0_init --> L659_T0_init
[2023-02-07 04:58:46,553 INFO  L479       ProductGenerator]: creatmytunnelFINAL_accept_S1 --> creatmytunnelFINAL_accept_S1
[2023-02-07 04:58:46,553 INFO  L479       ProductGenerator]: creatmytunnelFINAL_T0_init --> creatmytunnelFINAL_T0_init
[2023-02-07 04:58:46,553 INFO  L479       ProductGenerator]: L701_accept_S1 --> L701_accept_S1
[2023-02-07 04:58:46,553 INFO  L479       ProductGenerator]: L701_T0_init --> L701_T0_init
[2023-02-07 04:58:46,553 INFO  L479       ProductGenerator]: L273_accept_S1 --> L273_accept_S1
[2023-02-07 04:58:46,553 INFO  L479       ProductGenerator]: L273_T0_init --> L273_T0_init
[2023-02-07 04:58:46,553 INFO  L479       ProductGenerator]: L483_accept_S1 --> L483_accept_S1
[2023-02-07 04:58:46,553 INFO  L479       ProductGenerator]: L483_T0_init --> L483_T0_init
[2023-02-07 04:58:46,553 INFO  L479       ProductGenerator]: L705_accept_S1 --> L705_accept_S1
[2023-02-07 04:58:46,553 INFO  L479       ProductGenerator]: L705_T0_init --> L705_T0_init
[2023-02-07 04:58:46,553 INFO  L479       ProductGenerator]: L433_accept_S1 --> L433_accept_S1
[2023-02-07 04:58:46,554 INFO  L479       ProductGenerator]: L433_T0_init --> L433_T0_init
[2023-02-07 04:58:46,554 INFO  L483       ProductGenerator]: Handling product edge call: call creatmytunnel();
[2023-02-07 04:58:46,554 INFO  L483       ProductGenerator]: Handling product edge call: call creatmytunnel();
[2023-02-07 04:58:46,554 INFO  L479       ProductGenerator]: L679_accept_S1 --> L679_accept_S1
[2023-02-07 04:58:46,554 INFO  L479       ProductGenerator]: L679_T0_init --> L679_T0_init
[2023-02-07 04:58:46,554 INFO  L479       ProductGenerator]: ds_box.writeEXIT_accept_S1 --> ds_box.writeEXIT_accept_S1
[2023-02-07 04:58:46,554 INFO  L479       ProductGenerator]: ds_box.writeEXIT_T0_init --> ds_box.writeEXIT_T0_init
[2023-02-07 04:58:46,554 INFO  L479       ProductGenerator]: L538_accept_S1 --> L538_accept_S1
[2023-02-07 04:58:46,554 INFO  L479       ProductGenerator]: L538_T0_init --> L538_T0_init
[2023-02-07 04:58:46,554 INFO  L479       ProductGenerator]: acceptFINAL_accept_S1 --> acceptFINAL_accept_S1
[2023-02-07 04:58:46,554 INFO  L479       ProductGenerator]: acceptFINAL_T0_init --> acceptFINAL_T0_init
[2023-02-07 04:58:46,554 INFO  L479       ProductGenerator]: L523_accept_S1 --> L523_accept_S1
[2023-02-07 04:58:46,554 INFO  L479       ProductGenerator]: L523_T0_init --> L523_T0_init
[2023-02-07 04:58:46,554 INFO  L479       ProductGenerator]: L366_accept_S1 --> L366_accept_S1
[2023-02-07 04:58:46,554 INFO  L479       ProductGenerator]: L366_T0_init --> L366_T0_init
[2023-02-07 04:58:46,555 INFO  L479       ProductGenerator]: L513_accept_S1 --> L513_accept_S1
[2023-02-07 04:58:46,555 INFO  L479       ProductGenerator]: L513_T0_init --> L513_T0_init
[2023-02-07 04:58:46,555 INFO  L479       ProductGenerator]: L450_accept_S1 --> L450_accept_S1
[2023-02-07 04:58:46,555 INFO  L479       ProductGenerator]: L450_T0_init --> L450_T0_init
[2023-02-07 04:58:46,555 INFO  L479       ProductGenerator]: L667_accept_S1 --> L667_accept_S1
[2023-02-07 04:58:46,555 INFO  L479       ProductGenerator]: L667_T0_init --> L667_T0_init
[2023-02-07 04:58:46,555 INFO  L479       ProductGenerator]: L693_accept_S1 --> L693_accept_S1
[2023-02-07 04:58:46,555 INFO  L479       ProductGenerator]: L693_T0_init --> L693_T0_init
[2023-02-07 04:58:46,555 INFO  L479       ProductGenerator]: L537_accept_S1 --> L537_accept_S1
[2023-02-07 04:58:46,555 INFO  L479       ProductGenerator]: L537_T0_init --> L537_T0_init
[2023-02-07 04:58:46,555 INFO  L479       ProductGenerator]: L739-1_accept_S1 --> L739-1_accept_S1
[2023-02-07 04:58:46,555 INFO  L479       ProductGenerator]: L739-1_T0_init --> L739-1_T0_init
[2023-02-07 04:58:46,555 INFO  L479       ProductGenerator]: havocProcedureENTRY_accept_S1 --> havocProcedureENTRY_accept_S1
[2023-02-07 04:58:46,555 INFO  L479       ProductGenerator]: havocProcedureENTRY_T0_init --> havocProcedureENTRY_T0_init
[2023-02-07 04:58:46,555 INFO  L479       ProductGenerator]: es_box.writeFINAL_accept_S1 --> es_box.writeFINAL_accept_S1
[2023-02-07 04:58:46,555 INFO  L479       ProductGenerator]: es_box.writeFINAL_T0_init --> es_box.writeFINAL_T0_init
[2023-02-07 04:58:46,556 INFO  L479       ProductGenerator]: L428_accept_S1 --> L428_accept_S1
[2023-02-07 04:58:46,556 INFO  L479       ProductGenerator]: L428_T0_init --> L428_T0_init
[2023-02-07 04:58:46,556 INFO  L479       ProductGenerator]: L291_accept_S1 --> L291_accept_S1
[2023-02-07 04:58:46,556 INFO  L479       ProductGenerator]: L291_T0_init --> L291_T0_init
[2023-02-07 04:58:46,556 INFO  L479       ProductGenerator]: L720_accept_S1 --> L720_accept_S1
[2023-02-07 04:58:46,556 INFO  L479       ProductGenerator]: L720_T0_init --> L720_T0_init
[2023-02-07 04:58:46,556 INFO  L479       ProductGenerator]: L694_accept_S1 --> L694_accept_S1
[2023-02-07 04:58:46,556 INFO  L479       ProductGenerator]: L694_T0_init --> L694_T0_init
[2023-02-07 04:58:46,556 INFO  L483       ProductGenerator]: Handling product edge call: call do_read_count();
[2023-02-07 04:58:46,556 INFO  L483       ProductGenerator]: Handling product edge call: call do_read_count();
[2023-02-07 04:58:46,556 INFO  L479       ProductGenerator]: L671_accept_S1 --> L671_accept_S1
[2023-02-07 04:58:46,556 INFO  L479       ProductGenerator]: L671_T0_init --> L671_T0_init
[2023-02-07 04:58:46,556 INFO  L479       ProductGenerator]: L586-1_accept_S1 --> L586-1_accept_S1
[2023-02-07 04:58:46,556 INFO  L479       ProductGenerator]: L586-1_T0_init --> L586-1_T0_init
[2023-02-07 04:58:46,557 INFO  L479       ProductGenerator]: L586-1_accept_S1 --> L586-1_accept_S1
[2023-02-07 04:58:46,557 INFO  L479       ProductGenerator]: L586-1_T0_init --> L586-1_T0_init
[2023-02-07 04:58:46,557 INFO  L479       ProductGenerator]: ds_box.writeFINAL_accept_S1 --> ds_box.writeFINAL_accept_S1
[2023-02-07 04:58:46,557 INFO  L479       ProductGenerator]: ds_box.writeFINAL_T0_init --> ds_box.writeFINAL_T0_init
[2023-02-07 04:58:46,557 INFO  L479       ProductGenerator]: L474_accept_S1 --> L474_accept_S1
[2023-02-07 04:58:46,557 INFO  L479       ProductGenerator]: L474_T0_init --> L474_T0_init
[2023-02-07 04:58:46,557 INFO  L483       ProductGenerator]: Handling product edge call: call read_dsbox();
[2023-02-07 04:58:46,557 INFO  L483       ProductGenerator]: Handling product edge call: call read_dsbox();
[2023-02-07 04:58:46,557 INFO  L479       ProductGenerator]: L370_accept_S1 --> L370_accept_S1
[2023-02-07 04:58:46,557 INFO  L479       ProductGenerator]: L370_T0_init --> L370_T0_init
[2023-02-07 04:58:46,557 INFO  L479       ProductGenerator]: L425_accept_S1 --> L425_accept_S1
[2023-02-07 04:58:46,557 INFO  L479       ProductGenerator]: L425_T0_init --> L425_T0_init
[2023-02-07 04:58:46,557 INFO  L479       ProductGenerator]: L437_accept_S1 --> L437_accept_S1
[2023-02-07 04:58:46,557 INFO  L479       ProductGenerator]: L437_T0_init --> L437_T0_init
[2023-02-07 04:58:46,557 INFO  L479       ProductGenerator]: L491_accept_S1 --> L491_accept_S1
[2023-02-07 04:58:46,557 INFO  L479       ProductGenerator]: L491_T0_init --> L491_T0_init
[2023-02-07 04:58:46,558 INFO  L479       ProductGenerator]: L435_accept_S1 --> L435_accept_S1
[2023-02-07 04:58:46,558 INFO  L479       ProductGenerator]: L435_T0_init --> L435_T0_init
[2023-02-07 04:58:46,558 INFO  L479       ProductGenerator]: mainFINAL_accept_S1 --> mainFINAL_accept_S1
[2023-02-07 04:58:46,558 INFO  L479       ProductGenerator]: mainFINAL_T0_init --> mainFINAL_T0_init
[2023-02-07 04:58:46,558 INFO  L479       ProductGenerator]: L270-1_accept_S1 --> L270-1_accept_S1
[2023-02-07 04:58:46,558 INFO  L479       ProductGenerator]: L270-1_T0_init --> L270-1_T0_init
[2023-02-07 04:58:46,558 INFO  L479       ProductGenerator]: L270-1_accept_S1 --> L270-1_accept_S1
[2023-02-07 04:58:46,558 INFO  L479       ProductGenerator]: L270-1_T0_init --> L270-1_T0_init
[2023-02-07 04:58:46,558 INFO  L479       ProductGenerator]: L439_accept_S1 --> L439_accept_S1
[2023-02-07 04:58:46,558 INFO  L479       ProductGenerator]: L439_T0_init --> L439_T0_init
[2023-02-07 04:58:46,558 INFO  L483       ProductGenerator]: Handling product edge call: call count.write(0, 1);
[2023-02-07 04:58:46,559 INFO  L483       ProductGenerator]: Handling product edge call: call count.write(0, 1);
[2023-02-07 04:58:46,559 INFO  L479       ProductGenerator]: L485_accept_S1 --> L485_accept_S1
[2023-02-07 04:58:46,559 INFO  L479       ProductGenerator]: L485_T0_init --> L485_T0_init
[2023-02-07 04:58:46,559 INFO  L479       ProductGenerator]: L364_accept_S1 --> L364_accept_S1
[2023-02-07 04:58:46,559 INFO  L479       ProductGenerator]: L364_T0_init --> L364_T0_init
[2023-02-07 04:58:46,559 INFO  L479       ProductGenerator]: parse_udpFINAL_accept_S1 --> parse_udpFINAL_accept_S1
[2023-02-07 04:58:46,559 INFO  L479       ProductGenerator]: parse_udpFINAL_T0_init --> parse_udpFINAL_T0_init
[2023-02-07 04:58:46,559 INFO  L479       ProductGenerator]: L562_accept_S1 --> L562_accept_S1
[2023-02-07 04:58:46,559 INFO  L479       ProductGenerator]: L562_T0_init --> L562_T0_init
[2023-02-07 04:58:46,559 INFO  L479       ProductGenerator]: L660_accept_S1 --> L660_accept_S1
[2023-02-07 04:58:46,559 INFO  L479       ProductGenerator]: L660_T0_init --> L660_T0_init
[2023-02-07 04:58:46,559 INFO  L479       ProductGenerator]: L516_accept_S1 --> L516_accept_S1
[2023-02-07 04:58:46,559 INFO  L479       ProductGenerator]: L516_T0_init --> L516_T0_init
[2023-02-07 04:58:46,559 INFO  L479       ProductGenerator]: L351_accept_S1 --> L351_accept_S1
[2023-02-07 04:58:46,559 INFO  L479       ProductGenerator]: L351_T0_init --> L351_T0_init
[2023-02-07 04:58:46,560 INFO  L479       ProductGenerator]: L352_accept_S1 --> L352_accept_S1
[2023-02-07 04:58:46,560 INFO  L479       ProductGenerator]: L352_T0_init --> L352_T0_init
[2023-02-07 04:58:46,560 INFO  L479       ProductGenerator]: count.writeENTRY_accept_S1 --> count.writeENTRY_accept_S1
[2023-02-07 04:58:46,560 INFO  L479       ProductGenerator]: count.writeENTRY_T0_init --> count.writeENTRY_T0_init
[2023-02-07 04:58:46,560 INFO  L479       ProductGenerator]: store_user_macFINAL_accept_S1 --> store_user_macFINAL_accept_S1
[2023-02-07 04:58:46,560 INFO  L479       ProductGenerator]: store_user_macFINAL_T0_init --> store_user_macFINAL_T0_init
[2023-02-07 04:58:46,560 INFO  L479       ProductGenerator]: L431_accept_S1 --> L431_accept_S1
[2023-02-07 04:58:46,560 INFO  L479       ProductGenerator]: L431_T0_init --> L431_T0_init
[2023-02-07 04:58:46,560 INFO  L479       ProductGenerator]: L709_accept_S1 --> L709_accept_S1
[2023-02-07 04:58:46,560 INFO  L479       ProductGenerator]: L709_T0_init --> L709_T0_init
[2023-02-07 04:58:46,560 INFO  L479       ProductGenerator]: L442_accept_S1 --> L442_accept_S1
[2023-02-07 04:58:46,560 INFO  L479       ProductGenerator]: L442_T0_init --> L442_T0_init
[2023-02-07 04:58:46,560 INFO  L479       ProductGenerator]: L508_accept_S1 --> L508_accept_S1
[2023-02-07 04:58:46,560 INFO  L479       ProductGenerator]: L508_T0_init --> L508_T0_init
[2023-02-07 04:58:46,560 INFO  L479       ProductGenerator]: L536_accept_S1 --> L536_accept_S1
[2023-02-07 04:58:46,560 INFO  L479       ProductGenerator]: L536_T0_init --> L536_T0_init
[2023-02-07 04:58:46,560 INFO  L479       ProductGenerator]: L382_accept_S1 --> L382_accept_S1
[2023-02-07 04:58:46,560 INFO  L479       ProductGenerator]: L382_T0_init --> L382_T0_init
[2023-02-07 04:58:46,561 INFO  L479       ProductGenerator]: L473_accept_S1 --> L473_accept_S1
[2023-02-07 04:58:46,566 INFO  L479       ProductGenerator]: L473_T0_init --> L473_T0_init
[2023-02-07 04:58:46,567 INFO  L486       ProductGenerator]: Handling product edge summary: SUMMARY for call setInvalid(hdr.ipv6); srcloc: L307
[2023-02-07 04:58:46,575 INFO  L486       ProductGenerator]: Handling product edge summary: SUMMARY for call setInvalid(hdr.ipv6); srcloc: L307
[2023-02-07 04:58:46,578 INFO  L479       ProductGenerator]: L534_accept_S1 --> L534_accept_S1
[2023-02-07 04:58:46,579 INFO  L479       ProductGenerator]: L534_T0_init --> L534_T0_init
[2023-02-07 04:58:46,579 INFO  L479       ProductGenerator]: L311_accept_S1 --> L311_accept_S1
[2023-02-07 04:58:46,579 INFO  L479       ProductGenerator]: L311_T0_init --> L311_T0_init
[2023-02-07 04:58:46,579 INFO  L479       ProductGenerator]: parse_selectENTRY_accept_S1 --> parse_selectENTRY_accept_S1
[2023-02-07 04:58:46,579 INFO  L479       ProductGenerator]: parse_selectENTRY_T0_init --> parse_selectENTRY_T0_init
[2023-02-07 04:58:46,579 INFO  L479       ProductGenerator]: parse_selectENTRY_accept_S1 --> parse_selectENTRY_accept_S1
[2023-02-07 04:58:46,579 INFO  L479       ProductGenerator]: parse_selectENTRY_T0_init --> parse_selectENTRY_T0_init
[2023-02-07 04:58:46,579 INFO  L479       ProductGenerator]: L451_accept_S1 --> L451_accept_S1
[2023-02-07 04:58:46,579 INFO  L479       ProductGenerator]: L451_T0_init --> L451_T0_init
[2023-02-07 04:58:46,579 INFO  L483       ProductGenerator]: Handling product edge call: call store_user_mac();
[2023-02-07 04:58:46,579 INFO  L483       ProductGenerator]: Handling product edge call: call store_user_mac();
[2023-02-07 04:58:46,579 INFO  L479       ProductGenerator]: L426_accept_S1 --> L426_accept_S1
[2023-02-07 04:58:46,579 INFO  L479       ProductGenerator]: L426_T0_init --> L426_T0_init
[2023-02-07 04:58:46,579 INFO  L479       ProductGenerator]: L462_accept_S1 --> L462_accept_S1
[2023-02-07 04:58:46,579 INFO  L479       ProductGenerator]: L462_T0_init --> L462_T0_init
[2023-02-07 04:58:46,579 INFO  L479       ProductGenerator]: L395_accept_S1 --> L395_accept_S1
[2023-02-07 04:58:46,580 INFO  L479       ProductGenerator]: L395_T0_init --> L395_T0_init
[2023-02-07 04:58:46,580 INFO  L479       ProductGenerator]: L384_accept_S1 --> L384_accept_S1
[2023-02-07 04:58:46,580 INFO  L479       ProductGenerator]: L384_T0_init --> L384_T0_init
[2023-02-07 04:58:46,580 INFO  L479       ProductGenerator]: read_esboxFINAL_accept_S1 --> read_esboxFINAL_accept_S1
[2023-02-07 04:58:46,580 INFO  L479       ProductGenerator]: read_esboxFINAL_T0_init --> read_esboxFINAL_T0_init
[2023-02-07 04:58:46,580 INFO  L479       ProductGenerator]: L563_accept_S1 --> L563_accept_S1
[2023-02-07 04:58:46,580 INFO  L479       ProductGenerator]: L563_T0_init --> L563_T0_init
[2023-02-07 04:58:46,580 INFO  L479       ProductGenerator]: L503_accept_S1 --> L503_accept_S1
[2023-02-07 04:58:46,580 INFO  L479       ProductGenerator]: L503_T0_init --> L503_T0_init
[2023-02-07 04:58:46,580 INFO  L483       ProductGenerator]: Handling product edge call: call parse_select();
[2023-02-07 04:58:46,580 INFO  L483       ProductGenerator]: Handling product edge call: call parse_select();
[2023-02-07 04:58:46,580 INFO  L479       ProductGenerator]: L662_accept_S1 --> L662_accept_S1
[2023-02-07 04:58:46,580 INFO  L479       ProductGenerator]: L662_T0_init --> L662_T0_init
[2023-02-07 04:58:46,580 INFO  L483       ProductGenerator]: Handling product edge call: call havocProcedure();
[2023-02-07 04:58:46,581 INFO  L483       ProductGenerator]: Handling product edge call: call havocProcedure();
[2023-02-07 04:58:46,581 INFO  L479       ProductGenerator]: L486_accept_S1 --> L486_accept_S1
[2023-02-07 04:58:46,581 INFO  L479       ProductGenerator]: L486_T0_init --> L486_T0_init
[2023-02-07 04:58:46,581 INFO  L479       ProductGenerator]: L498_accept_S1 --> L498_accept_S1
[2023-02-07 04:58:46,581 INFO  L479       ProductGenerator]: L498_T0_init --> L498_T0_init
[2023-02-07 04:58:46,581 INFO  L479       ProductGenerator]: L545_accept_S1 --> L545_accept_S1
[2023-02-07 04:58:46,581 INFO  L479       ProductGenerator]: L545_T0_init --> L545_T0_init
[2023-02-07 04:58:46,581 INFO  L479       ProductGenerator]: L443_accept_S1 --> L443_accept_S1
[2023-02-07 04:58:46,581 INFO  L479       ProductGenerator]: L443_T0_init --> L443_T0_init
[2023-02-07 04:58:46,581 INFO  L486       ProductGenerator]: Handling product edge summary: SUMMARY for call setValid(hdr.udp_tunnel); srcloc: L391
[2023-02-07 04:58:46,582 INFO  L486       ProductGenerator]: Handling product edge summary: SUMMARY for call setValid(hdr.udp_tunnel); srcloc: L391
[2023-02-07 04:58:46,583 INFO  L479       ProductGenerator]: L519_accept_S1 --> L519_accept_S1
[2023-02-07 04:58:46,583 INFO  L479       ProductGenerator]: L519_T0_init --> L519_T0_init
[2023-02-07 04:58:46,583 INFO  L479       ProductGenerator]: L262_accept_S1 --> L262_accept_S1
[2023-02-07 04:58:46,583 INFO  L479       ProductGenerator]: L262_T0_init --> L262_T0_init
[2023-02-07 04:58:46,583 INFO  L479       ProductGenerator]: creatipv6_1FINAL_accept_S1 --> creatipv6_1FINAL_accept_S1
[2023-02-07 04:58:46,584 INFO  L479       ProductGenerator]: creatipv6_1FINAL_T0_init --> creatipv6_1FINAL_T0_init
[2023-02-07 04:58:46,584 INFO  L486       ProductGenerator]: Handling product edge summary: SUMMARY for call setInvalid(hdr.udp_tunnel); srcloc: L302-1
[2023-02-07 04:58:46,589 INFO  L486       ProductGenerator]: Handling product edge summary: SUMMARY for call setInvalid(hdr.udp_tunnel); srcloc: L302-1
[2023-02-07 04:58:46,592 INFO  L479       ProductGenerator]: L533_accept_S1 --> L533_accept_S1
[2023-02-07 04:58:46,592 INFO  L479       ProductGenerator]: L533_T0_init --> L533_T0_init
[2023-02-07 04:58:46,592 INFO  L479       ProductGenerator]: L598_accept_S1 --> L598_accept_S1
[2023-02-07 04:58:46,592 INFO  L479       ProductGenerator]: L598_T0_init --> L598_T0_init
[2023-02-07 04:58:46,592 INFO  L479       ProductGenerator]: L598_accept_S1 --> L598_accept_S1
[2023-02-07 04:58:46,592 INFO  L479       ProductGenerator]: L598_T0_init --> L598_T0_init
[2023-02-07 04:58:46,592 INFO  L479       ProductGenerator]: L266_accept_S1 --> L266_accept_S1
[2023-02-07 04:58:46,592 INFO  L479       ProductGenerator]: L266_T0_init --> L266_T0_init
[2023-02-07 04:58:46,592 INFO  L479       ProductGenerator]: L266_accept_S1 --> L266_accept_S1
[2023-02-07 04:58:46,592 INFO  L479       ProductGenerator]: L266_T0_init --> L266_T0_init
[2023-02-07 04:58:46,592 INFO  L479       ProductGenerator]: L710_accept_S1 --> L710_accept_S1
[2023-02-07 04:58:46,592 INFO  L479       ProductGenerator]: L710_T0_init --> L710_T0_init
[2023-02-07 04:58:46,592 INFO  L479       ProductGenerator]: L471_accept_S1 --> L471_accept_S1
[2023-02-07 04:58:46,592 INFO  L479       ProductGenerator]: L471_T0_init --> L471_T0_init
[2023-02-07 04:58:46,592 INFO  L479       ProductGenerator]: L655_accept_S1 --> L655_accept_S1
[2023-02-07 04:58:46,592 INFO  L479       ProductGenerator]: L655_T0_init --> L655_T0_init
[2023-02-07 04:58:46,592 INFO  L479       ProductGenerator]: L541_accept_S1 --> L541_accept_S1
[2023-02-07 04:58:46,592 INFO  L479       ProductGenerator]: L541_T0_init --> L541_T0_init
[2023-02-07 04:58:46,592 INFO  L486       ProductGenerator]: Handling product edge summary: SUMMARY for call setInvalid(hdr.ipv4_tunnel); srcloc: L302
[2023-02-07 04:58:46,595 INFO  L486       ProductGenerator]: Handling product edge summary: SUMMARY for call setInvalid(hdr.ipv4_tunnel); srcloc: L302
[2023-02-07 04:58:46,600 INFO  L479       ProductGenerator]: L512_accept_S1 --> L512_accept_S1
[2023-02-07 04:58:46,600 INFO  L479       ProductGenerator]: L512_T0_init --> L512_T0_init
[2023-02-07 04:58:46,600 INFO  L479       ProductGenerator]: L696_accept_S1 --> L696_accept_S1
[2023-02-07 04:58:46,600 INFO  L479       ProductGenerator]: L696_T0_init --> L696_T0_init
[2023-02-07 04:58:46,600 INFO  L479       ProductGenerator]: L427_accept_S1 --> L427_accept_S1
[2023-02-07 04:58:46,600 INFO  L479       ProductGenerator]: L427_T0_init --> L427_T0_init
[2023-02-07 04:58:46,600 INFO  L479       ProductGenerator]: L470_accept_S1 --> L470_accept_S1
[2023-02-07 04:58:46,600 INFO  L479       ProductGenerator]: L470_T0_init --> L470_T0_init
[2023-02-07 04:58:46,600 INFO  L479       ProductGenerator]: L708_accept_S1 --> L708_accept_S1
[2023-02-07 04:58:46,601 INFO  L479       ProductGenerator]: L708_T0_init --> L708_T0_init
[2023-02-07 04:58:46,601 INFO  L479       ProductGenerator]: L500_accept_S1 --> L500_accept_S1
[2023-02-07 04:58:46,601 INFO  L479       ProductGenerator]: L500_T0_init --> L500_T0_init
[2023-02-07 04:58:46,601 INFO  L479       ProductGenerator]: L476_accept_S1 --> L476_accept_S1
[2023-02-07 04:58:46,601 INFO  L479       ProductGenerator]: L476_T0_init --> L476_T0_init
[2023-02-07 04:58:46,601 INFO  L479       ProductGenerator]: L527_accept_S1 --> L527_accept_S1
[2023-02-07 04:58:46,601 INFO  L479       ProductGenerator]: L527_T0_init --> L527_T0_init
[2023-02-07 04:58:46,601 INFO  L479       ProductGenerator]: L548_accept_S1 --> L548_accept_S1
[2023-02-07 04:58:46,601 INFO  L479       ProductGenerator]: L548_T0_init --> L548_T0_init
[2023-02-07 04:58:46,601 INFO  L479       ProductGenerator]: L556_accept_S1 --> L556_accept_S1
[2023-02-07 04:58:46,601 INFO  L479       ProductGenerator]: L556_T0_init --> L556_T0_init
[2023-02-07 04:58:46,601 INFO  L479       ProductGenerator]: L464_accept_S1 --> L464_accept_S1
[2023-02-07 04:58:46,601 INFO  L479       ProductGenerator]: L464_T0_init --> L464_T0_init
[2023-02-07 04:58:46,601 INFO  L479       ProductGenerator]: parse_myTunnelENTRY_accept_S1 --> parse_myTunnelENTRY_accept_S1
[2023-02-07 04:58:46,601 INFO  L479       ProductGenerator]: parse_myTunnelENTRY_T0_init --> parse_myTunnelENTRY_T0_init
[2023-02-07 04:58:46,601 INFO  L479       ProductGenerator]: L276_accept_S1 --> L276_accept_S1
[2023-02-07 04:58:46,602 INFO  L479       ProductGenerator]: L276_T0_init --> L276_T0_init
[2023-02-07 04:58:46,602 INFO  L479       ProductGenerator]: L494_accept_S1 --> L494_accept_S1
[2023-02-07 04:58:46,602 INFO  L479       ProductGenerator]: L494_T0_init --> L494_T0_init
[2023-02-07 04:58:46,602 INFO  L479       ProductGenerator]: L627_accept_S1 --> L627_accept_S1
[2023-02-07 04:58:46,602 INFO  L479       ProductGenerator]: L627_T0_init --> L627_T0_init
[2023-02-07 04:58:46,602 INFO  L479       ProductGenerator]: L467_accept_S1 --> L467_accept_S1
[2023-02-07 04:58:46,602 INFO  L479       ProductGenerator]: L467_T0_init --> L467_T0_init
[2023-02-07 04:58:46,602 INFO  L483       ProductGenerator]: Handling product edge call: call user_mac.write(0, hdr.ethernet.srcAddr);
[2023-02-07 04:58:46,602 INFO  L483       ProductGenerator]: Handling product edge call: call user_mac.write(0, hdr.ethernet.srcAddr);
[2023-02-07 04:58:46,602 INFO  L479       ProductGenerator]: L692_accept_S1 --> L692_accept_S1
[2023-02-07 04:58:46,603 INFO  L479       ProductGenerator]: L692_T0_init --> L692_T0_init
[2023-02-07 04:58:46,603 INFO  L479       ProductGenerator]: L656_accept_S1 --> L656_accept_S1
[2023-02-07 04:58:46,603 INFO  L479       ProductGenerator]: L656_T0_init --> L656_T0_init
[2023-02-07 04:58:46,603 INFO  L479       ProductGenerator]: L546_accept_S1 --> L546_accept_S1
[2023-02-07 04:58:46,603 INFO  L479       ProductGenerator]: L546_T0_init --> L546_T0_init
[2023-02-07 04:58:46,603 INFO  L479       ProductGenerator]: L736_accept_S1 --> L736_accept_S1
[2023-02-07 04:58:46,603 INFO  L479       ProductGenerator]: L736_T0_init --> L736_T0_init
[2023-02-07 04:58:46,603 INFO  L479       ProductGenerator]: L736_accept_S1 --> L736_accept_S1
[2023-02-07 04:58:46,603 INFO  L479       ProductGenerator]: L736_T0_init --> L736_T0_init
[2023-02-07 04:58:46,603 INFO  L479       ProductGenerator]: L249_accept_S1 --> L249_accept_S1
[2023-02-07 04:58:46,603 INFO  L479       ProductGenerator]: L249_T0_init --> L249_T0_init
[2023-02-07 04:58:46,603 INFO  L479       ProductGenerator]: creatipv6_2FINAL_accept_S1 --> creatipv6_2FINAL_accept_S1
[2023-02-07 04:58:46,603 INFO  L479       ProductGenerator]: creatipv6_2FINAL_T0_init --> creatipv6_2FINAL_T0_init
[2023-02-07 04:58:46,604 INFO  L479       ProductGenerator]: L713_accept_S1 --> L713_accept_S1
[2023-02-07 04:58:46,604 INFO  L479       ProductGenerator]: L713_T0_init --> L713_T0_init
[2023-02-07 04:58:46,604 INFO  L479       ProductGenerator]: L678_accept_S1 --> L678_accept_S1
[2023-02-07 04:58:46,604 INFO  L479       ProductGenerator]: L678_T0_init --> L678_T0_init
[2023-02-07 04:58:46,604 INFO  L479       ProductGenerator]: L453_accept_S1 --> L453_accept_S1
[2023-02-07 04:58:46,604 INFO  L479       ProductGenerator]: L453_T0_init --> L453_T0_init
[2023-02-07 04:58:46,604 INFO  L479       ProductGenerator]: L579_accept_S1 --> L579_accept_S1
[2023-02-07 04:58:46,604 INFO  L479       ProductGenerator]: L579_T0_init --> L579_T0_init
[2023-02-07 04:58:46,604 INFO  L479       ProductGenerator]: L459_accept_S1 --> L459_accept_S1
[2023-02-07 04:58:46,604 INFO  L479       ProductGenerator]: L459_T0_init --> L459_T0_init
[2023-02-07 04:58:46,604 INFO  L479       ProductGenerator]: L608-1_accept_S1 --> L608-1_accept_S1
[2023-02-07 04:58:46,604 INFO  L479       ProductGenerator]: L608-1_T0_init --> L608-1_T0_init
[2023-02-07 04:58:46,604 INFO  L479       ProductGenerator]: L555_accept_S1 --> L555_accept_S1
[2023-02-07 04:58:46,604 INFO  L479       ProductGenerator]: L555_T0_init --> L555_T0_init
[2023-02-07 04:58:46,605 INFO  L479       ProductGenerator]: L702_accept_S1 --> L702_accept_S1
[2023-02-07 04:58:46,605 INFO  L479       ProductGenerator]: L702_T0_init --> L702_T0_init
[2023-02-07 04:58:46,605 INFO  L479       ProductGenerator]: L387_accept_S1 --> L387_accept_S1
[2023-02-07 04:58:46,605 INFO  L479       ProductGenerator]: L387_T0_init --> L387_T0_init
[2023-02-07 04:58:46,605 INFO  L479       ProductGenerator]: L618-1_accept_S1 --> L618-1_accept_S1
[2023-02-07 04:58:46,605 INFO  L479       ProductGenerator]: L618-1_T0_init --> L618-1_T0_init
[2023-02-07 04:58:46,605 INFO  L479       ProductGenerator]: L441_accept_S1 --> L441_accept_S1
[2023-02-07 04:58:46,605 INFO  L479       ProductGenerator]: L441_T0_init --> L441_T0_init
[2023-02-07 04:58:46,605 INFO  L479       ProductGenerator]: L261_accept_S1 --> L261_accept_S1
[2023-02-07 04:58:46,605 INFO  L479       ProductGenerator]: L261_T0_init --> L261_T0_init
[2023-02-07 04:58:46,605 INFO  L479       ProductGenerator]: L424_accept_S1 --> L424_accept_S1
[2023-02-07 04:58:46,605 INFO  L479       ProductGenerator]: L424_T0_init --> L424_T0_init
[2023-02-07 04:58:46,605 INFO  L479       ProductGenerator]: L529_accept_S1 --> L529_accept_S1
[2023-02-07 04:58:46,605 INFO  L479       ProductGenerator]: L529_T0_init --> L529_T0_init
[2023-02-07 04:58:46,605 INFO  L479       ProductGenerator]: L721_accept_S1 --> L721_accept_S1
[2023-02-07 04:58:46,605 INFO  L479       ProductGenerator]: L721_T0_init --> L721_T0_init
[2023-02-07 04:58:46,605 INFO  L479       ProductGenerator]: L388_accept_S1 --> L388_accept_S1
[2023-02-07 04:58:46,606 INFO  L479       ProductGenerator]: L388_T0_init --> L388_T0_init
[2023-02-07 04:58:46,606 INFO  L479       ProductGenerator]: L438_accept_S1 --> L438_accept_S1
[2023-02-07 04:58:46,606 INFO  L479       ProductGenerator]: L438_T0_init --> L438_T0_init
[2023-02-07 04:58:46,606 INFO  L479       ProductGenerator]: L289_accept_S1 --> L289_accept_S1
[2023-02-07 04:58:46,606 INFO  L479       ProductGenerator]: L289_T0_init --> L289_T0_init
[2023-02-07 04:58:46,606 INFO  L479       ProductGenerator]: L393_accept_S1 --> L393_accept_S1
[2023-02-07 04:58:46,606 INFO  L479       ProductGenerator]: L393_T0_init --> L393_T0_init
[2023-02-07 04:58:46,606 INFO  L479       ProductGenerator]: read_dsboxENTRY_accept_S1 --> read_dsboxENTRY_accept_S1
[2023-02-07 04:58:46,606 INFO  L479       ProductGenerator]: read_dsboxENTRY_T0_init --> read_dsboxENTRY_T0_init
[2023-02-07 04:58:46,606 INFO  L479       ProductGenerator]: L574-1_accept_S1 --> L574-1_accept_S1
[2023-02-07 04:58:46,606 INFO  L479       ProductGenerator]: L574-1_T0_init --> L574-1_T0_init
[2023-02-07 04:58:46,606 INFO  L479       ProductGenerator]: L448_accept_S1 --> L448_accept_S1
[2023-02-07 04:58:46,606 INFO  L479       ProductGenerator]: L448_T0_init --> L448_T0_init
[2023-02-07 04:58:46,606 INFO  L479       ProductGenerator]: L496_accept_S1 --> L496_accept_S1
[2023-02-07 04:58:46,606 INFO  L479       ProductGenerator]: L496_T0_init --> L496_T0_init
[2023-02-07 04:58:46,606 INFO  L479       ProductGenerator]: L353_accept_S1 --> L353_accept_S1
[2023-02-07 04:58:46,606 INFO  L479       ProductGenerator]: L353_T0_init --> L353_T0_init
[2023-02-07 04:58:46,607 INFO  L479       ProductGenerator]: L394_accept_S1 --> L394_accept_S1
[2023-02-07 04:58:46,607 INFO  L479       ProductGenerator]: L394_T0_init --> L394_T0_init
[2023-02-07 04:58:46,607 INFO  L479       ProductGenerator]: L422_accept_S1 --> L422_accept_S1
[2023-02-07 04:58:46,607 INFO  L479       ProductGenerator]: L422_T0_init --> L422_T0_init
[2023-02-07 04:58:46,607 INFO  L479       ProductGenerator]: L559_accept_S1 --> L559_accept_S1
[2023-02-07 04:58:46,607 INFO  L479       ProductGenerator]: L559_T0_init --> L559_T0_init
[2023-02-07 04:58:46,607 INFO  L479       ProductGenerator]: L447_accept_S1 --> L447_accept_S1
[2023-02-07 04:58:46,607 INFO  L479       ProductGenerator]: L447_T0_init --> L447_T0_init
[2023-02-07 04:58:46,607 INFO  L479       ProductGenerator]: L482_accept_S1 --> L482_accept_S1
[2023-02-07 04:58:46,607 INFO  L479       ProductGenerator]: L482_T0_init --> L482_T0_init
[2023-02-07 04:58:46,607 INFO  L479       ProductGenerator]: L469_accept_S1 --> L469_accept_S1
[2023-02-07 04:58:46,607 INFO  L479       ProductGenerator]: L469_T0_init --> L469_T0_init
[2023-02-07 04:58:46,607 INFO  L483       ProductGenerator]: Handling product edge call: call parse_ipv6();
[2023-02-07 04:58:46,608 INFO  L483       ProductGenerator]: Handling product edge call: call parse_ipv6();
[2023-02-07 04:58:46,608 INFO  L479       ProductGenerator]: L580_accept_S1 --> L580_accept_S1
[2023-02-07 04:58:46,608 INFO  L479       ProductGenerator]: L580_T0_init --> L580_T0_init
[2023-02-07 04:58:46,608 INFO  L479       ProductGenerator]: L558_accept_S1 --> L558_accept_S1
[2023-02-07 04:58:46,608 INFO  L479       ProductGenerator]: L558_T0_init --> L558_T0_init
[2023-02-07 04:58:46,608 INFO  L479       ProductGenerator]: parse_tcpFINAL_accept_S1 --> parse_tcpFINAL_accept_S1
[2023-02-07 04:58:46,608 INFO  L479       ProductGenerator]: parse_tcpFINAL_T0_init --> parse_tcpFINAL_T0_init
[2023-02-07 04:58:46,608 INFO  L479       ProductGenerator]: L354_accept_S1 --> L354_accept_S1
[2023-02-07 04:58:46,608 INFO  L479       ProductGenerator]: L354_T0_init --> L354_T0_init
[2023-02-07 04:58:46,608 INFO  L479       ProductGenerator]: L552_accept_S1 --> L552_accept_S1
[2023-02-07 04:58:46,608 INFO  L479       ProductGenerator]: L552_T0_init --> L552_T0_init
[2023-02-07 04:58:46,608 INFO  L479       ProductGenerator]: parse_tcpENTRY_accept_S1 --> parse_tcpENTRY_accept_S1
[2023-02-07 04:58:46,608 INFO  L479       ProductGenerator]: parse_tcpENTRY_T0_init --> parse_tcpENTRY_T0_init
[2023-02-07 04:58:46,609 INFO  L479       ProductGenerator]: L668_accept_S1 --> L668_accept_S1
[2023-02-07 04:58:46,609 INFO  L479       ProductGenerator]: L668_T0_init --> L668_T0_init
[2023-02-07 04:58:46,609 INFO  L486       ProductGenerator]: Handling product edge summary: SUMMARY for call setValid(hdr.ipv4_tunnel); srcloc: creatmytunnelENTRY
[2023-02-07 04:58:46,610 INFO  L486       ProductGenerator]: Handling product edge summary: SUMMARY for call setValid(hdr.ipv4_tunnel); srcloc: creatmytunnelENTRY
[2023-02-07 04:58:46,611 INFO  L479       ProductGenerator]: L432_accept_S1 --> L432_accept_S1
[2023-02-07 04:58:46,611 INFO  L479       ProductGenerator]: L432_T0_init --> L432_T0_init
[2023-02-07 04:58:46,611 INFO  L479       ProductGenerator]: L549_accept_S1 --> L549_accept_S1
[2023-02-07 04:58:46,611 INFO  L479       ProductGenerator]: L549_T0_init --> L549_T0_init
[2023-02-07 04:58:46,611 INFO  L479       ProductGenerator]: L445_accept_S1 --> L445_accept_S1
[2023-02-07 04:58:46,611 INFO  L479       ProductGenerator]: L445_T0_init --> L445_T0_init
[2023-02-07 04:58:46,611 INFO  L479       ProductGenerator]: L263_accept_S1 --> L263_accept_S1
[2023-02-07 04:58:46,611 INFO  L479       ProductGenerator]: L263_T0_init --> L263_T0_init
[2023-02-07 04:58:46,611 INFO  L479       ProductGenerator]: L362_accept_S1 --> L362_accept_S1
[2023-02-07 04:58:46,611 INFO  L479       ProductGenerator]: L362_T0_init --> L362_T0_init
[2023-02-07 04:58:46,611 INFO  L479       ProductGenerator]: L675_accept_S1 --> L675_accept_S1
[2023-02-07 04:58:46,611 INFO  L479       ProductGenerator]: L675_T0_init --> L675_T0_init
[2023-02-07 04:58:46,612 INFO  L479       ProductGenerator]: L697_accept_S1 --> L697_accept_S1
[2023-02-07 04:58:46,612 INFO  L479       ProductGenerator]: L697_T0_init --> L697_T0_init
[2023-02-07 04:58:46,612 INFO  L479       ProductGenerator]: L573_accept_S1 --> L573_accept_S1
[2023-02-07 04:58:46,612 INFO  L479       ProductGenerator]: L573_T0_init --> L573_T0_init
[2023-02-07 04:58:46,612 INFO  L479       ProductGenerator]: L573_accept_S1 --> L573_accept_S1
[2023-02-07 04:58:46,612 INFO  L479       ProductGenerator]: L573_T0_init --> L573_T0_init
[2023-02-07 04:58:46,612 INFO  L479       ProductGenerator]: L429_accept_S1 --> L429_accept_S1
[2023-02-07 04:58:46,612 INFO  L479       ProductGenerator]: L429_T0_init --> L429_T0_init
[2023-02-07 04:58:46,612 INFO  L479       ProductGenerator]: L674_accept_S1 --> L674_accept_S1
[2023-02-07 04:58:46,612 INFO  L479       ProductGenerator]: L674_T0_init --> L674_T0_init
[2023-02-07 04:58:46,612 INFO  L479       ProductGenerator]: L478_accept_S1 --> L478_accept_S1
[2023-02-07 04:58:46,612 INFO  L479       ProductGenerator]: L478_T0_init --> L478_T0_init
[2023-02-07 04:58:46,612 INFO  L479       ProductGenerator]: L544_accept_S1 --> L544_accept_S1
[2023-02-07 04:58:46,612 INFO  L479       ProductGenerator]: L544_T0_init --> L544_T0_init
[2023-02-07 04:58:46,612 INFO  L479       ProductGenerator]: L449_accept_S1 --> L449_accept_S1
[2023-02-07 04:58:46,613 INFO  L479       ProductGenerator]: L449_T0_init --> L449_T0_init
[2023-02-07 04:58:46,613 INFO  L479       ProductGenerator]: L551_accept_S1 --> L551_accept_S1
[2023-02-07 04:58:46,613 INFO  L479       ProductGenerator]: L551_T0_init --> L551_T0_init
[2023-02-07 04:58:46,613 INFO  L479       ProductGenerator]: parse_ipv6ENTRY_accept_S1 --> parse_ipv6ENTRY_accept_S1
[2023-02-07 04:58:46,613 INFO  L479       ProductGenerator]: parse_ipv6ENTRY_T0_init --> parse_ipv6ENTRY_T0_init
[2023-02-07 04:58:46,613 INFO  L479       ProductGenerator]: L676_accept_S1 --> L676_accept_S1
[2023-02-07 04:58:46,613 INFO  L479       ProductGenerator]: L676_T0_init --> L676_T0_init
[2023-02-07 04:58:46,613 INFO  L479       ProductGenerator]: MyComputeChecksumFINAL_accept_S1 --> MyComputeChecksumFINAL_accept_S1
[2023-02-07 04:58:46,613 INFO  L479       ProductGenerator]: MyComputeChecksumFINAL_T0_init --> MyComputeChecksumFINAL_T0_init
[2023-02-07 04:58:46,613 INFO  L483       ProductGenerator]: Handling product edge call: call parse_tcp();
[2023-02-07 04:58:46,613 INFO  L483       ProductGenerator]: Handling product edge call: call parse_tcp();
[2023-02-07 04:58:46,613 INFO  L479       ProductGenerator]: L718_accept_S1 --> L718_accept_S1
[2023-02-07 04:58:46,613 INFO  L479       ProductGenerator]: L718_T0_init --> L718_T0_init
[2023-02-07 04:58:46,613 INFO  L479       ProductGenerator]: L350_accept_S1 --> L350_accept_S1
[2023-02-07 04:58:46,613 INFO  L479       ProductGenerator]: L350_T0_init --> L350_T0_init
[2023-02-07 04:58:46,614 INFO  L479       ProductGenerator]: L457_accept_S1 --> L457_accept_S1
[2023-02-07 04:58:46,614 INFO  L479       ProductGenerator]: L457_T0_init --> L457_T0_init
[2023-02-07 04:58:46,614 INFO  L479       ProductGenerator]: L526_accept_S1 --> L526_accept_S1
[2023-02-07 04:58:46,614 INFO  L479       ProductGenerator]: L526_T0_init --> L526_T0_init
[2023-02-07 04:58:46,614 INFO  L479       ProductGenerator]: L717_accept_S1 --> L717_accept_S1
[2023-02-07 04:58:46,614 INFO  L479       ProductGenerator]: L717_T0_init --> L717_T0_init
[2023-02-07 04:58:46,614 INFO  L479       ProductGenerator]: _parser_MyParserFINAL_accept_S1 --> _parser_MyParserFINAL_accept_S1
[2023-02-07 04:58:46,614 INFO  L479       ProductGenerator]: _parser_MyParserFINAL_T0_init --> _parser_MyParserFINAL_T0_init
[2023-02-07 04:58:46,614 INFO  L479       ProductGenerator]: L292_accept_S1 --> L292_accept_S1
[2023-02-07 04:58:46,614 INFO  L479       ProductGenerator]: L292_T0_init --> L292_T0_init
[2023-02-07 04:58:46,614 INFO  L479       ProductGenerator]: L301_accept_S1 --> L301_accept_S1
[2023-02-07 04:58:46,614 INFO  L479       ProductGenerator]: L301_T0_init --> L301_T0_init
[2023-02-07 04:58:46,614 INFO  L479       ProductGenerator]: L301_accept_S1 --> L301_accept_S1
[2023-02-07 04:58:46,614 INFO  L479       ProductGenerator]: L301_T0_init --> L301_T0_init
[2023-02-07 04:58:46,614 INFO  L479       ProductGenerator]: L524_accept_S1 --> L524_accept_S1
[2023-02-07 04:58:46,614 INFO  L479       ProductGenerator]: L524_T0_init --> L524_T0_init
[2023-02-07 04:58:46,614 INFO  L479       ProductGenerator]: L700_accept_S1 --> L700_accept_S1
[2023-02-07 04:58:46,614 INFO  L479       ProductGenerator]: L700_T0_init --> L700_T0_init
[2023-02-07 04:58:46,614 INFO  L479       ProductGenerator]: L454_accept_S1 --> L454_accept_S1
[2023-02-07 04:58:46,615 INFO  L479       ProductGenerator]: L454_T0_init --> L454_T0_init
[2023-02-07 04:58:46,615 INFO  L483       ProductGenerator]: Handling product edge call: call parse_myTunnel();
[2023-02-07 04:58:46,615 INFO  L483       ProductGenerator]: Handling product edge call: call parse_myTunnel();
[2023-02-07 04:58:46,615 INFO  L479       ProductGenerator]: L269_accept_S1 --> L269_accept_S1
[2023-02-07 04:58:46,615 INFO  L479       ProductGenerator]: L269_T0_init --> L269_T0_init
[2023-02-07 04:58:46,615 INFO  L479       ProductGenerator]: L269_accept_S1 --> L269_accept_S1
[2023-02-07 04:58:46,615 INFO  L479       ProductGenerator]: L269_T0_init --> L269_T0_init
[2023-02-07 04:58:46,615 INFO  L479       ProductGenerator]: L480_accept_S1 --> L480_accept_S1
[2023-02-07 04:58:46,615 INFO  L479       ProductGenerator]: L480_T0_init --> L480_T0_init
[2023-02-07 04:58:46,615 INFO  L479       ProductGenerator]: L505_accept_S1 --> L505_accept_S1
[2023-02-07 04:58:46,615 INFO  L479       ProductGenerator]: L505_T0_init --> L505_T0_init
[2023-02-07 04:58:46,615 INFO  L479       ProductGenerator]: L385_accept_S1 --> L385_accept_S1
[2023-02-07 04:58:46,615 INFO  L479       ProductGenerator]: L385_T0_init --> L385_T0_init
[2023-02-07 04:58:46,615 INFO  L479       ProductGenerator]: L554_accept_S1 --> L554_accept_S1
[2023-02-07 04:58:46,615 INFO  L479       ProductGenerator]: L554_T0_init --> L554_T0_init
[2023-02-07 04:58:46,615 INFO  L479       ProductGenerator]: L683_accept_S1 --> L683_accept_S1
[2023-02-07 04:58:46,615 INFO  L479       ProductGenerator]: L683_T0_init --> L683_T0_init
[2023-02-07 04:58:46,615 INFO  L483       ProductGenerator]: Handling product edge call: call count.write(0, 2);
[2023-02-07 04:58:46,616 INFO  L483       ProductGenerator]: Handling product edge call: call count.write(0, 2);
[2023-02-07 04:58:46,616 INFO  L479       ProductGenerator]: L460_accept_S1 --> L460_accept_S1
[2023-02-07 04:58:46,616 INFO  L479       ProductGenerator]: L460_T0_init --> L460_T0_init
[2023-02-07 04:58:46,616 INFO  L479       ProductGenerator]: L452_accept_S1 --> L452_accept_S1
[2023-02-07 04:58:46,616 INFO  L479       ProductGenerator]: L452_T0_init --> L452_T0_init
[2023-02-07 04:58:46,616 INFO  L479       ProductGenerator]: L515_accept_S1 --> L515_accept_S1
[2023-02-07 04:58:46,616 INFO  L479       ProductGenerator]: L515_T0_init --> L515_T0_init
[2023-02-07 04:58:46,616 INFO  L479       ProductGenerator]: L446_accept_S1 --> L446_accept_S1
[2023-02-07 04:58:46,616 INFO  L479       ProductGenerator]: L446_T0_init --> L446_T0_init
[2023-02-07 04:58:46,616 INFO  L479       ProductGenerator]: L461_accept_S1 --> L461_accept_S1
[2023-02-07 04:58:46,616 INFO  L479       ProductGenerator]: L461_T0_init --> L461_T0_init
[2023-02-07 04:58:46,616 INFO  L483       ProductGenerator]: Handling product edge call: call _parser_MyParser();
[2023-02-07 04:58:46,616 INFO  L483       ProductGenerator]: Handling product edge call: call _parser_MyParser();
[2023-02-07 04:58:46,616 INFO  L479       ProductGenerator]: L531_accept_S1 --> L531_accept_S1
[2023-02-07 04:58:46,616 INFO  L479       ProductGenerator]: L531_T0_init --> L531_T0_init
[2023-02-07 04:58:46,616 INFO  L479       ProductGenerator]: L560_accept_S1 --> L560_accept_S1
[2023-02-07 04:58:46,616 INFO  L479       ProductGenerator]: L560_T0_init --> L560_T0_init
[2023-02-07 04:58:46,616 INFO  L479       ProductGenerator]: L456_accept_S1 --> L456_accept_S1
[2023-02-07 04:58:46,616 INFO  L479       ProductGenerator]: L456_T0_init --> L456_T0_init
[2023-02-07 04:58:46,617 INFO  L479       ProductGenerator]: L539_accept_S1 --> L539_accept_S1
[2023-02-07 04:58:46,617 INFO  L479       ProductGenerator]: L539_T0_init --> L539_T0_init
[2023-02-07 04:58:46,617 INFO  L479       ProductGenerator]: do_read_countFINAL_accept_S1 --> do_read_countFINAL_accept_S1
[2023-02-07 04:58:46,617 INFO  L479       ProductGenerator]: do_read_countFINAL_T0_init --> do_read_countFINAL_T0_init
[2023-02-07 04:58:46,617 INFO  L479       ProductGenerator]: L547_accept_S1 --> L547_accept_S1
[2023-02-07 04:58:46,617 INFO  L479       ProductGenerator]: L547_T0_init --> L547_T0_init
[2023-02-07 04:58:46,617 INFO  L479       ProductGenerator]: L434_accept_S1 --> L434_accept_S1
[2023-02-07 04:58:46,617 INFO  L479       ProductGenerator]: L434_T0_init --> L434_T0_init
[2023-02-07 04:58:46,617 INFO  L479       ProductGenerator]: L365_accept_S1 --> L365_accept_S1
[2023-02-07 04:58:46,617 INFO  L479       ProductGenerator]: L365_T0_init --> L365_T0_init
[2023-02-07 04:58:46,617 INFO  L479       ProductGenerator]: L463_accept_S1 --> L463_accept_S1
[2023-02-07 04:58:46,617 INFO  L479       ProductGenerator]: L463_T0_init --> L463_T0_init
[2023-02-07 04:58:46,617 INFO  L479       ProductGenerator]: L561_accept_S1 --> L561_accept_S1
[2023-02-07 04:58:46,617 INFO  L479       ProductGenerator]: L561_T0_init --> L561_T0_init
[2023-02-07 04:58:46,617 INFO  L479       ProductGenerator]: L481_accept_S1 --> L481_accept_S1
[2023-02-07 04:58:46,617 INFO  L479       ProductGenerator]: L481_T0_init --> L481_T0_init
[2023-02-07 04:58:46,617 INFO  L483       ProductGenerator]: Handling product edge call: call MyVerifyChecksum();
[2023-02-07 04:58:46,617 INFO  L483       ProductGenerator]: Handling product edge call: call MyVerifyChecksum();
[2023-02-07 04:58:46,617 INFO  L479       ProductGenerator]: L283_accept_S1 --> L283_accept_S1
[2023-02-07 04:58:46,617 INFO  L479       ProductGenerator]: L283_T0_init --> L283_T0_init
[2023-02-07 04:58:46,617 INFO  L479       ProductGenerator]: L682_accept_S1 --> L682_accept_S1
[2023-02-07 04:58:46,618 INFO  L479       ProductGenerator]: L682_T0_init --> L682_T0_init
[2023-02-07 04:58:46,618 INFO  L479       ProductGenerator]: es_box.writeEXIT_accept_S1 --> es_box.writeEXIT_accept_S1
[2023-02-07 04:58:46,618 INFO  L479       ProductGenerator]: es_box.writeEXIT_T0_init --> es_box.writeEXIT_T0_init
[2023-02-07 04:58:46,618 INFO  L479       ProductGenerator]: L490_accept_S1 --> L490_accept_S1
[2023-02-07 04:58:46,618 INFO  L479       ProductGenerator]: L490_T0_init --> L490_T0_init
[2023-02-07 04:58:46,618 INFO  L479       ProductGenerator]: L680_accept_S1 --> L680_accept_S1
[2023-02-07 04:58:46,618 INFO  L479       ProductGenerator]: L680_T0_init --> L680_T0_init
[2023-02-07 04:58:46,618 INFO  L483       ProductGenerator]: Handling product edge call: call parse_ipv4();
[2023-02-07 04:58:46,618 INFO  L483       ProductGenerator]: Handling product edge call: call parse_ipv4();
[2023-02-07 04:58:46,618 INFO  L479       ProductGenerator]: L658_accept_S1 --> L658_accept_S1
[2023-02-07 04:58:46,618 INFO  L479       ProductGenerator]: L658_T0_init --> L658_T0_init
[2023-02-07 04:58:46,618 INFO  L479       ProductGenerator]: L455_accept_S1 --> L455_accept_S1
[2023-02-07 04:58:46,618 INFO  L479       ProductGenerator]: L455_T0_init --> L455_T0_init
[2023-02-07 04:58:46,618 INFO  L479       ProductGenerator]: L495_accept_S1 --> L495_accept_S1
[2023-02-07 04:58:46,618 INFO  L479       ProductGenerator]: L495_T0_init --> L495_T0_init
[2023-02-07 04:58:46,618 INFO  L479       ProductGenerator]: L300_accept_S1 --> L300_accept_S1
[2023-02-07 04:58:46,618 INFO  L479       ProductGenerator]: L300_T0_init --> L300_T0_init
[2023-02-07 04:58:46,619 INFO  L479       ProductGenerator]: L381_accept_S1 --> L381_accept_S1
[2023-02-07 04:58:46,619 INFO  L479       ProductGenerator]: L381_T0_init --> L381_T0_init
[2023-02-07 04:58:46,619 INFO  L375       ProductGenerator]: ---------- Handling double product return edge from havocProcedureEXIT to L568
[2023-02-07 04:58:46,619 INFO  L375       ProductGenerator]: ---------- Handling double product return edge from creatmytunnelEXIT to L279-1
[2023-02-07 04:58:46,619 INFO  L375       ProductGenerator]: ---------- Handling double product return edge from mainProcedureEXIT to ULTIMATE.startFINAL
[2023-02-07 04:58:46,619 INFO  L375       ProductGenerator]: ---------- Handling double product return edge from creatipv6_1EXIT to L271-1
[2023-02-07 04:58:46,619 INFO  L375       ProductGenerator]: ---------- Handling double product return edge from user_mac.writeEXIT to store_user_macFINAL
[2023-02-07 04:58:46,619 INFO  L375       ProductGenerator]: ---------- Handling double product return edge from startEXIT to _parser_MyParserFINAL
[2023-02-07 04:58:46,619 INFO  L375       ProductGenerator]: ---------- Handling double product return edge from store_user_macEXIT to L267-1
[2023-02-07 04:58:46,619 INFO  L375       ProductGenerator]: ---------- Handling double product return edge from parse_selectEXIT to L739-1
[2023-02-07 04:58:46,619 INFO  L375       ProductGenerator]: ---------- Handling double product return edge from mainEXIT to L586-1
[2023-02-07 04:58:46,619 INFO  L749       ProductGenerator]: ==== Handling return program step: #422#return;
[2023-02-07 04:58:46,619 INFO  L749       ProductGenerator]: ==== Handling return program step: #422#return;
[2023-02-07 04:58:46,620 INFO  L375       ProductGenerator]: ---------- Handling double product return edge from MyVerifyChecksumEXIT to L570
[2023-02-07 04:58:46,620 INFO  L375       ProductGenerator]: ---------- Handling double product return edge from parse_tcpEXIT to L598-1
[2023-02-07 04:58:46,620 INFO  L375       ProductGenerator]: ---------- Handling double product return edge from parse_ipv4EXIT to L608-1
[2023-02-07 04:58:46,620 INFO  L375       ProductGenerator]: ---------- Handling double product return edge from parse_ipv4EXIT to parse_udpFINAL
[2023-02-07 04:58:46,620 INFO  L375       ProductGenerator]: ---------- Handling double product return edge from read_esboxEXIT to L268
[2023-02-07 04:58:46,620 INFO  L375       ProductGenerator]: ---------- Handling double product return edge from do_read_countEXIT to L269
[2023-02-07 04:58:46,620 INFO  L375       ProductGenerator]: ---------- Handling double product return edge from parse_myTunnelEXIT to L627
[2023-02-07 04:58:46,620 INFO  L375       ProductGenerator]: ---------- Handling double product return edge from parse_udpEXIT to L618-1
[2023-02-07 04:58:46,620 INFO  L375       ProductGenerator]: ---------- Handling double product return edge from MyEgressEXIT to L572
[2023-02-07 04:58:46,620 INFO  L375       ProductGenerator]: ---------- Handling double product return edge from acceptEXIT to parse_tcpFINAL
[2023-02-07 04:58:46,620 INFO  L375       ProductGenerator]: ---------- Handling double product return edge from parse_ipv6EXIT to L739-1
[2023-02-07 04:58:46,620 INFO  L375       ProductGenerator]: ---------- Handling double product return edge from creatipv6_2EXIT to L287-1
[2023-02-07 04:58:46,620 INFO  L375       ProductGenerator]: ---------- Handling double product return edge from count.writeEXIT to L273
[2023-02-07 04:58:46,620 INFO  L375       ProductGenerator]: ---------- Handling double product return edge from count.writeEXIT to L281
[2023-02-07 04:58:46,620 INFO  L375       ProductGenerator]: ---------- Handling double product return edge from count.writeEXIT to L289
[2023-02-07 04:58:46,620 INFO  L375       ProductGenerator]: ---------- Handling double product return edge from _parser_MyParserEXIT to L569
[2023-02-07 04:58:46,620 INFO  L375       ProductGenerator]: ---------- Handling double product return edge from read_dsboxEXIT to L249
[2023-02-07 04:58:46,621 INFO  L375       ProductGenerator]: ---------- Handling double product return edge from MyIngressEXIT to L571
[2023-02-07 04:58:46,621 INFO  L375       ProductGenerator]: ---------- Handling double product return edge from MyComputeChecksumEXIT to L573
[2023-02-07 04:58:46,802 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2023-02-07 04:58:46,803 INFO  L110   BuchiProductObserver]: BuchiProgram size 831 locations, 928 edges
[2023-02-07 04:58:46,803 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 07.02 04:58:46 BoogieIcfgContainer
[2023-02-07 04:58:46,803 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2023-02-07 04:58:46,804 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2023-02-07 04:58:46,804 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2023-02-07 04:58:46,805 INFO  L275        PluginConnector]: BlockEncodingV2 initialized
[2023-02-07 04:58:46,806 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 07.02 04:58:46" (1/1) ...
[2023-02-07 04:58:46,846 INFO  L313           BlockEncoder]: Initial Icfg 831 locations, 928 edges
[2023-02-07 04:58:46,847 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2023-02-07 04:58:46,847 INFO  L263           BlockEncoder]: Using Maximize final states
[2023-02-07 04:58:46,847 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=false
[2023-02-07 04:58:46,847 INFO  L296           BlockEncoder]: Using Remove sink states
[2023-02-07 04:58:46,848 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2023-02-07 04:58:46,852 INFO  L70    emoveInfeasibleEdges]: Removed 4 edges and 2 locations because of local infeasibility
[2023-02-07 04:58:46,853 INFO  L71     MaximizeFinalStates]: 0 new accepting states
[2023-02-07 04:58:46,855 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2023-02-07 04:58:46,857 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2023-02-07 04:58:46,858 INFO  L71     MaximizeFinalStates]: 0 new accepting states
[2023-02-07 04:58:46,858 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2023-02-07 04:58:46,859 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2023-02-07 04:58:46,859 INFO  L68        ParallelComposer]: Creating parallel compositions
[2023-02-07 04:58:46,860 INFO  L313           BlockEncoder]: Encoded RCFG 823 locations, 917 edges
[2023-02-07 04:58:46,860 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 07.02 04:58:46 BasicIcfg
[2023-02-07 04:58:46,860 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2023-02-07 04:58:46,861 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2023-02-07 04:58:46,861 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2023-02-07 04:58:46,863 INFO  L275        PluginConnector]: BuchiAutomizer initialized
[2023-02-07 04:58:46,863 INFO  L99          BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2023-02-07 04:58:46,863 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "p4ltl_boogie.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 07.02 04:58:45" (1/6) ...
[2023-02-07 04:58:46,864 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@f13cae3 and model type p4ltl_boogie.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 07.02 04:58:46, skipping insertion in model container
[2023-02-07 04:58:46,864 INFO  L99          BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2023-02-07 04:58:46,864 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.tsinghua.ss.thufv.specLang AST 07.02 04:58:45" (2/6) ...
[2023-02-07 04:58:46,864 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@f13cae3 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 07.02 04:58:46, skipping insertion in model container
[2023-02-07 04:58:46,864 INFO  L99          BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2023-02-07 04:58:46,864 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "p4ltl_boogie.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 07.02 04:58:46" (3/6) ...
[2023-02-07 04:58:46,864 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@f13cae3 and model type p4ltl_boogie.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 07.02 04:58:46, skipping insertion in model container
[2023-02-07 04:58:46,864 INFO  L99          BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2023-02-07 04:58:46,864 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.tsinghua.ss.thufv.ltl2aut AST 07.02 04:58:46" (4/6) ...
[2023-02-07 04:58:46,864 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@f13cae3 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 07.02 04:58:46, skipping insertion in model container
[2023-02-07 04:58:46,864 INFO  L99          BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2023-02-07 04:58:46,865 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 07.02 04:58:46" (5/6) ...
[2023-02-07 04:58:46,865 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@f13cae3 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 07.02 04:58:46, skipping insertion in model container
[2023-02-07 04:58:46,865 INFO  L99          BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2023-02-07 04:58:46,865 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 07.02 04:58:46" (6/6) ...
[2023-02-07 04:58:46,866 INFO  L354   chiAutomizerObserver]: Analyzing ICFG p4ltl_boogie.bpl_BEv2
[2023-02-07 04:58:46,897 INFO  L255   stractBuchiCegarLoop]: Interprodecural is true
[2023-02-07 04:58:46,897 INFO  L256   stractBuchiCegarLoop]: Hoare is false
[2023-02-07 04:58:46,897 INFO  L257   stractBuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2023-02-07 04:58:46,898 INFO  L258   stractBuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2023-02-07 04:58:46,898 INFO  L259   stractBuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2023-02-07 04:58:46,898 INFO  L260   stractBuchiCegarLoop]: Difference is false
[2023-02-07 04:58:46,898 INFO  L261   stractBuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2023-02-07 04:58:46,898 INFO  L265   stractBuchiCegarLoop]: ======== Iteration 0 == of CEGAR loop == BuchiAutomatonCegarLoop ========
[2023-02-07 04:58:46,903 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand  has 823 states, 720 states have (on average 1.0472222222222223) internal successors, (754), 714 states have internal predecessors, (754), 55 states have call successors, (55), 55 states have call predecessors, (55), 48 states have return successors, (108), 54 states have call predecessors, (108), 54 states have call successors, (108)
[2023-02-07 04:58:46,928 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2023-02-07 04:58:46,928 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2023-02-07 04:58:46,928 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2023-02-07 04:58:46,938 INFO  L179   hiAutomatonCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2023-02-07 04:58:46,938 INFO  L180   hiAutomatonCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2023-02-07 04:58:46,938 INFO  L287   stractBuchiCegarLoop]: ======== Iteration 1 ============
[2023-02-07 04:58:46,939 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand  has 823 states, 720 states have (on average 1.0472222222222223) internal successors, (754), 714 states have internal predecessors, (754), 55 states have call successors, (55), 55 states have call predecessors, (55), 48 states have return successors, (108), 54 states have call predecessors, (108), 54 states have call successors, (108)
[2023-02-07 04:58:46,946 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2023-02-07 04:58:46,946 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2023-02-07 04:58:46,946 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2023-02-07 04:58:46,949 INFO  L179   hiAutomatonCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2023-02-07 04:58:46,949 INFO  L180   hiAutomatonCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2023-02-07 04:58:46,959 INFO  L752   eck$LassoCheckResult]: Stem: 65#ULTIMATE.startENTRY_NONWAtrue [1520] ULTIMATE.startENTRY_NONWA-->L586-1_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 40#L586-1_T0_inittrue [1494] L586-1_T0_init-->L586_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 647#L586_T0_inittrue [2105] L586_T0_init-->L586_T0_init-D20: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 771#L586_T0_init-D20true [2227] L586_T0_init-D20-->mainENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 407#mainENTRY_T0_inittrue [1864] mainENTRY_T0_init-->mainENTRY_T0_init-D38: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 179#mainENTRY_T0_init-D38true [1636] mainENTRY_T0_init-D38-->havocProcedureENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 210#havocProcedureENTRY_T0_inittrue [1671] havocProcedureENTRY_T0_init-->L421_T0_init: Formula: (not v_drop_12)  InVars {}  OutVars{drop=v_drop_12}  AuxVars[]  AssignedVars[drop] 744#L421_T0_inittrue [2201] L421_T0_init-->L422_T0_init: Formula: (not v_forward_17)  InVars {}  OutVars{forward=v_forward_17}  AuxVars[]  AssignedVars[forward] 695#L422_T0_inittrue [2151] L422_T0_init-->L423_T0_init: Formula: true  InVars {}  OutVars{standard_metadata.ingress_port=v_standard_metadata.ingress_port_16}  AuxVars[]  AssignedVars[standard_metadata.ingress_port] 492#L423_T0_inittrue [1949] L423_T0_init-->L424_T0_init: Formula: (and (<= 0 v_standard_metadata.ingress_port_15) (< v_standard_metadata.ingress_port_15 512))  InVars {standard_metadata.ingress_port=v_standard_metadata.ingress_port_15}  OutVars{standard_metadata.ingress_port=v_standard_metadata.ingress_port_15}  AuxVars[]  AssignedVars[] 549#L424_T0_inittrue [2007] L424_T0_init-->L425_T0_init: Formula: (= v_standard_metadata.egress_spec_16 0)  InVars {}  OutVars{standard_metadata.egress_spec=v_standard_metadata.egress_spec_16}  AuxVars[]  AssignedVars[standard_metadata.egress_spec] 540#L425_T0_inittrue [1998] L425_T0_init-->L426_T0_init: Formula: (= 0 v_standard_metadata.egress_port_18)  InVars {}  OutVars{standard_metadata.egress_port=v_standard_metadata.egress_port_18}  AuxVars[]  AssignedVars[standard_metadata.egress_port] 284#L426_T0_inittrue [1739] L426_T0_init-->L427_T0_init: Formula: true  InVars {}  OutVars{standard_metadata.instance_type=v_standard_metadata.instance_type_10}  AuxVars[]  AssignedVars[standard_metadata.instance_type] 20#L427_T0_inittrue [1475] L427_T0_init-->L428_T0_init: Formula: (and (< v_standard_metadata.instance_type_11 4294967296) (<= 0 v_standard_metadata.instance_type_11))  InVars {standard_metadata.instance_type=v_standard_metadata.instance_type_11}  OutVars{standard_metadata.instance_type=v_standard_metadata.instance_type_11}  AuxVars[]  AssignedVars[] 155#L428_T0_inittrue [1613] L428_T0_init-->L429_T0_init: Formula: true  InVars {}  OutVars{standard_metadata.packet_length=v_standard_metadata.packet_length_12}  AuxVars[]  AssignedVars[standard_metadata.packet_length] 450#L429_T0_inittrue [1908] L429_T0_init-->L430_T0_init: Formula: (and (<= 0 v_standard_metadata.packet_length_11) (< v_standard_metadata.packet_length_11 4294967296))  InVars {standard_metadata.packet_length=v_standard_metadata.packet_length_11}  OutVars{standard_metadata.packet_length=v_standard_metadata.packet_length_11}  AuxVars[]  AssignedVars[] 89#L430_T0_inittrue [1545] L430_T0_init-->L431_T0_init: Formula: true  InVars {}  OutVars{standard_metadata.enq_timestamp=v_standard_metadata.enq_timestamp_10}  AuxVars[]  AssignedVars[standard_metadata.enq_timestamp] 183#L431_T0_inittrue [1642] L431_T0_init-->L432_T0_init: Formula: (and (<= 0 v_standard_metadata.enq_timestamp_9) (< v_standard_metadata.enq_timestamp_9 4294967296))  InVars {standard_metadata.enq_timestamp=v_standard_metadata.enq_timestamp_9}  OutVars{standard_metadata.enq_timestamp=v_standard_metadata.enq_timestamp_9}  AuxVars[]  AssignedVars[] 705#L432_T0_inittrue [2160] L432_T0_init-->L433_T0_init: Formula: (= v_standard_metadata.enq_qdepth_9 0)  InVars {}  OutVars{standard_metadata.enq_qdepth=v_standard_metadata.enq_qdepth_9}  AuxVars[]  AssignedVars[standard_metadata.enq_qdepth] 361#L433_T0_inittrue [1815] L433_T0_init-->L434_T0_init: Formula: true  InVars {}  OutVars{standard_metadata.deq_timedelta=v_standard_metadata.deq_timedelta_12}  AuxVars[]  AssignedVars[standard_metadata.deq_timedelta] 597#L434_T0_inittrue [2053] L434_T0_init-->L435_T0_init: Formula: (and (<= 0 v_standard_metadata.deq_timedelta_11) (< v_standard_metadata.deq_timedelta_11 4294967296))  InVars {standard_metadata.deq_timedelta=v_standard_metadata.deq_timedelta_11}  OutVars{standard_metadata.deq_timedelta=v_standard_metadata.deq_timedelta_11}  AuxVars[]  AssignedVars[] 79#L435_T0_inittrue [1534] L435_T0_init-->L436_T0_init: Formula: true  InVars {}  OutVars{standard_metadata.deq_qdepth=v_standard_metadata.deq_qdepth_10}  AuxVars[]  AssignedVars[standard_metadata.deq_qdepth] 601#L436_T0_inittrue [2057] L436_T0_init-->L437_T0_init: Formula: (and (< v_standard_metadata.deq_qdepth_11 524288) (<= 0 v_standard_metadata.deq_qdepth_11))  InVars {standard_metadata.deq_qdepth=v_standard_metadata.deq_qdepth_11}  OutVars{standard_metadata.deq_qdepth=v_standard_metadata.deq_qdepth_11}  AuxVars[]  AssignedVars[] 200#L437_T0_inittrue [1659] L437_T0_init-->L438_T0_init: Formula: true  InVars {}  OutVars{standard_metadata.ingress_global_timestamp=v_standard_metadata.ingress_global_timestamp_11}  AuxVars[]  AssignedVars[standard_metadata.ingress_global_timestamp] 169#L438_T0_inittrue [1627] L438_T0_init-->L439_T0_init: Formula: (and (<= 0 v_standard_metadata.ingress_global_timestamp_12) (< v_standard_metadata.ingress_global_timestamp_12 281474976710656))  InVars {standard_metadata.ingress_global_timestamp=v_standard_metadata.ingress_global_timestamp_12}  OutVars{standard_metadata.ingress_global_timestamp=v_standard_metadata.ingress_global_timestamp_12}  AuxVars[]  AssignedVars[] 774#L439_T0_inittrue [2231] L439_T0_init-->L440_T0_init: Formula: true  InVars {}  OutVars{standard_metadata.egress_global_timestamp=v_standard_metadata.egress_global_timestamp_11}  AuxVars[]  AssignedVars[standard_metadata.egress_global_timestamp] 34#L440_T0_inittrue [1488] L440_T0_init-->L441_T0_init: Formula: (and (<= 0 v_standard_metadata.egress_global_timestamp_12) (< v_standard_metadata.egress_global_timestamp_12 281474976710656))  InVars {standard_metadata.egress_global_timestamp=v_standard_metadata.egress_global_timestamp_12}  OutVars{standard_metadata.egress_global_timestamp=v_standard_metadata.egress_global_timestamp_12}  AuxVars[]  AssignedVars[] 42#L441_T0_inittrue [1497] L441_T0_init-->L442_T0_init: Formula: (= 0 v_standard_metadata.mcast_grp_8)  InVars {}  OutVars{standard_metadata.mcast_grp=v_standard_metadata.mcast_grp_8}  AuxVars[]  AssignedVars[standard_metadata.mcast_grp] 328#L442_T0_inittrue [1783] L442_T0_init-->L443_T0_init: Formula: (= v_standard_metadata.egress_rid_9 0)  InVars {}  OutVars{standard_metadata.egress_rid=v_standard_metadata.egress_rid_9}  AuxVars[]  AssignedVars[standard_metadata.egress_rid] 441#L443_T0_inittrue [1900] L443_T0_init-->L444_T0_init: Formula: (= v_standard_metadata.checksum_error_8 0)  InVars {}  OutVars{standard_metadata.checksum_error=v_standard_metadata.checksum_error_8}  AuxVars[]  AssignedVars[standard_metadata.checksum_error] 254#L444_T0_inittrue [1711] L444_T0_init-->L445_T0_init: Formula: (= v_standard_metadata.parser_error_9 0)  InVars {}  OutVars{standard_metadata.parser_error=v_standard_metadata.parser_error_9}  AuxVars[]  AssignedVars[standard_metadata.parser_error] 796#L445_T0_inittrue [2251] L445_T0_init-->L446_T0_init: Formula: (= v_standard_metadata.priority_9 0)  InVars {}  OutVars{standard_metadata.priority=v_standard_metadata.priority_9}  AuxVars[]  AssignedVars[standard_metadata.priority] 661#L446_T0_inittrue [2120] L446_T0_init-->L447_T0_init: Formula: (not v_hdr.ethernet.valid_13)  InVars {}  OutVars{hdr.ethernet.valid=v_hdr.ethernet.valid_13}  AuxVars[]  AssignedVars[hdr.ethernet.valid] 317#L447_T0_inittrue [1771] L447_T0_init-->L448_T0_init: Formula: (= v_emit_37 (store v_emit_38 v_hdr.ethernet_3 false))  InVars {emit=v_emit_38, hdr.ethernet=v_hdr.ethernet_3}  OutVars{emit=v_emit_37, hdr.ethernet=v_hdr.ethernet_3}  AuxVars[]  AssignedVars[emit] 376#L448_T0_inittrue [1833] L448_T0_init-->L449_T0_init: Formula: true  InVars {}  OutVars{hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_27}  AuxVars[]  AssignedVars[hdr.ethernet.dstAddr] 757#L449_T0_inittrue [2216] L449_T0_init-->L450_T0_init: Formula: (= v_hdr.ethernet.dstAddr_29 v__old_hdr.ethernet.dstAddr_12)  InVars {hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_29}  OutVars{_old_hdr.ethernet.dstAddr=v__old_hdr.ethernet.dstAddr_12, hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_29}  AuxVars[]  AssignedVars[_old_hdr.ethernet.dstAddr] 243#L450_T0_inittrue [1701] L450_T0_init-->L451_T0_init: Formula: (= v_hdr.ethernet.dstAddr_30 v__old_hdr.ethernet.dstAddr_13)  InVars {hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_30}  OutVars{_old_hdr.ethernet.dstAddr=v__old_hdr.ethernet.dstAddr_13, hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_30}  AuxVars[]  AssignedVars[_old_hdr.ethernet.dstAddr] 699#L451_T0_inittrue [2155] L451_T0_init-->L452_T0_init: Formula: true  InVars {}  OutVars{hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_22}  AuxVars[]  AssignedVars[hdr.ethernet.srcAddr] 506#L452_T0_inittrue [1964] L452_T0_init-->L453_T0_init: Formula: (= v_hdr.ethernet.srcAddr_27 v__old_hdr.ethernet.srcAddr_13)  InVars {hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_27}  OutVars{hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_27, _old_hdr.ethernet.srcAddr=v__old_hdr.ethernet.srcAddr_13}  AuxVars[]  AssignedVars[_old_hdr.ethernet.srcAddr] 500#L453_T0_inittrue [1958] L453_T0_init-->L454_T0_init: Formula: (= v_hdr.ethernet.srcAddr_25 v__old_hdr.ethernet.srcAddr_12)  InVars {hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_25}  OutVars{hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_25, _old_hdr.ethernet.srcAddr=v__old_hdr.ethernet.srcAddr_12}  AuxVars[]  AssignedVars[_old_hdr.ethernet.srcAddr] 316#L454_T0_inittrue [1770] L454_T0_init-->L455_T0_init: Formula: true  InVars {}  OutVars{hdr.ethernet.etherType=v_hdr.ethernet.etherType_24}  AuxVars[]  AssignedVars[hdr.ethernet.etherType] 412#L455_T0_inittrue [1870] L455_T0_init-->L456_T0_init: Formula: (and (<= 0 v_hdr.ethernet.etherType_25) (< v_hdr.ethernet.etherType_25 65536))  InVars {hdr.ethernet.etherType=v_hdr.ethernet.etherType_25}  OutVars{hdr.ethernet.etherType=v_hdr.ethernet.etherType_25}  AuxVars[]  AssignedVars[] 662#L456_T0_inittrue [2121] L456_T0_init-->L457_T0_init: Formula: (not v_hdr.ipv6.valid_17)  InVars {}  OutVars{hdr.ipv6.valid=v_hdr.ipv6.valid_17}  AuxVars[]  AssignedVars[hdr.ipv6.valid] 442#L457_T0_inittrue [1901] L457_T0_init-->L458_T0_init: Formula: (= v_emit_41 (store v_emit_42 v_hdr.ipv6_10 false))  InVars {emit=v_emit_42, hdr.ipv6=v_hdr.ipv6_10}  OutVars{emit=v_emit_41, hdr.ipv6=v_hdr.ipv6_10}  AuxVars[]  AssignedVars[emit] 349#L458_T0_inittrue [1803] L458_T0_init-->L459_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv6.version=v_hdr.ipv6.version_18}  AuxVars[]  AssignedVars[hdr.ipv6.version] 575#L459_T0_inittrue [2031] L459_T0_init-->L460_T0_init: Formula: (and (<= 0 v_hdr.ipv6.version_17) (< v_hdr.ipv6.version_17 16))  InVars {hdr.ipv6.version=v_hdr.ipv6.version_17}  OutVars{hdr.ipv6.version=v_hdr.ipv6.version_17}  AuxVars[]  AssignedVars[] 141#L460_T0_inittrue [1599] L460_T0_init-->L461_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv6.trafclass=v_hdr.ipv6.trafclass_12}  AuxVars[]  AssignedVars[hdr.ipv6.trafclass] 83#L461_T0_inittrue [1539] L461_T0_init-->L462_T0_init: Formula: (and (< v_hdr.ipv6.trafclass_11 256) (<= 0 v_hdr.ipv6.trafclass_11))  InVars {hdr.ipv6.trafclass=v_hdr.ipv6.trafclass_11}  OutVars{hdr.ipv6.trafclass=v_hdr.ipv6.trafclass_11}  AuxVars[]  AssignedVars[] 195#L462_T0_inittrue [1654] L462_T0_init-->L463_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv6.flowlabel=v_hdr.ipv6.flowlabel_9}  AuxVars[]  AssignedVars[hdr.ipv6.flowlabel] 28#L463_T0_inittrue [1484] L463_T0_init-->L464_T0_init: Formula: (and (<= 0 v_hdr.ipv6.flowlabel_12) (< v_hdr.ipv6.flowlabel_12 1048576))  InVars {hdr.ipv6.flowlabel=v_hdr.ipv6.flowlabel_12}  OutVars{hdr.ipv6.flowlabel=v_hdr.ipv6.flowlabel_12}  AuxVars[]  AssignedVars[] 73#L464_T0_inittrue [1528] L464_T0_init-->L465_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv6.payloadlen=v_hdr.ipv6.payloadlen_18}  AuxVars[]  AssignedVars[hdr.ipv6.payloadlen] 222#L465_T0_inittrue [1682] L465_T0_init-->L466_T0_init: Formula: (and (<= 0 v_hdr.ipv6.payloadlen_20) (< v_hdr.ipv6.payloadlen_20 65536))  InVars {hdr.ipv6.payloadlen=v_hdr.ipv6.payloadlen_20}  OutVars{hdr.ipv6.payloadlen=v_hdr.ipv6.payloadlen_20}  AuxVars[]  AssignedVars[] 305#L466_T0_inittrue [1760] L466_T0_init-->L467_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv6.nextheader=v_hdr.ipv6.nextheader_22}  AuxVars[]  AssignedVars[hdr.ipv6.nextheader] 280#L467_T0_inittrue [1735] L467_T0_init-->L468_T0_init: Formula: (and (< v_hdr.ipv6.nextheader_19 256) (<= 0 v_hdr.ipv6.nextheader_19))  InVars {hdr.ipv6.nextheader=v_hdr.ipv6.nextheader_19}  OutVars{hdr.ipv6.nextheader=v_hdr.ipv6.nextheader_19}  AuxVars[]  AssignedVars[] 382#L468_T0_inittrue [1839] L468_T0_init-->L469_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv6.hoplimit=v_hdr.ipv6.hoplimit_19}  AuxVars[]  AssignedVars[hdr.ipv6.hoplimit] 455#L469_T0_inittrue [1913] L469_T0_init-->L470_T0_init: Formula: (and (<= 0 v_hdr.ipv6.hoplimit_18) (< v_hdr.ipv6.hoplimit_18 256))  InVars {hdr.ipv6.hoplimit=v_hdr.ipv6.hoplimit_18}  OutVars{hdr.ipv6.hoplimit=v_hdr.ipv6.hoplimit_18}  AuxVars[]  AssignedVars[] 709#L470_T0_inittrue [2165] L470_T0_init-->L471_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv6.srcAddr=v_hdr.ipv6.srcAddr_16}  AuxVars[]  AssignedVars[hdr.ipv6.srcAddr] 6#L471_T0_inittrue [1460] L471_T0_init-->L472_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv6.dstAddr=v_hdr.ipv6.dstAddr_16}  AuxVars[]  AssignedVars[hdr.ipv6.dstAddr] 267#L472_T0_inittrue [1722] L472_T0_init-->L473_T0_init: Formula: (not v_hdr.ipv4_tunnel.valid_19)  InVars {}  OutVars{hdr.ipv4_tunnel.valid=v_hdr.ipv4_tunnel.valid_19}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.valid] 122#L473_T0_inittrue [1580] L473_T0_init-->L474_T0_init: Formula: (= v_emit_39 (store v_emit_40 v_hdr.ipv4_tunnel_9 false))  InVars {emit=v_emit_40, hdr.ipv4_tunnel=v_hdr.ipv4_tunnel_9}  OutVars{emit=v_emit_39, hdr.ipv4_tunnel=v_hdr.ipv4_tunnel_9}  AuxVars[]  AssignedVars[emit] 109#L474_T0_inittrue [1568] L474_T0_init-->L475_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.version=v_hdr.ipv4_tunnel.version_16}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.version] 362#L475_T0_inittrue [1816] L475_T0_init-->L476_T0_init: Formula: (and (<= 0 v_hdr.ipv4_tunnel.version_17) (< v_hdr.ipv4_tunnel.version_17 16))  InVars {hdr.ipv4_tunnel.version=v_hdr.ipv4_tunnel.version_17}  OutVars{hdr.ipv4_tunnel.version=v_hdr.ipv4_tunnel.version_17}  AuxVars[]  AssignedVars[] 427#L476_T0_inittrue [1885] L476_T0_init-->L477_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.ihl=v_hdr.ipv4_tunnel.ihl_14}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.ihl] 5#L477_T0_inittrue [1459] L477_T0_init-->L478_T0_init: Formula: (and (< v_hdr.ipv4_tunnel.ihl_17 16) (<= 0 v_hdr.ipv4_tunnel.ihl_17))  InVars {hdr.ipv4_tunnel.ihl=v_hdr.ipv4_tunnel.ihl_17}  OutVars{hdr.ipv4_tunnel.ihl=v_hdr.ipv4_tunnel.ihl_17}  AuxVars[]  AssignedVars[] 288#L478_T0_inittrue [1744] L478_T0_init-->L479_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.diffserv=v_hdr.ipv4_tunnel.diffserv_15}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.diffserv] 204#L479_T0_inittrue [1664] L479_T0_init-->L480_T0_init: Formula: (and (< v_hdr.ipv4_tunnel.diffserv_14 256) (<= 0 v_hdr.ipv4_tunnel.diffserv_14))  InVars {hdr.ipv4_tunnel.diffserv=v_hdr.ipv4_tunnel.diffserv_14}  OutVars{hdr.ipv4_tunnel.diffserv=v_hdr.ipv4_tunnel.diffserv_14}  AuxVars[]  AssignedVars[] 144#L480_T0_inittrue [1602] L480_T0_init-->L481_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.totalLen=v_hdr.ipv4_tunnel.totalLen_14}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.totalLen] 808#L481_T0_inittrue [2263] L481_T0_init-->L482_T0_init: Formula: (and (< v_hdr.ipv4_tunnel.totalLen_17 65536) (<= 0 v_hdr.ipv4_tunnel.totalLen_17))  InVars {hdr.ipv4_tunnel.totalLen=v_hdr.ipv4_tunnel.totalLen_17}  OutVars{hdr.ipv4_tunnel.totalLen=v_hdr.ipv4_tunnel.totalLen_17}  AuxVars[]  AssignedVars[] 252#L482_T0_inittrue [1709] L482_T0_init-->L483_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.identification=v_hdr.ipv4_tunnel.identification_15}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.identification] 368#L483_T0_inittrue [1823] L483_T0_init-->L484_T0_init: Formula: (and (<= 0 v_hdr.ipv4_tunnel.identification_17) (< v_hdr.ipv4_tunnel.identification_17 65536))  InVars {hdr.ipv4_tunnel.identification=v_hdr.ipv4_tunnel.identification_17}  OutVars{hdr.ipv4_tunnel.identification=v_hdr.ipv4_tunnel.identification_17}  AuxVars[]  AssignedVars[] 452#L484_T0_inittrue [1910] L484_T0_init-->L485_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.flags=v_hdr.ipv4_tunnel.flags_16}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.flags] 189#L485_T0_inittrue [1647] L485_T0_init-->L486_T0_init: Formula: (and (< v_hdr.ipv4_tunnel.flags_15 8) (<= 0 v_hdr.ipv4_tunnel.flags_15))  InVars {hdr.ipv4_tunnel.flags=v_hdr.ipv4_tunnel.flags_15}  OutVars{hdr.ipv4_tunnel.flags=v_hdr.ipv4_tunnel.flags_15}  AuxVars[]  AssignedVars[] 446#L486_T0_inittrue [1904] L486_T0_init-->L487_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.fragOffset=v_hdr.ipv4_tunnel.fragOffset_17}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.fragOffset] 636#L487_T0_inittrue [2094] L487_T0_init-->L488_T0_init: Formula: (and (< v_hdr.ipv4_tunnel.fragOffset_16 8192) (<= 0 v_hdr.ipv4_tunnel.fragOffset_16))  InVars {hdr.ipv4_tunnel.fragOffset=v_hdr.ipv4_tunnel.fragOffset_16}  OutVars{hdr.ipv4_tunnel.fragOffset=v_hdr.ipv4_tunnel.fragOffset_16}  AuxVars[]  AssignedVars[] 706#L488_T0_inittrue [2161] L488_T0_init-->L489_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.ttl=v_hdr.ipv4_tunnel.ttl_14}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.ttl] 625#L489_T0_inittrue [2081] L489_T0_init-->L490_T0_init: Formula: (and (< v_hdr.ipv4_tunnel.ttl_16 256) (<= 0 v_hdr.ipv4_tunnel.ttl_16))  InVars {hdr.ipv4_tunnel.ttl=v_hdr.ipv4_tunnel.ttl_16}  OutVars{hdr.ipv4_tunnel.ttl=v_hdr.ipv4_tunnel.ttl_16}  AuxVars[]  AssignedVars[] 35#L490_T0_inittrue [1489] L490_T0_init-->L491_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.protocol=v_hdr.ipv4_tunnel.protocol_17}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.protocol] 762#L491_T0_inittrue [2221] L491_T0_init-->L492_T0_init: Formula: (and (< v_hdr.ipv4_tunnel.protocol_16 256) (<= 0 v_hdr.ipv4_tunnel.protocol_16))  InVars {hdr.ipv4_tunnel.protocol=v_hdr.ipv4_tunnel.protocol_16}  OutVars{hdr.ipv4_tunnel.protocol=v_hdr.ipv4_tunnel.protocol_16}  AuxVars[]  AssignedVars[] 761#L492_T0_inittrue [2220] L492_T0_init-->L493_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.hdrChecksum=v_hdr.ipv4_tunnel.hdrChecksum_11}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.hdrChecksum] 822#L493_T0_inittrue [2277] L493_T0_init-->L494_T0_init: Formula: (and (<= 0 v_hdr.ipv4_tunnel.hdrChecksum_12) (< v_hdr.ipv4_tunnel.hdrChecksum_12 65536))  InVars {hdr.ipv4_tunnel.hdrChecksum=v_hdr.ipv4_tunnel.hdrChecksum_12}  OutVars{hdr.ipv4_tunnel.hdrChecksum=v_hdr.ipv4_tunnel.hdrChecksum_12}  AuxVars[]  AssignedVars[] 667#L494_T0_inittrue [2126] L494_T0_init-->L495_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.srcAddr=v_hdr.ipv4_tunnel.srcAddr_13}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.srcAddr] 38#L495_T0_inittrue [1493] L495_T0_init-->L496_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.dstAddr=v_hdr.ipv4_tunnel.dstAddr_13}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.dstAddr] 62#L496_T0_inittrue [1517] L496_T0_init-->L497_T0_init: Formula: (not v_hdr.ipv4.valid_25)  InVars {}  OutVars{hdr.ipv4.valid=v_hdr.ipv4.valid_25}  AuxVars[]  AssignedVars[hdr.ipv4.valid] 339#L497_T0_inittrue [1794] L497_T0_init-->L498_T0_init: Formula: (= v_emit_27 (store v_emit_28 v_hdr.ipv4_2 false))  InVars {hdr.ipv4=v_hdr.ipv4_2, emit=v_emit_28}  OutVars{hdr.ipv4=v_hdr.ipv4_2, emit=v_emit_27}  AuxVars[]  AssignedVars[emit] 658#L498_T0_inittrue [2117] L498_T0_init-->L499_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.version=v_hdr.ipv4.version_13}  AuxVars[]  AssignedVars[hdr.ipv4.version] 237#L499_T0_inittrue [1696] L499_T0_init-->L500_T0_init: Formula: (and (< v_hdr.ipv4.version_10 16) (<= 0 v_hdr.ipv4.version_10))  InVars {hdr.ipv4.version=v_hdr.ipv4.version_10}  OutVars{hdr.ipv4.version=v_hdr.ipv4.version_10}  AuxVars[]  AssignedVars[] 589#L500_T0_inittrue [2045] L500_T0_init-->L501_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.ihl=v_hdr.ipv4.ihl_9}  AuxVars[]  AssignedVars[hdr.ipv4.ihl] 683#L501_T0_inittrue [2140] L501_T0_init-->L502_T0_init: Formula: (and (< v_hdr.ipv4.ihl_10 16) (<= 0 v_hdr.ipv4.ihl_10))  InVars {hdr.ipv4.ihl=v_hdr.ipv4.ihl_10}  OutVars{hdr.ipv4.ihl=v_hdr.ipv4.ihl_10}  AuxVars[]  AssignedVars[] 611#L502_T0_inittrue [2067] L502_T0_init-->L503_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.diffserv=v_hdr.ipv4.diffserv_13}  AuxVars[]  AssignedVars[hdr.ipv4.diffserv] 551#L503_T0_inittrue [2009] L503_T0_init-->L504_T0_init: Formula: (and (<= 0 v_hdr.ipv4.diffserv_12) (< v_hdr.ipv4.diffserv_12 256))  InVars {hdr.ipv4.diffserv=v_hdr.ipv4.diffserv_12}  OutVars{hdr.ipv4.diffserv=v_hdr.ipv4.diffserv_12}  AuxVars[]  AssignedVars[] 417#L504_T0_inittrue [1875] L504_T0_init-->L505_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.totalLen=v_hdr.ipv4.totalLen_14}  AuxVars[]  AssignedVars[hdr.ipv4.totalLen] 31#L505_T0_inittrue [1486] L505_T0_init-->L506_T0_init: Formula: (and (< v_hdr.ipv4.totalLen_15 65536) (<= 0 v_hdr.ipv4.totalLen_15))  InVars {hdr.ipv4.totalLen=v_hdr.ipv4.totalLen_15}  OutVars{hdr.ipv4.totalLen=v_hdr.ipv4.totalLen_15}  AuxVars[]  AssignedVars[] 663#L506_T0_inittrue [2122] L506_T0_init-->L507_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.identification=v_hdr.ipv4.identification_12}  AuxVars[]  AssignedVars[hdr.ipv4.identification] 456#L507_T0_inittrue [1914] L507_T0_init-->L508_T0_init: Formula: (and (< v_hdr.ipv4.identification_11 65536) (<= 0 v_hdr.ipv4.identification_11))  InVars {hdr.ipv4.identification=v_hdr.ipv4.identification_11}  OutVars{hdr.ipv4.identification=v_hdr.ipv4.identification_11}  AuxVars[]  AssignedVars[] 598#L508_T0_inittrue [2054] L508_T0_init-->L509_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.flags=v_hdr.ipv4.flags_10}  AuxVars[]  AssignedVars[hdr.ipv4.flags] 790#L509_T0_inittrue [2246] L509_T0_init-->L510_T0_init: Formula: (and (< v_hdr.ipv4.flags_13 8) (<= 0 v_hdr.ipv4.flags_13))  InVars {hdr.ipv4.flags=v_hdr.ipv4.flags_13}  OutVars{hdr.ipv4.flags=v_hdr.ipv4.flags_13}  AuxVars[]  AssignedVars[] 74#L510_T0_inittrue [1529] L510_T0_init-->L511_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.fragOffset=v_hdr.ipv4.fragOffset_11}  AuxVars[]  AssignedVars[hdr.ipv4.fragOffset] 363#L511_T0_inittrue [1817] L511_T0_init-->L512_T0_init: Formula: (and (< v_hdr.ipv4.fragOffset_10 8192) (<= 0 v_hdr.ipv4.fragOffset_10))  InVars {hdr.ipv4.fragOffset=v_hdr.ipv4.fragOffset_10}  OutVars{hdr.ipv4.fragOffset=v_hdr.ipv4.fragOffset_10}  AuxVars[]  AssignedVars[] 158#L512_T0_inittrue [1615] L512_T0_init-->L513_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.ttl=v_hdr.ipv4.ttl_10}  AuxVars[]  AssignedVars[hdr.ipv4.ttl] 578#L513_T0_inittrue [2035] L513_T0_init-->L514_T0_init: Formula: (and (<= 0 v_hdr.ipv4.ttl_11) (< v_hdr.ipv4.ttl_11 256))  InVars {hdr.ipv4.ttl=v_hdr.ipv4.ttl_11}  OutVars{hdr.ipv4.ttl=v_hdr.ipv4.ttl_11}  AuxVars[]  AssignedVars[] 249#L514_T0_inittrue [1706] L514_T0_init-->L515_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.protocol=v_hdr.ipv4.protocol_12}  AuxVars[]  AssignedVars[hdr.ipv4.protocol] 324#L515_T0_inittrue [1778] L515_T0_init-->L516_T0_init: Formula: (and (<= 0 v_hdr.ipv4.protocol_14) (< v_hdr.ipv4.protocol_14 256))  InVars {hdr.ipv4.protocol=v_hdr.ipv4.protocol_14}  OutVars{hdr.ipv4.protocol=v_hdr.ipv4.protocol_14}  AuxVars[]  AssignedVars[] 648#L516_T0_inittrue [2106] L516_T0_init-->L517_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.hdrChecksum=v_hdr.ipv4.hdrChecksum_9}  AuxVars[]  AssignedVars[hdr.ipv4.hdrChecksum] 385#L517_T0_inittrue [1842] L517_T0_init-->L518_T0_init: Formula: (and (< v_hdr.ipv4.hdrChecksum_10 65536) (<= 0 v_hdr.ipv4.hdrChecksum_10))  InVars {hdr.ipv4.hdrChecksum=v_hdr.ipv4.hdrChecksum_10}  OutVars{hdr.ipv4.hdrChecksum=v_hdr.ipv4.hdrChecksum_10}  AuxVars[]  AssignedVars[] 476#L518_T0_inittrue [1932] L518_T0_init-->L519_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.srcAddr=v_hdr.ipv4.srcAddr_9}  AuxVars[]  AssignedVars[hdr.ipv4.srcAddr] 250#L519_T0_inittrue [1707] L519_T0_init-->L520_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_16}  AuxVars[]  AssignedVars[hdr.ipv4.dstAddr] 115#L520_T0_inittrue [1573] L520_T0_init-->L521_T0_init: Formula: (= v_hdr.ipv4.dstAddr_17 v__old_hdr.ipv4.dstAddr_13)  InVars {hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_17}  OutVars{_old_hdr.ipv4.dstAddr=v__old_hdr.ipv4.dstAddr_13, hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_17}  AuxVars[]  AssignedVars[_old_hdr.ipv4.dstAddr] 264#L521_T0_inittrue [1719] L521_T0_init-->L522_T0_init: Formula: (= v_hdr.ipv4.dstAddr_14 v__old_hdr.ipv4.dstAddr_11)  InVars {hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_14}  OutVars{_old_hdr.ipv4.dstAddr=v__old_hdr.ipv4.dstAddr_11, hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_14}  AuxVars[]  AssignedVars[_old_hdr.ipv4.dstAddr] 610#L522_T0_inittrue [2065] L522_T0_init-->L523_T0_init: Formula: (not v_hdr.tcp.valid_30)  InVars {}  OutVars{hdr.tcp.valid=v_hdr.tcp.valid_30}  AuxVars[]  AssignedVars[hdr.tcp.valid] 166#L523_T0_inittrue [1623] L523_T0_init-->L524_T0_init: Formula: (= v_emit_35 (store v_emit_36 v_hdr.tcp_3 false))  InVars {hdr.tcp=v_hdr.tcp_3, emit=v_emit_36}  OutVars{hdr.tcp=v_hdr.tcp_3, emit=v_emit_35}  AuxVars[]  AssignedVars[emit] 4#L524_T0_inittrue [1458] L524_T0_init-->L525_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.srcport=v_hdr.tcp.srcport_10}  AuxVars[]  AssignedVars[hdr.tcp.srcport] 108#L525_T0_inittrue [1565] L525_T0_init-->L526_T0_init: Formula: (and (<= 0 v_hdr.tcp.srcport_12) (< v_hdr.tcp.srcport_12 65536))  InVars {hdr.tcp.srcport=v_hdr.tcp.srcport_12}  OutVars{hdr.tcp.srcport=v_hdr.tcp.srcport_12}  AuxVars[]  AssignedVars[] 424#L526_T0_inittrue [1882] L526_T0_init-->L527_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.dstport=v_hdr.tcp.dstport_9}  AuxVars[]  AssignedVars[hdr.tcp.dstport] 270#L527_T0_inittrue [1725] L527_T0_init-->L528_T0_init: Formula: (and (< v_hdr.tcp.dstport_10 65536) (<= 0 v_hdr.tcp.dstport_10))  InVars {hdr.tcp.dstport=v_hdr.tcp.dstport_10}  OutVars{hdr.tcp.dstport=v_hdr.tcp.dstport_10}  AuxVars[]  AssignedVars[] 381#L528_T0_inittrue [1837] L528_T0_init-->L529_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.sequence=v_hdr.tcp.sequence_43}  AuxVars[]  AssignedVars[hdr.tcp.sequence] 485#L529_T0_inittrue [1941] L529_T0_init-->L530_T0_init: Formula: (and (< v_hdr.tcp.sequence_44 4294967296) (<= 0 v_hdr.tcp.sequence_44))  InVars {hdr.tcp.sequence=v_hdr.tcp.sequence_44}  OutVars{hdr.tcp.sequence=v_hdr.tcp.sequence_44}  AuxVars[]  AssignedVars[] 163#L530_T0_inittrue [1620] L530_T0_init-->L531_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.ackseq=v_hdr.tcp.ackseq_41}  AuxVars[]  AssignedVars[hdr.tcp.ackseq] 26#L531_T0_inittrue [1481] L531_T0_init-->L532_T0_init: Formula: (and (< v_hdr.tcp.ackseq_43 4294967296) (<= 0 v_hdr.tcp.ackseq_43))  InVars {hdr.tcp.ackseq=v_hdr.tcp.ackseq_43}  OutVars{hdr.tcp.ackseq=v_hdr.tcp.ackseq_43}  AuxVars[]  AssignedVars[] 788#L532_T0_inittrue [2244] L532_T0_init-->L533_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.headerlength=v_hdr.tcp.headerlength_10}  AuxVars[]  AssignedVars[hdr.tcp.headerlength] 731#L533_T0_inittrue [2188] L533_T0_init-->L534_T0_init: Formula: (and (< v_hdr.tcp.headerlength_9 16) (<= 0 v_hdr.tcp.headerlength_9))  InVars {hdr.tcp.headerlength=v_hdr.tcp.headerlength_9}  OutVars{hdr.tcp.headerlength=v_hdr.tcp.headerlength_9}  AuxVars[]  AssignedVars[] 165#L534_T0_inittrue [1622] L534_T0_init-->L535_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.reservation=v_hdr.tcp.reservation_11}  AuxVars[]  AssignedVars[hdr.tcp.reservation] 739#L535_T0_inittrue [2196] L535_T0_init-->L536_T0_init: Formula: (and (< v_hdr.tcp.reservation_9 64) (<= 0 v_hdr.tcp.reservation_9))  InVars {hdr.tcp.reservation=v_hdr.tcp.reservation_9}  OutVars{hdr.tcp.reservation=v_hdr.tcp.reservation_9}  AuxVars[]  AssignedVars[] 194#L536_T0_inittrue [1653] L536_T0_init-->L537_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.URG=v_hdr.tcp.URG_11}  AuxVars[]  AssignedVars[hdr.tcp.URG] 486#L537_T0_inittrue [1942] L537_T0_init-->L538_T0_init: Formula: (and (<= 0 v_hdr.tcp.URG_10) (< v_hdr.tcp.URG_10 2))  InVars {hdr.tcp.URG=v_hdr.tcp.URG_10}  OutVars{hdr.tcp.URG=v_hdr.tcp.URG_10}  AuxVars[]  AssignedVars[] 488#L538_T0_inittrue [1944] L538_T0_init-->L539_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.ACK=v_hdr.tcp.ACK_11}  AuxVars[]  AssignedVars[hdr.tcp.ACK] 797#L539_T0_inittrue [2252] L539_T0_init-->L540_T0_init: Formula: (and (<= 0 v_hdr.tcp.ACK_9) (< v_hdr.tcp.ACK_9 2))  InVars {hdr.tcp.ACK=v_hdr.tcp.ACK_9}  OutVars{hdr.tcp.ACK=v_hdr.tcp.ACK_9}  AuxVars[]  AssignedVars[] 529#L540_T0_inittrue [1986] L540_T0_init-->L541_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.PSH=v_hdr.tcp.PSH_12}  AuxVars[]  AssignedVars[hdr.tcp.PSH] 684#L541_T0_inittrue [2141] L541_T0_init-->L542_T0_init: Formula: (and (<= 0 v_hdr.tcp.PSH_10) (< v_hdr.tcp.PSH_10 2))  InVars {hdr.tcp.PSH=v_hdr.tcp.PSH_10}  OutVars{hdr.tcp.PSH=v_hdr.tcp.PSH_10}  AuxVars[]  AssignedVars[] 669#L542_T0_inittrue [2128] L542_T0_init-->L543_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.RST=v_hdr.tcp.RST_10}  AuxVars[]  AssignedVars[hdr.tcp.RST] 672#L543_T0_inittrue [2131] L543_T0_init-->L544_T0_init: Formula: (and (<= 0 v_hdr.tcp.RST_11) (< v_hdr.tcp.RST_11 2))  InVars {hdr.tcp.RST=v_hdr.tcp.RST_11}  OutVars{hdr.tcp.RST=v_hdr.tcp.RST_11}  AuxVars[]  AssignedVars[] 712#L544_T0_inittrue [2168] L544_T0_init-->L545_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.SYN=v_hdr.tcp.SYN_12}  AuxVars[]  AssignedVars[hdr.tcp.SYN] 527#L545_T0_inittrue [1983] L545_T0_init-->L546_T0_init: Formula: (and (<= 0 v_hdr.tcp.SYN_11) (< v_hdr.tcp.SYN_11 2))  InVars {hdr.tcp.SYN=v_hdr.tcp.SYN_11}  OutVars{hdr.tcp.SYN=v_hdr.tcp.SYN_11}  AuxVars[]  AssignedVars[] 816#L546_T0_inittrue [2272] L546_T0_init-->L547_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.FIN=v_hdr.tcp.FIN_11}  AuxVars[]  AssignedVars[hdr.tcp.FIN] 538#L547_T0_inittrue [1996] L547_T0_init-->L548_T0_init: Formula: (and (< v_hdr.tcp.FIN_12 2) (<= 0 v_hdr.tcp.FIN_12))  InVars {hdr.tcp.FIN=v_hdr.tcp.FIN_12}  OutVars{hdr.tcp.FIN=v_hdr.tcp.FIN_12}  AuxVars[]  AssignedVars[] 373#L548_T0_inittrue [1829] L548_T0_init-->L549_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.windowsize=v_hdr.tcp.windowsize_10}  AuxVars[]  AssignedVars[hdr.tcp.windowsize] 749#L549_T0_inittrue [2207] L549_T0_init-->L550_T0_init: Formula: (and (<= 0 v_hdr.tcp.windowsize_9) (< v_hdr.tcp.windowsize_9 65536))  InVars {hdr.tcp.windowsize=v_hdr.tcp.windowsize_9}  OutVars{hdr.tcp.windowsize=v_hdr.tcp.windowsize_9}  AuxVars[]  AssignedVars[] 740#L550_T0_inittrue [2197] L550_T0_init-->L551_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.checksum=v_hdr.tcp.checksum_9}  AuxVars[]  AssignedVars[hdr.tcp.checksum] 388#L551_T0_inittrue [1844] L551_T0_init-->L552_T0_init: Formula: (and (<= 0 v_hdr.tcp.checksum_11) (< v_hdr.tcp.checksum_11 65536))  InVars {hdr.tcp.checksum=v_hdr.tcp.checksum_11}  OutVars{hdr.tcp.checksum=v_hdr.tcp.checksum_11}  AuxVars[]  AssignedVars[] 61#L552_T0_inittrue [1516] L552_T0_init-->L553_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.pointer=v_hdr.tcp.pointer_12}  AuxVars[]  AssignedVars[hdr.tcp.pointer] 182#L553_T0_inittrue [1639] L553_T0_init-->L554_T0_init: Formula: (and (<= 0 v_hdr.tcp.pointer_9) (< v_hdr.tcp.pointer_9 65536))  InVars {hdr.tcp.pointer=v_hdr.tcp.pointer_9}  OutVars{hdr.tcp.pointer=v_hdr.tcp.pointer_9}  AuxVars[]  AssignedVars[] 51#L554_T0_inittrue [1507] L554_T0_init-->L555_T0_init: Formula: (not v_hdr.udp_tunnel.valid_19)  InVars {}  OutVars{hdr.udp_tunnel.valid=v_hdr.udp_tunnel.valid_19}  AuxVars[]  AssignedVars[hdr.udp_tunnel.valid] 276#L555_T0_inittrue [1731] L555_T0_init-->L556_T0_init: Formula: (= v_emit_19 (store v_emit_20 v_hdr.udp_tunnel_8 false))  InVars {emit=v_emit_20, hdr.udp_tunnel=v_hdr.udp_tunnel_8}  OutVars{emit=v_emit_19, hdr.udp_tunnel=v_hdr.udp_tunnel_8}  AuxVars[]  AssignedVars[emit] 608#L556_T0_inittrue [2063] L556_T0_init-->L557_T0_init: Formula: true  InVars {}  OutVars{hdr.udp_tunnel.srcport=v_hdr.udp_tunnel.srcport_14}  AuxVars[]  AssignedVars[hdr.udp_tunnel.srcport] 668#L557_T0_inittrue [2127] L557_T0_init-->L558_T0_init: Formula: (and (<= 0 v_hdr.udp_tunnel.srcport_15) (< v_hdr.udp_tunnel.srcport_15 65536))  InVars {hdr.udp_tunnel.srcport=v_hdr.udp_tunnel.srcport_15}  OutVars{hdr.udp_tunnel.srcport=v_hdr.udp_tunnel.srcport_15}  AuxVars[]  AssignedVars[] 493#L558_T0_inittrue [1950] L558_T0_init-->L559_T0_init: Formula: true  InVars {}  OutVars{hdr.udp_tunnel.dstport=v_hdr.udp_tunnel.dstport_16}  AuxVars[]  AssignedVars[hdr.udp_tunnel.dstport] 278#L559_T0_inittrue [1732] L559_T0_init-->L560_T0_init: Formula: (and (< v_hdr.udp_tunnel.dstport_17 65536) (<= 0 v_hdr.udp_tunnel.dstport_17))  InVars {hdr.udp_tunnel.dstport=v_hdr.udp_tunnel.dstport_17}  OutVars{hdr.udp_tunnel.dstport=v_hdr.udp_tunnel.dstport_17}  AuxVars[]  AssignedVars[] 565#L560_T0_inittrue [2022] L560_T0_init-->L561_T0_init: Formula: true  InVars {}  OutVars{hdr.udp_tunnel.userlength=v_hdr.udp_tunnel.userlength_15}  AuxVars[]  AssignedVars[hdr.udp_tunnel.userlength] 211#L561_T0_inittrue [1672] L561_T0_init-->L562_T0_init: Formula: (and (<= 0 v_hdr.udp_tunnel.userlength_14) (< v_hdr.udp_tunnel.userlength_14 65536))  InVars {hdr.udp_tunnel.userlength=v_hdr.udp_tunnel.userlength_14}  OutVars{hdr.udp_tunnel.userlength=v_hdr.udp_tunnel.userlength_14}  AuxVars[]  AssignedVars[] 100#L562_T0_inittrue [1557] L562_T0_init-->L563_T0_init: Formula: true  InVars {}  OutVars{hdr.udp_tunnel.checksum=v_hdr.udp_tunnel.checksum_16}  AuxVars[]  AssignedVars[hdr.udp_tunnel.checksum] 530#L563_T0_inittrue [1987] L563_T0_init-->havocProcedureFINAL_T0_init: Formula: (and (<= 0 v_hdr.udp_tunnel.checksum_15) (< v_hdr.udp_tunnel.checksum_15 65536))  InVars {hdr.udp_tunnel.checksum=v_hdr.udp_tunnel.checksum_15}  OutVars{hdr.udp_tunnel.checksum=v_hdr.udp_tunnel.checksum_15}  AuxVars[]  AssignedVars[] 768#havocProcedureFINAL_T0_inittrue [2225] havocProcedureFINAL_T0_init-->havocProcedureEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 126#havocProcedureEXIT_T0_inittrue >[2321] havocProcedureEXIT_T0_init-->L568-D56: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 439#L568-D56true [1897] L568-D56-->L568_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 593#L568_T0_inittrue [2049] L568_T0_init-->L568_T0_init-D50: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 548#L568_T0_init-D50true [2006] L568_T0_init-D50-->_parser_MyParserENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 159#_parser_MyParserENTRY_T0_inittrue [1616] _parser_MyParserENTRY_T0_init-->_parser_MyParserENTRY_T0_init-D18: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 112#_parser_MyParserENTRY_T0_init-D18true [1570] _parser_MyParserENTRY_T0_init-D18-->startENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 576#startENTRY_T0_inittrue [2032] startENTRY_T0_init-->L736_T0_init: Formula: v_hdr.ethernet.valid_16  InVars {}  OutVars{hdr.ethernet.valid=v_hdr.ethernet.valid_16}  AuxVars[]  AssignedVars[hdr.ethernet.valid] 666#L736_T0_inittrue [2125] L736_T0_init-->L739_T0_init: Formula: (not (= v_hdr.ethernet.etherType_37 34525))  InVars {hdr.ethernet.etherType=v_hdr.ethernet.etherType_37}  OutVars{hdr.ethernet.etherType=v_hdr.ethernet.etherType_37}  AuxVars[]  AssignedVars[] 80#L739_T0_inittrue [1536] L739_T0_init-->L739-1_T0_init: Formula: (not (= v_hdr.ethernet.etherType_33 2048))  InVars {hdr.ethernet.etherType=v_hdr.ethernet.etherType_33}  OutVars{hdr.ethernet.etherType=v_hdr.ethernet.etherType_33}  AuxVars[]  AssignedVars[] 656#L739-1_T0_inittrue [2115] L739-1_T0_init-->startEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 157#startEXIT_T0_inittrue >[2288] startEXIT_T0_init-->_parser_MyParserFINAL-D66: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 208#_parser_MyParserFINAL-D66true [1668] _parser_MyParserFINAL-D66-->_parser_MyParserFINAL_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 550#_parser_MyParserFINAL_T0_inittrue [2008] _parser_MyParserFINAL_T0_init-->_parser_MyParserEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 664#_parser_MyParserEXIT_T0_inittrue >[2306] _parser_MyParserEXIT_T0_init-->L569-D104: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 671#L569-D104true [2130] L569-D104-->L569_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 358#L569_T0_inittrue [1812] L569_T0_init-->L569_T0_init-D52: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 389#L569_T0_init-D52true [1845] L569_T0_init-D52-->MyVerifyChecksumFINAL_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 480#MyVerifyChecksumFINAL_T0_inittrue [1936] MyVerifyChecksumFINAL_T0_init-->MyVerifyChecksumEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 469#MyVerifyChecksumEXIT_T0_inittrue >[2382] MyVerifyChecksumEXIT_T0_init-->L570-D74: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 398#L570-D74true [1855] L570-D74-->L570_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 9#L570_T0_inittrue [1464] L570_T0_init-->L570_T0_init-D14: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 795#L570_T0_init-D14true [2250] L570_T0_init-D14-->MyIngressENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 209#MyIngressENTRY_T0_inittrue [1669] MyIngressENTRY_T0_init-->L259_T0_init: Formula: (= v_standard_metadata.ingress_port_20 0)  InVars {standard_metadata.ingress_port=v_standard_metadata.ingress_port_20}  OutVars{standard_metadata.ingress_port=v_standard_metadata.ingress_port_20}  AuxVars[]  AssignedVars[] 377#L259_T0_inittrue [1835] L259_T0_init-->L266_T0_init: Formula: (not (= v_hdr.ipv4.dstAddr_19 2071690107))  InVars {hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_19}  OutVars{hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_19}  AuxVars[]  AssignedVars[] 634#L266_T0_inittrue [2092] L266_T0_init-->L258_T0_init: Formula: (or (= v_hdr.ethernet.srcAddr_31 0) (= 281474976710655 v_hdr.ethernet.dstAddr_40))  InVars {hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_31, hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_40}  OutVars{hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_31, hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_40}  AuxVars[]  AssignedVars[] 789#L258_T0_inittrue [2245] L258_T0_init-->MyIngressEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 238#MyIngressEXIT_T0_inittrue >[2333] MyIngressEXIT_T0_init-->L571-D108: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 632#L571-D108true [2089] L571-D108-->L571_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 504#L571_T0_inittrue [1962] L571_T0_init-->L571_T0_init-D8: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 557#L571_T0_init-D8true [2016] L571_T0_init-D8-->MyEgressENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 190#MyEgressENTRY_T0_inittrue [1650] MyEgressENTRY_T0_init-->L249_T0_init: Formula: (or (not v_hdr.tcp.valid_34) (not (= 0 v_standard_metadata.egress_port_34)))  InVars {standard_metadata.egress_port=v_standard_metadata.egress_port_34, hdr.tcp.valid=v_hdr.tcp.valid_34}  OutVars{standard_metadata.egress_port=v_standard_metadata.egress_port_34, hdr.tcp.valid=v_hdr.tcp.valid_34}  AuxVars[]  AssignedVars[] 193#L249_T0_inittrue [1652] L249_T0_init-->MyEgressEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 573#MyEgressEXIT_T0_inittrue >[2347] MyEgressEXIT_T0_init-->L572-D90: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 337#L572-D90true [1791] L572-D90-->L572_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 11#L572_T0_inittrue [1466] L572_T0_init-->L572_T0_init-D22: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 430#L572_T0_init-D22true [1889] L572_T0_init-D22-->MyComputeChecksumFINAL_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 522#MyComputeChecksumFINAL_T0_inittrue [1980] MyComputeChecksumFINAL_T0_init-->MyComputeChecksumEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 216#MyComputeChecksumEXIT_T0_inittrue >[2361] MyComputeChecksumEXIT_T0_init-->L573-D110: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 401#L573-D110true [1858] L573-D110-->L573_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 279#L573_T0_inittrue [1734] L573_T0_init-->L574-1_T0_init: Formula: v_forward_30  InVars {forward=v_forward_30}  OutVars{forward=v_forward_30}  AuxVars[]  AssignedVars[] 653#L574-1_T0_inittrue [2112] L574-1_T0_init-->L578_T0_init: Formula: (let ((.cse0 (= v__old_hdr.ethernet.srcAddr_14 0))) (or (and v__p4ltl_0_6 (not .cse0)) (and (not v__p4ltl_0_6) .cse0)))  InVars {_old_hdr.ethernet.srcAddr=v__old_hdr.ethernet.srcAddr_14}  OutVars{_p4ltl_0=v__p4ltl_0_6, _old_hdr.ethernet.srcAddr=v__old_hdr.ethernet.srcAddr_14}  AuxVars[]  AssignedVars[_p4ltl_0] 813#L578_T0_inittrue [2269] L578_T0_init-->L579_T0_init: Formula: (let ((.cse0 (= 2071690107 v__old_hdr.ipv4.dstAddr_14))) (or (and v__p4ltl_1_6 (not .cse0)) (and .cse0 (not v__p4ltl_1_6))))  InVars {_old_hdr.ipv4.dstAddr=v__old_hdr.ipv4.dstAddr_14}  OutVars{_old_hdr.ipv4.dstAddr=v__old_hdr.ipv4.dstAddr_14, _p4ltl_1=v__p4ltl_1_6}  AuxVars[]  AssignedVars[_p4ltl_1] 741#L579_T0_inittrue [2198] L579_T0_init-->L580_T0_init: Formula: (let ((.cse0 (= 281474976710655 v__old_hdr.ethernet.dstAddr_14))) (or (and v__p4ltl_2_6 (not .cse0)) (and .cse0 (not v__p4ltl_2_6))))  InVars {_old_hdr.ethernet.dstAddr=v__old_hdr.ethernet.dstAddr_14}  OutVars{_p4ltl_2=v__p4ltl_2_6, _old_hdr.ethernet.dstAddr=v__old_hdr.ethernet.dstAddr_14}  AuxVars[]  AssignedVars[_p4ltl_2] 555#L580_T0_inittrue [2013] L580_T0_init-->mainFINAL_T0_init: Formula: (let ((.cse0 (= v_standard_metadata.ingress_port_23 0))) (or (and v__p4ltl_3_7 .cse0) (and (not .cse0) (not v__p4ltl_3_7))))  InVars {standard_metadata.ingress_port=v_standard_metadata.ingress_port_23}  OutVars{standard_metadata.ingress_port=v_standard_metadata.ingress_port_23, _p4ltl_3=v__p4ltl_3_7}  AuxVars[]  AssignedVars[_p4ltl_3] 606#mainFINAL_T0_inittrue [2061] mainFINAL_T0_init-->mainEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 621#mainEXIT_T0_inittrue >[2285] mainEXIT_T0_init-->L586-1-D72: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 517#L586-1-D72true [1975] L586-1-D72-->L586-1_accept_S1: Formula: (and v__p4ltl_1_9 v__p4ltl_0_9 v__p4ltl_3_9 v__p4ltl_2_9 (or (not v__p4ltl_3_9) (not v__p4ltl_1_9) (= 1 v_standard_metadata.egress_port_30) (not v__p4ltl_2_9) (not v__p4ltl_0_9)))  InVars {_p4ltl_2=v__p4ltl_2_9, standard_metadata.egress_port=v_standard_metadata.egress_port_30, _p4ltl_3=v__p4ltl_3_9, _p4ltl_0=v__p4ltl_0_9, _p4ltl_1=v__p4ltl_1_9}  OutVars{_p4ltl_2=v__p4ltl_2_9, standard_metadata.egress_port=v_standard_metadata.egress_port_30, _p4ltl_3=v__p4ltl_3_9, _p4ltl_0=v__p4ltl_0_9, _p4ltl_1=v__p4ltl_1_9}  AuxVars[]  AssignedVars[] 110#L586-1_accept_S1true 
[2023-02-07 04:58:46,964 INFO  L754   eck$LassoCheckResult]: Loop: 110#L586-1_accept_S1true [1566] L586-1_accept_S1-->L586_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 466#L586_accept_S1true [1923] L586_accept_S1-->L586_accept_S1-D19: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 177#L586_accept_S1-D19true [1634] L586_accept_S1-D19-->mainENTRY_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 581#mainENTRY_accept_S1true [2037] mainENTRY_accept_S1-->mainENTRY_accept_S1-D37: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 451#mainENTRY_accept_S1-D37true [1909] mainENTRY_accept_S1-D37-->havocProcedureENTRY_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 689#havocProcedureENTRY_accept_S1true [2146] havocProcedureENTRY_accept_S1-->L421_accept_S1: Formula: (not v_drop_11)  InVars {}  OutVars{drop=v_drop_11}  AuxVars[]  AssignedVars[drop] 545#L421_accept_S1true [2003] L421_accept_S1-->L422_accept_S1: Formula: (not v_forward_18)  InVars {}  OutVars{forward=v_forward_18}  AuxVars[]  AssignedVars[forward] 553#L422_accept_S1true [2011] L422_accept_S1-->L423_accept_S1: Formula: true  InVars {}  OutVars{standard_metadata.ingress_port=v_standard_metadata.ingress_port_14}  AuxVars[]  AssignedVars[standard_metadata.ingress_port] 15#L423_accept_S1true [1469] L423_accept_S1-->L424_accept_S1: Formula: (and (<= 0 v_standard_metadata.ingress_port_17) (< v_standard_metadata.ingress_port_17 512))  InVars {standard_metadata.ingress_port=v_standard_metadata.ingress_port_17}  OutVars{standard_metadata.ingress_port=v_standard_metadata.ingress_port_17}  AuxVars[]  AssignedVars[] 272#L424_accept_S1true [1727] L424_accept_S1-->L425_accept_S1: Formula: (= v_standard_metadata.egress_spec_15 0)  InVars {}  OutVars{standard_metadata.egress_spec=v_standard_metadata.egress_spec_15}  AuxVars[]  AssignedVars[standard_metadata.egress_spec] 217#L425_accept_S1true [1677] L425_accept_S1-->L426_accept_S1: Formula: (= 0 v_standard_metadata.egress_port_17)  InVars {}  OutVars{standard_metadata.egress_port=v_standard_metadata.egress_port_17}  AuxVars[]  AssignedVars[standard_metadata.egress_port] 404#L426_accept_S1true [1861] L426_accept_S1-->L427_accept_S1: Formula: true  InVars {}  OutVars{standard_metadata.instance_type=v_standard_metadata.instance_type_12}  AuxVars[]  AssignedVars[standard_metadata.instance_type] 290#L427_accept_S1true [1745] L427_accept_S1-->L428_accept_S1: Formula: (and (<= 0 v_standard_metadata.instance_type_9) (< v_standard_metadata.instance_type_9 4294967296))  InVars {standard_metadata.instance_type=v_standard_metadata.instance_type_9}  OutVars{standard_metadata.instance_type=v_standard_metadata.instance_type_9}  AuxVars[]  AssignedVars[] 215#L428_accept_S1true [1676] L428_accept_S1-->L429_accept_S1: Formula: true  InVars {}  OutVars{standard_metadata.packet_length=v_standard_metadata.packet_length_10}  AuxVars[]  AssignedVars[standard_metadata.packet_length] 696#L429_accept_S1true [2152] L429_accept_S1-->L430_accept_S1: Formula: (and (< v_standard_metadata.packet_length_9 4294967296) (<= 0 v_standard_metadata.packet_length_9))  InVars {standard_metadata.packet_length=v_standard_metadata.packet_length_9}  OutVars{standard_metadata.packet_length=v_standard_metadata.packet_length_9}  AuxVars[]  AssignedVars[] 715#L430_accept_S1true [2171] L430_accept_S1-->L431_accept_S1: Formula: true  InVars {}  OutVars{standard_metadata.enq_timestamp=v_standard_metadata.enq_timestamp_12}  AuxVars[]  AssignedVars[standard_metadata.enq_timestamp] 153#L431_accept_S1true [1612] L431_accept_S1-->L432_accept_S1: Formula: (and (< v_standard_metadata.enq_timestamp_11 4294967296) (<= 0 v_standard_metadata.enq_timestamp_11))  InVars {standard_metadata.enq_timestamp=v_standard_metadata.enq_timestamp_11}  OutVars{standard_metadata.enq_timestamp=v_standard_metadata.enq_timestamp_11}  AuxVars[]  AssignedVars[] 2#L432_accept_S1true [1456] L432_accept_S1-->L433_accept_S1: Formula: (= v_standard_metadata.enq_qdepth_8 0)  InVars {}  OutVars{standard_metadata.enq_qdepth=v_standard_metadata.enq_qdepth_8}  AuxVars[]  AssignedVars[standard_metadata.enq_qdepth] 746#L433_accept_S1true [2203] L433_accept_S1-->L434_accept_S1: Formula: true  InVars {}  OutVars{standard_metadata.deq_timedelta=v_standard_metadata.deq_timedelta_9}  AuxVars[]  AssignedVars[standard_metadata.deq_timedelta] 624#L434_accept_S1true [2080] L434_accept_S1-->L435_accept_S1: Formula: (and (< v_standard_metadata.deq_timedelta_10 4294967296) (<= 0 v_standard_metadata.deq_timedelta_10))  InVars {standard_metadata.deq_timedelta=v_standard_metadata.deq_timedelta_10}  OutVars{standard_metadata.deq_timedelta=v_standard_metadata.deq_timedelta_10}  AuxVars[]  AssignedVars[] 369#L435_accept_S1true [1824] L435_accept_S1-->L436_accept_S1: Formula: true  InVars {}  OutVars{standard_metadata.deq_qdepth=v_standard_metadata.deq_qdepth_12}  AuxVars[]  AssignedVars[standard_metadata.deq_qdepth] 449#L436_accept_S1true [1907] L436_accept_S1-->L437_accept_S1: Formula: (and (< v_standard_metadata.deq_qdepth_9 524288) (<= 0 v_standard_metadata.deq_qdepth_9))  InVars {standard_metadata.deq_qdepth=v_standard_metadata.deq_qdepth_9}  OutVars{standard_metadata.deq_qdepth=v_standard_metadata.deq_qdepth_9}  AuxVars[]  AssignedVars[] 309#L437_accept_S1true [1764] L437_accept_S1-->L438_accept_S1: Formula: true  InVars {}  OutVars{standard_metadata.ingress_global_timestamp=v_standard_metadata.ingress_global_timestamp_10}  AuxVars[]  AssignedVars[standard_metadata.ingress_global_timestamp] 411#L438_accept_S1true [1869] L438_accept_S1-->L439_accept_S1: Formula: (and (<= 0 v_standard_metadata.ingress_global_timestamp_9) (< v_standard_metadata.ingress_global_timestamp_9 281474976710656))  InVars {standard_metadata.ingress_global_timestamp=v_standard_metadata.ingress_global_timestamp_9}  OutVars{standard_metadata.ingress_global_timestamp=v_standard_metadata.ingress_global_timestamp_9}  AuxVars[]  AssignedVars[] 474#L439_accept_S1true [1930] L439_accept_S1-->L440_accept_S1: Formula: true  InVars {}  OutVars{standard_metadata.egress_global_timestamp=v_standard_metadata.egress_global_timestamp_9}  AuxVars[]  AssignedVars[standard_metadata.egress_global_timestamp] 149#L440_accept_S1true [1607] L440_accept_S1-->L441_accept_S1: Formula: (and (< v_standard_metadata.egress_global_timestamp_10 281474976710656) (<= 0 v_standard_metadata.egress_global_timestamp_10))  InVars {standard_metadata.egress_global_timestamp=v_standard_metadata.egress_global_timestamp_10}  OutVars{standard_metadata.egress_global_timestamp=v_standard_metadata.egress_global_timestamp_10}  AuxVars[]  AssignedVars[] 613#L441_accept_S1true [2068] L441_accept_S1-->L442_accept_S1: Formula: (= 0 v_standard_metadata.mcast_grp_9)  InVars {}  OutVars{standard_metadata.mcast_grp=v_standard_metadata.mcast_grp_9}  AuxVars[]  AssignedVars[standard_metadata.mcast_grp] 241#L442_accept_S1true [1699] L442_accept_S1-->L443_accept_S1: Formula: (= v_standard_metadata.egress_rid_8 0)  InVars {}  OutVars{standard_metadata.egress_rid=v_standard_metadata.egress_rid_8}  AuxVars[]  AssignedVars[standard_metadata.egress_rid] 752#L443_accept_S1true [2210] L443_accept_S1-->L444_accept_S1: Formula: (= v_standard_metadata.checksum_error_9 0)  InVars {}  OutVars{standard_metadata.checksum_error=v_standard_metadata.checksum_error_9}  AuxVars[]  AssignedVars[standard_metadata.checksum_error] 145#L444_accept_S1true [1603] L444_accept_S1-->L445_accept_S1: Formula: (= v_standard_metadata.parser_error_8 0)  InVars {}  OutVars{standard_metadata.parser_error=v_standard_metadata.parser_error_8}  AuxVars[]  AssignedVars[standard_metadata.parser_error] 754#L445_accept_S1true [2211] L445_accept_S1-->L446_accept_S1: Formula: (= v_standard_metadata.priority_8 0)  InVars {}  OutVars{standard_metadata.priority=v_standard_metadata.priority_8}  AuxVars[]  AssignedVars[standard_metadata.priority] 218#L446_accept_S1true [1678] L446_accept_S1-->L447_accept_S1: Formula: (not v_hdr.ethernet.valid_14)  InVars {}  OutVars{hdr.ethernet.valid=v_hdr.ethernet.valid_14}  AuxVars[]  AssignedVars[hdr.ethernet.valid] 713#L447_accept_S1true [2169] L447_accept_S1-->L448_accept_S1: Formula: (= v_emit_29 (store v_emit_30 v_hdr.ethernet_2 false))  InVars {emit=v_emit_30, hdr.ethernet=v_hdr.ethernet_2}  OutVars{emit=v_emit_29, hdr.ethernet=v_hdr.ethernet_2}  AuxVars[]  AssignedVars[emit] 471#L448_accept_S1true [1927] L448_accept_S1-->L449_accept_S1: Formula: true  InVars {}  OutVars{hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_25}  AuxVars[]  AssignedVars[hdr.ethernet.dstAddr] 461#L449_accept_S1true [1918] L449_accept_S1-->L450_accept_S1: Formula: (= v_hdr.ethernet.dstAddr_28 v__old_hdr.ethernet.dstAddr_11)  InVars {hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_28}  OutVars{_old_hdr.ethernet.dstAddr=v__old_hdr.ethernet.dstAddr_11, hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_28}  AuxVars[]  AssignedVars[_old_hdr.ethernet.dstAddr] 652#L450_accept_S1true [2111] L450_accept_S1-->L451_accept_S1: Formula: (= v_hdr.ethernet.dstAddr_26 v__old_hdr.ethernet.dstAddr_10)  InVars {hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_26}  OutVars{_old_hdr.ethernet.dstAddr=v__old_hdr.ethernet.dstAddr_10, hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_26}  AuxVars[]  AssignedVars[_old_hdr.ethernet.dstAddr] 13#L451_accept_S1true [1467] L451_accept_S1-->L452_accept_S1: Formula: true  InVars {}  OutVars{hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_26}  AuxVars[]  AssignedVars[hdr.ethernet.srcAddr] 196#L452_accept_S1true [1655] L452_accept_S1-->L453_accept_S1: Formula: (= v_hdr.ethernet.srcAddr_23 v__old_hdr.ethernet.srcAddr_10)  InVars {hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_23}  OutVars{hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_23, _old_hdr.ethernet.srcAddr=v__old_hdr.ethernet.srcAddr_10}  AuxVars[]  AssignedVars[_old_hdr.ethernet.srcAddr] 720#L453_accept_S1true [2176] L453_accept_S1-->L454_accept_S1: Formula: (= v_hdr.ethernet.srcAddr_24 v__old_hdr.ethernet.srcAddr_11)  InVars {hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_24}  OutVars{hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_24, _old_hdr.ethernet.srcAddr=v__old_hdr.ethernet.srcAddr_11}  AuxVars[]  AssignedVars[_old_hdr.ethernet.srcAddr] 780#L454_accept_S1true [2235] L454_accept_S1-->L455_accept_S1: Formula: true  InVars {}  OutVars{hdr.ethernet.etherType=v_hdr.ethernet.etherType_22}  AuxVars[]  AssignedVars[hdr.ethernet.etherType] 800#L455_accept_S1true [2254] L455_accept_S1-->L456_accept_S1: Formula: (and (<= 0 v_hdr.ethernet.etherType_23) (< v_hdr.ethernet.etherType_23 65536))  InVars {hdr.ethernet.etherType=v_hdr.ethernet.etherType_23}  OutVars{hdr.ethernet.etherType=v_hdr.ethernet.etherType_23}  AuxVars[]  AssignedVars[] 291#L456_accept_S1true [1746] L456_accept_S1-->L457_accept_S1: Formula: (not v_hdr.ipv6.valid_18)  InVars {}  OutVars{hdr.ipv6.valid=v_hdr.ipv6.valid_18}  AuxVars[]  AssignedVars[hdr.ipv6.valid] 230#L457_accept_S1true [1687] L457_accept_S1-->L458_accept_S1: Formula: (= v_emit_23 (store v_emit_24 v_hdr.ipv6_9 false))  InVars {emit=v_emit_24, hdr.ipv6=v_hdr.ipv6_9}  OutVars{emit=v_emit_23, hdr.ipv6=v_hdr.ipv6_9}  AuxVars[]  AssignedVars[emit] 567#L458_accept_S1true [2024] L458_accept_S1-->L459_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv6.version=v_hdr.ipv6.version_19}  AuxVars[]  AssignedVars[hdr.ipv6.version] 646#L459_accept_S1true [2104] L459_accept_S1-->L460_accept_S1: Formula: (and (< v_hdr.ipv6.version_20 16) (<= 0 v_hdr.ipv6.version_20))  InVars {hdr.ipv6.version=v_hdr.ipv6.version_20}  OutVars{hdr.ipv6.version=v_hdr.ipv6.version_20}  AuxVars[]  AssignedVars[] 487#L460_accept_S1true [1943] L460_accept_S1-->L461_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv6.trafclass=v_hdr.ipv6.trafclass_9}  AuxVars[]  AssignedVars[hdr.ipv6.trafclass] 50#L461_accept_S1true [1505] L461_accept_S1-->L462_accept_S1: Formula: (and (<= 0 v_hdr.ipv6.trafclass_10) (< v_hdr.ipv6.trafclass_10 256))  InVars {hdr.ipv6.trafclass=v_hdr.ipv6.trafclass_10}  OutVars{hdr.ipv6.trafclass=v_hdr.ipv6.trafclass_10}  AuxVars[]  AssignedVars[] 633#L462_accept_S1true [2090] L462_accept_S1-->L463_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv6.flowlabel=v_hdr.ipv6.flowlabel_11}  AuxVars[]  AssignedVars[hdr.ipv6.flowlabel] 23#L463_accept_S1true [1478] L463_accept_S1-->L464_accept_S1: Formula: (and (< v_hdr.ipv6.flowlabel_10 1048576) (<= 0 v_hdr.ipv6.flowlabel_10))  InVars {hdr.ipv6.flowlabel=v_hdr.ipv6.flowlabel_10}  OutVars{hdr.ipv6.flowlabel=v_hdr.ipv6.flowlabel_10}  AuxVars[]  AssignedVars[] 119#L464_accept_S1true [1577] L464_accept_S1-->L465_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv6.payloadlen=v_hdr.ipv6.payloadlen_19}  AuxVars[]  AssignedVars[hdr.ipv6.payloadlen] 637#L465_accept_S1true [2096] L465_accept_S1-->L466_accept_S1: Formula: (and (< v_hdr.ipv6.payloadlen_17 65536) (<= 0 v_hdr.ipv6.payloadlen_17))  InVars {hdr.ipv6.payloadlen=v_hdr.ipv6.payloadlen_17}  OutVars{hdr.ipv6.payloadlen=v_hdr.ipv6.payloadlen_17}  AuxVars[]  AssignedVars[] 440#L466_accept_S1true [1898] L466_accept_S1-->L467_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv6.nextheader=v_hdr.ipv6.nextheader_21}  AuxVars[]  AssignedVars[hdr.ipv6.nextheader] 48#L467_accept_S1true [1503] L467_accept_S1-->L468_accept_S1: Formula: (and (< v_hdr.ipv6.nextheader_20 256) (<= 0 v_hdr.ipv6.nextheader_20))  InVars {hdr.ipv6.nextheader=v_hdr.ipv6.nextheader_20}  OutVars{hdr.ipv6.nextheader=v_hdr.ipv6.nextheader_20}  AuxVars[]  AssignedVars[] 763#L468_accept_S1true [2222] L468_accept_S1-->L469_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv6.hoplimit=v_hdr.ipv6.hoplimit_17}  AuxVars[]  AssignedVars[hdr.ipv6.hoplimit] 234#L469_accept_S1true [1692] L469_accept_S1-->L470_accept_S1: Formula: (and (<= 0 v_hdr.ipv6.hoplimit_20) (< v_hdr.ipv6.hoplimit_20 256))  InVars {hdr.ipv6.hoplimit=v_hdr.ipv6.hoplimit_20}  OutVars{hdr.ipv6.hoplimit=v_hdr.ipv6.hoplimit_20}  AuxVars[]  AssignedVars[] 235#L470_accept_S1true [1695] L470_accept_S1-->L471_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv6.srcAddr=v_hdr.ipv6.srcAddr_17}  AuxVars[]  AssignedVars[hdr.ipv6.srcAddr] 408#L471_accept_S1true [1865] L471_accept_S1-->L472_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv6.dstAddr=v_hdr.ipv6.dstAddr_17}  AuxVars[]  AssignedVars[hdr.ipv6.dstAddr] 786#L472_accept_S1true [2241] L472_accept_S1-->L473_accept_S1: Formula: (not v_hdr.ipv4_tunnel.valid_20)  InVars {}  OutVars{hdr.ipv4_tunnel.valid=v_hdr.ipv4_tunnel.valid_20}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.valid] 197#L473_accept_S1true [1656] L473_accept_S1-->L474_accept_S1: Formula: (= v_emit_25 (store v_emit_26 v_hdr.ipv4_tunnel_8 false))  InVars {emit=v_emit_26, hdr.ipv4_tunnel=v_hdr.ipv4_tunnel_8}  OutVars{emit=v_emit_25, hdr.ipv4_tunnel=v_hdr.ipv4_tunnel_8}  AuxVars[]  AssignedVars[emit] 343#L474_accept_S1true [1796] L474_accept_S1-->L475_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.version=v_hdr.ipv4_tunnel.version_14}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.version] 630#L475_accept_S1true [2086] L475_accept_S1-->L476_accept_S1: Formula: (and (<= 0 v_hdr.ipv4_tunnel.version_15) (< v_hdr.ipv4_tunnel.version_15 16))  InVars {hdr.ipv4_tunnel.version=v_hdr.ipv4_tunnel.version_15}  OutVars{hdr.ipv4_tunnel.version=v_hdr.ipv4_tunnel.version_15}  AuxVars[]  AssignedVars[] 117#L476_accept_S1true [1575] L476_accept_S1-->L477_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.ihl=v_hdr.ipv4_tunnel.ihl_16}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.ihl] 223#L477_accept_S1true [1683] L477_accept_S1-->L478_accept_S1: Formula: (and (<= 0 v_hdr.ipv4_tunnel.ihl_15) (< v_hdr.ipv4_tunnel.ihl_15 16))  InVars {hdr.ipv4_tunnel.ihl=v_hdr.ipv4_tunnel.ihl_15}  OutVars{hdr.ipv4_tunnel.ihl=v_hdr.ipv4_tunnel.ihl_15}  AuxVars[]  AssignedVars[] 116#L478_accept_S1true [1574] L478_accept_S1-->L479_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.diffserv=v_hdr.ipv4_tunnel.diffserv_17}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.diffserv] 14#L479_accept_S1true [1468] L479_accept_S1-->L480_accept_S1: Formula: (and (< v_hdr.ipv4_tunnel.diffserv_16 256) (<= 0 v_hdr.ipv4_tunnel.diffserv_16))  InVars {hdr.ipv4_tunnel.diffserv=v_hdr.ipv4_tunnel.diffserv_16}  OutVars{hdr.ipv4_tunnel.diffserv=v_hdr.ipv4_tunnel.diffserv_16}  AuxVars[]  AssignedVars[] 676#L480_accept_S1true [2136] L480_accept_S1-->L481_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.totalLen=v_hdr.ipv4_tunnel.totalLen_15}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.totalLen] 93#L481_accept_S1true [1550] L481_accept_S1-->L482_accept_S1: Formula: (and (< v_hdr.ipv4_tunnel.totalLen_16 65536) (<= 0 v_hdr.ipv4_tunnel.totalLen_16))  InVars {hdr.ipv4_tunnel.totalLen=v_hdr.ipv4_tunnel.totalLen_16}  OutVars{hdr.ipv4_tunnel.totalLen=v_hdr.ipv4_tunnel.totalLen_16}  AuxVars[]  AssignedVars[] 68#L482_accept_S1true [1523] L482_accept_S1-->L483_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.identification=v_hdr.ipv4_tunnel.identification_14}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.identification] 674#L483_accept_S1true [2134] L483_accept_S1-->L484_accept_S1: Formula: (and (< v_hdr.ipv4_tunnel.identification_16 65536) (<= 0 v_hdr.ipv4_tunnel.identification_16))  InVars {hdr.ipv4_tunnel.identification=v_hdr.ipv4_tunnel.identification_16}  OutVars{hdr.ipv4_tunnel.identification=v_hdr.ipv4_tunnel.identification_16}  AuxVars[]  AssignedVars[] 726#L484_accept_S1true [2184] L484_accept_S1-->L485_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.flags=v_hdr.ipv4_tunnel.flags_17}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.flags] 435#L485_accept_S1true [1893] L485_accept_S1-->L486_accept_S1: Formula: (and (<= 0 v_hdr.ipv4_tunnel.flags_14) (< v_hdr.ipv4_tunnel.flags_14 8))  InVars {hdr.ipv4_tunnel.flags=v_hdr.ipv4_tunnel.flags_14}  OutVars{hdr.ipv4_tunnel.flags=v_hdr.ipv4_tunnel.flags_14}  AuxVars[]  AssignedVars[] 260#L486_accept_S1true [1715] L486_accept_S1-->L487_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.fragOffset=v_hdr.ipv4_tunnel.fragOffset_14}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.fragOffset] 174#L487_accept_S1true [1631] L487_accept_S1-->L488_accept_S1: Formula: (and (<= 0 v_hdr.ipv4_tunnel.fragOffset_15) (< v_hdr.ipv4_tunnel.fragOffset_15 8192))  InVars {hdr.ipv4_tunnel.fragOffset=v_hdr.ipv4_tunnel.fragOffset_15}  OutVars{hdr.ipv4_tunnel.fragOffset=v_hdr.ipv4_tunnel.fragOffset_15}  AuxVars[]  AssignedVars[] 311#L488_accept_S1true [1766] L488_accept_S1-->L489_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.ttl=v_hdr.ipv4_tunnel.ttl_17}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.ttl] 716#L489_accept_S1true [2172] L489_accept_S1-->L490_accept_S1: Formula: (and (< v_hdr.ipv4_tunnel.ttl_15 256) (<= 0 v_hdr.ipv4_tunnel.ttl_15))  InVars {hdr.ipv4_tunnel.ttl=v_hdr.ipv4_tunnel.ttl_15}  OutVars{hdr.ipv4_tunnel.ttl=v_hdr.ipv4_tunnel.ttl_15}  AuxVars[]  AssignedVars[] 747#L490_accept_S1true [2204] L490_accept_S1-->L491_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.protocol=v_hdr.ipv4_tunnel.protocol_19}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.protocol] 111#L491_accept_S1true [1569] L491_accept_S1-->L492_accept_S1: Formula: (and (<= 0 v_hdr.ipv4_tunnel.protocol_18) (< v_hdr.ipv4_tunnel.protocol_18 256))  InVars {hdr.ipv4_tunnel.protocol=v_hdr.ipv4_tunnel.protocol_18}  OutVars{hdr.ipv4_tunnel.protocol=v_hdr.ipv4_tunnel.protocol_18}  AuxVars[]  AssignedVars[] 541#L492_accept_S1true [1999] L492_accept_S1-->L493_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.hdrChecksum=v_hdr.ipv4_tunnel.hdrChecksum_9}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.hdrChecksum] 460#L493_accept_S1true [1917] L493_accept_S1-->L494_accept_S1: Formula: (and (<= 0 v_hdr.ipv4_tunnel.hdrChecksum_10) (< v_hdr.ipv4_tunnel.hdrChecksum_10 65536))  InVars {hdr.ipv4_tunnel.hdrChecksum=v_hdr.ipv4_tunnel.hdrChecksum_10}  OutVars{hdr.ipv4_tunnel.hdrChecksum=v_hdr.ipv4_tunnel.hdrChecksum_10}  AuxVars[]  AssignedVars[] 220#L494_accept_S1true [1679] L494_accept_S1-->L495_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.srcAddr=v_hdr.ipv4_tunnel.srcAddr_14}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.srcAddr] 132#L495_accept_S1true [1590] L495_accept_S1-->L496_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.dstAddr=v_hdr.ipv4_tunnel.dstAddr_14}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.dstAddr] 299#L496_accept_S1true [1755] L496_accept_S1-->L497_accept_S1: Formula: (not v_hdr.ipv4.valid_26)  InVars {}  OutVars{hdr.ipv4.valid=v_hdr.ipv4.valid_26}  AuxVars[]  AssignedVars[hdr.ipv4.valid] 803#L497_accept_S1true [2257] L497_accept_S1-->L498_accept_S1: Formula: (= v_emit_31 (store v_emit_32 v_hdr.ipv4_3 false))  InVars {hdr.ipv4=v_hdr.ipv4_3, emit=v_emit_32}  OutVars{hdr.ipv4=v_hdr.ipv4_3, emit=v_emit_31}  AuxVars[]  AssignedVars[emit] 572#L498_accept_S1true [2029] L498_accept_S1-->L499_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.version=v_hdr.ipv4.version_11}  AuxVars[]  AssignedVars[hdr.ipv4.version] 356#L499_accept_S1true [1809] L499_accept_S1-->L500_accept_S1: Formula: (and (< v_hdr.ipv4.version_12 16) (<= 0 v_hdr.ipv4.version_12))  InVars {hdr.ipv4.version=v_hdr.ipv4.version_12}  OutVars{hdr.ipv4.version=v_hdr.ipv4.version_12}  AuxVars[]  AssignedVars[] 307#L500_accept_S1true [1761] L500_accept_S1-->L501_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.ihl=v_hdr.ipv4.ihl_11}  AuxVars[]  AssignedVars[hdr.ipv4.ihl] 172#L501_accept_S1true [1629] L501_accept_S1-->L502_accept_S1: Formula: (and (<= 0 v_hdr.ipv4.ihl_12) (< v_hdr.ipv4.ihl_12 16))  InVars {hdr.ipv4.ihl=v_hdr.ipv4.ihl_12}  OutVars{hdr.ipv4.ihl=v_hdr.ipv4.ihl_12}  AuxVars[]  AssignedVars[] 711#L502_accept_S1true [2167] L502_accept_S1-->L503_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.diffserv=v_hdr.ipv4.diffserv_10}  AuxVars[]  AssignedVars[hdr.ipv4.diffserv] 735#L503_accept_S1true [2192] L503_accept_S1-->L504_accept_S1: Formula: (and (< v_hdr.ipv4.diffserv_11 256) (<= 0 v_hdr.ipv4.diffserv_11))  InVars {hdr.ipv4.diffserv=v_hdr.ipv4.diffserv_11}  OutVars{hdr.ipv4.diffserv=v_hdr.ipv4.diffserv_11}  AuxVars[]  AssignedVars[] 54#L504_accept_S1true [1508] L504_accept_S1-->L505_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.totalLen=v_hdr.ipv4.totalLen_16}  AuxVars[]  AssignedVars[hdr.ipv4.totalLen] 641#L505_accept_S1true [2099] L505_accept_S1-->L506_accept_S1: Formula: (and (<= 0 v_hdr.ipv4.totalLen_13) (< v_hdr.ipv4.totalLen_13 65536))  InVars {hdr.ipv4.totalLen=v_hdr.ipv4.totalLen_13}  OutVars{hdr.ipv4.totalLen=v_hdr.ipv4.totalLen_13}  AuxVars[]  AssignedVars[] 473#L506_accept_S1true [1929] L506_accept_S1-->L507_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.identification=v_hdr.ipv4.identification_13}  AuxVars[]  AssignedVars[hdr.ipv4.identification] 725#L507_accept_S1true [2182] L507_accept_S1-->L508_accept_S1: Formula: (and (<= 0 v_hdr.ipv4.identification_10) (< v_hdr.ipv4.identification_10 65536))  InVars {hdr.ipv4.identification=v_hdr.ipv4.identification_10}  OutVars{hdr.ipv4.identification=v_hdr.ipv4.identification_10}  AuxVars[]  AssignedVars[] 614#L508_accept_S1true [2069] L508_accept_S1-->L509_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.flags=v_hdr.ipv4.flags_12}  AuxVars[]  AssignedVars[hdr.ipv4.flags] 512#L509_accept_S1true [1969] L509_accept_S1-->L510_accept_S1: Formula: (and (< v_hdr.ipv4.flags_11 8) (<= 0 v_hdr.ipv4.flags_11))  InVars {hdr.ipv4.flags=v_hdr.ipv4.flags_11}  OutVars{hdr.ipv4.flags=v_hdr.ipv4.flags_11}  AuxVars[]  AssignedVars[] 811#L510_accept_S1true [2265] L510_accept_S1-->L511_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.fragOffset=v_hdr.ipv4.fragOffset_12}  AuxVars[]  AssignedVars[hdr.ipv4.fragOffset] 228#L511_accept_S1true [1685] L511_accept_S1-->L512_accept_S1: Formula: (and (<= 0 v_hdr.ipv4.fragOffset_13) (< v_hdr.ipv4.fragOffset_13 8192))  InVars {hdr.ipv4.fragOffset=v_hdr.ipv4.fragOffset_13}  OutVars{hdr.ipv4.fragOffset=v_hdr.ipv4.fragOffset_13}  AuxVars[]  AssignedVars[] 47#L512_accept_S1true [1502] L512_accept_S1-->L513_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.ttl=v_hdr.ipv4.ttl_12}  AuxVars[]  AssignedVars[hdr.ipv4.ttl] 10#L513_accept_S1true [1463] L513_accept_S1-->L514_accept_S1: Formula: (and (< v_hdr.ipv4.ttl_13 256) (<= 0 v_hdr.ipv4.ttl_13))  InVars {hdr.ipv4.ttl=v_hdr.ipv4.ttl_13}  OutVars{hdr.ipv4.ttl=v_hdr.ipv4.ttl_13}  AuxVars[]  AssignedVars[] 767#L514_accept_S1true [2224] L514_accept_S1-->L515_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.protocol=v_hdr.ipv4.protocol_13}  AuxVars[]  AssignedVars[hdr.ipv4.protocol] 87#L515_accept_S1true [1543] L515_accept_S1-->L516_accept_S1: Formula: (and (< v_hdr.ipv4.protocol_11 256) (<= 0 v_hdr.ipv4.protocol_11))  InVars {hdr.ipv4.protocol=v_hdr.ipv4.protocol_11}  OutVars{hdr.ipv4.protocol=v_hdr.ipv4.protocol_11}  AuxVars[]  AssignedVars[] 462#L516_accept_S1true [1919] L516_accept_S1-->L517_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.hdrChecksum=v_hdr.ipv4.hdrChecksum_12}  AuxVars[]  AssignedVars[hdr.ipv4.hdrChecksum] 268#L517_accept_S1true [1724] L517_accept_S1-->L518_accept_S1: Formula: (and (< v_hdr.ipv4.hdrChecksum_11 65536) (<= 0 v_hdr.ipv4.hdrChecksum_11))  InVars {hdr.ipv4.hdrChecksum=v_hdr.ipv4.hdrChecksum_11}  OutVars{hdr.ipv4.hdrChecksum=v_hdr.ipv4.hdrChecksum_11}  AuxVars[]  AssignedVars[] 114#L518_accept_S1true [1572] L518_accept_S1-->L519_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.srcAddr=v_hdr.ipv4.srcAddr_10}  AuxVars[]  AssignedVars[hdr.ipv4.srcAddr] 776#L519_accept_S1true [2232] L519_accept_S1-->L520_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_13}  AuxVars[]  AssignedVars[hdr.ipv4.dstAddr] 615#L520_accept_S1true [2070] L520_accept_S1-->L521_accept_S1: Formula: (= v_hdr.ipv4.dstAddr_15 v__old_hdr.ipv4.dstAddr_12)  InVars {hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_15}  OutVars{_old_hdr.ipv4.dstAddr=v__old_hdr.ipv4.dstAddr_12, hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_15}  AuxVars[]  AssignedVars[_old_hdr.ipv4.dstAddr] 353#L521_accept_S1true [1807] L521_accept_S1-->L522_accept_S1: Formula: (= v_hdr.ipv4.dstAddr_12 v__old_hdr.ipv4.dstAddr_10)  InVars {hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_12}  OutVars{_old_hdr.ipv4.dstAddr=v__old_hdr.ipv4.dstAddr_10, hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_12}  AuxVars[]  AssignedVars[_old_hdr.ipv4.dstAddr] 675#L522_accept_S1true [2135] L522_accept_S1-->L523_accept_S1: Formula: (not v_hdr.tcp.valid_29)  InVars {}  OutVars{hdr.tcp.valid=v_hdr.tcp.valid_29}  AuxVars[]  AssignedVars[hdr.tcp.valid] 394#L523_accept_S1true [1851] L523_accept_S1-->L524_accept_S1: Formula: (= v_emit_21 (store v_emit_22 v_hdr.tcp_2 false))  InVars {hdr.tcp=v_hdr.tcp_2, emit=v_emit_22}  OutVars{hdr.tcp=v_hdr.tcp_2, emit=v_emit_21}  AuxVars[]  AssignedVars[emit] 453#L524_accept_S1true [1911] L524_accept_S1-->L525_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.srcport=v_hdr.tcp.srcport_11}  AuxVars[]  AssignedVars[hdr.tcp.srcport] 118#L525_accept_S1true [1576] L525_accept_S1-->L526_accept_S1: Formula: (and (< v_hdr.tcp.srcport_9 65536) (<= 0 v_hdr.tcp.srcport_9))  InVars {hdr.tcp.srcport=v_hdr.tcp.srcport_9}  OutVars{hdr.tcp.srcport=v_hdr.tcp.srcport_9}  AuxVars[]  AssignedVars[] 58#L526_accept_S1true [1513] L526_accept_S1-->L527_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.dstport=v_hdr.tcp.dstport_12}  AuxVars[]  AssignedVars[hdr.tcp.dstport] 643#L527_accept_S1true [2101] L527_accept_S1-->L528_accept_S1: Formula: (and (<= 0 v_hdr.tcp.dstport_11) (< v_hdr.tcp.dstport_11 65536))  InVars {hdr.tcp.dstport=v_hdr.tcp.dstport_11}  OutVars{hdr.tcp.dstport=v_hdr.tcp.dstport_11}  AuxVars[]  AssignedVars[] 523#L528_accept_S1true [1979] L528_accept_S1-->L529_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.sequence=v_hdr.tcp.sequence_41}  AuxVars[]  AssignedVars[hdr.tcp.sequence] 374#L529_accept_S1true [1830] L529_accept_S1-->L530_accept_S1: Formula: (and (<= 0 v_hdr.tcp.sequence_42) (< v_hdr.tcp.sequence_42 4294967296))  InVars {hdr.tcp.sequence=v_hdr.tcp.sequence_42}  OutVars{hdr.tcp.sequence=v_hdr.tcp.sequence_42}  AuxVars[]  AssignedVars[] 628#L530_accept_S1true [2084] L530_accept_S1-->L531_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.ackseq=v_hdr.tcp.ackseq_44}  AuxVars[]  AssignedVars[hdr.tcp.ackseq] 592#L531_accept_S1true [2048] L531_accept_S1-->L532_accept_S1: Formula: (and (< v_hdr.tcp.ackseq_42 4294967296) (<= 0 v_hdr.tcp.ackseq_42))  InVars {hdr.tcp.ackseq=v_hdr.tcp.ackseq_42}  OutVars{hdr.tcp.ackseq=v_hdr.tcp.ackseq_42}  AuxVars[]  AssignedVars[] 629#L532_accept_S1true [2085] L532_accept_S1-->L533_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.headerlength=v_hdr.tcp.headerlength_12}  AuxVars[]  AssignedVars[hdr.tcp.headerlength] 454#L533_accept_S1true [1912] L533_accept_S1-->L534_accept_S1: Formula: (and (<= 0 v_hdr.tcp.headerlength_11) (< v_hdr.tcp.headerlength_11 16))  InVars {hdr.tcp.headerlength=v_hdr.tcp.headerlength_11}  OutVars{hdr.tcp.headerlength=v_hdr.tcp.headerlength_11}  AuxVars[]  AssignedVars[] 247#L534_accept_S1true [1704] L534_accept_S1-->L535_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.reservation=v_hdr.tcp.reservation_10}  AuxVars[]  AssignedVars[hdr.tcp.reservation] 585#L535_accept_S1true [2041] L535_accept_S1-->L536_accept_S1: Formula: (and (<= 0 v_hdr.tcp.reservation_12) (< v_hdr.tcp.reservation_12 64))  InVars {hdr.tcp.reservation=v_hdr.tcp.reservation_12}  OutVars{hdr.tcp.reservation=v_hdr.tcp.reservation_12}  AuxVars[]  AssignedVars[] 138#L536_accept_S1true [1596] L536_accept_S1-->L537_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.URG=v_hdr.tcp.URG_9}  AuxVars[]  AssignedVars[hdr.tcp.URG] 560#L537_accept_S1true [2017] L537_accept_S1-->L538_accept_S1: Formula: (and (< v_hdr.tcp.URG_12 2) (<= 0 v_hdr.tcp.URG_12))  InVars {hdr.tcp.URG=v_hdr.tcp.URG_12}  OutVars{hdr.tcp.URG=v_hdr.tcp.URG_12}  AuxVars[]  AssignedVars[] 484#L538_accept_S1true [1940] L538_accept_S1-->L539_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.ACK=v_hdr.tcp.ACK_12}  AuxVars[]  AssignedVars[hdr.tcp.ACK] 622#L539_accept_S1true [2076] L539_accept_S1-->L540_accept_S1: Formula: (and (<= 0 v_hdr.tcp.ACK_10) (< v_hdr.tcp.ACK_10 2))  InVars {hdr.tcp.ACK=v_hdr.tcp.ACK_10}  OutVars{hdr.tcp.ACK=v_hdr.tcp.ACK_10}  AuxVars[]  AssignedVars[] 171#L540_accept_S1true [1628] L540_accept_S1-->L541_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.PSH=v_hdr.tcp.PSH_9}  AuxVars[]  AssignedVars[hdr.tcp.PSH] 232#L541_accept_S1true [1688] L541_accept_S1-->L542_accept_S1: Formula: (and (< v_hdr.tcp.PSH_11 2) (<= 0 v_hdr.tcp.PSH_11))  InVars {hdr.tcp.PSH=v_hdr.tcp.PSH_11}  OutVars{hdr.tcp.PSH=v_hdr.tcp.PSH_11}  AuxVars[]  AssignedVars[] 574#L542_accept_S1true [2030] L542_accept_S1-->L543_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.RST=v_hdr.tcp.RST_9}  AuxVars[]  AssignedVars[hdr.tcp.RST] 37#L543_accept_S1true [1491] L543_accept_S1-->L544_accept_S1: Formula: (and (< v_hdr.tcp.RST_12 2) (<= 0 v_hdr.tcp.RST_12))  InVars {hdr.tcp.RST=v_hdr.tcp.RST_12}  OutVars{hdr.tcp.RST=v_hdr.tcp.RST_12}  AuxVars[]  AssignedVars[] 41#L544_accept_S1true [1496] L544_accept_S1-->L545_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.SYN=v_hdr.tcp.SYN_9}  AuxVars[]  AssignedVars[hdr.tcp.SYN] 607#L545_accept_S1true [2062] L545_accept_S1-->L546_accept_S1: Formula: (and (<= 0 v_hdr.tcp.SYN_10) (< v_hdr.tcp.SYN_10 2))  InVars {hdr.tcp.SYN=v_hdr.tcp.SYN_10}  OutVars{hdr.tcp.SYN=v_hdr.tcp.SYN_10}  AuxVars[]  AssignedVars[] 191#L546_accept_S1true [1648] L546_accept_S1-->L547_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.FIN=v_hdr.tcp.FIN_9}  AuxVars[]  AssignedVars[hdr.tcp.FIN] 687#L547_accept_S1true [2144] L547_accept_S1-->L548_accept_S1: Formula: (and (<= 0 v_hdr.tcp.FIN_10) (< v_hdr.tcp.FIN_10 2))  InVars {hdr.tcp.FIN=v_hdr.tcp.FIN_10}  OutVars{hdr.tcp.FIN=v_hdr.tcp.FIN_10}  AuxVars[]  AssignedVars[] 206#L548_accept_S1true [1666] L548_accept_S1-->L549_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.windowsize=v_hdr.tcp.windowsize_12}  AuxVars[]  AssignedVars[hdr.tcp.windowsize] 812#L549_accept_S1true [2267] L549_accept_S1-->L550_accept_S1: Formula: (and (< v_hdr.tcp.windowsize_11 65536) (<= 0 v_hdr.tcp.windowsize_11))  InVars {hdr.tcp.windowsize=v_hdr.tcp.windowsize_11}  OutVars{hdr.tcp.windowsize=v_hdr.tcp.windowsize_11}  AuxVars[]  AssignedVars[] 350#L550_accept_S1true [1804] L550_accept_S1-->L551_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.checksum=v_hdr.tcp.checksum_12}  AuxVars[]  AssignedVars[hdr.tcp.checksum] 690#L551_accept_S1true [2147] L551_accept_S1-->L552_accept_S1: Formula: (and (< v_hdr.tcp.checksum_10 65536) (<= 0 v_hdr.tcp.checksum_10))  InVars {hdr.tcp.checksum=v_hdr.tcp.checksum_10}  OutVars{hdr.tcp.checksum=v_hdr.tcp.checksum_10}  AuxVars[]  AssignedVars[] 561#L552_accept_S1true [2018] L552_accept_S1-->L553_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.pointer=v_hdr.tcp.pointer_10}  AuxVars[]  AssignedVars[hdr.tcp.pointer] 590#L553_accept_S1true [2046] L553_accept_S1-->L554_accept_S1: Formula: (and (< v_hdr.tcp.pointer_11 65536) (<= 0 v_hdr.tcp.pointer_11))  InVars {hdr.tcp.pointer=v_hdr.tcp.pointer_11}  OutVars{hdr.tcp.pointer=v_hdr.tcp.pointer_11}  AuxVars[]  AssignedVars[] 102#L554_accept_S1true [1559] L554_accept_S1-->L555_accept_S1: Formula: (not v_hdr.udp_tunnel.valid_20)  InVars {}  OutVars{hdr.udp_tunnel.valid=v_hdr.udp_tunnel.valid_20}  AuxVars[]  AssignedVars[hdr.udp_tunnel.valid] 282#L555_accept_S1true [1738] L555_accept_S1-->L556_accept_S1: Formula: (= v_emit_33 (store v_emit_34 v_hdr.udp_tunnel_9 false))  InVars {emit=v_emit_34, hdr.udp_tunnel=v_hdr.udp_tunnel_9}  OutVars{emit=v_emit_33, hdr.udp_tunnel=v_hdr.udp_tunnel_9}  AuxVars[]  AssignedVars[emit] 436#L556_accept_S1true [1894] L556_accept_S1-->L557_accept_S1: Formula: true  InVars {}  OutVars{hdr.udp_tunnel.srcport=v_hdr.udp_tunnel.srcport_16}  AuxVars[]  AssignedVars[hdr.udp_tunnel.srcport] 81#L557_accept_S1true [1537] L557_accept_S1-->L558_accept_S1: Formula: (and (< v_hdr.udp_tunnel.srcport_17 65536) (<= 0 v_hdr.udp_tunnel.srcport_17))  InVars {hdr.udp_tunnel.srcport=v_hdr.udp_tunnel.srcport_17}  OutVars{hdr.udp_tunnel.srcport=v_hdr.udp_tunnel.srcport_17}  AuxVars[]  AssignedVars[] 303#L558_accept_S1true [1759] L558_accept_S1-->L559_accept_S1: Formula: true  InVars {}  OutVars{hdr.udp_tunnel.dstport=v_hdr.udp_tunnel.dstport_14}  AuxVars[]  AssignedVars[hdr.udp_tunnel.dstport] 27#L559_accept_S1true [1482] L559_accept_S1-->L560_accept_S1: Formula: (and (<= 0 v_hdr.udp_tunnel.dstport_15) (< v_hdr.udp_tunnel.dstport_15 65536))  InVars {hdr.udp_tunnel.dstport=v_hdr.udp_tunnel.dstport_15}  OutVars{hdr.udp_tunnel.dstport=v_hdr.udp_tunnel.dstport_15}  AuxVars[]  AssignedVars[] 286#L560_accept_S1true [1743] L560_accept_S1-->L561_accept_S1: Formula: true  InVars {}  OutVars{hdr.udp_tunnel.userlength=v_hdr.udp_tunnel.userlength_17}  AuxVars[]  AssignedVars[hdr.udp_tunnel.userlength] 333#L561_accept_S1true [1788] L561_accept_S1-->L562_accept_S1: Formula: (and (<= 0 v_hdr.udp_tunnel.userlength_16) (< v_hdr.udp_tunnel.userlength_16 65536))  InVars {hdr.udp_tunnel.userlength=v_hdr.udp_tunnel.userlength_16}  OutVars{hdr.udp_tunnel.userlength=v_hdr.udp_tunnel.userlength_16}  AuxVars[]  AssignedVars[] 679#L562_accept_S1true [2139] L562_accept_S1-->L563_accept_S1: Formula: true  InVars {}  OutVars{hdr.udp_tunnel.checksum=v_hdr.udp_tunnel.checksum_17}  AuxVars[]  AssignedVars[hdr.udp_tunnel.checksum] 721#L563_accept_S1true [2177] L563_accept_S1-->havocProcedureFINAL_accept_S1: Formula: (and (< v_hdr.udp_tunnel.checksum_14 65536) (<= 0 v_hdr.udp_tunnel.checksum_14))  InVars {hdr.udp_tunnel.checksum=v_hdr.udp_tunnel.checksum_14}  OutVars{hdr.udp_tunnel.checksum=v_hdr.udp_tunnel.checksum_14}  AuxVars[]  AssignedVars[] 341#havocProcedureFINAL_accept_S1true [1795] havocProcedureFINAL_accept_S1-->havocProcedureEXIT_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 137#havocProcedureEXIT_accept_S1true >[2387] havocProcedureEXIT_accept_S1-->L568-D55: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 558#L568-D55true [2015] L568-D55-->L568_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 809#L568_accept_S1true [2264] L568_accept_S1-->L568_accept_S1-D49: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 143#L568_accept_S1-D49true [1601] L568_accept_S1-D49-->_parser_MyParserENTRY_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 113#_parser_MyParserENTRY_accept_S1true [1571] _parser_MyParserENTRY_accept_S1-->_parser_MyParserENTRY_accept_S1-D17: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 32#_parser_MyParserENTRY_accept_S1-D17true [1487] _parser_MyParserENTRY_accept_S1-D17-->startENTRY_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 344#startENTRY_accept_S1true [1798] startENTRY_accept_S1-->L736_accept_S1: Formula: v_hdr.ethernet.valid_15  InVars {}  OutVars{hdr.ethernet.valid=v_hdr.ethernet.valid_15}  AuxVars[]  AssignedVars[hdr.ethernet.valid] 86#L736_accept_S1true [1542] L736_accept_S1-->L739_accept_S1: Formula: (not (= v_hdr.ethernet.etherType_39 34525))  InVars {hdr.ethernet.etherType=v_hdr.ethernet.etherType_39}  OutVars{hdr.ethernet.etherType=v_hdr.ethernet.etherType_39}  AuxVars[]  AssignedVars[] 202#L739_accept_S1true [1662] L739_accept_S1-->L739-1_accept_S1: Formula: (not (= v_hdr.ethernet.etherType_35 2048))  InVars {hdr.ethernet.etherType=v_hdr.ethernet.etherType_35}  OutVars{hdr.ethernet.etherType=v_hdr.ethernet.etherType_35}  AuxVars[]  AssignedVars[] 352#L739-1_accept_S1true [1806] L739-1_accept_S1-->startEXIT_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 579#startEXIT_accept_S1true >[2344] startEXIT_accept_S1-->_parser_MyParserFINAL-D65: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 133#_parser_MyParserFINAL-D65true [1591] _parser_MyParserFINAL-D65-->_parser_MyParserFINAL_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 134#_parser_MyParserFINAL_accept_S1true [1592] _parser_MyParserFINAL_accept_S1-->_parser_MyParserEXIT_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 510#_parser_MyParserEXIT_accept_S1true >[2283] _parser_MyParserEXIT_accept_S1-->L569-D103: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 257#L569-D103true [1714] L569-D103-->L569_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 199#L569_accept_S1true [1658] L569_accept_S1-->L569_accept_S1-D51: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 226#L569_accept_S1-D51true [1684] L569_accept_S1-D51-->MyVerifyChecksumFINAL_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 269#MyVerifyChecksumFINAL_accept_S1true [1723] MyVerifyChecksumFINAL_accept_S1-->MyVerifyChecksumEXIT_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 765#MyVerifyChecksumEXIT_accept_S1true >[2336] MyVerifyChecksumEXIT_accept_S1-->L570-D73: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 392#L570-D73true [1848] L570-D73-->L570_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 600#L570_accept_S1true [2056] L570_accept_S1-->L570_accept_S1-D13: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 751#L570_accept_S1-D13true [2209] L570_accept_S1-D13-->MyIngressENTRY_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 491#MyIngressENTRY_accept_S1true [1947] MyIngressENTRY_accept_S1-->L259_accept_S1: Formula: (= v_standard_metadata.ingress_port_18 0)  InVars {standard_metadata.ingress_port=v_standard_metadata.ingress_port_18}  OutVars{standard_metadata.ingress_port=v_standard_metadata.ingress_port_18}  AuxVars[]  AssignedVars[] 723#L259_accept_S1true [2180] L259_accept_S1-->L266_accept_S1: Formula: (not (= v_hdr.ipv4.dstAddr_21 2071690107))  InVars {hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_21}  OutVars{hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_21}  AuxVars[]  AssignedVars[] 55#L266_accept_S1true [1511] L266_accept_S1-->L258_accept_S1: Formula: (or (= 281474976710655 v_hdr.ethernet.dstAddr_38) (= v_hdr.ethernet.srcAddr_29 0))  InVars {hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_29, hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_38}  OutVars{hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_29, hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_38}  AuxVars[]  AssignedVars[] 467#L258_accept_S1true [1924] L258_accept_S1-->MyIngressEXIT_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 682#MyIngressEXIT_accept_S1true >[2368] MyIngressEXIT_accept_S1-->L571-D107: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 791#L571-D107true [2247] L571-D107-->L571_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 631#L571_accept_S1true [2088] L571_accept_S1-->L571_accept_S1-D7: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 703#L571_accept_S1-D7true [2158] L571_accept_S1-D7-->MyEgressENTRY_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 72#MyEgressENTRY_accept_S1true [1527] MyEgressENTRY_accept_S1-->L249_accept_S1: Formula: (or (not (= 0 v_standard_metadata.egress_port_36)) (not v_hdr.tcp.valid_36))  InVars {standard_metadata.egress_port=v_standard_metadata.egress_port_36, hdr.tcp.valid=v_hdr.tcp.valid_36}  OutVars{standard_metadata.egress_port=v_standard_metadata.egress_port_36, hdr.tcp.valid=v_hdr.tcp.valid_36}  AuxVars[]  AssignedVars[] 127#L249_accept_S1true [1585] L249_accept_S1-->MyEgressEXIT_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 331#MyEgressEXIT_accept_S1true >[2312] MyEgressEXIT_accept_S1-->L572-D89: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 665#L572-D89true [2123] L572-D89-->L572_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 444#L572_accept_S1true [1899] L572_accept_S1-->L572_accept_S1-D21: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 756#L572_accept_S1-D21true [2213] L572_accept_S1-D21-->MyComputeChecksumFINAL_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 396#MyComputeChecksumFINAL_accept_S1true [1852] MyComputeChecksumFINAL_accept_S1-->MyComputeChecksumEXIT_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 224#MyComputeChecksumEXIT_accept_S1true >[2326] MyComputeChecksumEXIT_accept_S1-->L573-D109: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 378#L573-D109true [1832] L573-D109-->L573_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 90#L573_accept_S1true [1547] L573_accept_S1-->L574-1_accept_S1: Formula: v_forward_32  InVars {forward=v_forward_32}  OutVars{forward=v_forward_32}  AuxVars[]  AssignedVars[] 734#L574-1_accept_S1true [2191] L574-1_accept_S1-->L578_accept_S1: Formula: (let ((.cse0 (= v__old_hdr.ethernet.srcAddr_15 0))) (or (and .cse0 (not v__p4ltl_0_7)) (and v__p4ltl_0_7 (not .cse0))))  InVars {_old_hdr.ethernet.srcAddr=v__old_hdr.ethernet.srcAddr_15}  OutVars{_p4ltl_0=v__p4ltl_0_7, _old_hdr.ethernet.srcAddr=v__old_hdr.ethernet.srcAddr_15}  AuxVars[]  AssignedVars[_p4ltl_0] 584#L578_accept_S1true [2040] L578_accept_S1-->L579_accept_S1: Formula: (let ((.cse0 (= 2071690107 v__old_hdr.ipv4.dstAddr_15))) (or (and v__p4ltl_1_7 (not .cse0)) (and .cse0 (not v__p4ltl_1_7))))  InVars {_old_hdr.ipv4.dstAddr=v__old_hdr.ipv4.dstAddr_15}  OutVars{_old_hdr.ipv4.dstAddr=v__old_hdr.ipv4.dstAddr_15, _p4ltl_1=v__p4ltl_1_7}  AuxVars[]  AssignedVars[_p4ltl_1] 266#L579_accept_S1true [1721] L579_accept_S1-->L580_accept_S1: Formula: (let ((.cse0 (= 281474976710655 v__old_hdr.ethernet.dstAddr_15))) (or (and v__p4ltl_2_7 (not .cse0)) (and (not v__p4ltl_2_7) .cse0)))  InVars {_old_hdr.ethernet.dstAddr=v__old_hdr.ethernet.dstAddr_15}  OutVars{_p4ltl_2=v__p4ltl_2_7, _old_hdr.ethernet.dstAddr=v__old_hdr.ethernet.dstAddr_15}  AuxVars[]  AssignedVars[_p4ltl_2] 29#L580_accept_S1true [1485] L580_accept_S1-->mainFINAL_accept_S1: Formula: (let ((.cse0 (= v_standard_metadata.ingress_port_22 0))) (or (and .cse0 v__p4ltl_3_6) (and (not .cse0) (not v__p4ltl_3_6))))  InVars {standard_metadata.ingress_port=v_standard_metadata.ingress_port_22}  OutVars{standard_metadata.ingress_port=v_standard_metadata.ingress_port_22, _p4ltl_3=v__p4ltl_3_6}  AuxVars[]  AssignedVars[_p4ltl_3] 384#mainFINAL_accept_S1true [1840] mainFINAL_accept_S1-->mainEXIT_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 677#mainEXIT_accept_S1true >[2385] mainEXIT_accept_S1-->L586-1-D71: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 497#L586-1-D71true [1955] L586-1-D71-->L586-1_accept_S1: Formula: (and v__p4ltl_3_11 v__p4ltl_2_11 v__p4ltl_1_11 v__p4ltl_0_11 (or (not v__p4ltl_2_11) (not v__p4ltl_0_11) (not v__p4ltl_3_11) (not v__p4ltl_1_11) (= 1 v_standard_metadata.egress_port_32)))  InVars {_p4ltl_2=v__p4ltl_2_11, standard_metadata.egress_port=v_standard_metadata.egress_port_32, _p4ltl_3=v__p4ltl_3_11, _p4ltl_0=v__p4ltl_0_11, _p4ltl_1=v__p4ltl_1_11}  OutVars{_p4ltl_2=v__p4ltl_2_11, standard_metadata.egress_port=v_standard_metadata.egress_port_32, _p4ltl_3=v__p4ltl_3_11, _p4ltl_0=v__p4ltl_0_11, _p4ltl_1=v__p4ltl_1_11}  AuxVars[]  AssignedVars[] 110#L586-1_accept_S1true 
[2023-02-07 04:58:46,969 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2023-02-07 04:58:46,969 INFO  L85        PathProgramCache]: Analyzing trace with hash -1214797038, now seen corresponding path program 1 times
[2023-02-07 04:58:46,975 INFO  L118   FreeRefinementEngine]: Executing refinement strategy CAMEL
[2023-02-07 04:58:46,976 INFO  L333   FreeRefinementEngine]: Using trace check IpTcStrategyModuleSmtInterpolCraig [762612063]
[2023-02-07 04:58:46,976 INFO  L95    rtionOrderModulation]: Keeping assertion order NOT_INCREMENTALLY
[2023-02-07 04:58:46,976 INFO  L127          SolverBuilder]: Constructing new instance of SMTInterpol with explicit timeout -1 ms and remaining time -1 ms
[2023-02-07 04:58:47,050 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-02-07 04:58:47,315 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 2
[2023-02-07 04:58:47,336 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-02-07 04:58:47,451 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 1
[2023-02-07 04:58:47,461 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-02-07 04:58:47,501 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 150
[2023-02-07 04:58:47,504 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-02-07 04:58:47,513 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 1
[2023-02-07 04:58:47,514 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-02-07 04:58:47,515 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 163
[2023-02-07 04:58:47,516 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-02-07 04:58:47,546 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 168
[2023-02-07 04:58:47,550 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-02-07 04:58:47,582 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 176
[2023-02-07 04:58:47,586 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-02-07 04:58:47,588 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 182
[2023-02-07 04:58:47,589 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-02-07 04:58:47,609 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2023-02-07 04:58:47,610 INFO  L136   FreeRefinementEngine]: Strategy CAMEL found an infeasible trace
[2023-02-07 04:58:47,610 INFO  L333   FreeRefinementEngine]: Using interpolant generator IpTcStrategyModuleSmtInterpolCraig [762612063]
[2023-02-07 04:58:47,611 INFO  L157   FreeRefinementEngine]: IpTcStrategyModuleSmtInterpolCraig [762612063] provided 1 perfect and 0 imperfect interpolant sequences
[2023-02-07 04:58:47,611 INFO  L184   FreeRefinementEngine]: Found 1 perfect and 0 imperfect interpolant sequences.
[2023-02-07 04:58:47,611 INFO  L197   FreeRefinementEngine]: Number of different interpolants: perfect sequences [10] imperfect sequences [] total 10
[2023-02-07 04:58:47,612 INFO  L121   tionRefinementEngine]: Using interpolant automaton builder IpAbStrategyModuleStraightlineAll [670108714]
[2023-02-07 04:58:47,614 INFO  L85    oduleStraightlineAll]: Using 1 perfect interpolants to construct interpolant automaton
[2023-02-07 04:58:47,618 INFO  L757   eck$LassoCheckResult]: stem already infeasible
[2023-02-07 04:58:47,619 INFO  L100   FreeRefinementEngine]: Using predicate unifier PredicateUnifier provided by strategy CAMEL
[2023-02-07 04:58:47,644 INFO  L143   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2023-02-07 04:58:47,644 INFO  L145   InterpolantAutomaton]: CoverageRelationStatistics Valid=29, Invalid=61, Unknown=0, NotChecked=0, Total=90
[2023-02-07 04:58:47,647 INFO  L87              Difference]: Start difference. First operand  has 823 states, 720 states have (on average 1.0472222222222223) internal successors, (754), 714 states have internal predecessors, (754), 55 states have call successors, (55), 55 states have call predecessors, (55), 48 states have return successors, (108), 54 states have call predecessors, (108), 54 states have call successors, (108) Second operand  has 10 states, 10 states have (on average 18.1) internal successors, (181), 4 states have internal predecessors, (181), 2 states have call successors, (9), 7 states have call predecessors, (9), 4 states have return successors, (8), 3 states have call predecessors, (8), 2 states have call successors, (8)
[2023-02-07 04:58:50,153 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2023-02-07 04:58:50,153 INFO  L93              Difference]: Finished difference Result 1077 states and 1135 transitions.
[2023-02-07 04:58:50,155 INFO  L141   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 20 states. 
[2023-02-07 04:58:50,159 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1077 states and 1135 transitions.
[2023-02-07 04:58:50,166 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 12
[2023-02-07 04:58:50,176 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1077 states to 1077 states and 1135 transitions.
[2023-02-07 04:58:50,177 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2023-02-07 04:58:50,177 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 4
[2023-02-07 04:58:50,178 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1077 states and 1135 transitions.
[2023-02-07 04:58:50,182 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2023-02-07 04:58:50,182 INFO  L369   hiAutomatonCegarLoop]: Abstraction has 1077 states and 1135 transitions.
[2023-02-07 04:58:50,196 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1077 states and 1135 transitions.
[2023-02-07 04:58:50,222 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1077 to 1005.
[2023-02-07 04:58:50,223 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand  has 1005 states, 874 states have (on average 1.045766590389016) internal successors, (914), 870 states have internal predecessors, (914), 69 states have call successors, (69), 69 states have call predecessors, (69), 62 states have return successors, (70), 66 states have call predecessors, (70), 68 states have call successors, (70)
[2023-02-07 04:58:50,225 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1005 states to 1005 states and 1053 transitions.
[2023-02-07 04:58:50,226 INFO  L392   hiAutomatonCegarLoop]: Abstraction has 1005 states and 1053 transitions.
[2023-02-07 04:58:50,226 INFO  L399   stractBuchiCegarLoop]: Abstraction has 1005 states and 1053 transitions.
[2023-02-07 04:58:50,226 INFO  L287   stractBuchiCegarLoop]: ======== Iteration 2 ============
[2023-02-07 04:58:50,226 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1005 states and 1053 transitions.
[2023-02-07 04:58:50,229 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2023-02-07 04:58:50,229 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2023-02-07 04:58:50,229 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2023-02-07 04:58:50,232 INFO  L179   hiAutomatonCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2023-02-07 04:58:50,232 INFO  L180   hiAutomatonCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2023-02-07 04:58:50,235 INFO  L752   eck$LassoCheckResult]: Stem: 2420#ULTIMATE.startENTRY_NONWA [1520] ULTIMATE.startENTRY_NONWA-->L586-1_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 2419#L586-1_T0_init [1494] L586-1_T0_init-->L586_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2344#L586_T0_init [2105] L586_T0_init-->L586_T0_init-D20: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 3150#L586_T0_init-D20 [2227] L586_T0_init-D20-->mainENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2331#mainENTRY_T0_init [1864] mainENTRY_T0_init-->mainENTRY_T0_init-D38: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 2675#mainENTRY_T0_init-D38 [1636] mainENTRY_T0_init-D38-->havocProcedureENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2676#havocProcedureENTRY_T0_init [1671] havocProcedureENTRY_T0_init-->L421_T0_init: Formula: (not v_drop_12)  InVars {}  OutVars{drop=v_drop_12}  AuxVars[]  AssignedVars[drop] 2718#L421_T0_init [2201] L421_T0_init-->L422_T0_init: Formula: (not v_forward_17)  InVars {}  OutVars{forward=v_forward_17}  AuxVars[]  AssignedVars[forward] 3168#L422_T0_init [2151] L422_T0_init-->L423_T0_init: Formula: true  InVars {}  OutVars{standard_metadata.ingress_port=v_standard_metadata.ingress_port_16}  AuxVars[]  AssignedVars[standard_metadata.ingress_port] 3044#L423_T0_init [1949] L423_T0_init-->L424_T0_init: Formula: (and (<= 0 v_standard_metadata.ingress_port_15) (< v_standard_metadata.ingress_port_15 512))  InVars {standard_metadata.ingress_port=v_standard_metadata.ingress_port_15}  OutVars{standard_metadata.ingress_port=v_standard_metadata.ingress_port_15}  AuxVars[]  AssignedVars[] 3045#L424_T0_init [2007] L424_T0_init-->L425_T0_init: Formula: (= v_standard_metadata.egress_spec_16 0)  InVars {}  OutVars{standard_metadata.egress_spec=v_standard_metadata.egress_spec_16}  AuxVars[]  AssignedVars[standard_metadata.egress_spec] 3083#L425_T0_init [1998] L425_T0_init-->L426_T0_init: Formula: (= 0 v_standard_metadata.egress_port_18)  InVars {}  OutVars{standard_metadata.egress_port=v_standard_metadata.egress_port_18}  AuxVars[]  AssignedVars[standard_metadata.egress_port] 2821#L426_T0_init [1739] L426_T0_init-->L427_T0_init: Formula: true  InVars {}  OutVars{standard_metadata.instance_type=v_standard_metadata.instance_type_10}  AuxVars[]  AssignedVars[standard_metadata.instance_type] 2368#L427_T0_init [1475] L427_T0_init-->L428_T0_init: Formula: (and (< v_standard_metadata.instance_type_11 4294967296) (<= 0 v_standard_metadata.instance_type_11))  InVars {standard_metadata.instance_type=v_standard_metadata.instance_type_11}  OutVars{standard_metadata.instance_type=v_standard_metadata.instance_type_11}  AuxVars[]  AssignedVars[] 2369#L428_T0_init [1613] L428_T0_init-->L429_T0_init: Formula: true  InVars {}  OutVars{standard_metadata.packet_length=v_standard_metadata.packet_length_12}  AuxVars[]  AssignedVars[standard_metadata.packet_length] 2635#L429_T0_init [1908] L429_T0_init-->L430_T0_init: Formula: (and (<= 0 v_standard_metadata.packet_length_11) (< v_standard_metadata.packet_length_11 4294967296))  InVars {standard_metadata.packet_length=v_standard_metadata.packet_length_11}  OutVars{standard_metadata.packet_length=v_standard_metadata.packet_length_11}  AuxVars[]  AssignedVars[] 2520#L430_T0_init [1545] L430_T0_init-->L431_T0_init: Formula: true  InVars {}  OutVars{standard_metadata.enq_timestamp=v_standard_metadata.enq_timestamp_10}  AuxVars[]  AssignedVars[standard_metadata.enq_timestamp] 2521#L431_T0_init [1642] L431_T0_init-->L432_T0_init: Formula: (and (<= 0 v_standard_metadata.enq_timestamp_9) (< v_standard_metadata.enq_timestamp_9 4294967296))  InVars {standard_metadata.enq_timestamp=v_standard_metadata.enq_timestamp_9}  OutVars{standard_metadata.enq_timestamp=v_standard_metadata.enq_timestamp_9}  AuxVars[]  AssignedVars[] 2679#L432_T0_init [2160] L432_T0_init-->L433_T0_init: Formula: (= v_standard_metadata.enq_qdepth_9 0)  InVars {}  OutVars{standard_metadata.enq_qdepth=v_standard_metadata.enq_qdepth_9}  AuxVars[]  AssignedVars[standard_metadata.enq_qdepth] 2916#L433_T0_init [1815] L433_T0_init-->L434_T0_init: Formula: true  InVars {}  OutVars{standard_metadata.deq_timedelta=v_standard_metadata.deq_timedelta_12}  AuxVars[]  AssignedVars[standard_metadata.deq_timedelta] 2917#L434_T0_init [2053] L434_T0_init-->L435_T0_init: Formula: (and (<= 0 v_standard_metadata.deq_timedelta_11) (< v_standard_metadata.deq_timedelta_11 4294967296))  InVars {standard_metadata.deq_timedelta=v_standard_metadata.deq_timedelta_11}  OutVars{standard_metadata.deq_timedelta=v_standard_metadata.deq_timedelta_11}  AuxVars[]  AssignedVars[] 2494#L435_T0_init [1534] L435_T0_init-->L436_T0_init: Formula: true  InVars {}  OutVars{standard_metadata.deq_qdepth=v_standard_metadata.deq_qdepth_10}  AuxVars[]  AssignedVars[standard_metadata.deq_qdepth] 2495#L436_T0_init [2057] L436_T0_init-->L437_T0_init: Formula: (and (< v_standard_metadata.deq_qdepth_11 524288) (<= 0 v_standard_metadata.deq_qdepth_11))  InVars {standard_metadata.deq_qdepth=v_standard_metadata.deq_qdepth_11}  OutVars{standard_metadata.deq_qdepth=v_standard_metadata.deq_qdepth_11}  AuxVars[]  AssignedVars[] 2703#L437_T0_init [1659] L437_T0_init-->L438_T0_init: Formula: true  InVars {}  OutVars{standard_metadata.ingress_global_timestamp=v_standard_metadata.ingress_global_timestamp_11}  AuxVars[]  AssignedVars[standard_metadata.ingress_global_timestamp] 2660#L438_T0_init [1627] L438_T0_init-->L439_T0_init: Formula: (and (<= 0 v_standard_metadata.ingress_global_timestamp_12) (< v_standard_metadata.ingress_global_timestamp_12 281474976710656))  InVars {standard_metadata.ingress_global_timestamp=v_standard_metadata.ingress_global_timestamp_12}  OutVars{standard_metadata.ingress_global_timestamp=v_standard_metadata.ingress_global_timestamp_12}  AuxVars[]  AssignedVars[] 2661#L439_T0_init [2231] L439_T0_init-->L440_T0_init: Formula: true  InVars {}  OutVars{standard_metadata.egress_global_timestamp=v_standard_metadata.egress_global_timestamp_11}  AuxVars[]  AssignedVars[standard_metadata.egress_global_timestamp] 2405#L440_T0_init [1488] L440_T0_init-->L441_T0_init: Formula: (and (<= 0 v_standard_metadata.egress_global_timestamp_12) (< v_standard_metadata.egress_global_timestamp_12 281474976710656))  InVars {standard_metadata.egress_global_timestamp=v_standard_metadata.egress_global_timestamp_12}  OutVars{standard_metadata.egress_global_timestamp=v_standard_metadata.egress_global_timestamp_12}  AuxVars[]  AssignedVars[] 2406#L441_T0_init [1497] L441_T0_init-->L442_T0_init: Formula: (= 0 v_standard_metadata.mcast_grp_8)  InVars {}  OutVars{standard_metadata.mcast_grp=v_standard_metadata.mcast_grp_8}  AuxVars[]  AssignedVars[standard_metadata.mcast_grp] 2422#L442_T0_init [1783] L442_T0_init-->L443_T0_init: Formula: (= v_standard_metadata.egress_rid_9 0)  InVars {}  OutVars{standard_metadata.egress_rid=v_standard_metadata.egress_rid_9}  AuxVars[]  AssignedVars[standard_metadata.egress_rid] 2873#L443_T0_init [1900] L443_T0_init-->L444_T0_init: Formula: (= v_standard_metadata.checksum_error_8 0)  InVars {}  OutVars{standard_metadata.checksum_error=v_standard_metadata.checksum_error_8}  AuxVars[]  AssignedVars[standard_metadata.checksum_error] 2783#L444_T0_init [1711] L444_T0_init-->L445_T0_init: Formula: (= v_standard_metadata.parser_error_9 0)  InVars {}  OutVars{standard_metadata.parser_error=v_standard_metadata.parser_error_9}  AuxVars[]  AssignedVars[standard_metadata.parser_error] 2784#L445_T0_init [2251] L445_T0_init-->L446_T0_init: Formula: (= v_standard_metadata.priority_9 0)  InVars {}  OutVars{standard_metadata.priority=v_standard_metadata.priority_9}  AuxVars[]  AssignedVars[standard_metadata.priority] 3154#L446_T0_init [2120] L446_T0_init-->L447_T0_init: Formula: (not v_hdr.ethernet.valid_13)  InVars {}  OutVars{hdr.ethernet.valid=v_hdr.ethernet.valid_13}  AuxVars[]  AssignedVars[hdr.ethernet.valid] 2859#L447_T0_init [1771] L447_T0_init-->L448_T0_init: Formula: (= v_emit_37 (store v_emit_38 v_hdr.ethernet_3 false))  InVars {emit=v_emit_38, hdr.ethernet=v_hdr.ethernet_3}  OutVars{emit=v_emit_37, hdr.ethernet=v_hdr.ethernet_3}  AuxVars[]  AssignedVars[emit] 2860#L448_T0_init [1833] L448_T0_init-->L449_T0_init: Formula: true  InVars {}  OutVars{hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_27}  AuxVars[]  AssignedVars[hdr.ethernet.dstAddr] 2938#L449_T0_init [2216] L449_T0_init-->L450_T0_init: Formula: (= v_hdr.ethernet.dstAddr_29 v__old_hdr.ethernet.dstAddr_12)  InVars {hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_29}  OutVars{_old_hdr.ethernet.dstAddr=v__old_hdr.ethernet.dstAddr_12, hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_29}  AuxVars[]  AssignedVars[_old_hdr.ethernet.dstAddr] 2766#L450_T0_init [1701] L450_T0_init-->L451_T0_init: Formula: (= v_hdr.ethernet.dstAddr_30 v__old_hdr.ethernet.dstAddr_13)  InVars {hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_30}  OutVars{_old_hdr.ethernet.dstAddr=v__old_hdr.ethernet.dstAddr_13, hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_30}  AuxVars[]  AssignedVars[_old_hdr.ethernet.dstAddr] 2767#L451_T0_init [2155] L451_T0_init-->L452_T0_init: Formula: true  InVars {}  OutVars{hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_22}  AuxVars[]  AssignedVars[hdr.ethernet.srcAddr] 3054#L452_T0_init [1964] L452_T0_init-->L453_T0_init: Formula: (= v_hdr.ethernet.srcAddr_27 v__old_hdr.ethernet.srcAddr_13)  InVars {hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_27}  OutVars{hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_27, _old_hdr.ethernet.srcAddr=v__old_hdr.ethernet.srcAddr_13}  AuxVars[]  AssignedVars[_old_hdr.ethernet.srcAddr] 3051#L453_T0_init [1958] L453_T0_init-->L454_T0_init: Formula: (= v_hdr.ethernet.srcAddr_25 v__old_hdr.ethernet.srcAddr_12)  InVars {hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_25}  OutVars{hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_25, _old_hdr.ethernet.srcAddr=v__old_hdr.ethernet.srcAddr_12}  AuxVars[]  AssignedVars[_old_hdr.ethernet.srcAddr] 2857#L454_T0_init [1770] L454_T0_init-->L455_T0_init: Formula: true  InVars {}  OutVars{hdr.ethernet.etherType=v_hdr.ethernet.etherType_24}  AuxVars[]  AssignedVars[hdr.ethernet.etherType] 2858#L455_T0_init [1870] L455_T0_init-->L456_T0_init: Formula: (and (<= 0 v_hdr.ethernet.etherType_25) (< v_hdr.ethernet.etherType_25 65536))  InVars {hdr.ethernet.etherType=v_hdr.ethernet.etherType_25}  OutVars{hdr.ethernet.etherType=v_hdr.ethernet.etherType_25}  AuxVars[]  AssignedVars[] 2973#L456_T0_init [2121] L456_T0_init-->L457_T0_init: Formula: (not v_hdr.ipv6.valid_17)  InVars {}  OutVars{hdr.ipv6.valid=v_hdr.ipv6.valid_17}  AuxVars[]  AssignedVars[hdr.ipv6.valid] 2998#L457_T0_init [1901] L457_T0_init-->L458_T0_init: Formula: (= v_emit_41 (store v_emit_42 v_hdr.ipv6_10 false))  InVars {emit=v_emit_42, hdr.ipv6=v_hdr.ipv6_10}  OutVars{emit=v_emit_41, hdr.ipv6=v_hdr.ipv6_10}  AuxVars[]  AssignedVars[emit] 2898#L458_T0_init [1803] L458_T0_init-->L459_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv6.version=v_hdr.ipv6.version_18}  AuxVars[]  AssignedVars[hdr.ipv6.version] 2899#L459_T0_init [2031] L459_T0_init-->L460_T0_init: Formula: (and (<= 0 v_hdr.ipv6.version_17) (< v_hdr.ipv6.version_17 16))  InVars {hdr.ipv6.version=v_hdr.ipv6.version_17}  OutVars{hdr.ipv6.version=v_hdr.ipv6.version_17}  AuxVars[]  AssignedVars[] 2614#L460_T0_init [1599] L460_T0_init-->L461_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv6.trafclass=v_hdr.ipv6.trafclass_12}  AuxVars[]  AssignedVars[hdr.ipv6.trafclass] 2506#L461_T0_init [1539] L461_T0_init-->L462_T0_init: Formula: (and (< v_hdr.ipv6.trafclass_11 256) (<= 0 v_hdr.ipv6.trafclass_11))  InVars {hdr.ipv6.trafclass=v_hdr.ipv6.trafclass_11}  OutVars{hdr.ipv6.trafclass=v_hdr.ipv6.trafclass_11}  AuxVars[]  AssignedVars[] 2507#L462_T0_init [1654] L462_T0_init-->L463_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv6.flowlabel=v_hdr.ipv6.flowlabel_9}  AuxVars[]  AssignedVars[hdr.ipv6.flowlabel] 2387#L463_T0_init [1484] L463_T0_init-->L464_T0_init: Formula: (and (<= 0 v_hdr.ipv6.flowlabel_12) (< v_hdr.ipv6.flowlabel_12 1048576))  InVars {hdr.ipv6.flowlabel=v_hdr.ipv6.flowlabel_12}  OutVars{hdr.ipv6.flowlabel=v_hdr.ipv6.flowlabel_12}  AuxVars[]  AssignedVars[] 2388#L464_T0_init [1528] L464_T0_init-->L465_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv6.payloadlen=v_hdr.ipv6.payloadlen_18}  AuxVars[]  AssignedVars[hdr.ipv6.payloadlen] 2482#L465_T0_init [1682] L465_T0_init-->L466_T0_init: Formula: (and (<= 0 v_hdr.ipv6.payloadlen_20) (< v_hdr.ipv6.payloadlen_20 65536))  InVars {hdr.ipv6.payloadlen=v_hdr.ipv6.payloadlen_20}  OutVars{hdr.ipv6.payloadlen=v_hdr.ipv6.payloadlen_20}  AuxVars[]  AssignedVars[] 2737#L466_T0_init [1760] L466_T0_init-->L467_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv6.nextheader=v_hdr.ipv6.nextheader_22}  AuxVars[]  AssignedVars[hdr.ipv6.nextheader] 2816#L467_T0_init [1735] L467_T0_init-->L468_T0_init: Formula: (and (< v_hdr.ipv6.nextheader_19 256) (<= 0 v_hdr.ipv6.nextheader_19))  InVars {hdr.ipv6.nextheader=v_hdr.ipv6.nextheader_19}  OutVars{hdr.ipv6.nextheader=v_hdr.ipv6.nextheader_19}  AuxVars[]  AssignedVars[] 2817#L468_T0_init [1839] L468_T0_init-->L469_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv6.hoplimit=v_hdr.ipv6.hoplimit_19}  AuxVars[]  AssignedVars[hdr.ipv6.hoplimit] 2943#L469_T0_init [1913] L469_T0_init-->L470_T0_init: Formula: (and (<= 0 v_hdr.ipv6.hoplimit_18) (< v_hdr.ipv6.hoplimit_18 256))  InVars {hdr.ipv6.hoplimit=v_hdr.ipv6.hoplimit_18}  OutVars{hdr.ipv6.hoplimit=v_hdr.ipv6.hoplimit_18}  AuxVars[]  AssignedVars[] 3008#L470_T0_init [2165] L470_T0_init-->L471_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv6.srcAddr=v_hdr.ipv6.srcAddr_16}  AuxVars[]  AssignedVars[hdr.ipv6.srcAddr] 2335#L471_T0_init [1460] L471_T0_init-->L472_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv6.dstAddr=v_hdr.ipv6.dstAddr_16}  AuxVars[]  AssignedVars[hdr.ipv6.dstAddr] 2336#L472_T0_init [1722] L472_T0_init-->L473_T0_init: Formula: (not v_hdr.ipv4_tunnel.valid_19)  InVars {}  OutVars{hdr.ipv4_tunnel.valid=v_hdr.ipv4_tunnel.valid_19}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.valid] 2580#L473_T0_init [1580] L473_T0_init-->L474_T0_init: Formula: (= v_emit_39 (store v_emit_40 v_hdr.ipv4_tunnel_9 false))  InVars {emit=v_emit_40, hdr.ipv4_tunnel=v_hdr.ipv4_tunnel_9}  OutVars{emit=v_emit_39, hdr.ipv4_tunnel=v_hdr.ipv4_tunnel_9}  AuxVars[]  AssignedVars[emit] 2560#L474_T0_init [1568] L474_T0_init-->L475_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.version=v_hdr.ipv4_tunnel.version_16}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.version] 2561#L475_T0_init [1816] L475_T0_init-->L476_T0_init: Formula: (and (<= 0 v_hdr.ipv4_tunnel.version_17) (< v_hdr.ipv4_tunnel.version_17 16))  InVars {hdr.ipv4_tunnel.version=v_hdr.ipv4_tunnel.version_17}  OutVars{hdr.ipv4_tunnel.version=v_hdr.ipv4_tunnel.version_17}  AuxVars[]  AssignedVars[] 2918#L476_T0_init [1885] L476_T0_init-->L477_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.ihl=v_hdr.ipv4_tunnel.ihl_14}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.ihl] 2333#L477_T0_init [1459] L477_T0_init-->L478_T0_init: Formula: (and (< v_hdr.ipv4_tunnel.ihl_17 16) (<= 0 v_hdr.ipv4_tunnel.ihl_17))  InVars {hdr.ipv4_tunnel.ihl=v_hdr.ipv4_tunnel.ihl_17}  OutVars{hdr.ipv4_tunnel.ihl=v_hdr.ipv4_tunnel.ihl_17}  AuxVars[]  AssignedVars[] 2334#L478_T0_init [1744] L478_T0_init-->L479_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.diffserv=v_hdr.ipv4_tunnel.diffserv_15}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.diffserv] 2708#L479_T0_init [1664] L479_T0_init-->L480_T0_init: Formula: (and (< v_hdr.ipv4_tunnel.diffserv_14 256) (<= 0 v_hdr.ipv4_tunnel.diffserv_14))  InVars {hdr.ipv4_tunnel.diffserv=v_hdr.ipv4_tunnel.diffserv_14}  OutVars{hdr.ipv4_tunnel.diffserv=v_hdr.ipv4_tunnel.diffserv_14}  AuxVars[]  AssignedVars[] 2618#L480_T0_init [1602] L480_T0_init-->L481_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.totalLen=v_hdr.ipv4_tunnel.totalLen_14}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.totalLen] 2619#L481_T0_init [2263] L481_T0_init-->L482_T0_init: Formula: (and (< v_hdr.ipv4_tunnel.totalLen_17 65536) (<= 0 v_hdr.ipv4_tunnel.totalLen_17))  InVars {hdr.ipv4_tunnel.totalLen=v_hdr.ipv4_tunnel.totalLen_17}  OutVars{hdr.ipv4_tunnel.totalLen=v_hdr.ipv4_tunnel.totalLen_17}  AuxVars[]  AssignedVars[] 2779#L482_T0_init [1709] L482_T0_init-->L483_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.identification=v_hdr.ipv4_tunnel.identification_15}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.identification] 2780#L483_T0_init [1823] L483_T0_init-->L484_T0_init: Formula: (and (<= 0 v_hdr.ipv4_tunnel.identification_17) (< v_hdr.ipv4_tunnel.identification_17 65536))  InVars {hdr.ipv4_tunnel.identification=v_hdr.ipv4_tunnel.identification_17}  OutVars{hdr.ipv4_tunnel.identification=v_hdr.ipv4_tunnel.identification_17}  AuxVars[]  AssignedVars[] 2924#L484_T0_init [1910] L484_T0_init-->L485_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.flags=v_hdr.ipv4_tunnel.flags_16}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.flags] 2688#L485_T0_init [1647] L485_T0_init-->L486_T0_init: Formula: (and (< v_hdr.ipv4_tunnel.flags_15 8) (<= 0 v_hdr.ipv4_tunnel.flags_15))  InVars {hdr.ipv4_tunnel.flags=v_hdr.ipv4_tunnel.flags_15}  OutVars{hdr.ipv4_tunnel.flags=v_hdr.ipv4_tunnel.flags_15}  AuxVars[]  AssignedVars[] 2689#L486_T0_init [1904] L486_T0_init-->L487_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.fragOffset=v_hdr.ipv4_tunnel.fragOffset_17}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.fragOffset] 3002#L487_T0_init [2094] L487_T0_init-->L488_T0_init: Formula: (and (< v_hdr.ipv4_tunnel.fragOffset_16 8192) (<= 0 v_hdr.ipv4_tunnel.fragOffset_16))  InVars {hdr.ipv4_tunnel.fragOffset=v_hdr.ipv4_tunnel.fragOffset_16}  OutVars{hdr.ipv4_tunnel.fragOffset=v_hdr.ipv4_tunnel.fragOffset_16}  AuxVars[]  AssignedVars[] 3145#L488_T0_init [2161] L488_T0_init-->L489_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.ttl=v_hdr.ipv4_tunnel.ttl_14}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.ttl] 3140#L489_T0_init [2081] L489_T0_init-->L490_T0_init: Formula: (and (< v_hdr.ipv4_tunnel.ttl_16 256) (<= 0 v_hdr.ipv4_tunnel.ttl_16))  InVars {hdr.ipv4_tunnel.ttl=v_hdr.ipv4_tunnel.ttl_16}  OutVars{hdr.ipv4_tunnel.ttl=v_hdr.ipv4_tunnel.ttl_16}  AuxVars[]  AssignedVars[] 2407#L490_T0_init [1489] L490_T0_init-->L491_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.protocol=v_hdr.ipv4_tunnel.protocol_17}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.protocol] 2408#L491_T0_init [2221] L491_T0_init-->L492_T0_init: Formula: (and (< v_hdr.ipv4_tunnel.protocol_16 256) (<= 0 v_hdr.ipv4_tunnel.protocol_16))  InVars {hdr.ipv4_tunnel.protocol=v_hdr.ipv4_tunnel.protocol_16}  OutVars{hdr.ipv4_tunnel.protocol=v_hdr.ipv4_tunnel.protocol_16}  AuxVars[]  AssignedVars[] 3195#L492_T0_init [2220] L492_T0_init-->L493_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.hdrChecksum=v_hdr.ipv4_tunnel.hdrChecksum_11}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.hdrChecksum] 3196#L493_T0_init [2277] L493_T0_init-->L494_T0_init: Formula: (and (<= 0 v_hdr.ipv4_tunnel.hdrChecksum_12) (< v_hdr.ipv4_tunnel.hdrChecksum_12 65536))  InVars {hdr.ipv4_tunnel.hdrChecksum=v_hdr.ipv4_tunnel.hdrChecksum_12}  OutVars{hdr.ipv4_tunnel.hdrChecksum=v_hdr.ipv4_tunnel.hdrChecksum_12}  AuxVars[]  AssignedVars[] 3156#L494_T0_init [2126] L494_T0_init-->L495_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.srcAddr=v_hdr.ipv4_tunnel.srcAddr_13}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.srcAddr] 2417#L495_T0_init [1493] L495_T0_init-->L496_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.dstAddr=v_hdr.ipv4_tunnel.dstAddr_13}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.dstAddr] 2418#L496_T0_init [1517] L496_T0_init-->L497_T0_init: Formula: (not v_hdr.ipv4.valid_25)  InVars {}  OutVars{hdr.ipv4.valid=v_hdr.ipv4.valid_25}  AuxVars[]  AssignedVars[hdr.ipv4.valid] 2460#L497_T0_init [1794] L497_T0_init-->L498_T0_init: Formula: (= v_emit_27 (store v_emit_28 v_hdr.ipv4_2 false))  InVars {hdr.ipv4=v_hdr.ipv4_2, emit=v_emit_28}  OutVars{hdr.ipv4=v_hdr.ipv4_2, emit=v_emit_27}  AuxVars[]  AssignedVars[emit] 2889#L498_T0_init [2117] L498_T0_init-->L499_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.version=v_hdr.ipv4.version_13}  AuxVars[]  AssignedVars[hdr.ipv4.version] 2756#L499_T0_init [1696] L499_T0_init-->L500_T0_init: Formula: (and (< v_hdr.ipv4.version_10 16) (<= 0 v_hdr.ipv4.version_10))  InVars {hdr.ipv4.version=v_hdr.ipv4.version_10}  OutVars{hdr.ipv4.version=v_hdr.ipv4.version_10}  AuxVars[]  AssignedVars[] 2757#L500_T0_init [2045] L500_T0_init-->L501_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.ihl=v_hdr.ipv4.ihl_9}  AuxVars[]  AssignedVars[hdr.ipv4.ihl] 3117#L501_T0_init [2140] L501_T0_init-->L502_T0_init: Formula: (and (< v_hdr.ipv4.ihl_10 16) (<= 0 v_hdr.ipv4.ihl_10))  InVars {hdr.ipv4.ihl=v_hdr.ipv4.ihl_10}  OutVars{hdr.ipv4.ihl=v_hdr.ipv4.ihl_10}  AuxVars[]  AssignedVars[] 3133#L502_T0_init [2067] L502_T0_init-->L503_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.diffserv=v_hdr.ipv4.diffserv_13}  AuxVars[]  AssignedVars[hdr.ipv4.diffserv] 3091#L503_T0_init [2009] L503_T0_init-->L504_T0_init: Formula: (and (<= 0 v_hdr.ipv4.diffserv_12) (< v_hdr.ipv4.diffserv_12 256))  InVars {hdr.ipv4.diffserv=v_hdr.ipv4.diffserv_12}  OutVars{hdr.ipv4.diffserv=v_hdr.ipv4.diffserv_12}  AuxVars[]  AssignedVars[] 2981#L504_T0_init [1875] L504_T0_init-->L505_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.totalLen=v_hdr.ipv4.totalLen_14}  AuxVars[]  AssignedVars[hdr.ipv4.totalLen] 2395#L505_T0_init [1486] L505_T0_init-->L506_T0_init: Formula: (and (< v_hdr.ipv4.totalLen_15 65536) (<= 0 v_hdr.ipv4.totalLen_15))  InVars {hdr.ipv4.totalLen=v_hdr.ipv4.totalLen_15}  OutVars{hdr.ipv4.totalLen=v_hdr.ipv4.totalLen_15}  AuxVars[]  AssignedVars[] 2396#L506_T0_init [2122] L506_T0_init-->L507_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.identification=v_hdr.ipv4.identification_12}  AuxVars[]  AssignedVars[hdr.ipv4.identification] 3009#L507_T0_init [1914] L507_T0_init-->L508_T0_init: Formula: (and (< v_hdr.ipv4.identification_11 65536) (<= 0 v_hdr.ipv4.identification_11))  InVars {hdr.ipv4.identification=v_hdr.ipv4.identification_11}  OutVars{hdr.ipv4.identification=v_hdr.ipv4.identification_11}  AuxVars[]  AssignedVars[] 3010#L508_T0_init [2054] L508_T0_init-->L509_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.flags=v_hdr.ipv4.flags_10}  AuxVars[]  AssignedVars[hdr.ipv4.flags] 3123#L509_T0_init [2246] L509_T0_init-->L510_T0_init: Formula: (and (< v_hdr.ipv4.flags_13 8) (<= 0 v_hdr.ipv4.flags_13))  InVars {hdr.ipv4.flags=v_hdr.ipv4.flags_13}  OutVars{hdr.ipv4.flags=v_hdr.ipv4.flags_13}  AuxVars[]  AssignedVars[] 2483#L510_T0_init [1529] L510_T0_init-->L511_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.fragOffset=v_hdr.ipv4.fragOffset_11}  AuxVars[]  AssignedVars[hdr.ipv4.fragOffset] 2484#L511_T0_init [1817] L511_T0_init-->L512_T0_init: Formula: (and (< v_hdr.ipv4.fragOffset_10 8192) (<= 0 v_hdr.ipv4.fragOffset_10))  InVars {hdr.ipv4.fragOffset=v_hdr.ipv4.fragOffset_10}  OutVars{hdr.ipv4.fragOffset=v_hdr.ipv4.fragOffset_10}  AuxVars[]  AssignedVars[] 2639#L512_T0_init [1615] L512_T0_init-->L513_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.ttl=v_hdr.ipv4.ttl_10}  AuxVars[]  AssignedVars[hdr.ipv4.ttl] 2640#L513_T0_init [2035] L513_T0_init-->L514_T0_init: Formula: (and (<= 0 v_hdr.ipv4.ttl_11) (< v_hdr.ipv4.ttl_11 256))  InVars {hdr.ipv4.ttl=v_hdr.ipv4.ttl_11}  OutVars{hdr.ipv4.ttl=v_hdr.ipv4.ttl_11}  AuxVars[]  AssignedVars[] 2774#L514_T0_init [1706] L514_T0_init-->L515_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.protocol=v_hdr.ipv4.protocol_12}  AuxVars[]  AssignedVars[hdr.ipv4.protocol] 2775#L515_T0_init [1778] L515_T0_init-->L516_T0_init: Formula: (and (<= 0 v_hdr.ipv4.protocol_14) (< v_hdr.ipv4.protocol_14 256))  InVars {hdr.ipv4.protocol=v_hdr.ipv4.protocol_14}  OutVars{hdr.ipv4.protocol=v_hdr.ipv4.protocol_14}  AuxVars[]  AssignedVars[] 2868#L516_T0_init [2106] L516_T0_init-->L517_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.hdrChecksum=v_hdr.ipv4.hdrChecksum_9}  AuxVars[]  AssignedVars[hdr.ipv4.hdrChecksum] 2948#L517_T0_init [1842] L517_T0_init-->L518_T0_init: Formula: (and (< v_hdr.ipv4.hdrChecksum_10 65536) (<= 0 v_hdr.ipv4.hdrChecksum_10))  InVars {hdr.ipv4.hdrChecksum=v_hdr.ipv4.hdrChecksum_10}  OutVars{hdr.ipv4.hdrChecksum=v_hdr.ipv4.hdrChecksum_10}  AuxVars[]  AssignedVars[] 2949#L518_T0_init [1932] L518_T0_init-->L519_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.srcAddr=v_hdr.ipv4.srcAddr_9}  AuxVars[]  AssignedVars[hdr.ipv4.srcAddr] 2776#L519_T0_init [1707] L519_T0_init-->L520_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_16}  AuxVars[]  AssignedVars[hdr.ipv4.dstAddr] 2570#L520_T0_init [1573] L520_T0_init-->L521_T0_init: Formula: (= v_hdr.ipv4.dstAddr_17 v__old_hdr.ipv4.dstAddr_13)  InVars {hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_17}  OutVars{_old_hdr.ipv4.dstAddr=v__old_hdr.ipv4.dstAddr_13, hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_17}  AuxVars[]  AssignedVars[_old_hdr.ipv4.dstAddr] 2571#L521_T0_init [1719] L521_T0_init-->L522_T0_init: Formula: (= v_hdr.ipv4.dstAddr_14 v__old_hdr.ipv4.dstAddr_11)  InVars {hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_14}  OutVars{_old_hdr.ipv4.dstAddr=v__old_hdr.ipv4.dstAddr_11, hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_14}  AuxVars[]  AssignedVars[_old_hdr.ipv4.dstAddr] 2798#L522_T0_init [2065] L522_T0_init-->L523_T0_init: Formula: (not v_hdr.tcp.valid_30)  InVars {}  OutVars{hdr.tcp.valid=v_hdr.tcp.valid_30}  AuxVars[]  AssignedVars[hdr.tcp.valid] 2651#L523_T0_init [1623] L523_T0_init-->L524_T0_init: Formula: (= v_emit_35 (store v_emit_36 v_hdr.tcp_3 false))  InVars {hdr.tcp=v_hdr.tcp_3, emit=v_emit_36}  OutVars{hdr.tcp=v_hdr.tcp_3, emit=v_emit_35}  AuxVars[]  AssignedVars[emit] 2330#L524_T0_init [1458] L524_T0_init-->L525_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.srcport=v_hdr.tcp.srcport_10}  AuxVars[]  AssignedVars[hdr.tcp.srcport] 2332#L525_T0_init [1565] L525_T0_init-->L526_T0_init: Formula: (and (<= 0 v_hdr.tcp.srcport_12) (< v_hdr.tcp.srcport_12 65536))  InVars {hdr.tcp.srcport=v_hdr.tcp.srcport_12}  OutVars{hdr.tcp.srcport=v_hdr.tcp.srcport_12}  AuxVars[]  AssignedVars[] 2559#L526_T0_init [1882] L526_T0_init-->L527_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.dstport=v_hdr.tcp.dstport_9}  AuxVars[]  AssignedVars[hdr.tcp.dstport] 2803#L527_T0_init [1725] L527_T0_init-->L528_T0_init: Formula: (and (< v_hdr.tcp.dstport_10 65536) (<= 0 v_hdr.tcp.dstport_10))  InVars {hdr.tcp.dstport=v_hdr.tcp.dstport_10}  OutVars{hdr.tcp.dstport=v_hdr.tcp.dstport_10}  AuxVars[]  AssignedVars[] 2804#L528_T0_init [1837] L528_T0_init-->L529_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.sequence=v_hdr.tcp.sequence_43}  AuxVars[]  AssignedVars[hdr.tcp.sequence] 2942#L529_T0_init [1941] L529_T0_init-->L530_T0_init: Formula: (and (< v_hdr.tcp.sequence_44 4294967296) (<= 0 v_hdr.tcp.sequence_44))  InVars {hdr.tcp.sequence=v_hdr.tcp.sequence_44}  OutVars{hdr.tcp.sequence=v_hdr.tcp.sequence_44}  AuxVars[]  AssignedVars[] 2646#L530_T0_init [1620] L530_T0_init-->L531_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.ackseq=v_hdr.tcp.ackseq_41}  AuxVars[]  AssignedVars[hdr.tcp.ackseq] 2383#L531_T0_init [1481] L531_T0_init-->L532_T0_init: Formula: (and (< v_hdr.tcp.ackseq_43 4294967296) (<= 0 v_hdr.tcp.ackseq_43))  InVars {hdr.tcp.ackseq=v_hdr.tcp.ackseq_43}  OutVars{hdr.tcp.ackseq=v_hdr.tcp.ackseq_43}  AuxVars[]  AssignedVars[] 2384#L532_T0_init [2244] L532_T0_init-->L533_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.headerlength=v_hdr.tcp.headerlength_10}  AuxVars[]  AssignedVars[hdr.tcp.headerlength] 3182#L533_T0_init [2188] L533_T0_init-->L534_T0_init: Formula: (and (< v_hdr.tcp.headerlength_9 16) (<= 0 v_hdr.tcp.headerlength_9))  InVars {hdr.tcp.headerlength=v_hdr.tcp.headerlength_9}  OutVars{hdr.tcp.headerlength=v_hdr.tcp.headerlength_9}  AuxVars[]  AssignedVars[] 2649#L534_T0_init [1622] L534_T0_init-->L535_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.reservation=v_hdr.tcp.reservation_11}  AuxVars[]  AssignedVars[hdr.tcp.reservation] 2650#L535_T0_init [2196] L535_T0_init-->L536_T0_init: Formula: (and (< v_hdr.tcp.reservation_9 64) (<= 0 v_hdr.tcp.reservation_9))  InVars {hdr.tcp.reservation=v_hdr.tcp.reservation_9}  OutVars{hdr.tcp.reservation=v_hdr.tcp.reservation_9}  AuxVars[]  AssignedVars[] 2696#L536_T0_init [1653] L536_T0_init-->L537_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.URG=v_hdr.tcp.URG_11}  AuxVars[]  AssignedVars[hdr.tcp.URG] 2697#L537_T0_init [1942] L537_T0_init-->L538_T0_init: Formula: (and (<= 0 v_hdr.tcp.URG_10) (< v_hdr.tcp.URG_10 2))  InVars {hdr.tcp.URG=v_hdr.tcp.URG_10}  OutVars{hdr.tcp.URG=v_hdr.tcp.URG_10}  AuxVars[]  AssignedVars[] 3035#L538_T0_init [1944] L538_T0_init-->L539_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.ACK=v_hdr.tcp.ACK_11}  AuxVars[]  AssignedVars[hdr.tcp.ACK] 3037#L539_T0_init [2252] L539_T0_init-->L540_T0_init: Formula: (and (<= 0 v_hdr.tcp.ACK_9) (< v_hdr.tcp.ACK_9 2))  InVars {hdr.tcp.ACK=v_hdr.tcp.ACK_9}  OutVars{hdr.tcp.ACK=v_hdr.tcp.ACK_9}  AuxVars[]  AssignedVars[] 3070#L540_T0_init [1986] L540_T0_init-->L541_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.PSH=v_hdr.tcp.PSH_12}  AuxVars[]  AssignedVars[hdr.tcp.PSH] 3071#L541_T0_init [2141] L541_T0_init-->L542_T0_init: Formula: (and (<= 0 v_hdr.tcp.PSH_10) (< v_hdr.tcp.PSH_10 2))  InVars {hdr.tcp.PSH=v_hdr.tcp.PSH_10}  OutVars{hdr.tcp.PSH=v_hdr.tcp.PSH_10}  AuxVars[]  AssignedVars[] 3157#L542_T0_init [2128] L542_T0_init-->L543_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.RST=v_hdr.tcp.RST_10}  AuxVars[]  AssignedVars[hdr.tcp.RST] 3158#L543_T0_init [2131] L543_T0_init-->L544_T0_init: Formula: (and (<= 0 v_hdr.tcp.RST_11) (< v_hdr.tcp.RST_11 2))  InVars {hdr.tcp.RST=v_hdr.tcp.RST_11}  OutVars{hdr.tcp.RST=v_hdr.tcp.RST_11}  AuxVars[]  AssignedVars[] 3159#L544_T0_init [2168] L544_T0_init-->L545_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.SYN=v_hdr.tcp.SYN_12}  AuxVars[]  AssignedVars[hdr.tcp.SYN] 3067#L545_T0_init [1983] L545_T0_init-->L546_T0_init: Formula: (and (<= 0 v_hdr.tcp.SYN_11) (< v_hdr.tcp.SYN_11 2))  InVars {hdr.tcp.SYN=v_hdr.tcp.SYN_11}  OutVars{hdr.tcp.SYN=v_hdr.tcp.SYN_11}  AuxVars[]  AssignedVars[] 3068#L546_T0_init [2272] L546_T0_init-->L547_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.FIN=v_hdr.tcp.FIN_11}  AuxVars[]  AssignedVars[hdr.tcp.FIN] 3080#L547_T0_init [1996] L547_T0_init-->L548_T0_init: Formula: (and (< v_hdr.tcp.FIN_12 2) (<= 0 v_hdr.tcp.FIN_12))  InVars {hdr.tcp.FIN=v_hdr.tcp.FIN_12}  OutVars{hdr.tcp.FIN=v_hdr.tcp.FIN_12}  AuxVars[]  AssignedVars[] 2931#L548_T0_init [1829] L548_T0_init-->L549_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.windowsize=v_hdr.tcp.windowsize_10}  AuxVars[]  AssignedVars[hdr.tcp.windowsize] 2932#L549_T0_init [2207] L549_T0_init-->L550_T0_init: Formula: (and (<= 0 v_hdr.tcp.windowsize_9) (< v_hdr.tcp.windowsize_9 65536))  InVars {hdr.tcp.windowsize=v_hdr.tcp.windowsize_9}  OutVars{hdr.tcp.windowsize=v_hdr.tcp.windowsize_9}  AuxVars[]  AssignedVars[] 3188#L550_T0_init [2197] L550_T0_init-->L551_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.checksum=v_hdr.tcp.checksum_9}  AuxVars[]  AssignedVars[hdr.tcp.checksum] 2952#L551_T0_init [1844] L551_T0_init-->L552_T0_init: Formula: (and (<= 0 v_hdr.tcp.checksum_11) (< v_hdr.tcp.checksum_11 65536))  InVars {hdr.tcp.checksum=v_hdr.tcp.checksum_11}  OutVars{hdr.tcp.checksum=v_hdr.tcp.checksum_11}  AuxVars[]  AssignedVars[] 2458#L552_T0_init [1516] L552_T0_init-->L553_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.pointer=v_hdr.tcp.pointer_12}  AuxVars[]  AssignedVars[hdr.tcp.pointer] 2459#L553_T0_init [1639] L553_T0_init-->L554_T0_init: Formula: (and (<= 0 v_hdr.tcp.pointer_9) (< v_hdr.tcp.pointer_9 65536))  InVars {hdr.tcp.pointer=v_hdr.tcp.pointer_9}  OutVars{hdr.tcp.pointer=v_hdr.tcp.pointer_9}  AuxVars[]  AssignedVars[] 2437#L554_T0_init [1507] L554_T0_init-->L555_T0_init: Formula: (not v_hdr.udp_tunnel.valid_19)  InVars {}  OutVars{hdr.udp_tunnel.valid=v_hdr.udp_tunnel.valid_19}  AuxVars[]  AssignedVars[hdr.udp_tunnel.valid] 2438#L555_T0_init [1731] L555_T0_init-->L556_T0_init: Formula: (= v_emit_19 (store v_emit_20 v_hdr.udp_tunnel_8 false))  InVars {emit=v_emit_20, hdr.udp_tunnel=v_hdr.udp_tunnel_8}  OutVars{emit=v_emit_19, hdr.udp_tunnel=v_hdr.udp_tunnel_8}  AuxVars[]  AssignedVars[emit] 2811#L556_T0_init [2063] L556_T0_init-->L557_T0_init: Formula: true  InVars {}  OutVars{hdr.udp_tunnel.srcport=v_hdr.udp_tunnel.srcport_14}  AuxVars[]  AssignedVars[hdr.udp_tunnel.srcport] 3129#L557_T0_init [2127] L557_T0_init-->L558_T0_init: Formula: (and (<= 0 v_hdr.udp_tunnel.srcport_15) (< v_hdr.udp_tunnel.srcport_15 65536))  InVars {hdr.udp_tunnel.srcport=v_hdr.udp_tunnel.srcport_15}  OutVars{hdr.udp_tunnel.srcport=v_hdr.udp_tunnel.srcport_15}  AuxVars[]  AssignedVars[] 3046#L558_T0_init [1950] L558_T0_init-->L559_T0_init: Formula: true  InVars {}  OutVars{hdr.udp_tunnel.dstport=v_hdr.udp_tunnel.dstport_16}  AuxVars[]  AssignedVars[hdr.udp_tunnel.dstport] 2812#L559_T0_init [1732] L559_T0_init-->L560_T0_init: Formula: (and (< v_hdr.udp_tunnel.dstport_17 65536) (<= 0 v_hdr.udp_tunnel.dstport_17))  InVars {hdr.udp_tunnel.dstport=v_hdr.udp_tunnel.dstport_17}  OutVars{hdr.udp_tunnel.dstport=v_hdr.udp_tunnel.dstport_17}  AuxVars[]  AssignedVars[] 2813#L560_T0_init [2022] L560_T0_init-->L561_T0_init: Formula: true  InVars {}  OutVars{hdr.udp_tunnel.userlength=v_hdr.udp_tunnel.userlength_15}  AuxVars[]  AssignedVars[hdr.udp_tunnel.userlength] 2719#L561_T0_init [1672] L561_T0_init-->L562_T0_init: Formula: (and (<= 0 v_hdr.udp_tunnel.userlength_14) (< v_hdr.udp_tunnel.userlength_14 65536))  InVars {hdr.udp_tunnel.userlength=v_hdr.udp_tunnel.userlength_14}  OutVars{hdr.udp_tunnel.userlength=v_hdr.udp_tunnel.userlength_14}  AuxVars[]  AssignedVars[] 2542#L562_T0_init [1557] L562_T0_init-->L563_T0_init: Formula: true  InVars {}  OutVars{hdr.udp_tunnel.checksum=v_hdr.udp_tunnel.checksum_16}  AuxVars[]  AssignedVars[hdr.udp_tunnel.checksum] 2543#L563_T0_init [1987] L563_T0_init-->havocProcedureFINAL_T0_init: Formula: (and (<= 0 v_hdr.udp_tunnel.checksum_15) (< v_hdr.udp_tunnel.checksum_15 65536))  InVars {hdr.udp_tunnel.checksum=v_hdr.udp_tunnel.checksum_15}  OutVars{hdr.udp_tunnel.checksum=v_hdr.udp_tunnel.checksum_15}  AuxVars[]  AssignedVars[] 3072#havocProcedureFINAL_T0_init [2225] havocProcedureFINAL_T0_init-->havocProcedureEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2586#havocProcedureEXIT_T0_init >[2321] havocProcedureEXIT_T0_init-->L568-D56: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2587#L568-D56 [1897] L568-D56-->L568_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2641#L568_T0_init [2049] L568_T0_init-->L568_T0_init-D50: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 3089#L568_T0_init-D50 [2006] L568_T0_init-D50-->_parser_MyParserENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2497#_parser_MyParserENTRY_T0_init [1616] _parser_MyParserENTRY_T0_init-->_parser_MyParserENTRY_T0_init-D18: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 2565#_parser_MyParserENTRY_T0_init-D18 [1570] _parser_MyParserENTRY_T0_init-D18-->startENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2566#startENTRY_T0_init [2032] startENTRY_T0_init-->L736_T0_init: Formula: v_hdr.ethernet.valid_16  InVars {}  OutVars{hdr.ethernet.valid=v_hdr.ethernet.valid_16}  AuxVars[]  AssignedVars[hdr.ethernet.valid] 3110#L736_T0_init [2125] L736_T0_init-->L739_T0_init: Formula: (not (= v_hdr.ethernet.etherType_37 34525))  InVars {hdr.ethernet.etherType=v_hdr.ethernet.etherType_37}  OutVars{hdr.ethernet.etherType=v_hdr.ethernet.etherType_37}  AuxVars[]  AssignedVars[] 2496#L739_T0_init [1536] L739_T0_init-->L739-1_T0_init: Formula: (not (= v_hdr.ethernet.etherType_33 2048))  InVars {hdr.ethernet.etherType=v_hdr.ethernet.etherType_33}  OutVars{hdr.ethernet.etherType=v_hdr.ethernet.etherType_33}  AuxVars[]  AssignedVars[] 2498#L739-1_T0_init [2115] L739-1_T0_init-->startEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2637#startEXIT_T0_init >[2288] startEXIT_T0_init-->_parser_MyParserFINAL-D66: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2638#_parser_MyParserFINAL-D66 [1668] _parser_MyParserFINAL-D66-->_parser_MyParserFINAL_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2714#_parser_MyParserFINAL_T0_init [2008] _parser_MyParserFINAL_T0_init-->_parser_MyParserEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 3090#_parser_MyParserEXIT_T0_init >[2306] _parser_MyParserEXIT_T0_init-->L569-D104: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 3155#L569-D104 [2130] L569-D104-->L569_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2912#L569_T0_init [1812] L569_T0_init-->L569_T0_init-D52: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 2913#L569_T0_init-D52 [1845] L569_T0_init-D52-->MyVerifyChecksumFINAL_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2953#MyVerifyChecksumFINAL_T0_init [1936] MyVerifyChecksumFINAL_T0_init-->MyVerifyChecksumEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 3022#MyVerifyChecksumEXIT_T0_init >[2382] MyVerifyChecksumEXIT_T0_init-->L570-D74: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2963#L570-D74 [1855] L570-D74-->L570_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2343#L570_T0_init [1464] L570_T0_init-->L570_T0_init-D14: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 2345#L570_T0_init-D14 [2250] L570_T0_init-D14-->MyIngressENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2715#MyIngressENTRY_T0_init [1669] MyIngressENTRY_T0_init-->L259_T0_init: Formula: (= v_standard_metadata.ingress_port_20 0)  InVars {standard_metadata.ingress_port=v_standard_metadata.ingress_port_20}  OutVars{standard_metadata.ingress_port=v_standard_metadata.ingress_port_20}  AuxVars[]  AssignedVars[] 2716#L259_T0_init [1835] L259_T0_init-->L266_T0_init: Formula: (not (= v_hdr.ipv4.dstAddr_19 2071690107))  InVars {hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_19}  OutVars{hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_19}  AuxVars[]  AssignedVars[] 2939#L266_T0_init [2092] L266_T0_init-->L258_T0_init: Formula: (or (= v_hdr.ethernet.srcAddr_31 0) (= 281474976710655 v_hdr.ethernet.dstAddr_40))  InVars {hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_31, hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_40}  OutVars{hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_31, hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_40}  AuxVars[]  AssignedVars[] 3144#L258_T0_init [2245] L258_T0_init-->MyIngressEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2758#MyIngressEXIT_T0_init >[2333] MyIngressEXIT_T0_init-->L571-D108: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2759#L571-D108 [2089] L571-D108-->L571_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 3099#L571_T0_init [1962] L571_T0_init-->L571_T0_init-D8: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 3098#L571_T0_init-D8 [2016] L571_T0_init-D8-->MyEgressENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 3100#MyEgressENTRY_T0_init [1650] MyEgressENTRY_T0_init-->L249_T0_init: Formula: (or (not v_hdr.tcp.valid_34) (not (= 0 v_standard_metadata.egress_port_34)))  InVars {standard_metadata.egress_port=v_standard_metadata.egress_port_34, hdr.tcp.valid=v_hdr.tcp.valid_34}  OutVars{standard_metadata.egress_port=v_standard_metadata.egress_port_34, hdr.tcp.valid=v_hdr.tcp.valid_34}  AuxVars[]  AssignedVars[] 3308#L249_T0_init [1652] L249_T0_init-->MyEgressEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 3306#MyEgressEXIT_T0_init >[2347] MyEgressEXIT_T0_init-->L572-D90: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 3305#L572-D90 [1791] L572-D90-->L572_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2350#L572_T0_init [1466] L572_T0_init-->L572_T0_init-D22: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 2351#L572_T0_init-D22 [1889] L572_T0_init-D22-->MyComputeChecksumFINAL_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2990#MyComputeChecksumFINAL_T0_init [1980] MyComputeChecksumFINAL_T0_init-->MyComputeChecksumEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2727#MyComputeChecksumEXIT_T0_init >[2361] MyComputeChecksumEXIT_T0_init-->L573-D110: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2728#L573-D110 [1858] L573-D110-->L573_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2814#L573_T0_init [1733] L573_T0_init-->L575_T0_init: Formula: (not v_forward_29)  InVars {forward=v_forward_29}  OutVars{forward=v_forward_29}  AuxVars[]  AssignedVars[] 2815#L575_T0_init [1876] L575_T0_init-->L574-1_T0_init: Formula: v_drop_14  InVars {}  OutVars{drop=v_drop_14}  AuxVars[]  AssignedVars[drop] 2982#L574-1_T0_init [2112] L574-1_T0_init-->L578_T0_init: Formula: (let ((.cse0 (= v__old_hdr.ethernet.srcAddr_14 0))) (or (and v__p4ltl_0_6 (not .cse0)) (and (not v__p4ltl_0_6) .cse0)))  InVars {_old_hdr.ethernet.srcAddr=v__old_hdr.ethernet.srcAddr_14}  OutVars{_p4ltl_0=v__p4ltl_0_6, _old_hdr.ethernet.srcAddr=v__old_hdr.ethernet.srcAddr_14}  AuxVars[]  AssignedVars[_p4ltl_0] 3152#L578_T0_init [2269] L578_T0_init-->L579_T0_init: Formula: (let ((.cse0 (= 2071690107 v__old_hdr.ipv4.dstAddr_14))) (or (and v__p4ltl_1_6 (not .cse0)) (and .cse0 (not v__p4ltl_1_6))))  InVars {_old_hdr.ipv4.dstAddr=v__old_hdr.ipv4.dstAddr_14}  OutVars{_old_hdr.ipv4.dstAddr=v__old_hdr.ipv4.dstAddr_14, _p4ltl_1=v__p4ltl_1_6}  AuxVars[]  AssignedVars[_p4ltl_1] 3189#L579_T0_init [2198] L579_T0_init-->L580_T0_init: Formula: (let ((.cse0 (= 281474976710655 v__old_hdr.ethernet.dstAddr_14))) (or (and v__p4ltl_2_6 (not .cse0)) (and .cse0 (not v__p4ltl_2_6))))  InVars {_old_hdr.ethernet.dstAddr=v__old_hdr.ethernet.dstAddr_14}  OutVars{_p4ltl_2=v__p4ltl_2_6, _old_hdr.ethernet.dstAddr=v__old_hdr.ethernet.dstAddr_14}  AuxVars[]  AssignedVars[_p4ltl_2] 3093#L580_T0_init [2013] L580_T0_init-->mainFINAL_T0_init: Formula: (let ((.cse0 (= v_standard_metadata.ingress_port_23 0))) (or (and v__p4ltl_3_7 .cse0) (and (not .cse0) (not v__p4ltl_3_7))))  InVars {standard_metadata.ingress_port=v_standard_metadata.ingress_port_23}  OutVars{standard_metadata.ingress_port=v_standard_metadata.ingress_port_23, _p4ltl_3=v__p4ltl_3_7}  AuxVars[]  AssignedVars[_p4ltl_3] 3094#mainFINAL_T0_init [2061] mainFINAL_T0_init-->mainEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 3128#mainEXIT_T0_init >[2285] mainEXIT_T0_init-->L586-1-D72: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 3061#L586-1-D72 [1975] L586-1-D72-->L586-1_accept_S1: Formula: (and v__p4ltl_1_9 v__p4ltl_0_9 v__p4ltl_3_9 v__p4ltl_2_9 (or (not v__p4ltl_3_9) (not v__p4ltl_1_9) (= 1 v_standard_metadata.egress_port_30) (not v__p4ltl_2_9) (not v__p4ltl_0_9)))  InVars {_p4ltl_2=v__p4ltl_2_9, standard_metadata.egress_port=v_standard_metadata.egress_port_30, _p4ltl_3=v__p4ltl_3_9, _p4ltl_0=v__p4ltl_0_9, _p4ltl_1=v__p4ltl_1_9}  OutVars{_p4ltl_2=v__p4ltl_2_9, standard_metadata.egress_port=v_standard_metadata.egress_port_30, _p4ltl_3=v__p4ltl_3_9, _p4ltl_0=v__p4ltl_0_9, _p4ltl_1=v__p4ltl_1_9}  AuxVars[]  AssignedVars[] 2562#L586-1_accept_S1 
[2023-02-07 04:58:50,238 INFO  L754   eck$LassoCheckResult]: Loop: 2562#L586-1_accept_S1 [1566] L586-1_accept_S1-->L586_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2390#L586_accept_S1 [1923] L586_accept_S1-->L586_accept_S1-D19: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 2674#L586_accept_S1-D19 [1634] L586_accept_S1-D19-->mainENTRY_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2325#mainENTRY_accept_S1 [2037] mainENTRY_accept_S1-->mainENTRY_accept_S1-D37: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 3005#mainENTRY_accept_S1-D37 [1909] mainENTRY_accept_S1-D37-->havocProcedureENTRY_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 3006#havocProcedureENTRY_accept_S1 [2146] havocProcedureENTRY_accept_S1-->L421_accept_S1: Formula: (not v_drop_11)  InVars {}  OutVars{drop=v_drop_11}  AuxVars[]  AssignedVars[drop] 3085#L421_accept_S1 [2003] L421_accept_S1-->L422_accept_S1: Formula: (not v_forward_18)  InVars {}  OutVars{forward=v_forward_18}  AuxVars[]  AssignedVars[forward] 3086#L422_accept_S1 [2011] L422_accept_S1-->L423_accept_S1: Formula: true  InVars {}  OutVars{standard_metadata.ingress_port=v_standard_metadata.ingress_port_14}  AuxVars[]  AssignedVars[standard_metadata.ingress_port] 2356#L423_accept_S1 [1469] L423_accept_S1-->L424_accept_S1: Formula: (and (<= 0 v_standard_metadata.ingress_port_17) (< v_standard_metadata.ingress_port_17 512))  InVars {standard_metadata.ingress_port=v_standard_metadata.ingress_port_17}  OutVars{standard_metadata.ingress_port=v_standard_metadata.ingress_port_17}  AuxVars[]  AssignedVars[] 2357#L424_accept_S1 [1727] L424_accept_S1-->L425_accept_S1: Formula: (= v_standard_metadata.egress_spec_15 0)  InVars {}  OutVars{standard_metadata.egress_spec=v_standard_metadata.egress_spec_15}  AuxVars[]  AssignedVars[standard_metadata.egress_spec] 2729#L425_accept_S1 [1677] L425_accept_S1-->L426_accept_S1: Formula: (= 0 v_standard_metadata.egress_port_17)  InVars {}  OutVars{standard_metadata.egress_port=v_standard_metadata.egress_port_17}  AuxVars[]  AssignedVars[standard_metadata.egress_port] 2730#L426_accept_S1 [1861] L426_accept_S1-->L427_accept_S1: Formula: true  InVars {}  OutVars{standard_metadata.instance_type=v_standard_metadata.instance_type_12}  AuxVars[]  AssignedVars[standard_metadata.instance_type] 2825#L427_accept_S1 [1745] L427_accept_S1-->L428_accept_S1: Formula: (and (<= 0 v_standard_metadata.instance_type_9) (< v_standard_metadata.instance_type_9 4294967296))  InVars {standard_metadata.instance_type=v_standard_metadata.instance_type_9}  OutVars{standard_metadata.instance_type=v_standard_metadata.instance_type_9}  AuxVars[]  AssignedVars[] 2725#L428_accept_S1 [1676] L428_accept_S1-->L429_accept_S1: Formula: true  InVars {}  OutVars{standard_metadata.packet_length=v_standard_metadata.packet_length_10}  AuxVars[]  AssignedVars[standard_metadata.packet_length] 2726#L429_accept_S1 [2152] L429_accept_S1-->L430_accept_S1: Formula: (and (< v_standard_metadata.packet_length_9 4294967296) (<= 0 v_standard_metadata.packet_length_9))  InVars {standard_metadata.packet_length=v_standard_metadata.packet_length_9}  OutVars{standard_metadata.packet_length=v_standard_metadata.packet_length_9}  AuxVars[]  AssignedVars[] 3169#L430_accept_S1 [2171] L430_accept_S1-->L431_accept_S1: Formula: true  InVars {}  OutVars{standard_metadata.enq_timestamp=v_standard_metadata.enq_timestamp_12}  AuxVars[]  AssignedVars[standard_metadata.enq_timestamp] 2634#L431_accept_S1 [1612] L431_accept_S1-->L432_accept_S1: Formula: (and (< v_standard_metadata.enq_timestamp_11 4294967296) (<= 0 v_standard_metadata.enq_timestamp_11))  InVars {standard_metadata.enq_timestamp=v_standard_metadata.enq_timestamp_11}  OutVars{standard_metadata.enq_timestamp=v_standard_metadata.enq_timestamp_11}  AuxVars[]  AssignedVars[] 2324#L432_accept_S1 [1456] L432_accept_S1-->L433_accept_S1: Formula: (= v_standard_metadata.enq_qdepth_8 0)  InVars {}  OutVars{standard_metadata.enq_qdepth=v_standard_metadata.enq_qdepth_8}  AuxVars[]  AssignedVars[standard_metadata.enq_qdepth] 2326#L433_accept_S1 [2203] L433_accept_S1-->L434_accept_S1: Formula: true  InVars {}  OutVars{standard_metadata.deq_timedelta=v_standard_metadata.deq_timedelta_9}  AuxVars[]  AssignedVars[standard_metadata.deq_timedelta] 3139#L434_accept_S1 [2080] L434_accept_S1-->L435_accept_S1: Formula: (and (< v_standard_metadata.deq_timedelta_10 4294967296) (<= 0 v_standard_metadata.deq_timedelta_10))  InVars {standard_metadata.deq_timedelta=v_standard_metadata.deq_timedelta_10}  OutVars{standard_metadata.deq_timedelta=v_standard_metadata.deq_timedelta_10}  AuxVars[]  AssignedVars[] 2925#L435_accept_S1 [1824] L435_accept_S1-->L436_accept_S1: Formula: true  InVars {}  OutVars{standard_metadata.deq_qdepth=v_standard_metadata.deq_qdepth_12}  AuxVars[]  AssignedVars[standard_metadata.deq_qdepth] 2926#L436_accept_S1 [1907] L436_accept_S1-->L437_accept_S1: Formula: (and (< v_standard_metadata.deq_qdepth_9 524288) (<= 0 v_standard_metadata.deq_qdepth_9))  InVars {standard_metadata.deq_qdepth=v_standard_metadata.deq_qdepth_9}  OutVars{standard_metadata.deq_qdepth=v_standard_metadata.deq_qdepth_9}  AuxVars[]  AssignedVars[] 2847#L437_accept_S1 [1764] L437_accept_S1-->L438_accept_S1: Formula: true  InVars {}  OutVars{standard_metadata.ingress_global_timestamp=v_standard_metadata.ingress_global_timestamp_10}  AuxVars[]  AssignedVars[standard_metadata.ingress_global_timestamp] 2848#L438_accept_S1 [1869] L438_accept_S1-->L439_accept_S1: Formula: (and (<= 0 v_standard_metadata.ingress_global_timestamp_9) (< v_standard_metadata.ingress_global_timestamp_9 281474976710656))  InVars {standard_metadata.ingress_global_timestamp=v_standard_metadata.ingress_global_timestamp_9}  OutVars{standard_metadata.ingress_global_timestamp=v_standard_metadata.ingress_global_timestamp_9}  AuxVars[]  AssignedVars[] 2972#L439_accept_S1 [1930] L439_accept_S1-->L440_accept_S1: Formula: true  InVars {}  OutVars{standard_metadata.egress_global_timestamp=v_standard_metadata.egress_global_timestamp_9}  AuxVars[]  AssignedVars[standard_metadata.egress_global_timestamp] 2626#L440_accept_S1 [1607] L440_accept_S1-->L441_accept_S1: Formula: (and (< v_standard_metadata.egress_global_timestamp_10 281474976710656) (<= 0 v_standard_metadata.egress_global_timestamp_10))  InVars {standard_metadata.egress_global_timestamp=v_standard_metadata.egress_global_timestamp_10}  OutVars{standard_metadata.egress_global_timestamp=v_standard_metadata.egress_global_timestamp_10}  AuxVars[]  AssignedVars[] 2627#L441_accept_S1 [2068] L441_accept_S1-->L442_accept_S1: Formula: (= 0 v_standard_metadata.mcast_grp_9)  InVars {}  OutVars{standard_metadata.mcast_grp=v_standard_metadata.mcast_grp_9}  AuxVars[]  AssignedVars[standard_metadata.mcast_grp] 2763#L442_accept_S1 [1699] L442_accept_S1-->L443_accept_S1: Formula: (= v_standard_metadata.egress_rid_8 0)  InVars {}  OutVars{standard_metadata.egress_rid=v_standard_metadata.egress_rid_8}  AuxVars[]  AssignedVars[standard_metadata.egress_rid] 2764#L443_accept_S1 [2210] L443_accept_S1-->L444_accept_S1: Formula: (= v_standard_metadata.checksum_error_9 0)  InVars {}  OutVars{standard_metadata.checksum_error=v_standard_metadata.checksum_error_9}  AuxVars[]  AssignedVars[standard_metadata.checksum_error] 2620#L444_accept_S1 [1603] L444_accept_S1-->L445_accept_S1: Formula: (= v_standard_metadata.parser_error_8 0)  InVars {}  OutVars{standard_metadata.parser_error=v_standard_metadata.parser_error_8}  AuxVars[]  AssignedVars[standard_metadata.parser_error] 2621#L445_accept_S1 [2211] L445_accept_S1-->L446_accept_S1: Formula: (= v_standard_metadata.priority_8 0)  InVars {}  OutVars{standard_metadata.priority=v_standard_metadata.priority_8}  AuxVars[]  AssignedVars[standard_metadata.priority] 2731#L446_accept_S1 [1678] L446_accept_S1-->L447_accept_S1: Formula: (not v_hdr.ethernet.valid_14)  InVars {}  OutVars{hdr.ethernet.valid=v_hdr.ethernet.valid_14}  AuxVars[]  AssignedVars[hdr.ethernet.valid] 2732#L447_accept_S1 [2169] L447_accept_S1-->L448_accept_S1: Formula: (= v_emit_29 (store v_emit_30 v_hdr.ethernet_2 false))  InVars {emit=v_emit_30, hdr.ethernet=v_hdr.ethernet_2}  OutVars{emit=v_emit_29, hdr.ethernet=v_hdr.ethernet_2}  AuxVars[]  AssignedVars[emit] 3023#L448_accept_S1 [1927] L448_accept_S1-->L449_accept_S1: Formula: true  InVars {}  OutVars{hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_25}  AuxVars[]  AssignedVars[hdr.ethernet.dstAddr] 3014#L449_accept_S1 [1918] L449_accept_S1-->L450_accept_S1: Formula: (= v_hdr.ethernet.dstAddr_28 v__old_hdr.ethernet.dstAddr_11)  InVars {hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_28}  OutVars{_old_hdr.ethernet.dstAddr=v__old_hdr.ethernet.dstAddr_11, hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_28}  AuxVars[]  AssignedVars[_old_hdr.ethernet.dstAddr] 3015#L450_accept_S1 [2111] L450_accept_S1-->L451_accept_S1: Formula: (= v_hdr.ethernet.dstAddr_26 v__old_hdr.ethernet.dstAddr_10)  InVars {hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_26}  OutVars{_old_hdr.ethernet.dstAddr=v__old_hdr.ethernet.dstAddr_10, hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_26}  AuxVars[]  AssignedVars[_old_hdr.ethernet.dstAddr] 2352#L451_accept_S1 [1467] L451_accept_S1-->L452_accept_S1: Formula: true  InVars {}  OutVars{hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_26}  AuxVars[]  AssignedVars[hdr.ethernet.srcAddr] 2353#L452_accept_S1 [1655] L452_accept_S1-->L453_accept_S1: Formula: (= v_hdr.ethernet.srcAddr_23 v__old_hdr.ethernet.srcAddr_10)  InVars {hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_23}  OutVars{hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_23, _old_hdr.ethernet.srcAddr=v__old_hdr.ethernet.srcAddr_10}  AuxVars[]  AssignedVars[_old_hdr.ethernet.srcAddr] 2698#L453_accept_S1 [2176] L453_accept_S1-->L454_accept_S1: Formula: (= v_hdr.ethernet.srcAddr_24 v__old_hdr.ethernet.srcAddr_11)  InVars {hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_24}  OutVars{hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_24, _old_hdr.ethernet.srcAddr=v__old_hdr.ethernet.srcAddr_11}  AuxVars[]  AssignedVars[_old_hdr.ethernet.srcAddr] 3180#L454_accept_S1 [2235] L454_accept_S1-->L455_accept_S1: Formula: true  InVars {}  OutVars{hdr.ethernet.etherType=v_hdr.ethernet.etherType_22}  AuxVars[]  AssignedVars[hdr.ethernet.etherType] 3204#L455_accept_S1 [2254] L455_accept_S1-->L456_accept_S1: Formula: (and (<= 0 v_hdr.ethernet.etherType_23) (< v_hdr.ethernet.etherType_23 65536))  InVars {hdr.ethernet.etherType=v_hdr.ethernet.etherType_23}  OutVars{hdr.ethernet.etherType=v_hdr.ethernet.etherType_23}  AuxVars[]  AssignedVars[] 2826#L456_accept_S1 [1746] L456_accept_S1-->L457_accept_S1: Formula: (not v_hdr.ipv6.valid_18)  InVars {}  OutVars{hdr.ipv6.valid=v_hdr.ipv6.valid_18}  AuxVars[]  AssignedVars[hdr.ipv6.valid] 2747#L457_accept_S1 [1687] L457_accept_S1-->L458_accept_S1: Formula: (= v_emit_23 (store v_emit_24 v_hdr.ipv6_9 false))  InVars {emit=v_emit_24, hdr.ipv6=v_hdr.ipv6_9}  OutVars{emit=v_emit_23, hdr.ipv6=v_hdr.ipv6_9}  AuxVars[]  AssignedVars[emit] 2748#L458_accept_S1 [2024] L458_accept_S1-->L459_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv6.version=v_hdr.ipv6.version_19}  AuxVars[]  AssignedVars[hdr.ipv6.version] 3107#L459_accept_S1 [2104] L459_accept_S1-->L460_accept_S1: Formula: (and (< v_hdr.ipv6.version_20 16) (<= 0 v_hdr.ipv6.version_20))  InVars {hdr.ipv6.version=v_hdr.ipv6.version_20}  OutVars{hdr.ipv6.version=v_hdr.ipv6.version_20}  AuxVars[]  AssignedVars[] 3036#L460_accept_S1 [1943] L460_accept_S1-->L461_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv6.trafclass=v_hdr.ipv6.trafclass_9}  AuxVars[]  AssignedVars[hdr.ipv6.trafclass] 2435#L461_accept_S1 [1505] L461_accept_S1-->L462_accept_S1: Formula: (and (<= 0 v_hdr.ipv6.trafclass_10) (< v_hdr.ipv6.trafclass_10 256))  InVars {hdr.ipv6.trafclass=v_hdr.ipv6.trafclass_10}  OutVars{hdr.ipv6.trafclass=v_hdr.ipv6.trafclass_10}  AuxVars[]  AssignedVars[] 2436#L462_accept_S1 [2090] L462_accept_S1-->L463_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv6.flowlabel=v_hdr.ipv6.flowlabel_11}  AuxVars[]  AssignedVars[hdr.ipv6.flowlabel] 2376#L463_accept_S1 [1478] L463_accept_S1-->L464_accept_S1: Formula: (and (< v_hdr.ipv6.flowlabel_10 1048576) (<= 0 v_hdr.ipv6.flowlabel_10))  InVars {hdr.ipv6.flowlabel=v_hdr.ipv6.flowlabel_10}  OutVars{hdr.ipv6.flowlabel=v_hdr.ipv6.flowlabel_10}  AuxVars[]  AssignedVars[] 2377#L464_accept_S1 [1577] L464_accept_S1-->L465_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv6.payloadlen=v_hdr.ipv6.payloadlen_19}  AuxVars[]  AssignedVars[hdr.ipv6.payloadlen] 2576#L465_accept_S1 [2096] L465_accept_S1-->L466_accept_S1: Formula: (and (< v_hdr.ipv6.payloadlen_17 65536) (<= 0 v_hdr.ipv6.payloadlen_17))  InVars {hdr.ipv6.payloadlen=v_hdr.ipv6.payloadlen_17}  OutVars{hdr.ipv6.payloadlen=v_hdr.ipv6.payloadlen_17}  AuxVars[]  AssignedVars[] 2996#L466_accept_S1 [1898] L466_accept_S1-->L467_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv6.nextheader=v_hdr.ipv6.nextheader_21}  AuxVars[]  AssignedVars[hdr.ipv6.nextheader] 2431#L467_accept_S1 [1503] L467_accept_S1-->L468_accept_S1: Formula: (and (< v_hdr.ipv6.nextheader_20 256) (<= 0 v_hdr.ipv6.nextheader_20))  InVars {hdr.ipv6.nextheader=v_hdr.ipv6.nextheader_20}  OutVars{hdr.ipv6.nextheader=v_hdr.ipv6.nextheader_20}  AuxVars[]  AssignedVars[] 2432#L468_accept_S1 [2222] L468_accept_S1-->L469_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv6.hoplimit=v_hdr.ipv6.hoplimit_17}  AuxVars[]  AssignedVars[hdr.ipv6.hoplimit] 2751#L469_accept_S1 [1692] L469_accept_S1-->L470_accept_S1: Formula: (and (<= 0 v_hdr.ipv6.hoplimit_20) (< v_hdr.ipv6.hoplimit_20 256))  InVars {hdr.ipv6.hoplimit=v_hdr.ipv6.hoplimit_20}  OutVars{hdr.ipv6.hoplimit=v_hdr.ipv6.hoplimit_20}  AuxVars[]  AssignedVars[] 2752#L470_accept_S1 [1695] L470_accept_S1-->L471_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv6.srcAddr=v_hdr.ipv6.srcAddr_17}  AuxVars[]  AssignedVars[hdr.ipv6.srcAddr] 2755#L471_accept_S1 [1865] L471_accept_S1-->L472_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv6.dstAddr=v_hdr.ipv6.dstAddr_17}  AuxVars[]  AssignedVars[hdr.ipv6.dstAddr] 2968#L472_accept_S1 [2241] L472_accept_S1-->L473_accept_S1: Formula: (not v_hdr.ipv4_tunnel.valid_20)  InVars {}  OutVars{hdr.ipv4_tunnel.valid=v_hdr.ipv4_tunnel.valid_20}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.valid] 2699#L473_accept_S1 [1656] L473_accept_S1-->L474_accept_S1: Formula: (= v_emit_25 (store v_emit_26 v_hdr.ipv4_tunnel_8 false))  InVars {emit=v_emit_26, hdr.ipv4_tunnel=v_hdr.ipv4_tunnel_8}  OutVars{emit=v_emit_25, hdr.ipv4_tunnel=v_hdr.ipv4_tunnel_8}  AuxVars[]  AssignedVars[emit] 2700#L474_accept_S1 [1796] L474_accept_S1-->L475_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.version=v_hdr.ipv4_tunnel.version_14}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.version] 2892#L475_accept_S1 [2086] L475_accept_S1-->L476_accept_S1: Formula: (and (<= 0 v_hdr.ipv4_tunnel.version_15) (< v_hdr.ipv4_tunnel.version_15 16))  InVars {hdr.ipv4_tunnel.version=v_hdr.ipv4_tunnel.version_15}  OutVars{hdr.ipv4_tunnel.version=v_hdr.ipv4_tunnel.version_15}  AuxVars[]  AssignedVars[] 2573#L476_accept_S1 [1575] L476_accept_S1-->L477_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.ihl=v_hdr.ipv4_tunnel.ihl_16}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.ihl] 2574#L477_accept_S1 [1683] L477_accept_S1-->L478_accept_S1: Formula: (and (<= 0 v_hdr.ipv4_tunnel.ihl_15) (< v_hdr.ipv4_tunnel.ihl_15 16))  InVars {hdr.ipv4_tunnel.ihl=v_hdr.ipv4_tunnel.ihl_15}  OutVars{hdr.ipv4_tunnel.ihl=v_hdr.ipv4_tunnel.ihl_15}  AuxVars[]  AssignedVars[] 2572#L478_accept_S1 [1574] L478_accept_S1-->L479_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.diffserv=v_hdr.ipv4_tunnel.diffserv_17}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.diffserv] 2354#L479_accept_S1 [1468] L479_accept_S1-->L480_accept_S1: Formula: (and (< v_hdr.ipv4_tunnel.diffserv_16 256) (<= 0 v_hdr.ipv4_tunnel.diffserv_16))  InVars {hdr.ipv4_tunnel.diffserv=v_hdr.ipv4_tunnel.diffserv_16}  OutVars{hdr.ipv4_tunnel.diffserv=v_hdr.ipv4_tunnel.diffserv_16}  AuxVars[]  AssignedVars[] 2355#L480_accept_S1 [2136] L480_accept_S1-->L481_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.totalLen=v_hdr.ipv4_tunnel.totalLen_15}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.totalLen] 2529#L481_accept_S1 [1550] L481_accept_S1-->L482_accept_S1: Formula: (and (< v_hdr.ipv4_tunnel.totalLen_16 65536) (<= 0 v_hdr.ipv4_tunnel.totalLen_16))  InVars {hdr.ipv4_tunnel.totalLen=v_hdr.ipv4_tunnel.totalLen_16}  OutVars{hdr.ipv4_tunnel.totalLen=v_hdr.ipv4_tunnel.totalLen_16}  AuxVars[]  AssignedVars[] 2474#L482_accept_S1 [1523] L482_accept_S1-->L483_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.identification=v_hdr.ipv4_tunnel.identification_14}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.identification] 2475#L483_accept_S1 [2134] L483_accept_S1-->L484_accept_S1: Formula: (and (< v_hdr.ipv4_tunnel.identification_16 65536) (<= 0 v_hdr.ipv4_tunnel.identification_16))  InVars {hdr.ipv4_tunnel.identification=v_hdr.ipv4_tunnel.identification_16}  OutVars{hdr.ipv4_tunnel.identification=v_hdr.ipv4_tunnel.identification_16}  AuxVars[]  AssignedVars[] 3160#L484_accept_S1 [2184] L484_accept_S1-->L485_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.flags=v_hdr.ipv4_tunnel.flags_17}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.flags] 2992#L485_accept_S1 [1893] L485_accept_S1-->L486_accept_S1: Formula: (and (<= 0 v_hdr.ipv4_tunnel.flags_14) (< v_hdr.ipv4_tunnel.flags_14 8))  InVars {hdr.ipv4_tunnel.flags=v_hdr.ipv4_tunnel.flags_14}  OutVars{hdr.ipv4_tunnel.flags=v_hdr.ipv4_tunnel.flags_14}  AuxVars[]  AssignedVars[] 2792#L486_accept_S1 [1715] L486_accept_S1-->L487_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.fragOffset=v_hdr.ipv4_tunnel.fragOffset_14}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.fragOffset] 2667#L487_accept_S1 [1631] L487_accept_S1-->L488_accept_S1: Formula: (and (<= 0 v_hdr.ipv4_tunnel.fragOffset_15) (< v_hdr.ipv4_tunnel.fragOffset_15 8192))  InVars {hdr.ipv4_tunnel.fragOffset=v_hdr.ipv4_tunnel.fragOffset_15}  OutVars{hdr.ipv4_tunnel.fragOffset=v_hdr.ipv4_tunnel.fragOffset_15}  AuxVars[]  AssignedVars[] 2668#L488_accept_S1 [1766] L488_accept_S1-->L489_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.ttl=v_hdr.ipv4_tunnel.ttl_17}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.ttl] 2852#L489_accept_S1 [2172] L489_accept_S1-->L490_accept_S1: Formula: (and (< v_hdr.ipv4_tunnel.ttl_15 256) (<= 0 v_hdr.ipv4_tunnel.ttl_15))  InVars {hdr.ipv4_tunnel.ttl=v_hdr.ipv4_tunnel.ttl_15}  OutVars{hdr.ipv4_tunnel.ttl=v_hdr.ipv4_tunnel.ttl_15}  AuxVars[]  AssignedVars[] 3176#L490_accept_S1 [2204] L490_accept_S1-->L491_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.protocol=v_hdr.ipv4_tunnel.protocol_19}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.protocol] 2563#L491_accept_S1 [1569] L491_accept_S1-->L492_accept_S1: Formula: (and (<= 0 v_hdr.ipv4_tunnel.protocol_18) (< v_hdr.ipv4_tunnel.protocol_18 256))  InVars {hdr.ipv4_tunnel.protocol=v_hdr.ipv4_tunnel.protocol_18}  OutVars{hdr.ipv4_tunnel.protocol=v_hdr.ipv4_tunnel.protocol_18}  AuxVars[]  AssignedVars[] 2564#L492_accept_S1 [1999] L492_accept_S1-->L493_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.hdrChecksum=v_hdr.ipv4_tunnel.hdrChecksum_9}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.hdrChecksum] 3013#L493_accept_S1 [1917] L493_accept_S1-->L494_accept_S1: Formula: (and (<= 0 v_hdr.ipv4_tunnel.hdrChecksum_10) (< v_hdr.ipv4_tunnel.hdrChecksum_10 65536))  InVars {hdr.ipv4_tunnel.hdrChecksum=v_hdr.ipv4_tunnel.hdrChecksum_10}  OutVars{hdr.ipv4_tunnel.hdrChecksum=v_hdr.ipv4_tunnel.hdrChecksum_10}  AuxVars[]  AssignedVars[] 2734#L494_accept_S1 [1679] L494_accept_S1-->L495_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.srcAddr=v_hdr.ipv4_tunnel.srcAddr_14}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.srcAddr] 2596#L495_accept_S1 [1590] L495_accept_S1-->L496_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.dstAddr=v_hdr.ipv4_tunnel.dstAddr_14}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.dstAddr] 2597#L496_accept_S1 [1755] L496_accept_S1-->L497_accept_S1: Formula: (not v_hdr.ipv4.valid_26)  InVars {}  OutVars{hdr.ipv4.valid=v_hdr.ipv4.valid_26}  AuxVars[]  AssignedVars[hdr.ipv4.valid] 2838#L497_accept_S1 [2257] L497_accept_S1-->L498_accept_S1: Formula: (= v_emit_31 (store v_emit_32 v_hdr.ipv4_3 false))  InVars {hdr.ipv4=v_hdr.ipv4_3, emit=v_emit_32}  OutVars{hdr.ipv4=v_hdr.ipv4_3, emit=v_emit_31}  AuxVars[]  AssignedVars[emit] 3109#L498_accept_S1 [2029] L498_accept_S1-->L499_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.version=v_hdr.ipv4.version_11}  AuxVars[]  AssignedVars[hdr.ipv4.version] 2910#L499_accept_S1 [1809] L499_accept_S1-->L500_accept_S1: Formula: (and (< v_hdr.ipv4.version_12 16) (<= 0 v_hdr.ipv4.version_12))  InVars {hdr.ipv4.version=v_hdr.ipv4.version_12}  OutVars{hdr.ipv4.version=v_hdr.ipv4.version_12}  AuxVars[]  AssignedVars[] 2845#L500_accept_S1 [1761] L500_accept_S1-->L501_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.ihl=v_hdr.ipv4.ihl_11}  AuxVars[]  AssignedVars[hdr.ipv4.ihl] 2664#L501_accept_S1 [1629] L501_accept_S1-->L502_accept_S1: Formula: (and (<= 0 v_hdr.ipv4.ihl_12) (< v_hdr.ipv4.ihl_12 16))  InVars {hdr.ipv4.ihl=v_hdr.ipv4.ihl_12}  OutVars{hdr.ipv4.ihl=v_hdr.ipv4.ihl_12}  AuxVars[]  AssignedVars[] 2665#L502_accept_S1 [2167] L502_accept_S1-->L503_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.diffserv=v_hdr.ipv4.diffserv_10}  AuxVars[]  AssignedVars[hdr.ipv4.diffserv] 3175#L503_accept_S1 [2192] L503_accept_S1-->L504_accept_S1: Formula: (and (< v_hdr.ipv4.diffserv_11 256) (<= 0 v_hdr.ipv4.diffserv_11))  InVars {hdr.ipv4.diffserv=v_hdr.ipv4.diffserv_11}  OutVars{hdr.ipv4.diffserv=v_hdr.ipv4.diffserv_11}  AuxVars[]  AssignedVars[] 2443#L504_accept_S1 [1508] L504_accept_S1-->L505_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.totalLen=v_hdr.ipv4.totalLen_16}  AuxVars[]  AssignedVars[hdr.ipv4.totalLen] 2444#L505_accept_S1 [2099] L505_accept_S1-->L506_accept_S1: Formula: (and (<= 0 v_hdr.ipv4.totalLen_13) (< v_hdr.ipv4.totalLen_13 65536))  InVars {hdr.ipv4.totalLen=v_hdr.ipv4.totalLen_13}  OutVars{hdr.ipv4.totalLen=v_hdr.ipv4.totalLen_13}  AuxVars[]  AssignedVars[] 3024#L506_accept_S1 [1929] L506_accept_S1-->L507_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.identification=v_hdr.ipv4.identification_13}  AuxVars[]  AssignedVars[hdr.ipv4.identification] 3025#L507_accept_S1 [2182] L507_accept_S1-->L508_accept_S1: Formula: (and (<= 0 v_hdr.ipv4.identification_10) (< v_hdr.ipv4.identification_10 65536))  InVars {hdr.ipv4.identification=v_hdr.ipv4.identification_10}  OutVars{hdr.ipv4.identification=v_hdr.ipv4.identification_10}  AuxVars[]  AssignedVars[] 3134#L508_accept_S1 [2069] L508_accept_S1-->L509_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.flags=v_hdr.ipv4.flags_12}  AuxVars[]  AssignedVars[hdr.ipv4.flags] 3057#L509_accept_S1 [1969] L509_accept_S1-->L510_accept_S1: Formula: (and (< v_hdr.ipv4.flags_11 8) (<= 0 v_hdr.ipv4.flags_11))  InVars {hdr.ipv4.flags=v_hdr.ipv4.flags_11}  OutVars{hdr.ipv4.flags=v_hdr.ipv4.flags_11}  AuxVars[]  AssignedVars[] 3058#L510_accept_S1 [2265] L510_accept_S1-->L511_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.fragOffset=v_hdr.ipv4.fragOffset_12}  AuxVars[]  AssignedVars[hdr.ipv4.fragOffset] 2745#L511_accept_S1 [1685] L511_accept_S1-->L512_accept_S1: Formula: (and (<= 0 v_hdr.ipv4.fragOffset_13) (< v_hdr.ipv4.fragOffset_13 8192))  InVars {hdr.ipv4.fragOffset=v_hdr.ipv4.fragOffset_13}  OutVars{hdr.ipv4.fragOffset=v_hdr.ipv4.fragOffset_13}  AuxVars[]  AssignedVars[] 2430#L512_accept_S1 [1502] L512_accept_S1-->L513_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.ttl=v_hdr.ipv4.ttl_12}  AuxVars[]  AssignedVars[hdr.ipv4.ttl] 2346#L513_accept_S1 [1463] L513_accept_S1-->L514_accept_S1: Formula: (and (< v_hdr.ipv4.ttl_13 256) (<= 0 v_hdr.ipv4.ttl_13))  InVars {hdr.ipv4.ttl=v_hdr.ipv4.ttl_13}  OutVars{hdr.ipv4.ttl=v_hdr.ipv4.ttl_13}  AuxVars[]  AssignedVars[] 2347#L514_accept_S1 [2224] L514_accept_S1-->L515_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.protocol=v_hdr.ipv4.protocol_13}  AuxVars[]  AssignedVars[hdr.ipv4.protocol] 2515#L515_accept_S1 [1543] L515_accept_S1-->L516_accept_S1: Formula: (and (< v_hdr.ipv4.protocol_11 256) (<= 0 v_hdr.ipv4.protocol_11))  InVars {hdr.ipv4.protocol=v_hdr.ipv4.protocol_11}  OutVars{hdr.ipv4.protocol=v_hdr.ipv4.protocol_11}  AuxVars[]  AssignedVars[] 2516#L516_accept_S1 [1919] L516_accept_S1-->L517_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.hdrChecksum=v_hdr.ipv4.hdrChecksum_12}  AuxVars[]  AssignedVars[hdr.ipv4.hdrChecksum] 2801#L517_accept_S1 [1724] L517_accept_S1-->L518_accept_S1: Formula: (and (< v_hdr.ipv4.hdrChecksum_11 65536) (<= 0 v_hdr.ipv4.hdrChecksum_11))  InVars {hdr.ipv4.hdrChecksum=v_hdr.ipv4.hdrChecksum_11}  OutVars{hdr.ipv4.hdrChecksum=v_hdr.ipv4.hdrChecksum_11}  AuxVars[]  AssignedVars[] 2568#L518_accept_S1 [1572] L518_accept_S1-->L519_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.srcAddr=v_hdr.ipv4.srcAddr_10}  AuxVars[]  AssignedVars[hdr.ipv4.srcAddr] 2569#L519_accept_S1 [2232] L519_accept_S1-->L520_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_13}  AuxVars[]  AssignedVars[hdr.ipv4.dstAddr] 3135#L520_accept_S1 [2070] L520_accept_S1-->L521_accept_S1: Formula: (= v_hdr.ipv4.dstAddr_15 v__old_hdr.ipv4.dstAddr_12)  InVars {hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_15}  OutVars{_old_hdr.ipv4.dstAddr=v__old_hdr.ipv4.dstAddr_12, hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_15}  AuxVars[]  AssignedVars[_old_hdr.ipv4.dstAddr] 2904#L521_accept_S1 [1807] L521_accept_S1-->L522_accept_S1: Formula: (= v_hdr.ipv4.dstAddr_12 v__old_hdr.ipv4.dstAddr_10)  InVars {hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_12}  OutVars{_old_hdr.ipv4.dstAddr=v__old_hdr.ipv4.dstAddr_10, hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_12}  AuxVars[]  AssignedVars[_old_hdr.ipv4.dstAddr] 2905#L522_accept_S1 [2135] L522_accept_S1-->L523_accept_S1: Formula: (not v_hdr.tcp.valid_29)  InVars {}  OutVars{hdr.tcp.valid=v_hdr.tcp.valid_29}  AuxVars[]  AssignedVars[hdr.tcp.valid] 2957#L523_accept_S1 [1851] L523_accept_S1-->L524_accept_S1: Formula: (= v_emit_21 (store v_emit_22 v_hdr.tcp_2 false))  InVars {hdr.tcp=v_hdr.tcp_2, emit=v_emit_22}  OutVars{hdr.tcp=v_hdr.tcp_2, emit=v_emit_21}  AuxVars[]  AssignedVars[emit] 2958#L524_accept_S1 [1911] L524_accept_S1-->L525_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.srcport=v_hdr.tcp.srcport_11}  AuxVars[]  AssignedVars[hdr.tcp.srcport] 2575#L525_accept_S1 [1576] L525_accept_S1-->L526_accept_S1: Formula: (and (< v_hdr.tcp.srcport_9 65536) (<= 0 v_hdr.tcp.srcport_9))  InVars {hdr.tcp.srcport=v_hdr.tcp.srcport_9}  OutVars{hdr.tcp.srcport=v_hdr.tcp.srcport_9}  AuxVars[]  AssignedVars[] 2454#L526_accept_S1 [1513] L526_accept_S1-->L527_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.dstport=v_hdr.tcp.dstport_12}  AuxVars[]  AssignedVars[hdr.tcp.dstport] 2455#L527_accept_S1 [2101] L527_accept_S1-->L528_accept_S1: Formula: (and (<= 0 v_hdr.tcp.dstport_11) (< v_hdr.tcp.dstport_11 65536))  InVars {hdr.tcp.dstport=v_hdr.tcp.dstport_11}  OutVars{hdr.tcp.dstport=v_hdr.tcp.dstport_11}  AuxVars[]  AssignedVars[] 3064#L528_accept_S1 [1979] L528_accept_S1-->L529_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.sequence=v_hdr.tcp.sequence_41}  AuxVars[]  AssignedVars[hdr.tcp.sequence] 2933#L529_accept_S1 [1830] L529_accept_S1-->L530_accept_S1: Formula: (and (<= 0 v_hdr.tcp.sequence_42) (< v_hdr.tcp.sequence_42 4294967296))  InVars {hdr.tcp.sequence=v_hdr.tcp.sequence_42}  OutVars{hdr.tcp.sequence=v_hdr.tcp.sequence_42}  AuxVars[]  AssignedVars[] 2934#L530_accept_S1 [2084] L530_accept_S1-->L531_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.ackseq=v_hdr.tcp.ackseq_44}  AuxVars[]  AssignedVars[hdr.tcp.ackseq] 3119#L531_accept_S1 [2048] L531_accept_S1-->L532_accept_S1: Formula: (and (< v_hdr.tcp.ackseq_42 4294967296) (<= 0 v_hdr.tcp.ackseq_42))  InVars {hdr.tcp.ackseq=v_hdr.tcp.ackseq_42}  OutVars{hdr.tcp.ackseq=v_hdr.tcp.ackseq_42}  AuxVars[]  AssignedVars[] 3120#L532_accept_S1 [2085] L532_accept_S1-->L533_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.headerlength=v_hdr.tcp.headerlength_12}  AuxVars[]  AssignedVars[hdr.tcp.headerlength] 3007#L533_accept_S1 [1912] L533_accept_S1-->L534_accept_S1: Formula: (and (<= 0 v_hdr.tcp.headerlength_11) (< v_hdr.tcp.headerlength_11 16))  InVars {hdr.tcp.headerlength=v_hdr.tcp.headerlength_11}  OutVars{hdr.tcp.headerlength=v_hdr.tcp.headerlength_11}  AuxVars[]  AssignedVars[] 2770#L534_accept_S1 [1704] L534_accept_S1-->L535_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.reservation=v_hdr.tcp.reservation_10}  AuxVars[]  AssignedVars[hdr.tcp.reservation] 2771#L535_accept_S1 [2041] L535_accept_S1-->L536_accept_S1: Formula: (and (<= 0 v_hdr.tcp.reservation_12) (< v_hdr.tcp.reservation_12 64))  InVars {hdr.tcp.reservation=v_hdr.tcp.reservation_12}  OutVars{hdr.tcp.reservation=v_hdr.tcp.reservation_12}  AuxVars[]  AssignedVars[] 2607#L536_accept_S1 [1596] L536_accept_S1-->L537_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.URG=v_hdr.tcp.URG_9}  AuxVars[]  AssignedVars[hdr.tcp.URG] 2608#L537_accept_S1 [2017] L537_accept_S1-->L538_accept_S1: Formula: (and (< v_hdr.tcp.URG_12 2) (<= 0 v_hdr.tcp.URG_12))  InVars {hdr.tcp.URG=v_hdr.tcp.URG_12}  OutVars{hdr.tcp.URG=v_hdr.tcp.URG_12}  AuxVars[]  AssignedVars[] 3033#L538_accept_S1 [1940] L538_accept_S1-->L539_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.ACK=v_hdr.tcp.ACK_12}  AuxVars[]  AssignedVars[hdr.tcp.ACK] 3034#L539_accept_S1 [2076] L539_accept_S1-->L540_accept_S1: Formula: (and (<= 0 v_hdr.tcp.ACK_10) (< v_hdr.tcp.ACK_10 2))  InVars {hdr.tcp.ACK=v_hdr.tcp.ACK_10}  OutVars{hdr.tcp.ACK=v_hdr.tcp.ACK_10}  AuxVars[]  AssignedVars[] 2662#L540_accept_S1 [1628] L540_accept_S1-->L541_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.PSH=v_hdr.tcp.PSH_9}  AuxVars[]  AssignedVars[hdr.tcp.PSH] 2663#L541_accept_S1 [1688] L541_accept_S1-->L542_accept_S1: Formula: (and (< v_hdr.tcp.PSH_11 2) (<= 0 v_hdr.tcp.PSH_11))  InVars {hdr.tcp.PSH=v_hdr.tcp.PSH_11}  OutVars{hdr.tcp.PSH=v_hdr.tcp.PSH_11}  AuxVars[]  AssignedVars[] 2749#L542_accept_S1 [2030] L542_accept_S1-->L543_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.RST=v_hdr.tcp.RST_9}  AuxVars[]  AssignedVars[hdr.tcp.RST] 2412#L543_accept_S1 [1491] L543_accept_S1-->L544_accept_S1: Formula: (and (< v_hdr.tcp.RST_12 2) (<= 0 v_hdr.tcp.RST_12))  InVars {hdr.tcp.RST=v_hdr.tcp.RST_12}  OutVars{hdr.tcp.RST=v_hdr.tcp.RST_12}  AuxVars[]  AssignedVars[] 2413#L544_accept_S1 [1496] L544_accept_S1-->L545_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.SYN=v_hdr.tcp.SYN_9}  AuxVars[]  AssignedVars[hdr.tcp.SYN] 2421#L545_accept_S1 [2062] L545_accept_S1-->L546_accept_S1: Formula: (and (<= 0 v_hdr.tcp.SYN_10) (< v_hdr.tcp.SYN_10 2))  InVars {hdr.tcp.SYN=v_hdr.tcp.SYN_10}  OutVars{hdr.tcp.SYN=v_hdr.tcp.SYN_10}  AuxVars[]  AssignedVars[] 2692#L546_accept_S1 [1648] L546_accept_S1-->L547_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.FIN=v_hdr.tcp.FIN_9}  AuxVars[]  AssignedVars[hdr.tcp.FIN] 2693#L547_accept_S1 [2144] L547_accept_S1-->L548_accept_S1: Formula: (and (<= 0 v_hdr.tcp.FIN_10) (< v_hdr.tcp.FIN_10 2))  InVars {hdr.tcp.FIN=v_hdr.tcp.FIN_10}  OutVars{hdr.tcp.FIN=v_hdr.tcp.FIN_10}  AuxVars[]  AssignedVars[] 2710#L548_accept_S1 [1666] L548_accept_S1-->L549_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.windowsize=v_hdr.tcp.windowsize_12}  AuxVars[]  AssignedVars[hdr.tcp.windowsize] 2711#L549_accept_S1 [2267] L549_accept_S1-->L550_accept_S1: Formula: (and (< v_hdr.tcp.windowsize_11 65536) (<= 0 v_hdr.tcp.windowsize_11))  InVars {hdr.tcp.windowsize=v_hdr.tcp.windowsize_11}  OutVars{hdr.tcp.windowsize=v_hdr.tcp.windowsize_11}  AuxVars[]  AssignedVars[] 2900#L550_accept_S1 [1804] L550_accept_S1-->L551_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.checksum=v_hdr.tcp.checksum_12}  AuxVars[]  AssignedVars[hdr.tcp.checksum] 2901#L551_accept_S1 [2147] L551_accept_S1-->L552_accept_S1: Formula: (and (< v_hdr.tcp.checksum_10 65536) (<= 0 v_hdr.tcp.checksum_10))  InVars {hdr.tcp.checksum=v_hdr.tcp.checksum_10}  OutVars{hdr.tcp.checksum=v_hdr.tcp.checksum_10}  AuxVars[]  AssignedVars[] 3101#L552_accept_S1 [2018] L552_accept_S1-->L553_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.pointer=v_hdr.tcp.pointer_10}  AuxVars[]  AssignedVars[hdr.tcp.pointer] 3102#L553_accept_S1 [2046] L553_accept_S1-->L554_accept_S1: Formula: (and (< v_hdr.tcp.pointer_11 65536) (<= 0 v_hdr.tcp.pointer_11))  InVars {hdr.tcp.pointer=v_hdr.tcp.pointer_11}  OutVars{hdr.tcp.pointer=v_hdr.tcp.pointer_11}  AuxVars[]  AssignedVars[] 2547#L554_accept_S1 [1559] L554_accept_S1-->L555_accept_S1: Formula: (not v_hdr.udp_tunnel.valid_20)  InVars {}  OutVars{hdr.udp_tunnel.valid=v_hdr.udp_tunnel.valid_20}  AuxVars[]  AssignedVars[hdr.udp_tunnel.valid] 2548#L555_accept_S1 [1738] L555_accept_S1-->L556_accept_S1: Formula: (= v_emit_33 (store v_emit_34 v_hdr.udp_tunnel_9 false))  InVars {emit=v_emit_34, hdr.udp_tunnel=v_hdr.udp_tunnel_9}  OutVars{emit=v_emit_33, hdr.udp_tunnel=v_hdr.udp_tunnel_9}  AuxVars[]  AssignedVars[emit] 2819#L556_accept_S1 [1894] L556_accept_S1-->L557_accept_S1: Formula: true  InVars {}  OutVars{hdr.udp_tunnel.srcport=v_hdr.udp_tunnel.srcport_16}  AuxVars[]  AssignedVars[hdr.udp_tunnel.srcport] 2500#L557_accept_S1 [1537] L557_accept_S1-->L558_accept_S1: Formula: (and (< v_hdr.udp_tunnel.srcport_17 65536) (<= 0 v_hdr.udp_tunnel.srcport_17))  InVars {hdr.udp_tunnel.srcport=v_hdr.udp_tunnel.srcport_17}  OutVars{hdr.udp_tunnel.srcport=v_hdr.udp_tunnel.srcport_17}  AuxVars[]  AssignedVars[] 2501#L558_accept_S1 [1759] L558_accept_S1-->L559_accept_S1: Formula: true  InVars {}  OutVars{hdr.udp_tunnel.dstport=v_hdr.udp_tunnel.dstport_14}  AuxVars[]  AssignedVars[hdr.udp_tunnel.dstport] 2385#L559_accept_S1 [1482] L559_accept_S1-->L560_accept_S1: Formula: (and (<= 0 v_hdr.udp_tunnel.dstport_15) (< v_hdr.udp_tunnel.dstport_15 65536))  InVars {hdr.udp_tunnel.dstport=v_hdr.udp_tunnel.dstport_15}  OutVars{hdr.udp_tunnel.dstport=v_hdr.udp_tunnel.dstport_15}  AuxVars[]  AssignedVars[] 2386#L560_accept_S1 [1743] L560_accept_S1-->L561_accept_S1: Formula: true  InVars {}  OutVars{hdr.udp_tunnel.userlength=v_hdr.udp_tunnel.userlength_17}  AuxVars[]  AssignedVars[hdr.udp_tunnel.userlength] 2822#L561_accept_S1 [1788] L561_accept_S1-->L562_accept_S1: Formula: (and (<= 0 v_hdr.udp_tunnel.userlength_16) (< v_hdr.udp_tunnel.userlength_16 65536))  InVars {hdr.udp_tunnel.userlength=v_hdr.udp_tunnel.userlength_16}  OutVars{hdr.udp_tunnel.userlength=v_hdr.udp_tunnel.userlength_16}  AuxVars[]  AssignedVars[] 2880#L562_accept_S1 [2139] L562_accept_S1-->L563_accept_S1: Formula: true  InVars {}  OutVars{hdr.udp_tunnel.checksum=v_hdr.udp_tunnel.checksum_17}  AuxVars[]  AssignedVars[hdr.udp_tunnel.checksum] 3161#L563_accept_S1 [2177] L563_accept_S1-->havocProcedureFINAL_accept_S1: Formula: (and (< v_hdr.udp_tunnel.checksum_14 65536) (<= 0 v_hdr.udp_tunnel.checksum_14))  InVars {hdr.udp_tunnel.checksum=v_hdr.udp_tunnel.checksum_14}  OutVars{hdr.udp_tunnel.checksum=v_hdr.udp_tunnel.checksum_14}  AuxVars[]  AssignedVars[] 2890#havocProcedureFINAL_accept_S1 [1795] havocProcedureFINAL_accept_S1-->havocProcedureEXIT_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2605#havocProcedureEXIT_accept_S1 >[2387] havocProcedureEXIT_accept_S1-->L568-D55: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2606#L568-D55 [2015] L568-D55-->L568_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2567#L568_accept_S1 [2264] L568_accept_S1-->L568_accept_S1-D49: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 2617#L568_accept_S1-D49 [1601] L568_accept_S1-D49-->_parser_MyParserENTRY_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2398#_parser_MyParserENTRY_accept_S1 [1571] _parser_MyParserENTRY_accept_S1-->_parser_MyParserENTRY_accept_S1-D17: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 2397#_parser_MyParserENTRY_accept_S1-D17 [1487] _parser_MyParserENTRY_accept_S1-D17-->startENTRY_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2399#startENTRY_accept_S1 [1798] startENTRY_accept_S1-->L736_accept_S1: Formula: v_hdr.ethernet.valid_15  InVars {}  OutVars{hdr.ethernet.valid=v_hdr.ethernet.valid_15}  AuxVars[]  AssignedVars[hdr.ethernet.valid] 2512#L736_accept_S1 [1542] L736_accept_S1-->L739_accept_S1: Formula: (not (= v_hdr.ethernet.etherType_39 34525))  InVars {hdr.ethernet.etherType=v_hdr.ethernet.etherType_39}  OutVars{hdr.ethernet.etherType=v_hdr.ethernet.etherType_39}  AuxVars[]  AssignedVars[] 2514#L739_accept_S1 [1662] L739_accept_S1-->L739-1_accept_S1: Formula: (not (= v_hdr.ethernet.etherType_35 2048))  InVars {hdr.ethernet.etherType=v_hdr.ethernet.etherType_35}  OutVars{hdr.ethernet.etherType=v_hdr.ethernet.etherType_35}  AuxVars[]  AssignedVars[] 2533#L739-1_accept_S1 [1806] L739-1_accept_S1-->startEXIT_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2903#startEXIT_accept_S1 >[2344] startEXIT_accept_S1-->_parser_MyParserFINAL-D65: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2598#_parser_MyParserFINAL-D65 [1591] _parser_MyParserFINAL-D65-->_parser_MyParserFINAL_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2599#_parser_MyParserFINAL_accept_S1 [1592] _parser_MyParserFINAL_accept_S1-->_parser_MyParserEXIT_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2600#_parser_MyParserEXIT_accept_S1 >[2283] _parser_MyParserEXIT_accept_S1-->L569-D103: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2787#L569-D103 [1714] L569-D103-->L569_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2701#L569_accept_S1 [1658] L569_accept_S1-->L569_accept_S1-D51: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 2702#L569_accept_S1-D51 [1684] L569_accept_S1-D51-->MyVerifyChecksumFINAL_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2743#MyVerifyChecksumFINAL_accept_S1 [1723] MyVerifyChecksumFINAL_accept_S1-->MyVerifyChecksumEXIT_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2802#MyVerifyChecksumEXIT_accept_S1 >[2336] MyVerifyChecksumEXIT_accept_S1-->L570-D73: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2956#L570-D73 [1848] L570-D73-->L570_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2341#L570_accept_S1 [2056] L570_accept_S1-->L570_accept_S1-D13: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 3125#L570_accept_S1-D13 [2209] L570_accept_S1-D13-->MyIngressENTRY_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 3041#MyIngressENTRY_accept_S1 [1947] MyIngressENTRY_accept_S1-->L259_accept_S1: Formula: (= v_standard_metadata.ingress_port_18 0)  InVars {standard_metadata.ingress_port=v_standard_metadata.ingress_port_18}  OutVars{standard_metadata.ingress_port=v_standard_metadata.ingress_port_18}  AuxVars[]  AssignedVars[] 3042#L259_accept_S1 [2180] L259_accept_S1-->L266_accept_S1: Formula: (not (= v_hdr.ipv4.dstAddr_21 2071690107))  InVars {hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_21}  OutVars{hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_21}  AuxVars[]  AssignedVars[] 2445#L266_accept_S1 [1511] L266_accept_S1-->L258_accept_S1: Formula: (or (= 281474976710655 v_hdr.ethernet.dstAddr_38) (= v_hdr.ethernet.srcAddr_29 0))  InVars {hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_29, hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_38}  OutVars{hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_29, hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_38}  AuxVars[]  AssignedVars[] 2446#L258_accept_S1 [1924] L258_accept_S1-->MyIngressEXIT_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 3020#MyIngressEXIT_accept_S1 >[2368] MyIngressEXIT_accept_S1-->L571-D107: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 3162#L571-D107 [2247] L571-D107-->L571_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2371#L571_accept_S1 [2088] L571_accept_S1-->L571_accept_S1-D7: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 3142#L571_accept_S1-D7 [2158] L571_accept_S1-D7-->MyEgressENTRY_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2481#MyEgressENTRY_accept_S1 [1527] MyEgressENTRY_accept_S1-->L249_accept_S1: Formula: (or (not (= 0 v_standard_metadata.egress_port_36)) (not v_hdr.tcp.valid_36))  InVars {standard_metadata.egress_port=v_standard_metadata.egress_port_36, hdr.tcp.valid=v_hdr.tcp.valid_36}  OutVars{standard_metadata.egress_port=v_standard_metadata.egress_port_36, hdr.tcp.valid=v_hdr.tcp.valid_36}  AuxVars[]  AssignedVars[] 2372#L249_accept_S1 [1585] L249_accept_S1-->MyEgressEXIT_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2875#MyEgressEXIT_accept_S1 >[2312] MyEgressEXIT_accept_S1-->L572-D89: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2876#L572-D89 [2123] L572-D89-->L572_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2739#L572_accept_S1 [1899] L572_accept_S1-->L572_accept_S1-D21: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 2997#L572_accept_S1-D21 [2213] L572_accept_S1-D21-->MyComputeChecksumFINAL_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 3326#MyComputeChecksumFINAL_accept_S1 [1852] MyComputeChecksumFINAL_accept_S1-->MyComputeChecksumEXIT_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2738#MyComputeChecksumEXIT_accept_S1 >[2326] MyComputeChecksumEXIT_accept_S1-->L573-D109: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2740#L573-D109 [1832] L573-D109-->L573_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2522#L573_accept_S1 [1546] L573_accept_S1-->L575_accept_S1: Formula: (not v_forward_31)  InVars {forward=v_forward_31}  OutVars{forward=v_forward_31}  AuxVars[]  AssignedVars[] 2523#L575_accept_S1 [1767] L575_accept_S1-->L574-1_accept_S1: Formula: v_drop_13  InVars {}  OutVars{drop=v_drop_13}  AuxVars[]  AssignedVars[drop] 2853#L574-1_accept_S1 [2191] L574-1_accept_S1-->L578_accept_S1: Formula: (let ((.cse0 (= v__old_hdr.ethernet.srcAddr_15 0))) (or (and .cse0 (not v__p4ltl_0_7)) (and v__p4ltl_0_7 (not .cse0))))  InVars {_old_hdr.ethernet.srcAddr=v__old_hdr.ethernet.srcAddr_15}  OutVars{_p4ltl_0=v__p4ltl_0_7, _old_hdr.ethernet.srcAddr=v__old_hdr.ethernet.srcAddr_15}  AuxVars[]  AssignedVars[_p4ltl_0] 3114#L578_accept_S1 [2040] L578_accept_S1-->L579_accept_S1: Formula: (let ((.cse0 (= 2071690107 v__old_hdr.ipv4.dstAddr_15))) (or (and v__p4ltl_1_7 (not .cse0)) (and .cse0 (not v__p4ltl_1_7))))  InVars {_old_hdr.ipv4.dstAddr=v__old_hdr.ipv4.dstAddr_15}  OutVars{_old_hdr.ipv4.dstAddr=v__old_hdr.ipv4.dstAddr_15, _p4ltl_1=v__p4ltl_1_7}  AuxVars[]  AssignedVars[_p4ltl_1] 2800#L579_accept_S1 [1721] L579_accept_S1-->L580_accept_S1: Formula: (let ((.cse0 (= 281474976710655 v__old_hdr.ethernet.dstAddr_15))) (or (and v__p4ltl_2_7 (not .cse0)) (and (not v__p4ltl_2_7) .cse0)))  InVars {_old_hdr.ethernet.dstAddr=v__old_hdr.ethernet.dstAddr_15}  OutVars{_p4ltl_2=v__p4ltl_2_7, _old_hdr.ethernet.dstAddr=v__old_hdr.ethernet.dstAddr_15}  AuxVars[]  AssignedVars[_p4ltl_2] 2389#L580_accept_S1 [1485] L580_accept_S1-->mainFINAL_accept_S1: Formula: (let ((.cse0 (= v_standard_metadata.ingress_port_22 0))) (or (and .cse0 v__p4ltl_3_6) (and (not .cse0) (not v__p4ltl_3_6))))  InVars {standard_metadata.ingress_port=v_standard_metadata.ingress_port_22}  OutVars{standard_metadata.ingress_port=v_standard_metadata.ingress_port_22, _p4ltl_3=v__p4ltl_3_6}  AuxVars[]  AssignedVars[_p4ltl_3] 2391#mainFINAL_accept_S1 [1840] mainFINAL_accept_S1-->mainEXIT_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2945#mainEXIT_accept_S1 >[2385] mainEXIT_accept_S1-->L586-1-D71: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 3048#L586-1-D71 [1955] L586-1-D71-->L586-1_accept_S1: Formula: (and v__p4ltl_3_11 v__p4ltl_2_11 v__p4ltl_1_11 v__p4ltl_0_11 (or (not v__p4ltl_2_11) (not v__p4ltl_0_11) (not v__p4ltl_3_11) (not v__p4ltl_1_11) (= 1 v_standard_metadata.egress_port_32)))  InVars {_p4ltl_2=v__p4ltl_2_11, standard_metadata.egress_port=v_standard_metadata.egress_port_32, _p4ltl_3=v__p4ltl_3_11, _p4ltl_0=v__p4ltl_0_11, _p4ltl_1=v__p4ltl_1_11}  OutVars{_p4ltl_2=v__p4ltl_2_11, standard_metadata.egress_port=v_standard_metadata.egress_port_32, _p4ltl_3=v__p4ltl_3_11, _p4ltl_0=v__p4ltl_0_11, _p4ltl_1=v__p4ltl_1_11}  AuxVars[]  AssignedVars[] 2562#L586-1_accept_S1 
[2023-02-07 04:58:50,238 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2023-02-07 04:58:50,238 INFO  L85        PathProgramCache]: Analyzing trace with hash -175130977, now seen corresponding path program 1 times
[2023-02-07 04:58:50,238 INFO  L118   FreeRefinementEngine]: Executing refinement strategy CAMEL
[2023-02-07 04:58:50,239 INFO  L333   FreeRefinementEngine]: Using trace check IpTcStrategyModuleSmtInterpolCraig [1716310911]
[2023-02-07 04:58:50,239 INFO  L95    rtionOrderModulation]: Keeping assertion order NOT_INCREMENTALLY
[2023-02-07 04:58:50,239 INFO  L127          SolverBuilder]: Constructing new instance of SMTInterpol with explicit timeout -1 ms and remaining time -1 ms
[2023-02-07 04:58:50,253 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-02-07 04:58:50,396 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 2
[2023-02-07 04:58:50,412 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-02-07 04:58:50,500 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 1
[2023-02-07 04:58:50,508 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-02-07 04:58:50,534 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 150
[2023-02-07 04:58:50,536 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-02-07 04:58:50,547 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 1
[2023-02-07 04:58:50,548 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-02-07 04:58:50,550 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 163
[2023-02-07 04:58:50,551 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-02-07 04:58:50,600 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 168
[2023-02-07 04:58:50,604 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-02-07 04:58:50,635 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 176
[2023-02-07 04:58:50,638 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-02-07 04:58:50,639 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 182
[2023-02-07 04:58:50,641 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-02-07 04:58:50,643 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2023-02-07 04:58:50,643 INFO  L136   FreeRefinementEngine]: Strategy CAMEL found an infeasible trace
[2023-02-07 04:58:50,643 INFO  L333   FreeRefinementEngine]: Using interpolant generator IpTcStrategyModuleSmtInterpolCraig [1716310911]
[2023-02-07 04:58:50,644 INFO  L157   FreeRefinementEngine]: IpTcStrategyModuleSmtInterpolCraig [1716310911] provided 1 perfect and 0 imperfect interpolant sequences
[2023-02-07 04:58:50,644 INFO  L184   FreeRefinementEngine]: Found 1 perfect and 0 imperfect interpolant sequences.
[2023-02-07 04:58:50,644 INFO  L197   FreeRefinementEngine]: Number of different interpolants: perfect sequences [10] imperfect sequences [] total 10
[2023-02-07 04:58:50,644 INFO  L121   tionRefinementEngine]: Using interpolant automaton builder IpAbStrategyModuleStraightlineAll [1888014073]
[2023-02-07 04:58:50,644 INFO  L85    oduleStraightlineAll]: Using 1 perfect interpolants to construct interpolant automaton
[2023-02-07 04:58:50,645 INFO  L757   eck$LassoCheckResult]: stem already infeasible
[2023-02-07 04:58:50,645 INFO  L100   FreeRefinementEngine]: Using predicate unifier PredicateUnifier provided by strategy CAMEL
[2023-02-07 04:58:50,646 INFO  L143   InterpolantAutomaton]: Constructing interpolant automaton starting with 11 interpolants.
[2023-02-07 04:58:50,646 INFO  L145   InterpolantAutomaton]: CoverageRelationStatistics Valid=31, Invalid=79, Unknown=0, NotChecked=0, Total=110
[2023-02-07 04:58:50,646 INFO  L87              Difference]: Start difference. First operand 1005 states and 1053 transitions. cyclomatic complexity: 49 Second operand  has 11 states, 10 states have (on average 18.2) internal successors, (182), 4 states have internal predecessors, (182), 2 states have call successors, (9), 7 states have call predecessors, (9), 3 states have return successors, (8), 3 states have call predecessors, (8), 2 states have call successors, (8)
[2023-02-07 04:58:53,140 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2023-02-07 04:58:53,140 INFO  L93              Difference]: Finished difference Result 1201 states and 1274 transitions.
[2023-02-07 04:58:53,140 INFO  L141   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 28 states. 
[2023-02-07 04:58:53,140 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1201 states and 1274 transitions.
[2023-02-07 04:58:53,143 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 14
[2023-02-07 04:58:53,145 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1201 states to 1201 states and 1274 transitions.
[2023-02-07 04:58:53,145 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2
[2023-02-07 04:58:53,146 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2
[2023-02-07 04:58:53,146 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1201 states and 1274 transitions.
[2023-02-07 04:58:53,147 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2023-02-07 04:58:53,147 INFO  L369   hiAutomatonCegarLoop]: Abstraction has 1201 states and 1274 transitions.
[2023-02-07 04:58:53,147 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1201 states and 1274 transitions.
[2023-02-07 04:58:53,158 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1201 to 1097.
[2023-02-07 04:58:53,159 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand  has 1097 states, 944 states have (on average 1.048728813559322) internal successors, (990), 944 states have internal predecessors, (990), 77 states have call successors, (77), 77 states have call predecessors, (77), 76 states have return successors, (86), 76 states have call predecessors, (86), 76 states have call successors, (86)
[2023-02-07 04:58:53,161 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1097 states to 1097 states and 1153 transitions.
[2023-02-07 04:58:53,161 INFO  L392   hiAutomatonCegarLoop]: Abstraction has 1097 states and 1153 transitions.
[2023-02-07 04:58:53,161 INFO  L399   stractBuchiCegarLoop]: Abstraction has 1097 states and 1153 transitions.
[2023-02-07 04:58:53,161 INFO  L287   stractBuchiCegarLoop]: ======== Iteration 3 ============
[2023-02-07 04:58:53,161 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1097 states and 1153 transitions.
[2023-02-07 04:58:53,164 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2023-02-07 04:58:53,164 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2023-02-07 04:58:53,164 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2023-02-07 04:58:53,166 INFO  L179   hiAutomatonCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2023-02-07 04:58:53,166 INFO  L180   hiAutomatonCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2023-02-07 04:58:53,168 INFO  L752   eck$LassoCheckResult]: Stem: 5062#ULTIMATE.startENTRY_NONWA [1520] ULTIMATE.startENTRY_NONWA-->L586-1_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 5061#L586-1_T0_init [1494] L586-1_T0_init-->L586_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 4989#L586_T0_init [2105] L586_T0_init-->L586_T0_init-D20: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 5785#L586_T0_init-D20 [2227] L586_T0_init-D20-->mainENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 4974#mainENTRY_T0_init [1864] mainENTRY_T0_init-->mainENTRY_T0_init-D38: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 5316#mainENTRY_T0_init-D38 [1636] mainENTRY_T0_init-D38-->havocProcedureENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5317#havocProcedureENTRY_T0_init [1671] havocProcedureENTRY_T0_init-->L421_T0_init: Formula: (not v_drop_12)  InVars {}  OutVars{drop=v_drop_12}  AuxVars[]  AssignedVars[drop] 5364#L421_T0_init [2201] L421_T0_init-->L422_T0_init: Formula: (not v_forward_17)  InVars {}  OutVars{forward=v_forward_17}  AuxVars[]  AssignedVars[forward] 5804#L422_T0_init [2151] L422_T0_init-->L423_T0_init: Formula: true  InVars {}  OutVars{standard_metadata.ingress_port=v_standard_metadata.ingress_port_16}  AuxVars[]  AssignedVars[standard_metadata.ingress_port] 5685#L423_T0_init [1949] L423_T0_init-->L424_T0_init: Formula: (and (<= 0 v_standard_metadata.ingress_port_15) (< v_standard_metadata.ingress_port_15 512))  InVars {standard_metadata.ingress_port=v_standard_metadata.ingress_port_15}  OutVars{standard_metadata.ingress_port=v_standard_metadata.ingress_port_15}  AuxVars[]  AssignedVars[] 5686#L424_T0_init [2007] L424_T0_init-->L425_T0_init: Formula: (= v_standard_metadata.egress_spec_16 0)  InVars {}  OutVars{standard_metadata.egress_spec=v_standard_metadata.egress_spec_16}  AuxVars[]  AssignedVars[standard_metadata.egress_spec] 5723#L425_T0_init [1998] L425_T0_init-->L426_T0_init: Formula: (= 0 v_standard_metadata.egress_port_18)  InVars {}  OutVars{standard_metadata.egress_port=v_standard_metadata.egress_port_18}  AuxVars[]  AssignedVars[standard_metadata.egress_port] 5469#L426_T0_init [1739] L426_T0_init-->L427_T0_init: Formula: true  InVars {}  OutVars{standard_metadata.instance_type=v_standard_metadata.instance_type_10}  AuxVars[]  AssignedVars[standard_metadata.instance_type] 5012#L427_T0_init [1475] L427_T0_init-->L428_T0_init: Formula: (and (< v_standard_metadata.instance_type_11 4294967296) (<= 0 v_standard_metadata.instance_type_11))  InVars {standard_metadata.instance_type=v_standard_metadata.instance_type_11}  OutVars{standard_metadata.instance_type=v_standard_metadata.instance_type_11}  AuxVars[]  AssignedVars[] 5013#L428_T0_init [1613] L428_T0_init-->L429_T0_init: Formula: true  InVars {}  OutVars{standard_metadata.packet_length=v_standard_metadata.packet_length_12}  AuxVars[]  AssignedVars[standard_metadata.packet_length] 5274#L429_T0_init [1908] L429_T0_init-->L430_T0_init: Formula: (and (<= 0 v_standard_metadata.packet_length_11) (< v_standard_metadata.packet_length_11 4294967296))  InVars {standard_metadata.packet_length=v_standard_metadata.packet_length_11}  OutVars{standard_metadata.packet_length=v_standard_metadata.packet_length_11}  AuxVars[]  AssignedVars[] 5161#L430_T0_init [1545] L430_T0_init-->L431_T0_init: Formula: true  InVars {}  OutVars{standard_metadata.enq_timestamp=v_standard_metadata.enq_timestamp_10}  AuxVars[]  AssignedVars[standard_metadata.enq_timestamp] 5162#L431_T0_init [1642] L431_T0_init-->L432_T0_init: Formula: (and (<= 0 v_standard_metadata.enq_timestamp_9) (< v_standard_metadata.enq_timestamp_9 4294967296))  InVars {standard_metadata.enq_timestamp=v_standard_metadata.enq_timestamp_9}  OutVars{standard_metadata.enq_timestamp=v_standard_metadata.enq_timestamp_9}  AuxVars[]  AssignedVars[] 5323#L432_T0_init [2160] L432_T0_init-->L433_T0_init: Formula: (= v_standard_metadata.enq_qdepth_9 0)  InVars {}  OutVars{standard_metadata.enq_qdepth=v_standard_metadata.enq_qdepth_9}  AuxVars[]  AssignedVars[standard_metadata.enq_qdepth] 5558#L433_T0_init [1815] L433_T0_init-->L434_T0_init: Formula: true  InVars {}  OutVars{standard_metadata.deq_timedelta=v_standard_metadata.deq_timedelta_12}  AuxVars[]  AssignedVars[standard_metadata.deq_timedelta] 5559#L434_T0_init [2053] L434_T0_init-->L435_T0_init: Formula: (and (<= 0 v_standard_metadata.deq_timedelta_11) (< v_standard_metadata.deq_timedelta_11 4294967296))  InVars {standard_metadata.deq_timedelta=v_standard_metadata.deq_timedelta_11}  OutVars{standard_metadata.deq_timedelta=v_standard_metadata.deq_timedelta_11}  AuxVars[]  AssignedVars[] 5135#L435_T0_init [1534] L435_T0_init-->L436_T0_init: Formula: true  InVars {}  OutVars{standard_metadata.deq_qdepth=v_standard_metadata.deq_qdepth_10}  AuxVars[]  AssignedVars[standard_metadata.deq_qdepth] 5136#L436_T0_init [2057] L436_T0_init-->L437_T0_init: Formula: (and (< v_standard_metadata.deq_qdepth_11 524288) (<= 0 v_standard_metadata.deq_qdepth_11))  InVars {standard_metadata.deq_qdepth=v_standard_metadata.deq_qdepth_11}  OutVars{standard_metadata.deq_qdepth=v_standard_metadata.deq_qdepth_11}  AuxVars[]  AssignedVars[] 5348#L437_T0_init [1659] L437_T0_init-->L438_T0_init: Formula: true  InVars {}  OutVars{standard_metadata.ingress_global_timestamp=v_standard_metadata.ingress_global_timestamp_11}  AuxVars[]  AssignedVars[standard_metadata.ingress_global_timestamp] 5301#L438_T0_init [1627] L438_T0_init-->L439_T0_init: Formula: (and (<= 0 v_standard_metadata.ingress_global_timestamp_12) (< v_standard_metadata.ingress_global_timestamp_12 281474976710656))  InVars {standard_metadata.ingress_global_timestamp=v_standard_metadata.ingress_global_timestamp_12}  OutVars{standard_metadata.ingress_global_timestamp=v_standard_metadata.ingress_global_timestamp_12}  AuxVars[]  AssignedVars[] 5302#L439_T0_init [2231] L439_T0_init-->L440_T0_init: Formula: true  InVars {}  OutVars{standard_metadata.egress_global_timestamp=v_standard_metadata.egress_global_timestamp_11}  AuxVars[]  AssignedVars[standard_metadata.egress_global_timestamp] 5047#L440_T0_init [1488] L440_T0_init-->L441_T0_init: Formula: (and (<= 0 v_standard_metadata.egress_global_timestamp_12) (< v_standard_metadata.egress_global_timestamp_12 281474976710656))  InVars {standard_metadata.egress_global_timestamp=v_standard_metadata.egress_global_timestamp_12}  OutVars{standard_metadata.egress_global_timestamp=v_standard_metadata.egress_global_timestamp_12}  AuxVars[]  AssignedVars[] 5048#L441_T0_init [1497] L441_T0_init-->L442_T0_init: Formula: (= 0 v_standard_metadata.mcast_grp_8)  InVars {}  OutVars{standard_metadata.mcast_grp=v_standard_metadata.mcast_grp_8}  AuxVars[]  AssignedVars[standard_metadata.mcast_grp] 5066#L442_T0_init [1783] L442_T0_init-->L443_T0_init: Formula: (= v_standard_metadata.egress_rid_9 0)  InVars {}  OutVars{standard_metadata.egress_rid=v_standard_metadata.egress_rid_9}  AuxVars[]  AssignedVars[standard_metadata.egress_rid] 5519#L443_T0_init [1900] L443_T0_init-->L444_T0_init: Formula: (= v_standard_metadata.checksum_error_8 0)  InVars {}  OutVars{standard_metadata.checksum_error=v_standard_metadata.checksum_error_8}  AuxVars[]  AssignedVars[standard_metadata.checksum_error] 5430#L444_T0_init [1711] L444_T0_init-->L445_T0_init: Formula: (= v_standard_metadata.parser_error_9 0)  InVars {}  OutVars{standard_metadata.parser_error=v_standard_metadata.parser_error_9}  AuxVars[]  AssignedVars[standard_metadata.parser_error] 5431#L445_T0_init [2251] L445_T0_init-->L446_T0_init: Formula: (= v_standard_metadata.priority_9 0)  InVars {}  OutVars{standard_metadata.priority=v_standard_metadata.priority_9}  AuxVars[]  AssignedVars[standard_metadata.priority] 5788#L446_T0_init [2120] L446_T0_init-->L447_T0_init: Formula: (not v_hdr.ethernet.valid_13)  InVars {}  OutVars{hdr.ethernet.valid=v_hdr.ethernet.valid_13}  AuxVars[]  AssignedVars[hdr.ethernet.valid] 5505#L447_T0_init [1771] L447_T0_init-->L448_T0_init: Formula: (= v_emit_37 (store v_emit_38 v_hdr.ethernet_3 false))  InVars {emit=v_emit_38, hdr.ethernet=v_hdr.ethernet_3}  OutVars{emit=v_emit_37, hdr.ethernet=v_hdr.ethernet_3}  AuxVars[]  AssignedVars[emit] 5506#L448_T0_init [1833] L448_T0_init-->L449_T0_init: Formula: true  InVars {}  OutVars{hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_27}  AuxVars[]  AssignedVars[hdr.ethernet.dstAddr] 5577#L449_T0_init [2216] L449_T0_init-->L450_T0_init: Formula: (= v_hdr.ethernet.dstAddr_29 v__old_hdr.ethernet.dstAddr_12)  InVars {hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_29}  OutVars{_old_hdr.ethernet.dstAddr=v__old_hdr.ethernet.dstAddr_12, hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_29}  AuxVars[]  AssignedVars[_old_hdr.ethernet.dstAddr] 5413#L450_T0_init [1701] L450_T0_init-->L451_T0_init: Formula: (= v_hdr.ethernet.dstAddr_30 v__old_hdr.ethernet.dstAddr_13)  InVars {hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_30}  OutVars{_old_hdr.ethernet.dstAddr=v__old_hdr.ethernet.dstAddr_13, hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_30}  AuxVars[]  AssignedVars[_old_hdr.ethernet.dstAddr] 5414#L451_T0_init [2155] L451_T0_init-->L452_T0_init: Formula: true  InVars {}  OutVars{hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_22}  AuxVars[]  AssignedVars[hdr.ethernet.srcAddr] 5695#L452_T0_init [1964] L452_T0_init-->L453_T0_init: Formula: (= v_hdr.ethernet.srcAddr_27 v__old_hdr.ethernet.srcAddr_13)  InVars {hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_27}  OutVars{hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_27, _old_hdr.ethernet.srcAddr=v__old_hdr.ethernet.srcAddr_13}  AuxVars[]  AssignedVars[_old_hdr.ethernet.srcAddr] 5692#L453_T0_init [1958] L453_T0_init-->L454_T0_init: Formula: (= v_hdr.ethernet.srcAddr_25 v__old_hdr.ethernet.srcAddr_12)  InVars {hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_25}  OutVars{hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_25, _old_hdr.ethernet.srcAddr=v__old_hdr.ethernet.srcAddr_12}  AuxVars[]  AssignedVars[_old_hdr.ethernet.srcAddr] 5503#L454_T0_init [1770] L454_T0_init-->L455_T0_init: Formula: true  InVars {}  OutVars{hdr.ethernet.etherType=v_hdr.ethernet.etherType_24}  AuxVars[]  AssignedVars[hdr.ethernet.etherType] 5504#L455_T0_init [1870] L455_T0_init-->L456_T0_init: Formula: (and (<= 0 v_hdr.ethernet.etherType_25) (< v_hdr.ethernet.etherType_25 65536))  InVars {hdr.ethernet.etherType=v_hdr.ethernet.etherType_25}  OutVars{hdr.ethernet.etherType=v_hdr.ethernet.etherType_25}  AuxVars[]  AssignedVars[] 5614#L456_T0_init [2121] L456_T0_init-->L457_T0_init: Formula: (not v_hdr.ipv6.valid_17)  InVars {}  OutVars{hdr.ipv6.valid=v_hdr.ipv6.valid_17}  AuxVars[]  AssignedVars[hdr.ipv6.valid] 5641#L457_T0_init [1901] L457_T0_init-->L458_T0_init: Formula: (= v_emit_41 (store v_emit_42 v_hdr.ipv6_10 false))  InVars {emit=v_emit_42, hdr.ipv6=v_hdr.ipv6_10}  OutVars{emit=v_emit_41, hdr.ipv6=v_hdr.ipv6_10}  AuxVars[]  AssignedVars[emit] 5541#L458_T0_init [1803] L458_T0_init-->L459_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv6.version=v_hdr.ipv6.version_18}  AuxVars[]  AssignedVars[hdr.ipv6.version] 5542#L459_T0_init [2031] L459_T0_init-->L460_T0_init: Formula: (and (<= 0 v_hdr.ipv6.version_17) (< v_hdr.ipv6.version_17 16))  InVars {hdr.ipv6.version=v_hdr.ipv6.version_17}  OutVars{hdr.ipv6.version=v_hdr.ipv6.version_17}  AuxVars[]  AssignedVars[] 5252#L460_T0_init [1599] L460_T0_init-->L461_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv6.trafclass=v_hdr.ipv6.trafclass_12}  AuxVars[]  AssignedVars[hdr.ipv6.trafclass] 5147#L461_T0_init [1539] L461_T0_init-->L462_T0_init: Formula: (and (< v_hdr.ipv6.trafclass_11 256) (<= 0 v_hdr.ipv6.trafclass_11))  InVars {hdr.ipv6.trafclass=v_hdr.ipv6.trafclass_11}  OutVars{hdr.ipv6.trafclass=v_hdr.ipv6.trafclass_11}  AuxVars[]  AssignedVars[] 5148#L462_T0_init [1654] L462_T0_init-->L463_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv6.flowlabel=v_hdr.ipv6.flowlabel_9}  AuxVars[]  AssignedVars[hdr.ipv6.flowlabel] 5031#L463_T0_init [1484] L463_T0_init-->L464_T0_init: Formula: (and (<= 0 v_hdr.ipv6.flowlabel_12) (< v_hdr.ipv6.flowlabel_12 1048576))  InVars {hdr.ipv6.flowlabel=v_hdr.ipv6.flowlabel_12}  OutVars{hdr.ipv6.flowlabel=v_hdr.ipv6.flowlabel_12}  AuxVars[]  AssignedVars[] 5032#L464_T0_init [1528] L464_T0_init-->L465_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv6.payloadlen=v_hdr.ipv6.payloadlen_18}  AuxVars[]  AssignedVars[hdr.ipv6.payloadlen] 5124#L465_T0_init [1682] L465_T0_init-->L466_T0_init: Formula: (and (<= 0 v_hdr.ipv6.payloadlen_20) (< v_hdr.ipv6.payloadlen_20 65536))  InVars {hdr.ipv6.payloadlen=v_hdr.ipv6.payloadlen_20}  OutVars{hdr.ipv6.payloadlen=v_hdr.ipv6.payloadlen_20}  AuxVars[]  AssignedVars[] 5383#L466_T0_init [1760] L466_T0_init-->L467_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv6.nextheader=v_hdr.ipv6.nextheader_22}  AuxVars[]  AssignedVars[hdr.ipv6.nextheader] 5464#L467_T0_init [1735] L467_T0_init-->L468_T0_init: Formula: (and (< v_hdr.ipv6.nextheader_19 256) (<= 0 v_hdr.ipv6.nextheader_19))  InVars {hdr.ipv6.nextheader=v_hdr.ipv6.nextheader_19}  OutVars{hdr.ipv6.nextheader=v_hdr.ipv6.nextheader_19}  AuxVars[]  AssignedVars[] 5465#L468_T0_init [1839] L468_T0_init-->L469_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv6.hoplimit=v_hdr.ipv6.hoplimit_19}  AuxVars[]  AssignedVars[hdr.ipv6.hoplimit] 5585#L469_T0_init [1913] L469_T0_init-->L470_T0_init: Formula: (and (<= 0 v_hdr.ipv6.hoplimit_18) (< v_hdr.ipv6.hoplimit_18 256))  InVars {hdr.ipv6.hoplimit=v_hdr.ipv6.hoplimit_18}  OutVars{hdr.ipv6.hoplimit=v_hdr.ipv6.hoplimit_18}  AuxVars[]  AssignedVars[] 5650#L470_T0_init [2165] L470_T0_init-->L471_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv6.srcAddr=v_hdr.ipv6.srcAddr_16}  AuxVars[]  AssignedVars[hdr.ipv6.srcAddr] 4978#L471_T0_init [1460] L471_T0_init-->L472_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv6.dstAddr=v_hdr.ipv6.dstAddr_16}  AuxVars[]  AssignedVars[hdr.ipv6.dstAddr] 4979#L472_T0_init [1722] L472_T0_init-->L473_T0_init: Formula: (not v_hdr.ipv4_tunnel.valid_19)  InVars {}  OutVars{hdr.ipv4_tunnel.valid=v_hdr.ipv4_tunnel.valid_19}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.valid] 5220#L473_T0_init [1580] L473_T0_init-->L474_T0_init: Formula: (= v_emit_39 (store v_emit_40 v_hdr.ipv4_tunnel_9 false))  InVars {emit=v_emit_40, hdr.ipv4_tunnel=v_hdr.ipv4_tunnel_9}  OutVars{emit=v_emit_39, hdr.ipv4_tunnel=v_hdr.ipv4_tunnel_9}  AuxVars[]  AssignedVars[emit] 5201#L474_T0_init [1568] L474_T0_init-->L475_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.version=v_hdr.ipv4_tunnel.version_16}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.version] 5202#L475_T0_init [1816] L475_T0_init-->L476_T0_init: Formula: (and (<= 0 v_hdr.ipv4_tunnel.version_17) (< v_hdr.ipv4_tunnel.version_17 16))  InVars {hdr.ipv4_tunnel.version=v_hdr.ipv4_tunnel.version_17}  OutVars{hdr.ipv4_tunnel.version=v_hdr.ipv4_tunnel.version_17}  AuxVars[]  AssignedVars[] 5560#L476_T0_init [1885] L476_T0_init-->L477_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.ihl=v_hdr.ipv4_tunnel.ihl_14}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.ihl] 4976#L477_T0_init [1459] L477_T0_init-->L478_T0_init: Formula: (and (< v_hdr.ipv4_tunnel.ihl_17 16) (<= 0 v_hdr.ipv4_tunnel.ihl_17))  InVars {hdr.ipv4_tunnel.ihl=v_hdr.ipv4_tunnel.ihl_17}  OutVars{hdr.ipv4_tunnel.ihl=v_hdr.ipv4_tunnel.ihl_17}  AuxVars[]  AssignedVars[] 4977#L478_T0_init [1744] L478_T0_init-->L479_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.diffserv=v_hdr.ipv4_tunnel.diffserv_15}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.diffserv] 5355#L479_T0_init [1664] L479_T0_init-->L480_T0_init: Formula: (and (< v_hdr.ipv4_tunnel.diffserv_14 256) (<= 0 v_hdr.ipv4_tunnel.diffserv_14))  InVars {hdr.ipv4_tunnel.diffserv=v_hdr.ipv4_tunnel.diffserv_14}  OutVars{hdr.ipv4_tunnel.diffserv=v_hdr.ipv4_tunnel.diffserv_14}  AuxVars[]  AssignedVars[] 5256#L480_T0_init [1602] L480_T0_init-->L481_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.totalLen=v_hdr.ipv4_tunnel.totalLen_14}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.totalLen] 5257#L481_T0_init [2263] L481_T0_init-->L482_T0_init: Formula: (and (< v_hdr.ipv4_tunnel.totalLen_17 65536) (<= 0 v_hdr.ipv4_tunnel.totalLen_17))  InVars {hdr.ipv4_tunnel.totalLen=v_hdr.ipv4_tunnel.totalLen_17}  OutVars{hdr.ipv4_tunnel.totalLen=v_hdr.ipv4_tunnel.totalLen_17}  AuxVars[]  AssignedVars[] 5426#L482_T0_init [1709] L482_T0_init-->L483_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.identification=v_hdr.ipv4_tunnel.identification_15}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.identification] 5427#L483_T0_init [1823] L483_T0_init-->L484_T0_init: Formula: (and (<= 0 v_hdr.ipv4_tunnel.identification_17) (< v_hdr.ipv4_tunnel.identification_17 65536))  InVars {hdr.ipv4_tunnel.identification=v_hdr.ipv4_tunnel.identification_17}  OutVars{hdr.ipv4_tunnel.identification=v_hdr.ipv4_tunnel.identification_17}  AuxVars[]  AssignedVars[] 5566#L484_T0_init [1910] L484_T0_init-->L485_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.flags=v_hdr.ipv4_tunnel.flags_16}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.flags] 5330#L485_T0_init [1647] L485_T0_init-->L486_T0_init: Formula: (and (< v_hdr.ipv4_tunnel.flags_15 8) (<= 0 v_hdr.ipv4_tunnel.flags_15))  InVars {hdr.ipv4_tunnel.flags=v_hdr.ipv4_tunnel.flags_15}  OutVars{hdr.ipv4_tunnel.flags=v_hdr.ipv4_tunnel.flags_15}  AuxVars[]  AssignedVars[] 5331#L486_T0_init [1904] L486_T0_init-->L487_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.fragOffset=v_hdr.ipv4_tunnel.fragOffset_17}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.fragOffset] 5644#L487_T0_init [2094] L487_T0_init-->L488_T0_init: Formula: (and (< v_hdr.ipv4_tunnel.fragOffset_16 8192) (<= 0 v_hdr.ipv4_tunnel.fragOffset_16))  InVars {hdr.ipv4_tunnel.fragOffset=v_hdr.ipv4_tunnel.fragOffset_16}  OutVars{hdr.ipv4_tunnel.fragOffset=v_hdr.ipv4_tunnel.fragOffset_16}  AuxVars[]  AssignedVars[] 5780#L488_T0_init [2161] L488_T0_init-->L489_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.ttl=v_hdr.ipv4_tunnel.ttl_14}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.ttl] 5775#L489_T0_init [2081] L489_T0_init-->L490_T0_init: Formula: (and (< v_hdr.ipv4_tunnel.ttl_16 256) (<= 0 v_hdr.ipv4_tunnel.ttl_16))  InVars {hdr.ipv4_tunnel.ttl=v_hdr.ipv4_tunnel.ttl_16}  OutVars{hdr.ipv4_tunnel.ttl=v_hdr.ipv4_tunnel.ttl_16}  AuxVars[]  AssignedVars[] 5049#L490_T0_init [1489] L490_T0_init-->L491_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.protocol=v_hdr.ipv4_tunnel.protocol_17}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.protocol] 5050#L491_T0_init [2221] L491_T0_init-->L492_T0_init: Formula: (and (< v_hdr.ipv4_tunnel.protocol_16 256) (<= 0 v_hdr.ipv4_tunnel.protocol_16))  InVars {hdr.ipv4_tunnel.protocol=v_hdr.ipv4_tunnel.protocol_16}  OutVars{hdr.ipv4_tunnel.protocol=v_hdr.ipv4_tunnel.protocol_16}  AuxVars[]  AssignedVars[] 5831#L492_T0_init [2220] L492_T0_init-->L493_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.hdrChecksum=v_hdr.ipv4_tunnel.hdrChecksum_11}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.hdrChecksum] 5832#L493_T0_init [2277] L493_T0_init-->L494_T0_init: Formula: (and (<= 0 v_hdr.ipv4_tunnel.hdrChecksum_12) (< v_hdr.ipv4_tunnel.hdrChecksum_12 65536))  InVars {hdr.ipv4_tunnel.hdrChecksum=v_hdr.ipv4_tunnel.hdrChecksum_12}  OutVars{hdr.ipv4_tunnel.hdrChecksum=v_hdr.ipv4_tunnel.hdrChecksum_12}  AuxVars[]  AssignedVars[] 5790#L494_T0_init [2126] L494_T0_init-->L495_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.srcAddr=v_hdr.ipv4_tunnel.srcAddr_13}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.srcAddr] 5059#L495_T0_init [1493] L495_T0_init-->L496_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.dstAddr=v_hdr.ipv4_tunnel.dstAddr_13}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.dstAddr] 5060#L496_T0_init [1517] L496_T0_init-->L497_T0_init: Formula: (not v_hdr.ipv4.valid_25)  InVars {}  OutVars{hdr.ipv4.valid=v_hdr.ipv4.valid_25}  AuxVars[]  AssignedVars[hdr.ipv4.valid] 5101#L497_T0_init [1794] L497_T0_init-->L498_T0_init: Formula: (= v_emit_27 (store v_emit_28 v_hdr.ipv4_2 false))  InVars {hdr.ipv4=v_hdr.ipv4_2, emit=v_emit_28}  OutVars{hdr.ipv4=v_hdr.ipv4_2, emit=v_emit_27}  AuxVars[]  AssignedVars[emit] 5532#L498_T0_init [2117] L498_T0_init-->L499_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.version=v_hdr.ipv4.version_13}  AuxVars[]  AssignedVars[hdr.ipv4.version] 5402#L499_T0_init [1696] L499_T0_init-->L500_T0_init: Formula: (and (< v_hdr.ipv4.version_10 16) (<= 0 v_hdr.ipv4.version_10))  InVars {hdr.ipv4.version=v_hdr.ipv4.version_10}  OutVars{hdr.ipv4.version=v_hdr.ipv4.version_10}  AuxVars[]  AssignedVars[] 5403#L500_T0_init [2045] L500_T0_init-->L501_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.ihl=v_hdr.ipv4.ihl_9}  AuxVars[]  AssignedVars[hdr.ipv4.ihl] 5753#L501_T0_init [2140] L501_T0_init-->L502_T0_init: Formula: (and (< v_hdr.ipv4.ihl_10 16) (<= 0 v_hdr.ipv4.ihl_10))  InVars {hdr.ipv4.ihl=v_hdr.ipv4.ihl_10}  OutVars{hdr.ipv4.ihl=v_hdr.ipv4.ihl_10}  AuxVars[]  AssignedVars[] 5768#L502_T0_init [2067] L502_T0_init-->L503_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.diffserv=v_hdr.ipv4.diffserv_13}  AuxVars[]  AssignedVars[hdr.ipv4.diffserv] 5732#L503_T0_init [2009] L503_T0_init-->L504_T0_init: Formula: (and (<= 0 v_hdr.ipv4.diffserv_12) (< v_hdr.ipv4.diffserv_12 256))  InVars {hdr.ipv4.diffserv=v_hdr.ipv4.diffserv_12}  OutVars{hdr.ipv4.diffserv=v_hdr.ipv4.diffserv_12}  AuxVars[]  AssignedVars[] 5621#L504_T0_init [1875] L504_T0_init-->L505_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.totalLen=v_hdr.ipv4.totalLen_14}  AuxVars[]  AssignedVars[hdr.ipv4.totalLen] 5039#L505_T0_init [1486] L505_T0_init-->L506_T0_init: Formula: (and (< v_hdr.ipv4.totalLen_15 65536) (<= 0 v_hdr.ipv4.totalLen_15))  InVars {hdr.ipv4.totalLen=v_hdr.ipv4.totalLen_15}  OutVars{hdr.ipv4.totalLen=v_hdr.ipv4.totalLen_15}  AuxVars[]  AssignedVars[] 5040#L506_T0_init [2122] L506_T0_init-->L507_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.identification=v_hdr.ipv4.identification_12}  AuxVars[]  AssignedVars[hdr.ipv4.identification] 5651#L507_T0_init [1914] L507_T0_init-->L508_T0_init: Formula: (and (< v_hdr.ipv4.identification_11 65536) (<= 0 v_hdr.ipv4.identification_11))  InVars {hdr.ipv4.identification=v_hdr.ipv4.identification_11}  OutVars{hdr.ipv4.identification=v_hdr.ipv4.identification_11}  AuxVars[]  AssignedVars[] 5652#L508_T0_init [2054] L508_T0_init-->L509_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.flags=v_hdr.ipv4.flags_10}  AuxVars[]  AssignedVars[hdr.ipv4.flags] 5759#L509_T0_init [2246] L509_T0_init-->L510_T0_init: Formula: (and (< v_hdr.ipv4.flags_13 8) (<= 0 v_hdr.ipv4.flags_13))  InVars {hdr.ipv4.flags=v_hdr.ipv4.flags_13}  OutVars{hdr.ipv4.flags=v_hdr.ipv4.flags_13}  AuxVars[]  AssignedVars[] 5127#L510_T0_init [1529] L510_T0_init-->L511_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.fragOffset=v_hdr.ipv4.fragOffset_11}  AuxVars[]  AssignedVars[hdr.ipv4.fragOffset] 5128#L511_T0_init [1817] L511_T0_init-->L512_T0_init: Formula: (and (< v_hdr.ipv4.fragOffset_10 8192) (<= 0 v_hdr.ipv4.fragOffset_10))  InVars {hdr.ipv4.fragOffset=v_hdr.ipv4.fragOffset_10}  OutVars{hdr.ipv4.fragOffset=v_hdr.ipv4.fragOffset_10}  AuxVars[]  AssignedVars[] 5278#L512_T0_init [1615] L512_T0_init-->L513_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.ttl=v_hdr.ipv4.ttl_10}  AuxVars[]  AssignedVars[hdr.ipv4.ttl] 5279#L513_T0_init [2035] L513_T0_init-->L514_T0_init: Formula: (and (<= 0 v_hdr.ipv4.ttl_11) (< v_hdr.ipv4.ttl_11 256))  InVars {hdr.ipv4.ttl=v_hdr.ipv4.ttl_11}  OutVars{hdr.ipv4.ttl=v_hdr.ipv4.ttl_11}  AuxVars[]  AssignedVars[] 5421#L514_T0_init [1706] L514_T0_init-->L515_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.protocol=v_hdr.ipv4.protocol_12}  AuxVars[]  AssignedVars[hdr.ipv4.protocol] 5422#L515_T0_init [1778] L515_T0_init-->L516_T0_init: Formula: (and (<= 0 v_hdr.ipv4.protocol_14) (< v_hdr.ipv4.protocol_14 256))  InVars {hdr.ipv4.protocol=v_hdr.ipv4.protocol_14}  OutVars{hdr.ipv4.protocol=v_hdr.ipv4.protocol_14}  AuxVars[]  AssignedVars[] 5514#L516_T0_init [2106] L516_T0_init-->L517_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.hdrChecksum=v_hdr.ipv4.hdrChecksum_9}  AuxVars[]  AssignedVars[hdr.ipv4.hdrChecksum] 5588#L517_T0_init [1842] L517_T0_init-->L518_T0_init: Formula: (and (< v_hdr.ipv4.hdrChecksum_10 65536) (<= 0 v_hdr.ipv4.hdrChecksum_10))  InVars {hdr.ipv4.hdrChecksum=v_hdr.ipv4.hdrChecksum_10}  OutVars{hdr.ipv4.hdrChecksum=v_hdr.ipv4.hdrChecksum_10}  AuxVars[]  AssignedVars[] 5589#L518_T0_init [1932] L518_T0_init-->L519_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.srcAddr=v_hdr.ipv4.srcAddr_9}  AuxVars[]  AssignedVars[hdr.ipv4.srcAddr] 5425#L519_T0_init [1707] L519_T0_init-->L520_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_16}  AuxVars[]  AssignedVars[hdr.ipv4.dstAddr] 5210#L520_T0_init [1573] L520_T0_init-->L521_T0_init: Formula: (= v_hdr.ipv4.dstAddr_17 v__old_hdr.ipv4.dstAddr_13)  InVars {hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_17}  OutVars{_old_hdr.ipv4.dstAddr=v__old_hdr.ipv4.dstAddr_13, hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_17}  AuxVars[]  AssignedVars[_old_hdr.ipv4.dstAddr] 5211#L521_T0_init [1719] L521_T0_init-->L522_T0_init: Formula: (= v_hdr.ipv4.dstAddr_14 v__old_hdr.ipv4.dstAddr_11)  InVars {hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_14}  OutVars{_old_hdr.ipv4.dstAddr=v__old_hdr.ipv4.dstAddr_11, hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_14}  AuxVars[]  AssignedVars[_old_hdr.ipv4.dstAddr] 5446#L522_T0_init [2065] L522_T0_init-->L523_T0_init: Formula: (not v_hdr.tcp.valid_30)  InVars {}  OutVars{hdr.tcp.valid=v_hdr.tcp.valid_30}  AuxVars[]  AssignedVars[hdr.tcp.valid] 5292#L523_T0_init [1623] L523_T0_init-->L524_T0_init: Formula: (= v_emit_35 (store v_emit_36 v_hdr.tcp_3 false))  InVars {hdr.tcp=v_hdr.tcp_3, emit=v_emit_36}  OutVars{hdr.tcp=v_hdr.tcp_3, emit=v_emit_35}  AuxVars[]  AssignedVars[emit] 4973#L524_T0_init [1458] L524_T0_init-->L525_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.srcport=v_hdr.tcp.srcport_10}  AuxVars[]  AssignedVars[hdr.tcp.srcport] 4975#L525_T0_init [1565] L525_T0_init-->L526_T0_init: Formula: (and (<= 0 v_hdr.tcp.srcport_12) (< v_hdr.tcp.srcport_12 65536))  InVars {hdr.tcp.srcport=v_hdr.tcp.srcport_12}  OutVars{hdr.tcp.srcport=v_hdr.tcp.srcport_12}  AuxVars[]  AssignedVars[] 5199#L526_T0_init [1882] L526_T0_init-->L527_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.dstport=v_hdr.tcp.dstport_9}  AuxVars[]  AssignedVars[hdr.tcp.dstport] 5451#L527_T0_init [1725] L527_T0_init-->L528_T0_init: Formula: (and (< v_hdr.tcp.dstport_10 65536) (<= 0 v_hdr.tcp.dstport_10))  InVars {hdr.tcp.dstport=v_hdr.tcp.dstport_10}  OutVars{hdr.tcp.dstport=v_hdr.tcp.dstport_10}  AuxVars[]  AssignedVars[] 5452#L528_T0_init [1837] L528_T0_init-->L529_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.sequence=v_hdr.tcp.sequence_43}  AuxVars[]  AssignedVars[hdr.tcp.sequence] 5583#L529_T0_init [1941] L529_T0_init-->L530_T0_init: Formula: (and (< v_hdr.tcp.sequence_44 4294967296) (<= 0 v_hdr.tcp.sequence_44))  InVars {hdr.tcp.sequence=v_hdr.tcp.sequence_44}  OutVars{hdr.tcp.sequence=v_hdr.tcp.sequence_44}  AuxVars[]  AssignedVars[] 5287#L530_T0_init [1620] L530_T0_init-->L531_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.ackseq=v_hdr.tcp.ackseq_41}  AuxVars[]  AssignedVars[hdr.tcp.ackseq] 5029#L531_T0_init [1481] L531_T0_init-->L532_T0_init: Formula: (and (< v_hdr.tcp.ackseq_43 4294967296) (<= 0 v_hdr.tcp.ackseq_43))  InVars {hdr.tcp.ackseq=v_hdr.tcp.ackseq_43}  OutVars{hdr.tcp.ackseq=v_hdr.tcp.ackseq_43}  AuxVars[]  AssignedVars[] 5030#L532_T0_init [2244] L532_T0_init-->L533_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.headerlength=v_hdr.tcp.headerlength_10}  AuxVars[]  AssignedVars[hdr.tcp.headerlength] 5817#L533_T0_init [2188] L533_T0_init-->L534_T0_init: Formula: (and (< v_hdr.tcp.headerlength_9 16) (<= 0 v_hdr.tcp.headerlength_9))  InVars {hdr.tcp.headerlength=v_hdr.tcp.headerlength_9}  OutVars{hdr.tcp.headerlength=v_hdr.tcp.headerlength_9}  AuxVars[]  AssignedVars[] 5290#L534_T0_init [1622] L534_T0_init-->L535_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.reservation=v_hdr.tcp.reservation_11}  AuxVars[]  AssignedVars[hdr.tcp.reservation] 5291#L535_T0_init [2196] L535_T0_init-->L536_T0_init: Formula: (and (< v_hdr.tcp.reservation_9 64) (<= 0 v_hdr.tcp.reservation_9))  InVars {hdr.tcp.reservation=v_hdr.tcp.reservation_9}  OutVars{hdr.tcp.reservation=v_hdr.tcp.reservation_9}  AuxVars[]  AssignedVars[] 5341#L536_T0_init [1653] L536_T0_init-->L537_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.URG=v_hdr.tcp.URG_11}  AuxVars[]  AssignedVars[hdr.tcp.URG] 5342#L537_T0_init [1942] L537_T0_init-->L538_T0_init: Formula: (and (<= 0 v_hdr.tcp.URG_10) (< v_hdr.tcp.URG_10 2))  InVars {hdr.tcp.URG=v_hdr.tcp.URG_10}  OutVars{hdr.tcp.URG=v_hdr.tcp.URG_10}  AuxVars[]  AssignedVars[] 5676#L538_T0_init [1944] L538_T0_init-->L539_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.ACK=v_hdr.tcp.ACK_11}  AuxVars[]  AssignedVars[hdr.tcp.ACK] 5678#L539_T0_init [2252] L539_T0_init-->L540_T0_init: Formula: (and (<= 0 v_hdr.tcp.ACK_9) (< v_hdr.tcp.ACK_9 2))  InVars {hdr.tcp.ACK=v_hdr.tcp.ACK_9}  OutVars{hdr.tcp.ACK=v_hdr.tcp.ACK_9}  AuxVars[]  AssignedVars[] 5712#L540_T0_init [1986] L540_T0_init-->L541_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.PSH=v_hdr.tcp.PSH_12}  AuxVars[]  AssignedVars[hdr.tcp.PSH] 5713#L541_T0_init [2141] L541_T0_init-->L542_T0_init: Formula: (and (<= 0 v_hdr.tcp.PSH_10) (< v_hdr.tcp.PSH_10 2))  InVars {hdr.tcp.PSH=v_hdr.tcp.PSH_10}  OutVars{hdr.tcp.PSH=v_hdr.tcp.PSH_10}  AuxVars[]  AssignedVars[] 5791#L542_T0_init [2128] L542_T0_init-->L543_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.RST=v_hdr.tcp.RST_10}  AuxVars[]  AssignedVars[hdr.tcp.RST] 5792#L543_T0_init [2131] L543_T0_init-->L544_T0_init: Formula: (and (<= 0 v_hdr.tcp.RST_11) (< v_hdr.tcp.RST_11 2))  InVars {hdr.tcp.RST=v_hdr.tcp.RST_11}  OutVars{hdr.tcp.RST=v_hdr.tcp.RST_11}  AuxVars[]  AssignedVars[] 5793#L544_T0_init [2168] L544_T0_init-->L545_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.SYN=v_hdr.tcp.SYN_12}  AuxVars[]  AssignedVars[hdr.tcp.SYN] 5709#L545_T0_init [1983] L545_T0_init-->L546_T0_init: Formula: (and (<= 0 v_hdr.tcp.SYN_11) (< v_hdr.tcp.SYN_11 2))  InVars {hdr.tcp.SYN=v_hdr.tcp.SYN_11}  OutVars{hdr.tcp.SYN=v_hdr.tcp.SYN_11}  AuxVars[]  AssignedVars[] 5710#L546_T0_init [2272] L546_T0_init-->L547_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.FIN=v_hdr.tcp.FIN_11}  AuxVars[]  AssignedVars[hdr.tcp.FIN] 5722#L547_T0_init [1996] L547_T0_init-->L548_T0_init: Formula: (and (< v_hdr.tcp.FIN_12 2) (<= 0 v_hdr.tcp.FIN_12))  InVars {hdr.tcp.FIN=v_hdr.tcp.FIN_12}  OutVars{hdr.tcp.FIN=v_hdr.tcp.FIN_12}  AuxVars[]  AssignedVars[] 5572#L548_T0_init [1829] L548_T0_init-->L549_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.windowsize=v_hdr.tcp.windowsize_10}  AuxVars[]  AssignedVars[hdr.tcp.windowsize] 5573#L549_T0_init [2207] L549_T0_init-->L550_T0_init: Formula: (and (<= 0 v_hdr.tcp.windowsize_9) (< v_hdr.tcp.windowsize_9 65536))  InVars {hdr.tcp.windowsize=v_hdr.tcp.windowsize_9}  OutVars{hdr.tcp.windowsize=v_hdr.tcp.windowsize_9}  AuxVars[]  AssignedVars[] 5823#L550_T0_init [2197] L550_T0_init-->L551_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.checksum=v_hdr.tcp.checksum_9}  AuxVars[]  AssignedVars[hdr.tcp.checksum] 5592#L551_T0_init [1844] L551_T0_init-->L552_T0_init: Formula: (and (<= 0 v_hdr.tcp.checksum_11) (< v_hdr.tcp.checksum_11 65536))  InVars {hdr.tcp.checksum=v_hdr.tcp.checksum_11}  OutVars{hdr.tcp.checksum=v_hdr.tcp.checksum_11}  AuxVars[]  AssignedVars[] 5099#L552_T0_init [1516] L552_T0_init-->L553_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.pointer=v_hdr.tcp.pointer_12}  AuxVars[]  AssignedVars[hdr.tcp.pointer] 5100#L553_T0_init [1639] L553_T0_init-->L554_T0_init: Formula: (and (<= 0 v_hdr.tcp.pointer_9) (< v_hdr.tcp.pointer_9 65536))  InVars {hdr.tcp.pointer=v_hdr.tcp.pointer_9}  OutVars{hdr.tcp.pointer=v_hdr.tcp.pointer_9}  AuxVars[]  AssignedVars[] 5081#L554_T0_init [1507] L554_T0_init-->L555_T0_init: Formula: (not v_hdr.udp_tunnel.valid_19)  InVars {}  OutVars{hdr.udp_tunnel.valid=v_hdr.udp_tunnel.valid_19}  AuxVars[]  AssignedVars[hdr.udp_tunnel.valid] 5082#L555_T0_init [1731] L555_T0_init-->L556_T0_init: Formula: (= v_emit_19 (store v_emit_20 v_hdr.udp_tunnel_8 false))  InVars {emit=v_emit_20, hdr.udp_tunnel=v_hdr.udp_tunnel_8}  OutVars{emit=v_emit_19, hdr.udp_tunnel=v_hdr.udp_tunnel_8}  AuxVars[]  AssignedVars[emit] 5459#L556_T0_init [2063] L556_T0_init-->L557_T0_init: Formula: true  InVars {}  OutVars{hdr.udp_tunnel.srcport=v_hdr.udp_tunnel.srcport_14}  AuxVars[]  AssignedVars[hdr.udp_tunnel.srcport] 5765#L557_T0_init [2127] L557_T0_init-->L558_T0_init: Formula: (and (<= 0 v_hdr.udp_tunnel.srcport_15) (< v_hdr.udp_tunnel.srcport_15 65536))  InVars {hdr.udp_tunnel.srcport=v_hdr.udp_tunnel.srcport_15}  OutVars{hdr.udp_tunnel.srcport=v_hdr.udp_tunnel.srcport_15}  AuxVars[]  AssignedVars[] 5687#L558_T0_init [1950] L558_T0_init-->L559_T0_init: Formula: true  InVars {}  OutVars{hdr.udp_tunnel.dstport=v_hdr.udp_tunnel.dstport_16}  AuxVars[]  AssignedVars[hdr.udp_tunnel.dstport] 5462#L559_T0_init [1732] L559_T0_init-->L560_T0_init: Formula: (and (< v_hdr.udp_tunnel.dstport_17 65536) (<= 0 v_hdr.udp_tunnel.dstport_17))  InVars {hdr.udp_tunnel.dstport=v_hdr.udp_tunnel.dstport_17}  OutVars{hdr.udp_tunnel.dstport=v_hdr.udp_tunnel.dstport_17}  AuxVars[]  AssignedVars[] 5463#L560_T0_init [2022] L560_T0_init-->L561_T0_init: Formula: true  InVars {}  OutVars{hdr.udp_tunnel.userlength=v_hdr.udp_tunnel.userlength_15}  AuxVars[]  AssignedVars[hdr.udp_tunnel.userlength] 5365#L561_T0_init [1672] L561_T0_init-->L562_T0_init: Formula: (and (<= 0 v_hdr.udp_tunnel.userlength_14) (< v_hdr.udp_tunnel.userlength_14 65536))  InVars {hdr.udp_tunnel.userlength=v_hdr.udp_tunnel.userlength_14}  OutVars{hdr.udp_tunnel.userlength=v_hdr.udp_tunnel.userlength_14}  AuxVars[]  AssignedVars[] 5183#L562_T0_init [1557] L562_T0_init-->L563_T0_init: Formula: true  InVars {}  OutVars{hdr.udp_tunnel.checksum=v_hdr.udp_tunnel.checksum_16}  AuxVars[]  AssignedVars[hdr.udp_tunnel.checksum] 5184#L563_T0_init [1987] L563_T0_init-->havocProcedureFINAL_T0_init: Formula: (and (<= 0 v_hdr.udp_tunnel.checksum_15) (< v_hdr.udp_tunnel.checksum_15 65536))  InVars {hdr.udp_tunnel.checksum=v_hdr.udp_tunnel.checksum_15}  OutVars{hdr.udp_tunnel.checksum=v_hdr.udp_tunnel.checksum_15}  AuxVars[]  AssignedVars[] 5714#havocProcedureFINAL_T0_init [2225] havocProcedureFINAL_T0_init-->havocProcedureEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5226#havocProcedureEXIT_T0_init >[2321] havocProcedureEXIT_T0_init-->L568-D56: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5227#L568-D56 [1897] L568-D56-->L568_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5280#L568_T0_init [2049] L568_T0_init-->L568_T0_init-D50: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 5730#L568_T0_init-D50 [2006] L568_T0_init-D50-->_parser_MyParserENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5138#_parser_MyParserENTRY_T0_init [1616] _parser_MyParserENTRY_T0_init-->_parser_MyParserENTRY_T0_init-D18: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 5205#_parser_MyParserENTRY_T0_init-D18 [1570] _parser_MyParserENTRY_T0_init-D18-->startENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5206#startENTRY_T0_init [2032] startENTRY_T0_init-->L736_T0_init: Formula: v_hdr.ethernet.valid_16  InVars {}  OutVars{hdr.ethernet.valid=v_hdr.ethernet.valid_16}  AuxVars[]  AssignedVars[hdr.ethernet.valid] 5747#L736_T0_init [2125] L736_T0_init-->L739_T0_init: Formula: (not (= v_hdr.ethernet.etherType_37 34525))  InVars {hdr.ethernet.etherType=v_hdr.ethernet.etherType_37}  OutVars{hdr.ethernet.etherType=v_hdr.ethernet.etherType_37}  AuxVars[]  AssignedVars[] 5137#L739_T0_init [1536] L739_T0_init-->L739-1_T0_init: Formula: (not (= v_hdr.ethernet.etherType_33 2048))  InVars {hdr.ethernet.etherType=v_hdr.ethernet.etherType_33}  OutVars{hdr.ethernet.etherType=v_hdr.ethernet.etherType_33}  AuxVars[]  AssignedVars[] 5139#L739-1_T0_init [2115] L739-1_T0_init-->startEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5276#startEXIT_T0_init >[2288] startEXIT_T0_init-->_parser_MyParserFINAL-D66: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5277#_parser_MyParserFINAL-D66 [1668] _parser_MyParserFINAL-D66-->_parser_MyParserFINAL_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5360#_parser_MyParserFINAL_T0_init [2008] _parser_MyParserFINAL_T0_init-->_parser_MyParserEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5731#_parser_MyParserEXIT_T0_init >[2306] _parser_MyParserEXIT_T0_init-->L569-D104: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5789#L569-D104 [2130] L569-D104-->L569_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5554#L569_T0_init [1812] L569_T0_init-->L569_T0_init-D52: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 5555#L569_T0_init-D52 [1845] L569_T0_init-D52-->MyVerifyChecksumFINAL_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5593#MyVerifyChecksumFINAL_T0_init [1936] MyVerifyChecksumFINAL_T0_init-->MyVerifyChecksumEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5663#MyVerifyChecksumEXIT_T0_init >[2382] MyVerifyChecksumEXIT_T0_init-->L570-D74: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5604#L570-D74 [1855] L570-D74-->L570_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 4988#L570_T0_init [1464] L570_T0_init-->L570_T0_init-D14: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 4990#L570_T0_init-D14 [2250] L570_T0_init-D14-->MyIngressENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5361#MyIngressENTRY_T0_init [1669] MyIngressENTRY_T0_init-->L259_T0_init: Formula: (= v_standard_metadata.ingress_port_20 0)  InVars {standard_metadata.ingress_port=v_standard_metadata.ingress_port_20}  OutVars{standard_metadata.ingress_port=v_standard_metadata.ingress_port_20}  AuxVars[]  AssignedVars[] 5362#L259_T0_init [1834] L259_T0_init-->L260_T0_init: Formula: (= v_hdr.ipv4.dstAddr_18 2071690107)  InVars {hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_18}  OutVars{hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_18}  AuxVars[]  AssignedVars[] 5528#L260_T0_init [1790] L260_T0_init-->L261_T0_init: Formula: (= 174219185552744 v_hdr.ethernet.dstAddr_36)  InVars {}  OutVars{hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_36}  AuxVars[]  AssignedVars[hdr.ethernet.dstAddr] 5103#L261_T0_init [1519] L261_T0_init-->L262_T0_init: Formula: (= v_standard_metadata.egress_spec_25 1)  InVars {}  OutVars{standard_metadata.egress_spec=v_standard_metadata.egress_spec_25}  AuxVars[]  AssignedVars[standard_metadata.egress_spec] 5104#L262_T0_init [1965] L262_T0_init-->L263_T0_init: Formula: (= 1 v_standard_metadata.egress_port_21)  InVars {}  OutVars{standard_metadata.egress_port=v_standard_metadata.egress_port_21}  AuxVars[]  AssignedVars[standard_metadata.egress_port] 5318#L263_T0_init [1638] L263_T0_init-->L258_T0_init: Formula: v_forward_22  InVars {}  OutVars{forward=v_forward_22}  AuxVars[]  AssignedVars[forward] 5319#L258_T0_init [2245] L258_T0_init-->MyIngressEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5973#MyIngressEXIT_T0_init >[2333] MyIngressEXIT_T0_init-->L571-D108: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5972#L571-D108 [2089] L571-D108-->L571_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5262#L571_T0_init [1962] L571_T0_init-->L571_T0_init-D8: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 5966#L571_T0_init-D8 [2016] L571_T0_init-D8-->MyEgressENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5971#MyEgressENTRY_T0_init [1650] MyEgressENTRY_T0_init-->L249_T0_init: Formula: (or (not v_hdr.tcp.valid_34) (not (= 0 v_standard_metadata.egress_port_34)))  InVars {standard_metadata.egress_port=v_standard_metadata.egress_port_34, hdr.tcp.valid=v_hdr.tcp.valid_34}  OutVars{standard_metadata.egress_port=v_standard_metadata.egress_port_34, hdr.tcp.valid=v_hdr.tcp.valid_34}  AuxVars[]  AssignedVars[] 5969#L249_T0_init [1652] L249_T0_init-->MyEgressEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5965#MyEgressEXIT_T0_init >[2347] MyEgressEXIT_T0_init-->L572-D90: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5962#L572-D90 [1791] L572-D90-->L572_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5957#L572_T0_init [1466] L572_T0_init-->L572_T0_init-D22: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 5958#L572_T0_init-D22 [1889] L572_T0_init-D22-->MyComputeChecksumFINAL_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5961#MyComputeChecksumFINAL_T0_init [1980] MyComputeChecksumFINAL_T0_init-->MyComputeChecksumEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5956#MyComputeChecksumEXIT_T0_init >[2361] MyComputeChecksumEXIT_T0_init-->L573-D110: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5952#L573-D110 [1858] L573-D110-->L573_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5950#L573_T0_init [1734] L573_T0_init-->L574-1_T0_init: Formula: v_forward_30  InVars {forward=v_forward_30}  OutVars{forward=v_forward_30}  AuxVars[]  AssignedVars[] 5946#L574-1_T0_init [2112] L574-1_T0_init-->L578_T0_init: Formula: (let ((.cse0 (= v__old_hdr.ethernet.srcAddr_14 0))) (or (and v__p4ltl_0_6 (not .cse0)) (and (not v__p4ltl_0_6) .cse0)))  InVars {_old_hdr.ethernet.srcAddr=v__old_hdr.ethernet.srcAddr_14}  OutVars{_p4ltl_0=v__p4ltl_0_6, _old_hdr.ethernet.srcAddr=v__old_hdr.ethernet.srcAddr_14}  AuxVars[]  AssignedVars[_p4ltl_0] 5944#L578_T0_init [2269] L578_T0_init-->L579_T0_init: Formula: (let ((.cse0 (= 2071690107 v__old_hdr.ipv4.dstAddr_14))) (or (and v__p4ltl_1_6 (not .cse0)) (and .cse0 (not v__p4ltl_1_6))))  InVars {_old_hdr.ipv4.dstAddr=v__old_hdr.ipv4.dstAddr_14}  OutVars{_old_hdr.ipv4.dstAddr=v__old_hdr.ipv4.dstAddr_14, _p4ltl_1=v__p4ltl_1_6}  AuxVars[]  AssignedVars[_p4ltl_1] 5942#L579_T0_init [2198] L579_T0_init-->L580_T0_init: Formula: (let ((.cse0 (= 281474976710655 v__old_hdr.ethernet.dstAddr_14))) (or (and v__p4ltl_2_6 (not .cse0)) (and .cse0 (not v__p4ltl_2_6))))  InVars {_old_hdr.ethernet.dstAddr=v__old_hdr.ethernet.dstAddr_14}  OutVars{_p4ltl_2=v__p4ltl_2_6, _old_hdr.ethernet.dstAddr=v__old_hdr.ethernet.dstAddr_14}  AuxVars[]  AssignedVars[_p4ltl_2] 5940#L580_T0_init [2013] L580_T0_init-->mainFINAL_T0_init: Formula: (let ((.cse0 (= v_standard_metadata.ingress_port_23 0))) (or (and v__p4ltl_3_7 .cse0) (and (not .cse0) (not v__p4ltl_3_7))))  InVars {standard_metadata.ingress_port=v_standard_metadata.ingress_port_23}  OutVars{standard_metadata.ingress_port=v_standard_metadata.ingress_port_23, _p4ltl_3=v__p4ltl_3_7}  AuxVars[]  AssignedVars[_p4ltl_3] 5938#mainFINAL_T0_init [2061] mainFINAL_T0_init-->mainEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5936#mainEXIT_T0_init >[2285] mainEXIT_T0_init-->L586-1-D72: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5934#L586-1-D72 [1975] L586-1-D72-->L586-1_accept_S1: Formula: (and v__p4ltl_1_9 v__p4ltl_0_9 v__p4ltl_3_9 v__p4ltl_2_9 (or (not v__p4ltl_3_9) (not v__p4ltl_1_9) (= 1 v_standard_metadata.egress_port_30) (not v__p4ltl_2_9) (not v__p4ltl_0_9)))  InVars {_p4ltl_2=v__p4ltl_2_9, standard_metadata.egress_port=v_standard_metadata.egress_port_30, _p4ltl_3=v__p4ltl_3_9, _p4ltl_0=v__p4ltl_0_9, _p4ltl_1=v__p4ltl_1_9}  OutVars{_p4ltl_2=v__p4ltl_2_9, standard_metadata.egress_port=v_standard_metadata.egress_port_30, _p4ltl_3=v__p4ltl_3_9, _p4ltl_0=v__p4ltl_0_9, _p4ltl_1=v__p4ltl_1_9}  AuxVars[]  AssignedVars[] 5200#L586-1_accept_S1 
[2023-02-07 04:58:53,170 INFO  L754   eck$LassoCheckResult]: Loop: 5200#L586-1_accept_S1 [1566] L586-1_accept_S1-->L586_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5034#L586_accept_S1 [1923] L586_accept_S1-->L586_accept_S1-D19: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 5313#L586_accept_S1-D19 [1634] L586_accept_S1-D19-->mainENTRY_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 4968#mainENTRY_accept_S1 [2037] mainENTRY_accept_S1-->mainENTRY_accept_S1-D37: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 5647#mainENTRY_accept_S1-D37 [1909] mainENTRY_accept_S1-D37-->havocProcedureENTRY_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5648#havocProcedureENTRY_accept_S1 [2146] havocProcedureENTRY_accept_S1-->L421_accept_S1: Formula: (not v_drop_11)  InVars {}  OutVars{drop=v_drop_11}  AuxVars[]  AssignedVars[drop] 5725#L421_accept_S1 [2003] L421_accept_S1-->L422_accept_S1: Formula: (not v_forward_18)  InVars {}  OutVars{forward=v_forward_18}  AuxVars[]  AssignedVars[forward] 5726#L422_accept_S1 [2011] L422_accept_S1-->L423_accept_S1: Formula: true  InVars {}  OutVars{standard_metadata.ingress_port=v_standard_metadata.ingress_port_14}  AuxVars[]  AssignedVars[standard_metadata.ingress_port] 4999#L423_accept_S1 [1469] L423_accept_S1-->L424_accept_S1: Formula: (and (<= 0 v_standard_metadata.ingress_port_17) (< v_standard_metadata.ingress_port_17 512))  InVars {standard_metadata.ingress_port=v_standard_metadata.ingress_port_17}  OutVars{standard_metadata.ingress_port=v_standard_metadata.ingress_port_17}  AuxVars[]  AssignedVars[] 5000#L424_accept_S1 [1727] L424_accept_S1-->L425_accept_S1: Formula: (= v_standard_metadata.egress_spec_15 0)  InVars {}  OutVars{standard_metadata.egress_spec=v_standard_metadata.egress_spec_15}  AuxVars[]  AssignedVars[standard_metadata.egress_spec] 5373#L425_accept_S1 [1677] L425_accept_S1-->L426_accept_S1: Formula: (= 0 v_standard_metadata.egress_port_17)  InVars {}  OutVars{standard_metadata.egress_port=v_standard_metadata.egress_port_17}  AuxVars[]  AssignedVars[standard_metadata.egress_port] 5374#L426_accept_S1 [1861] L426_accept_S1-->L427_accept_S1: Formula: true  InVars {}  OutVars{standard_metadata.instance_type=v_standard_metadata.instance_type_12}  AuxVars[]  AssignedVars[standard_metadata.instance_type] 5473#L427_accept_S1 [1745] L427_accept_S1-->L428_accept_S1: Formula: (and (<= 0 v_standard_metadata.instance_type_9) (< v_standard_metadata.instance_type_9 4294967296))  InVars {standard_metadata.instance_type=v_standard_metadata.instance_type_9}  OutVars{standard_metadata.instance_type=v_standard_metadata.instance_type_9}  AuxVars[]  AssignedVars[] 5371#L428_accept_S1 [1676] L428_accept_S1-->L429_accept_S1: Formula: true  InVars {}  OutVars{standard_metadata.packet_length=v_standard_metadata.packet_length_10}  AuxVars[]  AssignedVars[standard_metadata.packet_length] 5372#L429_accept_S1 [2152] L429_accept_S1-->L430_accept_S1: Formula: (and (< v_standard_metadata.packet_length_9 4294967296) (<= 0 v_standard_metadata.packet_length_9))  InVars {standard_metadata.packet_length=v_standard_metadata.packet_length_9}  OutVars{standard_metadata.packet_length=v_standard_metadata.packet_length_9}  AuxVars[]  AssignedVars[] 5805#L430_accept_S1 [2171] L430_accept_S1-->L431_accept_S1: Formula: true  InVars {}  OutVars{standard_metadata.enq_timestamp=v_standard_metadata.enq_timestamp_12}  AuxVars[]  AssignedVars[standard_metadata.enq_timestamp] 5272#L431_accept_S1 [1612] L431_accept_S1-->L432_accept_S1: Formula: (and (< v_standard_metadata.enq_timestamp_11 4294967296) (<= 0 v_standard_metadata.enq_timestamp_11))  InVars {standard_metadata.enq_timestamp=v_standard_metadata.enq_timestamp_11}  OutVars{standard_metadata.enq_timestamp=v_standard_metadata.enq_timestamp_11}  AuxVars[]  AssignedVars[] 4967#L432_accept_S1 [1456] L432_accept_S1-->L433_accept_S1: Formula: (= v_standard_metadata.enq_qdepth_8 0)  InVars {}  OutVars{standard_metadata.enq_qdepth=v_standard_metadata.enq_qdepth_8}  AuxVars[]  AssignedVars[standard_metadata.enq_qdepth] 4969#L433_accept_S1 [2203] L433_accept_S1-->L434_accept_S1: Formula: true  InVars {}  OutVars{standard_metadata.deq_timedelta=v_standard_metadata.deq_timedelta_9}  AuxVars[]  AssignedVars[standard_metadata.deq_timedelta] 5774#L434_accept_S1 [2080] L434_accept_S1-->L435_accept_S1: Formula: (and (< v_standard_metadata.deq_timedelta_10 4294967296) (<= 0 v_standard_metadata.deq_timedelta_10))  InVars {standard_metadata.deq_timedelta=v_standard_metadata.deq_timedelta_10}  OutVars{standard_metadata.deq_timedelta=v_standard_metadata.deq_timedelta_10}  AuxVars[]  AssignedVars[] 5567#L435_accept_S1 [1824] L435_accept_S1-->L436_accept_S1: Formula: true  InVars {}  OutVars{standard_metadata.deq_qdepth=v_standard_metadata.deq_qdepth_12}  AuxVars[]  AssignedVars[standard_metadata.deq_qdepth] 5568#L436_accept_S1 [1907] L436_accept_S1-->L437_accept_S1: Formula: (and (< v_standard_metadata.deq_qdepth_9 524288) (<= 0 v_standard_metadata.deq_qdepth_9))  InVars {standard_metadata.deq_qdepth=v_standard_metadata.deq_qdepth_9}  OutVars{standard_metadata.deq_qdepth=v_standard_metadata.deq_qdepth_9}  AuxVars[]  AssignedVars[] 5493#L437_accept_S1 [1764] L437_accept_S1-->L438_accept_S1: Formula: true  InVars {}  OutVars{standard_metadata.ingress_global_timestamp=v_standard_metadata.ingress_global_timestamp_10}  AuxVars[]  AssignedVars[standard_metadata.ingress_global_timestamp] 5494#L438_accept_S1 [1869] L438_accept_S1-->L439_accept_S1: Formula: (and (<= 0 v_standard_metadata.ingress_global_timestamp_9) (< v_standard_metadata.ingress_global_timestamp_9 281474976710656))  InVars {standard_metadata.ingress_global_timestamp=v_standard_metadata.ingress_global_timestamp_9}  OutVars{standard_metadata.ingress_global_timestamp=v_standard_metadata.ingress_global_timestamp_9}  AuxVars[]  AssignedVars[] 5613#L439_accept_S1 [1930] L439_accept_S1-->L440_accept_S1: Formula: true  InVars {}  OutVars{standard_metadata.egress_global_timestamp=v_standard_metadata.egress_global_timestamp_9}  AuxVars[]  AssignedVars[standard_metadata.egress_global_timestamp] 5266#L440_accept_S1 [1607] L440_accept_S1-->L441_accept_S1: Formula: (and (< v_standard_metadata.egress_global_timestamp_10 281474976710656) (<= 0 v_standard_metadata.egress_global_timestamp_10))  InVars {standard_metadata.egress_global_timestamp=v_standard_metadata.egress_global_timestamp_10}  OutVars{standard_metadata.egress_global_timestamp=v_standard_metadata.egress_global_timestamp_10}  AuxVars[]  AssignedVars[] 5267#L441_accept_S1 [2068] L441_accept_S1-->L442_accept_S1: Formula: (= 0 v_standard_metadata.mcast_grp_9)  InVars {}  OutVars{standard_metadata.mcast_grp=v_standard_metadata.mcast_grp_9}  AuxVars[]  AssignedVars[standard_metadata.mcast_grp] 5409#L442_accept_S1 [1699] L442_accept_S1-->L443_accept_S1: Formula: (= v_standard_metadata.egress_rid_8 0)  InVars {}  OutVars{standard_metadata.egress_rid=v_standard_metadata.egress_rid_8}  AuxVars[]  AssignedVars[standard_metadata.egress_rid] 5410#L443_accept_S1 [2210] L443_accept_S1-->L444_accept_S1: Formula: (= v_standard_metadata.checksum_error_9 0)  InVars {}  OutVars{standard_metadata.checksum_error=v_standard_metadata.checksum_error_9}  AuxVars[]  AssignedVars[standard_metadata.checksum_error] 5258#L444_accept_S1 [1603] L444_accept_S1-->L445_accept_S1: Formula: (= v_standard_metadata.parser_error_8 0)  InVars {}  OutVars{standard_metadata.parser_error=v_standard_metadata.parser_error_8}  AuxVars[]  AssignedVars[standard_metadata.parser_error] 5259#L445_accept_S1 [2211] L445_accept_S1-->L446_accept_S1: Formula: (= v_standard_metadata.priority_8 0)  InVars {}  OutVars{standard_metadata.priority=v_standard_metadata.priority_8}  AuxVars[]  AssignedVars[standard_metadata.priority] 5375#L446_accept_S1 [1678] L446_accept_S1-->L447_accept_S1: Formula: (not v_hdr.ethernet.valid_14)  InVars {}  OutVars{hdr.ethernet.valid=v_hdr.ethernet.valid_14}  AuxVars[]  AssignedVars[hdr.ethernet.valid] 5376#L447_accept_S1 [2169] L447_accept_S1-->L448_accept_S1: Formula: (= v_emit_29 (store v_emit_30 v_hdr.ethernet_2 false))  InVars {emit=v_emit_30, hdr.ethernet=v_hdr.ethernet_2}  OutVars{emit=v_emit_29, hdr.ethernet=v_hdr.ethernet_2}  AuxVars[]  AssignedVars[emit] 5664#L448_accept_S1 [1927] L448_accept_S1-->L449_accept_S1: Formula: true  InVars {}  OutVars{hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_25}  AuxVars[]  AssignedVars[hdr.ethernet.dstAddr] 5656#L449_accept_S1 [1918] L449_accept_S1-->L450_accept_S1: Formula: (= v_hdr.ethernet.dstAddr_28 v__old_hdr.ethernet.dstAddr_11)  InVars {hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_28}  OutVars{_old_hdr.ethernet.dstAddr=v__old_hdr.ethernet.dstAddr_11, hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_28}  AuxVars[]  AssignedVars[_old_hdr.ethernet.dstAddr] 5657#L450_accept_S1 [2111] L450_accept_S1-->L451_accept_S1: Formula: (= v_hdr.ethernet.dstAddr_26 v__old_hdr.ethernet.dstAddr_10)  InVars {hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_26}  OutVars{_old_hdr.ethernet.dstAddr=v__old_hdr.ethernet.dstAddr_10, hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_26}  AuxVars[]  AssignedVars[_old_hdr.ethernet.dstAddr] 4995#L451_accept_S1 [1467] L451_accept_S1-->L452_accept_S1: Formula: true  InVars {}  OutVars{hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_26}  AuxVars[]  AssignedVars[hdr.ethernet.srcAddr] 4996#L452_accept_S1 [1655] L452_accept_S1-->L453_accept_S1: Formula: (= v_hdr.ethernet.srcAddr_23 v__old_hdr.ethernet.srcAddr_10)  InVars {hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_23}  OutVars{hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_23, _old_hdr.ethernet.srcAddr=v__old_hdr.ethernet.srcAddr_10}  AuxVars[]  AssignedVars[_old_hdr.ethernet.srcAddr] 5343#L453_accept_S1 [2176] L453_accept_S1-->L454_accept_S1: Formula: (= v_hdr.ethernet.srcAddr_24 v__old_hdr.ethernet.srcAddr_11)  InVars {hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_24}  OutVars{hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_24, _old_hdr.ethernet.srcAddr=v__old_hdr.ethernet.srcAddr_11}  AuxVars[]  AssignedVars[_old_hdr.ethernet.srcAddr] 5815#L454_accept_S1 [2235] L454_accept_S1-->L455_accept_S1: Formula: true  InVars {}  OutVars{hdr.ethernet.etherType=v_hdr.ethernet.etherType_22}  AuxVars[]  AssignedVars[hdr.ethernet.etherType] 5838#L455_accept_S1 [2254] L455_accept_S1-->L456_accept_S1: Formula: (and (<= 0 v_hdr.ethernet.etherType_23) (< v_hdr.ethernet.etherType_23 65536))  InVars {hdr.ethernet.etherType=v_hdr.ethernet.etherType_23}  OutVars{hdr.ethernet.etherType=v_hdr.ethernet.etherType_23}  AuxVars[]  AssignedVars[] 5474#L456_accept_S1 [1746] L456_accept_S1-->L457_accept_S1: Formula: (not v_hdr.ipv6.valid_18)  InVars {}  OutVars{hdr.ipv6.valid=v_hdr.ipv6.valid_18}  AuxVars[]  AssignedVars[hdr.ipv6.valid] 5392#L457_accept_S1 [1687] L457_accept_S1-->L458_accept_S1: Formula: (= v_emit_23 (store v_emit_24 v_hdr.ipv6_9 false))  InVars {emit=v_emit_24, hdr.ipv6=v_hdr.ipv6_9}  OutVars{emit=v_emit_23, hdr.ipv6=v_hdr.ipv6_9}  AuxVars[]  AssignedVars[emit] 5393#L458_accept_S1 [2024] L458_accept_S1-->L459_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv6.version=v_hdr.ipv6.version_19}  AuxVars[]  AssignedVars[hdr.ipv6.version] 5744#L459_accept_S1 [2104] L459_accept_S1-->L460_accept_S1: Formula: (and (< v_hdr.ipv6.version_20 16) (<= 0 v_hdr.ipv6.version_20))  InVars {hdr.ipv6.version=v_hdr.ipv6.version_20}  OutVars{hdr.ipv6.version=v_hdr.ipv6.version_20}  AuxVars[]  AssignedVars[] 5677#L460_accept_S1 [1943] L460_accept_S1-->L461_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv6.trafclass=v_hdr.ipv6.trafclass_9}  AuxVars[]  AssignedVars[hdr.ipv6.trafclass] 5077#L461_accept_S1 [1505] L461_accept_S1-->L462_accept_S1: Formula: (and (<= 0 v_hdr.ipv6.trafclass_10) (< v_hdr.ipv6.trafclass_10 256))  InVars {hdr.ipv6.trafclass=v_hdr.ipv6.trafclass_10}  OutVars{hdr.ipv6.trafclass=v_hdr.ipv6.trafclass_10}  AuxVars[]  AssignedVars[] 5078#L462_accept_S1 [2090] L462_accept_S1-->L463_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv6.flowlabel=v_hdr.ipv6.flowlabel_11}  AuxVars[]  AssignedVars[hdr.ipv6.flowlabel] 5020#L463_accept_S1 [1478] L463_accept_S1-->L464_accept_S1: Formula: (and (< v_hdr.ipv6.flowlabel_10 1048576) (<= 0 v_hdr.ipv6.flowlabel_10))  InVars {hdr.ipv6.flowlabel=v_hdr.ipv6.flowlabel_10}  OutVars{hdr.ipv6.flowlabel=v_hdr.ipv6.flowlabel_10}  AuxVars[]  AssignedVars[] 5021#L464_accept_S1 [1577] L464_accept_S1-->L465_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv6.payloadlen=v_hdr.ipv6.payloadlen_19}  AuxVars[]  AssignedVars[hdr.ipv6.payloadlen] 5216#L465_accept_S1 [2096] L465_accept_S1-->L466_accept_S1: Formula: (and (< v_hdr.ipv6.payloadlen_17 65536) (<= 0 v_hdr.ipv6.payloadlen_17))  InVars {hdr.ipv6.payloadlen=v_hdr.ipv6.payloadlen_17}  OutVars{hdr.ipv6.payloadlen=v_hdr.ipv6.payloadlen_17}  AuxVars[]  AssignedVars[] 5638#L466_accept_S1 [1898] L466_accept_S1-->L467_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv6.nextheader=v_hdr.ipv6.nextheader_21}  AuxVars[]  AssignedVars[hdr.ipv6.nextheader] 5073#L467_accept_S1 [1503] L467_accept_S1-->L468_accept_S1: Formula: (and (< v_hdr.ipv6.nextheader_20 256) (<= 0 v_hdr.ipv6.nextheader_20))  InVars {hdr.ipv6.nextheader=v_hdr.ipv6.nextheader_20}  OutVars{hdr.ipv6.nextheader=v_hdr.ipv6.nextheader_20}  AuxVars[]  AssignedVars[] 5074#L468_accept_S1 [2222] L468_accept_S1-->L469_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv6.hoplimit=v_hdr.ipv6.hoplimit_17}  AuxVars[]  AssignedVars[hdr.ipv6.hoplimit] 5397#L469_accept_S1 [1692] L469_accept_S1-->L470_accept_S1: Formula: (and (<= 0 v_hdr.ipv6.hoplimit_20) (< v_hdr.ipv6.hoplimit_20 256))  InVars {hdr.ipv6.hoplimit=v_hdr.ipv6.hoplimit_20}  OutVars{hdr.ipv6.hoplimit=v_hdr.ipv6.hoplimit_20}  AuxVars[]  AssignedVars[] 5398#L470_accept_S1 [1695] L470_accept_S1-->L471_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv6.srcAddr=v_hdr.ipv6.srcAddr_17}  AuxVars[]  AssignedVars[hdr.ipv6.srcAddr] 5399#L471_accept_S1 [1865] L471_accept_S1-->L472_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv6.dstAddr=v_hdr.ipv6.dstAddr_17}  AuxVars[]  AssignedVars[hdr.ipv6.dstAddr] 5609#L472_accept_S1 [2241] L472_accept_S1-->L473_accept_S1: Formula: (not v_hdr.ipv4_tunnel.valid_20)  InVars {}  OutVars{hdr.ipv4_tunnel.valid=v_hdr.ipv4_tunnel.valid_20}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.valid] 5344#L473_accept_S1 [1656] L473_accept_S1-->L474_accept_S1: Formula: (= v_emit_25 (store v_emit_26 v_hdr.ipv4_tunnel_8 false))  InVars {emit=v_emit_26, hdr.ipv4_tunnel=v_hdr.ipv4_tunnel_8}  OutVars{emit=v_emit_25, hdr.ipv4_tunnel=v_hdr.ipv4_tunnel_8}  AuxVars[]  AssignedVars[emit] 5345#L474_accept_S1 [1796] L474_accept_S1-->L475_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.version=v_hdr.ipv4_tunnel.version_14}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.version] 5535#L475_accept_S1 [2086] L475_accept_S1-->L476_accept_S1: Formula: (and (<= 0 v_hdr.ipv4_tunnel.version_15) (< v_hdr.ipv4_tunnel.version_15 16))  InVars {hdr.ipv4_tunnel.version=v_hdr.ipv4_tunnel.version_15}  OutVars{hdr.ipv4_tunnel.version=v_hdr.ipv4_tunnel.version_15}  AuxVars[]  AssignedVars[] 5213#L476_accept_S1 [1575] L476_accept_S1-->L477_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.ihl=v_hdr.ipv4_tunnel.ihl_16}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.ihl] 5214#L477_accept_S1 [1683] L477_accept_S1-->L478_accept_S1: Formula: (and (<= 0 v_hdr.ipv4_tunnel.ihl_15) (< v_hdr.ipv4_tunnel.ihl_15 16))  InVars {hdr.ipv4_tunnel.ihl=v_hdr.ipv4_tunnel.ihl_15}  OutVars{hdr.ipv4_tunnel.ihl=v_hdr.ipv4_tunnel.ihl_15}  AuxVars[]  AssignedVars[] 5212#L478_accept_S1 [1574] L478_accept_S1-->L479_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.diffserv=v_hdr.ipv4_tunnel.diffserv_17}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.diffserv] 4997#L479_accept_S1 [1468] L479_accept_S1-->L480_accept_S1: Formula: (and (< v_hdr.ipv4_tunnel.diffserv_16 256) (<= 0 v_hdr.ipv4_tunnel.diffserv_16))  InVars {hdr.ipv4_tunnel.diffserv=v_hdr.ipv4_tunnel.diffserv_16}  OutVars{hdr.ipv4_tunnel.diffserv=v_hdr.ipv4_tunnel.diffserv_16}  AuxVars[]  AssignedVars[] 4998#L480_accept_S1 [2136] L480_accept_S1-->L481_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.totalLen=v_hdr.ipv4_tunnel.totalLen_15}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.totalLen] 5168#L481_accept_S1 [1550] L481_accept_S1-->L482_accept_S1: Formula: (and (< v_hdr.ipv4_tunnel.totalLen_16 65536) (<= 0 v_hdr.ipv4_tunnel.totalLen_16))  InVars {hdr.ipv4_tunnel.totalLen=v_hdr.ipv4_tunnel.totalLen_16}  OutVars{hdr.ipv4_tunnel.totalLen=v_hdr.ipv4_tunnel.totalLen_16}  AuxVars[]  AssignedVars[] 5112#L482_accept_S1 [1523] L482_accept_S1-->L483_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.identification=v_hdr.ipv4_tunnel.identification_14}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.identification] 5113#L483_accept_S1 [2134] L483_accept_S1-->L484_accept_S1: Formula: (and (< v_hdr.ipv4_tunnel.identification_16 65536) (<= 0 v_hdr.ipv4_tunnel.identification_16))  InVars {hdr.ipv4_tunnel.identification=v_hdr.ipv4_tunnel.identification_16}  OutVars{hdr.ipv4_tunnel.identification=v_hdr.ipv4_tunnel.identification_16}  AuxVars[]  AssignedVars[] 5794#L484_accept_S1 [2184] L484_accept_S1-->L485_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.flags=v_hdr.ipv4_tunnel.flags_17}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.flags] 5634#L485_accept_S1 [1893] L485_accept_S1-->L486_accept_S1: Formula: (and (<= 0 v_hdr.ipv4_tunnel.flags_14) (< v_hdr.ipv4_tunnel.flags_14 8))  InVars {hdr.ipv4_tunnel.flags=v_hdr.ipv4_tunnel.flags_14}  OutVars{hdr.ipv4_tunnel.flags=v_hdr.ipv4_tunnel.flags_14}  AuxVars[]  AssignedVars[] 5440#L486_accept_S1 [1715] L486_accept_S1-->L487_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.fragOffset=v_hdr.ipv4_tunnel.fragOffset_14}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.fragOffset] 5308#L487_accept_S1 [1631] L487_accept_S1-->L488_accept_S1: Formula: (and (<= 0 v_hdr.ipv4_tunnel.fragOffset_15) (< v_hdr.ipv4_tunnel.fragOffset_15 8192))  InVars {hdr.ipv4_tunnel.fragOffset=v_hdr.ipv4_tunnel.fragOffset_15}  OutVars{hdr.ipv4_tunnel.fragOffset=v_hdr.ipv4_tunnel.fragOffset_15}  AuxVars[]  AssignedVars[] 5309#L488_accept_S1 [1766] L488_accept_S1-->L489_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.ttl=v_hdr.ipv4_tunnel.ttl_17}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.ttl] 5497#L489_accept_S1 [2172] L489_accept_S1-->L490_accept_S1: Formula: (and (< v_hdr.ipv4_tunnel.ttl_15 256) (<= 0 v_hdr.ipv4_tunnel.ttl_15))  InVars {hdr.ipv4_tunnel.ttl=v_hdr.ipv4_tunnel.ttl_15}  OutVars{hdr.ipv4_tunnel.ttl=v_hdr.ipv4_tunnel.ttl_15}  AuxVars[]  AssignedVars[] 5813#L490_accept_S1 [2204] L490_accept_S1-->L491_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.protocol=v_hdr.ipv4_tunnel.protocol_19}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.protocol] 5203#L491_accept_S1 [1569] L491_accept_S1-->L492_accept_S1: Formula: (and (<= 0 v_hdr.ipv4_tunnel.protocol_18) (< v_hdr.ipv4_tunnel.protocol_18 256))  InVars {hdr.ipv4_tunnel.protocol=v_hdr.ipv4_tunnel.protocol_18}  OutVars{hdr.ipv4_tunnel.protocol=v_hdr.ipv4_tunnel.protocol_18}  AuxVars[]  AssignedVars[] 5204#L492_accept_S1 [1999] L492_accept_S1-->L493_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.hdrChecksum=v_hdr.ipv4_tunnel.hdrChecksum_9}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.hdrChecksum] 5655#L493_accept_S1 [1917] L493_accept_S1-->L494_accept_S1: Formula: (and (<= 0 v_hdr.ipv4_tunnel.hdrChecksum_10) (< v_hdr.ipv4_tunnel.hdrChecksum_10 65536))  InVars {hdr.ipv4_tunnel.hdrChecksum=v_hdr.ipv4_tunnel.hdrChecksum_10}  OutVars{hdr.ipv4_tunnel.hdrChecksum=v_hdr.ipv4_tunnel.hdrChecksum_10}  AuxVars[]  AssignedVars[] 5380#L494_accept_S1 [1679] L494_accept_S1-->L495_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.srcAddr=v_hdr.ipv4_tunnel.srcAddr_14}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.srcAddr] 5234#L495_accept_S1 [1590] L495_accept_S1-->L496_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.dstAddr=v_hdr.ipv4_tunnel.dstAddr_14}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.dstAddr] 5235#L496_accept_S1 [1755] L496_accept_S1-->L497_accept_S1: Formula: (not v_hdr.ipv4.valid_26)  InVars {}  OutVars{hdr.ipv4.valid=v_hdr.ipv4.valid_26}  AuxVars[]  AssignedVars[hdr.ipv4.valid] 5485#L497_accept_S1 [2257] L497_accept_S1-->L498_accept_S1: Formula: (= v_emit_31 (store v_emit_32 v_hdr.ipv4_3 false))  InVars {hdr.ipv4=v_hdr.ipv4_3, emit=v_emit_32}  OutVars{hdr.ipv4=v_hdr.ipv4_3, emit=v_emit_31}  AuxVars[]  AssignedVars[emit] 5746#L498_accept_S1 [2029] L498_accept_S1-->L499_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.version=v_hdr.ipv4.version_11}  AuxVars[]  AssignedVars[hdr.ipv4.version] 5552#L499_accept_S1 [1809] L499_accept_S1-->L500_accept_S1: Formula: (and (< v_hdr.ipv4.version_12 16) (<= 0 v_hdr.ipv4.version_12))  InVars {hdr.ipv4.version=v_hdr.ipv4.version_12}  OutVars{hdr.ipv4.version=v_hdr.ipv4.version_12}  AuxVars[]  AssignedVars[] 5491#L500_accept_S1 [1761] L500_accept_S1-->L501_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.ihl=v_hdr.ipv4.ihl_11}  AuxVars[]  AssignedVars[hdr.ipv4.ihl] 5305#L501_accept_S1 [1629] L501_accept_S1-->L502_accept_S1: Formula: (and (<= 0 v_hdr.ipv4.ihl_12) (< v_hdr.ipv4.ihl_12 16))  InVars {hdr.ipv4.ihl=v_hdr.ipv4.ihl_12}  OutVars{hdr.ipv4.ihl=v_hdr.ipv4.ihl_12}  AuxVars[]  AssignedVars[] 5306#L502_accept_S1 [2167] L502_accept_S1-->L503_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.diffserv=v_hdr.ipv4.diffserv_10}  AuxVars[]  AssignedVars[hdr.ipv4.diffserv] 5812#L503_accept_S1 [2192] L503_accept_S1-->L504_accept_S1: Formula: (and (< v_hdr.ipv4.diffserv_11 256) (<= 0 v_hdr.ipv4.diffserv_11))  InVars {hdr.ipv4.diffserv=v_hdr.ipv4.diffserv_11}  OutVars{hdr.ipv4.diffserv=v_hdr.ipv4.diffserv_11}  AuxVars[]  AssignedVars[] 5083#L504_accept_S1 [1508] L504_accept_S1-->L505_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.totalLen=v_hdr.ipv4.totalLen_16}  AuxVars[]  AssignedVars[hdr.ipv4.totalLen] 5084#L505_accept_S1 [2099] L505_accept_S1-->L506_accept_S1: Formula: (and (<= 0 v_hdr.ipv4.totalLen_13) (< v_hdr.ipv4.totalLen_13 65536))  InVars {hdr.ipv4.totalLen=v_hdr.ipv4.totalLen_13}  OutVars{hdr.ipv4.totalLen=v_hdr.ipv4.totalLen_13}  AuxVars[]  AssignedVars[] 5665#L506_accept_S1 [1929] L506_accept_S1-->L507_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.identification=v_hdr.ipv4.identification_13}  AuxVars[]  AssignedVars[hdr.ipv4.identification] 5666#L507_accept_S1 [2182] L507_accept_S1-->L508_accept_S1: Formula: (and (<= 0 v_hdr.ipv4.identification_10) (< v_hdr.ipv4.identification_10 65536))  InVars {hdr.ipv4.identification=v_hdr.ipv4.identification_10}  OutVars{hdr.ipv4.identification=v_hdr.ipv4.identification_10}  AuxVars[]  AssignedVars[] 5769#L508_accept_S1 [2069] L508_accept_S1-->L509_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.flags=v_hdr.ipv4.flags_12}  AuxVars[]  AssignedVars[hdr.ipv4.flags] 5698#L509_accept_S1 [1969] L509_accept_S1-->L510_accept_S1: Formula: (and (< v_hdr.ipv4.flags_11 8) (<= 0 v_hdr.ipv4.flags_11))  InVars {hdr.ipv4.flags=v_hdr.ipv4.flags_11}  OutVars{hdr.ipv4.flags=v_hdr.ipv4.flags_11}  AuxVars[]  AssignedVars[] 5699#L510_accept_S1 [2265] L510_accept_S1-->L511_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.fragOffset=v_hdr.ipv4.fragOffset_12}  AuxVars[]  AssignedVars[hdr.ipv4.fragOffset] 5390#L511_accept_S1 [1685] L511_accept_S1-->L512_accept_S1: Formula: (and (<= 0 v_hdr.ipv4.fragOffset_13) (< v_hdr.ipv4.fragOffset_13 8192))  InVars {hdr.ipv4.fragOffset=v_hdr.ipv4.fragOffset_13}  OutVars{hdr.ipv4.fragOffset=v_hdr.ipv4.fragOffset_13}  AuxVars[]  AssignedVars[] 5072#L512_accept_S1 [1502] L512_accept_S1-->L513_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.ttl=v_hdr.ipv4.ttl_12}  AuxVars[]  AssignedVars[hdr.ipv4.ttl] 4986#L513_accept_S1 [1463] L513_accept_S1-->L514_accept_S1: Formula: (and (< v_hdr.ipv4.ttl_13 256) (<= 0 v_hdr.ipv4.ttl_13))  InVars {hdr.ipv4.ttl=v_hdr.ipv4.ttl_13}  OutVars{hdr.ipv4.ttl=v_hdr.ipv4.ttl_13}  AuxVars[]  AssignedVars[] 4987#L514_accept_S1 [2224] L514_accept_S1-->L515_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.protocol=v_hdr.ipv4.protocol_13}  AuxVars[]  AssignedVars[hdr.ipv4.protocol] 5156#L515_accept_S1 [1543] L515_accept_S1-->L516_accept_S1: Formula: (and (< v_hdr.ipv4.protocol_11 256) (<= 0 v_hdr.ipv4.protocol_11))  InVars {hdr.ipv4.protocol=v_hdr.ipv4.protocol_11}  OutVars{hdr.ipv4.protocol=v_hdr.ipv4.protocol_11}  AuxVars[]  AssignedVars[] 5157#L516_accept_S1 [1919] L516_accept_S1-->L517_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.hdrChecksum=v_hdr.ipv4.hdrChecksum_12}  AuxVars[]  AssignedVars[hdr.ipv4.hdrChecksum] 5449#L517_accept_S1 [1724] L517_accept_S1-->L518_accept_S1: Formula: (and (< v_hdr.ipv4.hdrChecksum_11 65536) (<= 0 v_hdr.ipv4.hdrChecksum_11))  InVars {hdr.ipv4.hdrChecksum=v_hdr.ipv4.hdrChecksum_11}  OutVars{hdr.ipv4.hdrChecksum=v_hdr.ipv4.hdrChecksum_11}  AuxVars[]  AssignedVars[] 5208#L518_accept_S1 [1572] L518_accept_S1-->L519_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.srcAddr=v_hdr.ipv4.srcAddr_10}  AuxVars[]  AssignedVars[hdr.ipv4.srcAddr] 5209#L519_accept_S1 [2232] L519_accept_S1-->L520_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_13}  AuxVars[]  AssignedVars[hdr.ipv4.dstAddr] 5770#L520_accept_S1 [2070] L520_accept_S1-->L521_accept_S1: Formula: (= v_hdr.ipv4.dstAddr_15 v__old_hdr.ipv4.dstAddr_12)  InVars {hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_15}  OutVars{_old_hdr.ipv4.dstAddr=v__old_hdr.ipv4.dstAddr_12, hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_15}  AuxVars[]  AssignedVars[_old_hdr.ipv4.dstAddr] 5547#L521_accept_S1 [1807] L521_accept_S1-->L522_accept_S1: Formula: (= v_hdr.ipv4.dstAddr_12 v__old_hdr.ipv4.dstAddr_10)  InVars {hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_12}  OutVars{_old_hdr.ipv4.dstAddr=v__old_hdr.ipv4.dstAddr_10, hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_12}  AuxVars[]  AssignedVars[_old_hdr.ipv4.dstAddr] 5548#L522_accept_S1 [2135] L522_accept_S1-->L523_accept_S1: Formula: (not v_hdr.tcp.valid_29)  InVars {}  OutVars{hdr.tcp.valid=v_hdr.tcp.valid_29}  AuxVars[]  AssignedVars[hdr.tcp.valid] 5598#L523_accept_S1 [1851] L523_accept_S1-->L524_accept_S1: Formula: (= v_emit_21 (store v_emit_22 v_hdr.tcp_2 false))  InVars {hdr.tcp=v_hdr.tcp_2, emit=v_emit_22}  OutVars{hdr.tcp=v_hdr.tcp_2, emit=v_emit_21}  AuxVars[]  AssignedVars[emit] 5599#L524_accept_S1 [1911] L524_accept_S1-->L525_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.srcport=v_hdr.tcp.srcport_11}  AuxVars[]  AssignedVars[hdr.tcp.srcport] 5215#L525_accept_S1 [1576] L525_accept_S1-->L526_accept_S1: Formula: (and (< v_hdr.tcp.srcport_9 65536) (<= 0 v_hdr.tcp.srcport_9))  InVars {hdr.tcp.srcport=v_hdr.tcp.srcport_9}  OutVars{hdr.tcp.srcport=v_hdr.tcp.srcport_9}  AuxVars[]  AssignedVars[] 5093#L526_accept_S1 [1513] L526_accept_S1-->L527_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.dstport=v_hdr.tcp.dstport_12}  AuxVars[]  AssignedVars[hdr.tcp.dstport] 5094#L527_accept_S1 [2101] L527_accept_S1-->L528_accept_S1: Formula: (and (<= 0 v_hdr.tcp.dstport_11) (< v_hdr.tcp.dstport_11 65536))  InVars {hdr.tcp.dstport=v_hdr.tcp.dstport_11}  OutVars{hdr.tcp.dstport=v_hdr.tcp.dstport_11}  AuxVars[]  AssignedVars[] 5706#L528_accept_S1 [1979] L528_accept_S1-->L529_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.sequence=v_hdr.tcp.sequence_41}  AuxVars[]  AssignedVars[hdr.tcp.sequence] 5574#L529_accept_S1 [1830] L529_accept_S1-->L530_accept_S1: Formula: (and (<= 0 v_hdr.tcp.sequence_42) (< v_hdr.tcp.sequence_42 4294967296))  InVars {hdr.tcp.sequence=v_hdr.tcp.sequence_42}  OutVars{hdr.tcp.sequence=v_hdr.tcp.sequence_42}  AuxVars[]  AssignedVars[] 5575#L530_accept_S1 [2084] L530_accept_S1-->L531_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.ackseq=v_hdr.tcp.ackseq_44}  AuxVars[]  AssignedVars[hdr.tcp.ackseq] 5755#L531_accept_S1 [2048] L531_accept_S1-->L532_accept_S1: Formula: (and (< v_hdr.tcp.ackseq_42 4294967296) (<= 0 v_hdr.tcp.ackseq_42))  InVars {hdr.tcp.ackseq=v_hdr.tcp.ackseq_42}  OutVars{hdr.tcp.ackseq=v_hdr.tcp.ackseq_42}  AuxVars[]  AssignedVars[] 5756#L532_accept_S1 [2085] L532_accept_S1-->L533_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.headerlength=v_hdr.tcp.headerlength_12}  AuxVars[]  AssignedVars[hdr.tcp.headerlength] 5649#L533_accept_S1 [1912] L533_accept_S1-->L534_accept_S1: Formula: (and (<= 0 v_hdr.tcp.headerlength_11) (< v_hdr.tcp.headerlength_11 16))  InVars {hdr.tcp.headerlength=v_hdr.tcp.headerlength_11}  OutVars{hdr.tcp.headerlength=v_hdr.tcp.headerlength_11}  AuxVars[]  AssignedVars[] 5417#L534_accept_S1 [1704] L534_accept_S1-->L535_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.reservation=v_hdr.tcp.reservation_10}  AuxVars[]  AssignedVars[hdr.tcp.reservation] 5418#L535_accept_S1 [2041] L535_accept_S1-->L536_accept_S1: Formula: (and (<= 0 v_hdr.tcp.reservation_12) (< v_hdr.tcp.reservation_12 64))  InVars {hdr.tcp.reservation=v_hdr.tcp.reservation_12}  OutVars{hdr.tcp.reservation=v_hdr.tcp.reservation_12}  AuxVars[]  AssignedVars[] 5245#L536_accept_S1 [1596] L536_accept_S1-->L537_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.URG=v_hdr.tcp.URG_9}  AuxVars[]  AssignedVars[hdr.tcp.URG] 5246#L537_accept_S1 [2017] L537_accept_S1-->L538_accept_S1: Formula: (and (< v_hdr.tcp.URG_12 2) (<= 0 v_hdr.tcp.URG_12))  InVars {hdr.tcp.URG=v_hdr.tcp.URG_12}  OutVars{hdr.tcp.URG=v_hdr.tcp.URG_12}  AuxVars[]  AssignedVars[] 5674#L538_accept_S1 [1940] L538_accept_S1-->L539_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.ACK=v_hdr.tcp.ACK_12}  AuxVars[]  AssignedVars[hdr.tcp.ACK] 5675#L539_accept_S1 [2076] L539_accept_S1-->L540_accept_S1: Formula: (and (<= 0 v_hdr.tcp.ACK_10) (< v_hdr.tcp.ACK_10 2))  InVars {hdr.tcp.ACK=v_hdr.tcp.ACK_10}  OutVars{hdr.tcp.ACK=v_hdr.tcp.ACK_10}  AuxVars[]  AssignedVars[] 5303#L540_accept_S1 [1628] L540_accept_S1-->L541_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.PSH=v_hdr.tcp.PSH_9}  AuxVars[]  AssignedVars[hdr.tcp.PSH] 5304#L541_accept_S1 [1688] L541_accept_S1-->L542_accept_S1: Formula: (and (< v_hdr.tcp.PSH_11 2) (<= 0 v_hdr.tcp.PSH_11))  InVars {hdr.tcp.PSH=v_hdr.tcp.PSH_11}  OutVars{hdr.tcp.PSH=v_hdr.tcp.PSH_11}  AuxVars[]  AssignedVars[] 5395#L542_accept_S1 [2030] L542_accept_S1-->L543_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.RST=v_hdr.tcp.RST_9}  AuxVars[]  AssignedVars[hdr.tcp.RST] 5054#L543_accept_S1 [1491] L543_accept_S1-->L544_accept_S1: Formula: (and (< v_hdr.tcp.RST_12 2) (<= 0 v_hdr.tcp.RST_12))  InVars {hdr.tcp.RST=v_hdr.tcp.RST_12}  OutVars{hdr.tcp.RST=v_hdr.tcp.RST_12}  AuxVars[]  AssignedVars[] 5055#L544_accept_S1 [1496] L544_accept_S1-->L545_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.SYN=v_hdr.tcp.SYN_9}  AuxVars[]  AssignedVars[hdr.tcp.SYN] 5063#L545_accept_S1 [2062] L545_accept_S1-->L546_accept_S1: Formula: (and (<= 0 v_hdr.tcp.SYN_10) (< v_hdr.tcp.SYN_10 2))  InVars {hdr.tcp.SYN=v_hdr.tcp.SYN_10}  OutVars{hdr.tcp.SYN=v_hdr.tcp.SYN_10}  AuxVars[]  AssignedVars[] 5334#L546_accept_S1 [1648] L546_accept_S1-->L547_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.FIN=v_hdr.tcp.FIN_9}  AuxVars[]  AssignedVars[hdr.tcp.FIN] 5335#L547_accept_S1 [2144] L547_accept_S1-->L548_accept_S1: Formula: (and (<= 0 v_hdr.tcp.FIN_10) (< v_hdr.tcp.FIN_10 2))  InVars {hdr.tcp.FIN=v_hdr.tcp.FIN_10}  OutVars{hdr.tcp.FIN=v_hdr.tcp.FIN_10}  AuxVars[]  AssignedVars[] 5356#L548_accept_S1 [1666] L548_accept_S1-->L549_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.windowsize=v_hdr.tcp.windowsize_12}  AuxVars[]  AssignedVars[hdr.tcp.windowsize] 5357#L549_accept_S1 [2267] L549_accept_S1-->L550_accept_S1: Formula: (and (< v_hdr.tcp.windowsize_11 65536) (<= 0 v_hdr.tcp.windowsize_11))  InVars {hdr.tcp.windowsize=v_hdr.tcp.windowsize_11}  OutVars{hdr.tcp.windowsize=v_hdr.tcp.windowsize_11}  AuxVars[]  AssignedVars[] 5543#L550_accept_S1 [1804] L550_accept_S1-->L551_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.checksum=v_hdr.tcp.checksum_12}  AuxVars[]  AssignedVars[hdr.tcp.checksum] 5544#L551_accept_S1 [2147] L551_accept_S1-->L552_accept_S1: Formula: (and (< v_hdr.tcp.checksum_10 65536) (<= 0 v_hdr.tcp.checksum_10))  InVars {hdr.tcp.checksum=v_hdr.tcp.checksum_10}  OutVars{hdr.tcp.checksum=v_hdr.tcp.checksum_10}  AuxVars[]  AssignedVars[] 5740#L552_accept_S1 [2018] L552_accept_S1-->L553_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.pointer=v_hdr.tcp.pointer_10}  AuxVars[]  AssignedVars[hdr.tcp.pointer] 5741#L553_accept_S1 [2046] L553_accept_S1-->L554_accept_S1: Formula: (and (< v_hdr.tcp.pointer_11 65536) (<= 0 v_hdr.tcp.pointer_11))  InVars {hdr.tcp.pointer=v_hdr.tcp.pointer_11}  OutVars{hdr.tcp.pointer=v_hdr.tcp.pointer_11}  AuxVars[]  AssignedVars[] 5188#L554_accept_S1 [1559] L554_accept_S1-->L555_accept_S1: Formula: (not v_hdr.udp_tunnel.valid_20)  InVars {}  OutVars{hdr.udp_tunnel.valid=v_hdr.udp_tunnel.valid_20}  AuxVars[]  AssignedVars[hdr.udp_tunnel.valid] 5189#L555_accept_S1 [1738] L555_accept_S1-->L556_accept_S1: Formula: (= v_emit_33 (store v_emit_34 v_hdr.udp_tunnel_9 false))  InVars {emit=v_emit_34, hdr.udp_tunnel=v_hdr.udp_tunnel_9}  OutVars{emit=v_emit_33, hdr.udp_tunnel=v_hdr.udp_tunnel_9}  AuxVars[]  AssignedVars[emit] 5467#L556_accept_S1 [1894] L556_accept_S1-->L557_accept_S1: Formula: true  InVars {}  OutVars{hdr.udp_tunnel.srcport=v_hdr.udp_tunnel.srcport_16}  AuxVars[]  AssignedVars[hdr.udp_tunnel.srcport] 5141#L557_accept_S1 [1537] L557_accept_S1-->L558_accept_S1: Formula: (and (< v_hdr.udp_tunnel.srcport_17 65536) (<= 0 v_hdr.udp_tunnel.srcport_17))  InVars {hdr.udp_tunnel.srcport=v_hdr.udp_tunnel.srcport_17}  OutVars{hdr.udp_tunnel.srcport=v_hdr.udp_tunnel.srcport_17}  AuxVars[]  AssignedVars[] 5142#L558_accept_S1 [1759] L558_accept_S1-->L559_accept_S1: Formula: true  InVars {}  OutVars{hdr.udp_tunnel.dstport=v_hdr.udp_tunnel.dstport_14}  AuxVars[]  AssignedVars[hdr.udp_tunnel.dstport] 5027#L559_accept_S1 [1482] L559_accept_S1-->L560_accept_S1: Formula: (and (<= 0 v_hdr.udp_tunnel.dstport_15) (< v_hdr.udp_tunnel.dstport_15 65536))  InVars {hdr.udp_tunnel.dstport=v_hdr.udp_tunnel.dstport_15}  OutVars{hdr.udp_tunnel.dstport=v_hdr.udp_tunnel.dstport_15}  AuxVars[]  AssignedVars[] 5028#L560_accept_S1 [1743] L560_accept_S1-->L561_accept_S1: Formula: true  InVars {}  OutVars{hdr.udp_tunnel.userlength=v_hdr.udp_tunnel.userlength_17}  AuxVars[]  AssignedVars[hdr.udp_tunnel.userlength] 5470#L561_accept_S1 [1788] L561_accept_S1-->L562_accept_S1: Formula: (and (<= 0 v_hdr.udp_tunnel.userlength_16) (< v_hdr.udp_tunnel.userlength_16 65536))  InVars {hdr.udp_tunnel.userlength=v_hdr.udp_tunnel.userlength_16}  OutVars{hdr.udp_tunnel.userlength=v_hdr.udp_tunnel.userlength_16}  AuxVars[]  AssignedVars[] 5524#L562_accept_S1 [2139] L562_accept_S1-->L563_accept_S1: Formula: true  InVars {}  OutVars{hdr.udp_tunnel.checksum=v_hdr.udp_tunnel.checksum_17}  AuxVars[]  AssignedVars[hdr.udp_tunnel.checksum] 5796#L563_accept_S1 [2177] L563_accept_S1-->havocProcedureFINAL_accept_S1: Formula: (and (< v_hdr.udp_tunnel.checksum_14 65536) (<= 0 v_hdr.udp_tunnel.checksum_14))  InVars {hdr.udp_tunnel.checksum=v_hdr.udp_tunnel.checksum_14}  OutVars{hdr.udp_tunnel.checksum=v_hdr.udp_tunnel.checksum_14}  AuxVars[]  AssignedVars[] 5533#havocProcedureFINAL_accept_S1 [1795] havocProcedureFINAL_accept_S1-->havocProcedureEXIT_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5243#havocProcedureEXIT_accept_S1 >[2387] havocProcedureEXIT_accept_S1-->L568-D55: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5244#L568-D55 [2015] L568-D55-->L568_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5207#L568_accept_S1 [2264] L568_accept_S1-->L568_accept_S1-D49: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 5255#L568_accept_S1-D49 [1601] L568_accept_S1-D49-->_parser_MyParserENTRY_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5042#_parser_MyParserENTRY_accept_S1 [1571] _parser_MyParserENTRY_accept_S1-->_parser_MyParserENTRY_accept_S1-D17: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 5041#_parser_MyParserENTRY_accept_S1-D17 [1487] _parser_MyParserENTRY_accept_S1-D17-->startENTRY_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5043#startENTRY_accept_S1 [1798] startENTRY_accept_S1-->L736_accept_S1: Formula: v_hdr.ethernet.valid_15  InVars {}  OutVars{hdr.ethernet.valid=v_hdr.ethernet.valid_15}  AuxVars[]  AssignedVars[hdr.ethernet.valid] 5153#L736_accept_S1 [1542] L736_accept_S1-->L739_accept_S1: Formula: (not (= v_hdr.ethernet.etherType_39 34525))  InVars {hdr.ethernet.etherType=v_hdr.ethernet.etherType_39}  OutVars{hdr.ethernet.etherType=v_hdr.ethernet.etherType_39}  AuxVars[]  AssignedVars[] 5155#L739_accept_S1 [1662] L739_accept_S1-->L739-1_accept_S1: Formula: (not (= v_hdr.ethernet.etherType_35 2048))  InVars {hdr.ethernet.etherType=v_hdr.ethernet.etherType_35}  OutVars{hdr.ethernet.etherType=v_hdr.ethernet.etherType_35}  AuxVars[]  AssignedVars[] 5172#L739-1_accept_S1 [1806] L739-1_accept_S1-->startEXIT_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5546#startEXIT_accept_S1 >[2344] startEXIT_accept_S1-->_parser_MyParserFINAL-D65: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5236#_parser_MyParserFINAL-D65 [1591] _parser_MyParserFINAL-D65-->_parser_MyParserFINAL_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5237#_parser_MyParserFINAL_accept_S1 [1592] _parser_MyParserFINAL_accept_S1-->_parser_MyParserEXIT_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5238#_parser_MyParserEXIT_accept_S1 >[2283] _parser_MyParserEXIT_accept_S1-->L569-D103: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5435#L569-D103 [1714] L569-D103-->L569_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5346#L569_accept_S1 [1658] L569_accept_S1-->L569_accept_S1-D51: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 5347#L569_accept_S1-D51 [1684] L569_accept_S1-D51-->MyVerifyChecksumFINAL_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5389#MyVerifyChecksumFINAL_accept_S1 [1723] MyVerifyChecksumFINAL_accept_S1-->MyVerifyChecksumEXIT_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5450#MyVerifyChecksumEXIT_accept_S1 >[2336] MyVerifyChecksumEXIT_accept_S1-->L570-D73: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5597#L570-D73 [1848] L570-D73-->L570_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 4984#L570_accept_S1 [2056] L570_accept_S1-->L570_accept_S1-D13: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 5761#L570_accept_S1-D13 [2209] L570_accept_S1-D13-->MyIngressENTRY_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5682#MyIngressENTRY_accept_S1 [1947] MyIngressENTRY_accept_S1-->L259_accept_S1: Formula: (= v_standard_metadata.ingress_port_18 0)  InVars {standard_metadata.ingress_port=v_standard_metadata.ingress_port_18}  OutVars{standard_metadata.ingress_port=v_standard_metadata.ingress_port_18}  AuxVars[]  AssignedVars[] 5683#L259_accept_S1 [2179] L259_accept_S1-->L260_accept_S1: Formula: (= v_hdr.ipv4.dstAddr_20 2071690107)  InVars {hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_20}  OutVars{hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_20}  AuxVars[]  AssignedVars[] 5670#L260_accept_S1 [1938] L260_accept_S1-->L261_accept_S1: Formula: (= 174219185552744 v_hdr.ethernet.dstAddr_34)  InVars {}  OutVars{hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_34}  AuxVars[]  AssignedVars[hdr.ethernet.dstAddr] 5671#L261_accept_S1 [1988] L261_accept_S1-->L262_accept_S1: Formula: (= v_standard_metadata.egress_spec_23 1)  InVars {}  OutVars{standard_metadata.egress_spec=v_standard_metadata.egress_spec_23}  AuxVars[]  AssignedVars[standard_metadata.egress_spec] 5285#L262_accept_S1 [1619] L262_accept_S1-->L263_accept_S1: Formula: (= 1 v_standard_metadata.egress_port_23)  InVars {}  OutVars{standard_metadata.egress_port=v_standard_metadata.egress_port_23}  AuxVars[]  AssignedVars[standard_metadata.egress_port] 5286#L263_accept_S1 [1825] L263_accept_S1-->L258_accept_S1: Formula: v_forward_26  InVars {}  OutVars{forward=v_forward_26}  AuxVars[]  AssignedVars[forward] 5569#L258_accept_S1 [1924] L258_accept_S1-->MyIngressEXIT_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5661#MyIngressEXIT_accept_S1 >[2368] MyIngressEXIT_accept_S1-->L571-D107: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5968#L571-D107 [2247] L571-D107-->L571_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5336#L571_accept_S1 [2088] L571_accept_S1-->L571_accept_S1-D7: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 5964#L571_accept_S1-D7 [2158] L571_accept_S1-D7-->MyEgressENTRY_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5970#MyEgressENTRY_accept_S1 [1527] MyEgressENTRY_accept_S1-->L249_accept_S1: Formula: (or (not (= 0 v_standard_metadata.egress_port_36)) (not v_hdr.tcp.valid_36))  InVars {standard_metadata.egress_port=v_standard_metadata.egress_port_36, hdr.tcp.valid=v_hdr.tcp.valid_36}  OutVars{standard_metadata.egress_port=v_standard_metadata.egress_port_36, hdr.tcp.valid=v_hdr.tcp.valid_36}  AuxVars[]  AssignedVars[] 5967#L249_accept_S1 [1585] L249_accept_S1-->MyEgressEXIT_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5963#MyEgressEXIT_accept_S1 >[2312] MyEgressEXIT_accept_S1-->L572-D89: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5960#L572-D89 [2123] L572-D89-->L572_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5954#L572_accept_S1 [1899] L572_accept_S1-->L572_accept_S1-D21: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 5955#L572_accept_S1-D21 [2213] L572_accept_S1-D21-->MyComputeChecksumFINAL_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5959#MyComputeChecksumFINAL_accept_S1 [1852] MyComputeChecksumFINAL_accept_S1-->MyComputeChecksumEXIT_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5953#MyComputeChecksumEXIT_accept_S1 >[2326] MyComputeChecksumEXIT_accept_S1-->L573-D109: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5951#L573-D109 [1832] L573-D109-->L573_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5948#L573_accept_S1 [1547] L573_accept_S1-->L574-1_accept_S1: Formula: v_forward_32  InVars {forward=v_forward_32}  OutVars{forward=v_forward_32}  AuxVars[]  AssignedVars[] 5945#L574-1_accept_S1 [2191] L574-1_accept_S1-->L578_accept_S1: Formula: (let ((.cse0 (= v__old_hdr.ethernet.srcAddr_15 0))) (or (and .cse0 (not v__p4ltl_0_7)) (and v__p4ltl_0_7 (not .cse0))))  InVars {_old_hdr.ethernet.srcAddr=v__old_hdr.ethernet.srcAddr_15}  OutVars{_p4ltl_0=v__p4ltl_0_7, _old_hdr.ethernet.srcAddr=v__old_hdr.ethernet.srcAddr_15}  AuxVars[]  AssignedVars[_p4ltl_0] 5943#L578_accept_S1 [2040] L578_accept_S1-->L579_accept_S1: Formula: (let ((.cse0 (= 2071690107 v__old_hdr.ipv4.dstAddr_15))) (or (and v__p4ltl_1_7 (not .cse0)) (and .cse0 (not v__p4ltl_1_7))))  InVars {_old_hdr.ipv4.dstAddr=v__old_hdr.ipv4.dstAddr_15}  OutVars{_old_hdr.ipv4.dstAddr=v__old_hdr.ipv4.dstAddr_15, _p4ltl_1=v__p4ltl_1_7}  AuxVars[]  AssignedVars[_p4ltl_1] 5941#L579_accept_S1 [1721] L579_accept_S1-->L580_accept_S1: Formula: (let ((.cse0 (= 281474976710655 v__old_hdr.ethernet.dstAddr_15))) (or (and v__p4ltl_2_7 (not .cse0)) (and (not v__p4ltl_2_7) .cse0)))  InVars {_old_hdr.ethernet.dstAddr=v__old_hdr.ethernet.dstAddr_15}  OutVars{_p4ltl_2=v__p4ltl_2_7, _old_hdr.ethernet.dstAddr=v__old_hdr.ethernet.dstAddr_15}  AuxVars[]  AssignedVars[_p4ltl_2] 5939#L580_accept_S1 [1485] L580_accept_S1-->mainFINAL_accept_S1: Formula: (let ((.cse0 (= v_standard_metadata.ingress_port_22 0))) (or (and .cse0 v__p4ltl_3_6) (and (not .cse0) (not v__p4ltl_3_6))))  InVars {standard_metadata.ingress_port=v_standard_metadata.ingress_port_22}  OutVars{standard_metadata.ingress_port=v_standard_metadata.ingress_port_22, _p4ltl_3=v__p4ltl_3_6}  AuxVars[]  AssignedVars[_p4ltl_3] 5937#mainFINAL_accept_S1 [1840] mainFINAL_accept_S1-->mainEXIT_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5935#mainEXIT_accept_S1 >[2385] mainEXIT_accept_S1-->L586-1-D71: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5933#L586-1-D71 [1955] L586-1-D71-->L586-1_accept_S1: Formula: (and v__p4ltl_3_11 v__p4ltl_2_11 v__p4ltl_1_11 v__p4ltl_0_11 (or (not v__p4ltl_2_11) (not v__p4ltl_0_11) (not v__p4ltl_3_11) (not v__p4ltl_1_11) (= 1 v_standard_metadata.egress_port_32)))  InVars {_p4ltl_2=v__p4ltl_2_11, standard_metadata.egress_port=v_standard_metadata.egress_port_32, _p4ltl_3=v__p4ltl_3_11, _p4ltl_0=v__p4ltl_0_11, _p4ltl_1=v__p4ltl_1_11}  OutVars{_p4ltl_2=v__p4ltl_2_11, standard_metadata.egress_port=v_standard_metadata.egress_port_32, _p4ltl_3=v__p4ltl_3_11, _p4ltl_0=v__p4ltl_0_11, _p4ltl_1=v__p4ltl_1_11}  AuxVars[]  AssignedVars[] 5200#L586-1_accept_S1 
[2023-02-07 04:58:53,170 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2023-02-07 04:58:53,170 INFO  L85        PathProgramCache]: Analyzing trace with hash -1086983425, now seen corresponding path program 1 times
[2023-02-07 04:58:53,171 INFO  L118   FreeRefinementEngine]: Executing refinement strategy CAMEL
[2023-02-07 04:58:53,171 INFO  L333   FreeRefinementEngine]: Using trace check IpTcStrategyModuleSmtInterpolCraig [1105491084]
[2023-02-07 04:58:53,171 INFO  L95    rtionOrderModulation]: Keeping assertion order NOT_INCREMENTALLY
[2023-02-07 04:58:53,171 INFO  L127          SolverBuilder]: Constructing new instance of SMTInterpol with explicit timeout -1 ms and remaining time -1 ms
[2023-02-07 04:58:53,187 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-02-07 04:58:53,308 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 2
[2023-02-07 04:58:53,320 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-02-07 04:58:53,403 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 1
[2023-02-07 04:58:53,410 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-02-07 04:58:53,420 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 150
[2023-02-07 04:58:53,421 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-02-07 04:58:53,426 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 1
[2023-02-07 04:58:53,427 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-02-07 04:58:53,427 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 163
[2023-02-07 04:58:53,428 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-02-07 04:58:53,447 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 168
[2023-02-07 04:58:53,450 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-02-07 04:58:53,481 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 179
[2023-02-07 04:58:53,483 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-02-07 04:58:53,484 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 185
[2023-02-07 04:58:53,485 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-02-07 04:58:53,487 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2023-02-07 04:58:53,487 INFO  L136   FreeRefinementEngine]: Strategy CAMEL found an infeasible trace
[2023-02-07 04:58:53,487 INFO  L333   FreeRefinementEngine]: Using interpolant generator IpTcStrategyModuleSmtInterpolCraig [1105491084]
[2023-02-07 04:58:53,488 INFO  L157   FreeRefinementEngine]: IpTcStrategyModuleSmtInterpolCraig [1105491084] provided 1 perfect and 0 imperfect interpolant sequences
[2023-02-07 04:58:53,488 INFO  L184   FreeRefinementEngine]: Found 1 perfect and 0 imperfect interpolant sequences.
[2023-02-07 04:58:53,488 INFO  L197   FreeRefinementEngine]: Number of different interpolants: perfect sequences [11] imperfect sequences [] total 11
[2023-02-07 04:58:53,488 INFO  L121   tionRefinementEngine]: Using interpolant automaton builder IpAbStrategyModuleStraightlineAll [1392891167]
[2023-02-07 04:58:53,488 INFO  L85    oduleStraightlineAll]: Using 1 perfect interpolants to construct interpolant automaton
[2023-02-07 04:58:53,489 INFO  L757   eck$LassoCheckResult]: stem already infeasible
[2023-02-07 04:58:53,489 INFO  L100   FreeRefinementEngine]: Using predicate unifier PredicateUnifier provided by strategy CAMEL
[2023-02-07 04:58:53,489 INFO  L143   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2023-02-07 04:58:53,489 INFO  L145   InterpolantAutomaton]: CoverageRelationStatistics Valid=29, Invalid=103, Unknown=0, NotChecked=0, Total=132
[2023-02-07 04:58:53,489 INFO  L87              Difference]: Start difference. First operand 1097 states and 1153 transitions. cyclomatic complexity: 57 Second operand  has 12 states, 11 states have (on average 16.727272727272727) internal successors, (184), 6 states have internal predecessors, (184), 3 states have call successors, (9), 7 states have call predecessors, (9), 4 states have return successors, (8), 4 states have call predecessors, (8), 3 states have call successors, (8)
[2023-02-07 04:58:57,078 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2023-02-07 04:58:57,078 INFO  L93              Difference]: Finished difference Result 1961 states and 2062 transitions.
[2023-02-07 04:58:57,079 INFO  L141   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 38 states. 
[2023-02-07 04:58:57,079 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1961 states and 2062 transitions.
[2023-02-07 04:58:57,083 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 14
[2023-02-07 04:58:57,089 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1961 states to 1961 states and 2062 transitions.
[2023-02-07 04:58:57,089 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2
[2023-02-07 04:58:57,089 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2
[2023-02-07 04:58:57,089 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1961 states and 2062 transitions.
[2023-02-07 04:58:57,091 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2023-02-07 04:58:57,091 INFO  L369   hiAutomatonCegarLoop]: Abstraction has 1961 states and 2062 transitions.
[2023-02-07 04:58:57,092 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1961 states and 2062 transitions.
[2023-02-07 04:58:57,105 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1961 to 1171.
[2023-02-07 04:58:57,106 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand  has 1171 states, 1008 states have (on average 1.0476190476190477) internal successors, (1056), 1010 states have internal predecessors, (1056), 81 states have call successors, (81), 81 states have call predecessors, (81), 82 states have return successors, (92), 80 states have call predecessors, (92), 80 states have call successors, (92)
[2023-02-07 04:58:57,108 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1171 states to 1171 states and 1229 transitions.
[2023-02-07 04:58:57,108 INFO  L392   hiAutomatonCegarLoop]: Abstraction has 1171 states and 1229 transitions.
[2023-02-07 04:58:57,108 INFO  L399   stractBuchiCegarLoop]: Abstraction has 1171 states and 1229 transitions.
[2023-02-07 04:58:57,108 INFO  L287   stractBuchiCegarLoop]: ======== Iteration 4 ============
[2023-02-07 04:58:57,108 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1171 states and 1229 transitions.
[2023-02-07 04:58:57,109 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2023-02-07 04:58:57,109 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2023-02-07 04:58:57,109 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2023-02-07 04:58:57,110 INFO  L179   hiAutomatonCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2023-02-07 04:58:57,110 INFO  L180   hiAutomatonCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2023-02-07 04:58:57,112 INFO  L752   eck$LassoCheckResult]: Stem: 8594#ULTIMATE.startENTRY_NONWA [1520] ULTIMATE.startENTRY_NONWA-->L586-1_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 8593#L586-1_T0_init [1494] L586-1_T0_init-->L586_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8519#L586_T0_init [2105] L586_T0_init-->L586_T0_init-D20: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 9324#L586_T0_init-D20 [2227] L586_T0_init-D20-->mainENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8506#mainENTRY_T0_init [1864] mainENTRY_T0_init-->mainENTRY_T0_init-D38: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 8845#mainENTRY_T0_init-D38 [1636] mainENTRY_T0_init-D38-->havocProcedureENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8846#havocProcedureENTRY_T0_init [1671] havocProcedureENTRY_T0_init-->L421_T0_init: Formula: (not v_drop_12)  InVars {}  OutVars{drop=v_drop_12}  AuxVars[]  AssignedVars[drop] 8894#L421_T0_init [2201] L421_T0_init-->L422_T0_init: Formula: (not v_forward_17)  InVars {}  OutVars{forward=v_forward_17}  AuxVars[]  AssignedVars[forward] 9344#L422_T0_init [2151] L422_T0_init-->L423_T0_init: Formula: true  InVars {}  OutVars{standard_metadata.ingress_port=v_standard_metadata.ingress_port_16}  AuxVars[]  AssignedVars[standard_metadata.ingress_port] 9219#L423_T0_init [1949] L423_T0_init-->L424_T0_init: Formula: (and (<= 0 v_standard_metadata.ingress_port_15) (< v_standard_metadata.ingress_port_15 512))  InVars {standard_metadata.ingress_port=v_standard_metadata.ingress_port_15}  OutVars{standard_metadata.ingress_port=v_standard_metadata.ingress_port_15}  AuxVars[]  AssignedVars[] 9220#L424_T0_init [2007] L424_T0_init-->L425_T0_init: Formula: (= v_standard_metadata.egress_spec_16 0)  InVars {}  OutVars{standard_metadata.egress_spec=v_standard_metadata.egress_spec_16}  AuxVars[]  AssignedVars[standard_metadata.egress_spec] 9260#L425_T0_init [1998] L425_T0_init-->L426_T0_init: Formula: (= 0 v_standard_metadata.egress_port_18)  InVars {}  OutVars{standard_metadata.egress_port=v_standard_metadata.egress_port_18}  AuxVars[]  AssignedVars[standard_metadata.egress_port] 8998#L426_T0_init [1739] L426_T0_init-->L427_T0_init: Formula: true  InVars {}  OutVars{standard_metadata.instance_type=v_standard_metadata.instance_type_10}  AuxVars[]  AssignedVars[standard_metadata.instance_type] 8544#L427_T0_init [1475] L427_T0_init-->L428_T0_init: Formula: (and (< v_standard_metadata.instance_type_11 4294967296) (<= 0 v_standard_metadata.instance_type_11))  InVars {standard_metadata.instance_type=v_standard_metadata.instance_type_11}  OutVars{standard_metadata.instance_type=v_standard_metadata.instance_type_11}  AuxVars[]  AssignedVars[] 8545#L428_T0_init [1613] L428_T0_init-->L429_T0_init: Formula: true  InVars {}  OutVars{standard_metadata.packet_length=v_standard_metadata.packet_length_12}  AuxVars[]  AssignedVars[standard_metadata.packet_length] 8805#L429_T0_init [1908] L429_T0_init-->L430_T0_init: Formula: (and (<= 0 v_standard_metadata.packet_length_11) (< v_standard_metadata.packet_length_11 4294967296))  InVars {standard_metadata.packet_length=v_standard_metadata.packet_length_11}  OutVars{standard_metadata.packet_length=v_standard_metadata.packet_length_11}  AuxVars[]  AssignedVars[] 8692#L430_T0_init [1545] L430_T0_init-->L431_T0_init: Formula: true  InVars {}  OutVars{standard_metadata.enq_timestamp=v_standard_metadata.enq_timestamp_10}  AuxVars[]  AssignedVars[standard_metadata.enq_timestamp] 8693#L431_T0_init [1642] L431_T0_init-->L432_T0_init: Formula: (and (<= 0 v_standard_metadata.enq_timestamp_9) (< v_standard_metadata.enq_timestamp_9 4294967296))  InVars {standard_metadata.enq_timestamp=v_standard_metadata.enq_timestamp_9}  OutVars{standard_metadata.enq_timestamp=v_standard_metadata.enq_timestamp_9}  AuxVars[]  AssignedVars[] 8851#L432_T0_init [2160] L432_T0_init-->L433_T0_init: Formula: (= v_standard_metadata.enq_qdepth_9 0)  InVars {}  OutVars{standard_metadata.enq_qdepth=v_standard_metadata.enq_qdepth_9}  AuxVars[]  AssignedVars[standard_metadata.enq_qdepth] 9092#L433_T0_init [1815] L433_T0_init-->L434_T0_init: Formula: true  InVars {}  OutVars{standard_metadata.deq_timedelta=v_standard_metadata.deq_timedelta_12}  AuxVars[]  AssignedVars[standard_metadata.deq_timedelta] 9093#L434_T0_init [2053] L434_T0_init-->L435_T0_init: Formula: (and (<= 0 v_standard_metadata.deq_timedelta_11) (< v_standard_metadata.deq_timedelta_11 4294967296))  InVars {standard_metadata.deq_timedelta=v_standard_metadata.deq_timedelta_11}  OutVars{standard_metadata.deq_timedelta=v_standard_metadata.deq_timedelta_11}  AuxVars[]  AssignedVars[] 8666#L435_T0_init [1534] L435_T0_init-->L436_T0_init: Formula: true  InVars {}  OutVars{standard_metadata.deq_qdepth=v_standard_metadata.deq_qdepth_10}  AuxVars[]  AssignedVars[standard_metadata.deq_qdepth] 8667#L436_T0_init [2057] L436_T0_init-->L437_T0_init: Formula: (and (< v_standard_metadata.deq_qdepth_11 524288) (<= 0 v_standard_metadata.deq_qdepth_11))  InVars {standard_metadata.deq_qdepth=v_standard_metadata.deq_qdepth_11}  OutVars{standard_metadata.deq_qdepth=v_standard_metadata.deq_qdepth_11}  AuxVars[]  AssignedVars[] 8878#L437_T0_init [1659] L437_T0_init-->L438_T0_init: Formula: true  InVars {}  OutVars{standard_metadata.ingress_global_timestamp=v_standard_metadata.ingress_global_timestamp_11}  AuxVars[]  AssignedVars[standard_metadata.ingress_global_timestamp] 8830#L438_T0_init [1627] L438_T0_init-->L439_T0_init: Formula: (and (<= 0 v_standard_metadata.ingress_global_timestamp_12) (< v_standard_metadata.ingress_global_timestamp_12 281474976710656))  InVars {standard_metadata.ingress_global_timestamp=v_standard_metadata.ingress_global_timestamp_12}  OutVars{standard_metadata.ingress_global_timestamp=v_standard_metadata.ingress_global_timestamp_12}  AuxVars[]  AssignedVars[] 8831#L439_T0_init [2231] L439_T0_init-->L440_T0_init: Formula: true  InVars {}  OutVars{standard_metadata.egress_global_timestamp=v_standard_metadata.egress_global_timestamp_11}  AuxVars[]  AssignedVars[standard_metadata.egress_global_timestamp] 8579#L440_T0_init [1488] L440_T0_init-->L441_T0_init: Formula: (and (<= 0 v_standard_metadata.egress_global_timestamp_12) (< v_standard_metadata.egress_global_timestamp_12 281474976710656))  InVars {standard_metadata.egress_global_timestamp=v_standard_metadata.egress_global_timestamp_12}  OutVars{standard_metadata.egress_global_timestamp=v_standard_metadata.egress_global_timestamp_12}  AuxVars[]  AssignedVars[] 8580#L441_T0_init [1497] L441_T0_init-->L442_T0_init: Formula: (= 0 v_standard_metadata.mcast_grp_8)  InVars {}  OutVars{standard_metadata.mcast_grp=v_standard_metadata.mcast_grp_8}  AuxVars[]  AssignedVars[standard_metadata.mcast_grp] 8596#L442_T0_init [1783] L442_T0_init-->L443_T0_init: Formula: (= v_standard_metadata.egress_rid_9 0)  InVars {}  OutVars{standard_metadata.egress_rid=v_standard_metadata.egress_rid_9}  AuxVars[]  AssignedVars[standard_metadata.egress_rid] 9050#L443_T0_init [1900] L443_T0_init-->L444_T0_init: Formula: (= v_standard_metadata.checksum_error_8 0)  InVars {}  OutVars{standard_metadata.checksum_error=v_standard_metadata.checksum_error_8}  AuxVars[]  AssignedVars[standard_metadata.checksum_error] 8961#L444_T0_init [1711] L444_T0_init-->L445_T0_init: Formula: (= v_standard_metadata.parser_error_9 0)  InVars {}  OutVars{standard_metadata.parser_error=v_standard_metadata.parser_error_9}  AuxVars[]  AssignedVars[standard_metadata.parser_error] 8962#L445_T0_init [2251] L445_T0_init-->L446_T0_init: Formula: (= v_standard_metadata.priority_9 0)  InVars {}  OutVars{standard_metadata.priority=v_standard_metadata.priority_9}  AuxVars[]  AssignedVars[standard_metadata.priority] 9328#L446_T0_init [2120] L446_T0_init-->L447_T0_init: Formula: (not v_hdr.ethernet.valid_13)  InVars {}  OutVars{hdr.ethernet.valid=v_hdr.ethernet.valid_13}  AuxVars[]  AssignedVars[hdr.ethernet.valid] 9036#L447_T0_init [1771] L447_T0_init-->L448_T0_init: Formula: (= v_emit_37 (store v_emit_38 v_hdr.ethernet_3 false))  InVars {emit=v_emit_38, hdr.ethernet=v_hdr.ethernet_3}  OutVars{emit=v_emit_37, hdr.ethernet=v_hdr.ethernet_3}  AuxVars[]  AssignedVars[emit] 9037#L448_T0_init [1833] L448_T0_init-->L449_T0_init: Formula: true  InVars {}  OutVars{hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_27}  AuxVars[]  AssignedVars[hdr.ethernet.dstAddr] 9112#L449_T0_init [2216] L449_T0_init-->L450_T0_init: Formula: (= v_hdr.ethernet.dstAddr_29 v__old_hdr.ethernet.dstAddr_12)  InVars {hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_29}  OutVars{_old_hdr.ethernet.dstAddr=v__old_hdr.ethernet.dstAddr_12, hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_29}  AuxVars[]  AssignedVars[_old_hdr.ethernet.dstAddr] 8944#L450_T0_init [1701] L450_T0_init-->L451_T0_init: Formula: (= v_hdr.ethernet.dstAddr_30 v__old_hdr.ethernet.dstAddr_13)  InVars {hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_30}  OutVars{_old_hdr.ethernet.dstAddr=v__old_hdr.ethernet.dstAddr_13, hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_30}  AuxVars[]  AssignedVars[_old_hdr.ethernet.dstAddr] 8945#L451_T0_init [2155] L451_T0_init-->L452_T0_init: Formula: true  InVars {}  OutVars{hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_22}  AuxVars[]  AssignedVars[hdr.ethernet.srcAddr] 9232#L452_T0_init [1964] L452_T0_init-->L453_T0_init: Formula: (= v_hdr.ethernet.srcAddr_27 v__old_hdr.ethernet.srcAddr_13)  InVars {hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_27}  OutVars{hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_27, _old_hdr.ethernet.srcAddr=v__old_hdr.ethernet.srcAddr_13}  AuxVars[]  AssignedVars[_old_hdr.ethernet.srcAddr] 9226#L453_T0_init [1958] L453_T0_init-->L454_T0_init: Formula: (= v_hdr.ethernet.srcAddr_25 v__old_hdr.ethernet.srcAddr_12)  InVars {hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_25}  OutVars{hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_25, _old_hdr.ethernet.srcAddr=v__old_hdr.ethernet.srcAddr_12}  AuxVars[]  AssignedVars[_old_hdr.ethernet.srcAddr] 9034#L454_T0_init [1770] L454_T0_init-->L455_T0_init: Formula: true  InVars {}  OutVars{hdr.ethernet.etherType=v_hdr.ethernet.etherType_24}  AuxVars[]  AssignedVars[hdr.ethernet.etherType] 9035#L455_T0_init [1870] L455_T0_init-->L456_T0_init: Formula: (and (<= 0 v_hdr.ethernet.etherType_25) (< v_hdr.ethernet.etherType_25 65536))  InVars {hdr.ethernet.etherType=v_hdr.ethernet.etherType_25}  OutVars{hdr.ethernet.etherType=v_hdr.ethernet.etherType_25}  AuxVars[]  AssignedVars[] 9146#L456_T0_init [2121] L456_T0_init-->L457_T0_init: Formula: (not v_hdr.ipv6.valid_17)  InVars {}  OutVars{hdr.ipv6.valid=v_hdr.ipv6.valid_17}  AuxVars[]  AssignedVars[hdr.ipv6.valid] 9173#L457_T0_init [1901] L457_T0_init-->L458_T0_init: Formula: (= v_emit_41 (store v_emit_42 v_hdr.ipv6_10 false))  InVars {emit=v_emit_42, hdr.ipv6=v_hdr.ipv6_10}  OutVars{emit=v_emit_41, hdr.ipv6=v_hdr.ipv6_10}  AuxVars[]  AssignedVars[emit] 9075#L458_T0_init [1803] L458_T0_init-->L459_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv6.version=v_hdr.ipv6.version_18}  AuxVars[]  AssignedVars[hdr.ipv6.version] 9076#L459_T0_init [2031] L459_T0_init-->L460_T0_init: Formula: (and (<= 0 v_hdr.ipv6.version_17) (< v_hdr.ipv6.version_17 16))  InVars {hdr.ipv6.version=v_hdr.ipv6.version_17}  OutVars{hdr.ipv6.version=v_hdr.ipv6.version_17}  AuxVars[]  AssignedVars[] 8783#L460_T0_init [1599] L460_T0_init-->L461_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv6.trafclass=v_hdr.ipv6.trafclass_12}  AuxVars[]  AssignedVars[hdr.ipv6.trafclass] 8678#L461_T0_init [1539] L461_T0_init-->L462_T0_init: Formula: (and (< v_hdr.ipv6.trafclass_11 256) (<= 0 v_hdr.ipv6.trafclass_11))  InVars {hdr.ipv6.trafclass=v_hdr.ipv6.trafclass_11}  OutVars{hdr.ipv6.trafclass=v_hdr.ipv6.trafclass_11}  AuxVars[]  AssignedVars[] 8679#L462_T0_init [1654] L462_T0_init-->L463_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv6.flowlabel=v_hdr.ipv6.flowlabel_9}  AuxVars[]  AssignedVars[hdr.ipv6.flowlabel] 8563#L463_T0_init [1484] L463_T0_init-->L464_T0_init: Formula: (and (<= 0 v_hdr.ipv6.flowlabel_12) (< v_hdr.ipv6.flowlabel_12 1048576))  InVars {hdr.ipv6.flowlabel=v_hdr.ipv6.flowlabel_12}  OutVars{hdr.ipv6.flowlabel=v_hdr.ipv6.flowlabel_12}  AuxVars[]  AssignedVars[] 8564#L464_T0_init [1528] L464_T0_init-->L465_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv6.payloadlen=v_hdr.ipv6.payloadlen_18}  AuxVars[]  AssignedVars[hdr.ipv6.payloadlen] 8655#L465_T0_init [1682] L465_T0_init-->L466_T0_init: Formula: (and (<= 0 v_hdr.ipv6.payloadlen_20) (< v_hdr.ipv6.payloadlen_20 65536))  InVars {hdr.ipv6.payloadlen=v_hdr.ipv6.payloadlen_20}  OutVars{hdr.ipv6.payloadlen=v_hdr.ipv6.payloadlen_20}  AuxVars[]  AssignedVars[] 8913#L466_T0_init [1760] L466_T0_init-->L467_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv6.nextheader=v_hdr.ipv6.nextheader_22}  AuxVars[]  AssignedVars[hdr.ipv6.nextheader] 8993#L467_T0_init [1735] L467_T0_init-->L468_T0_init: Formula: (and (< v_hdr.ipv6.nextheader_19 256) (<= 0 v_hdr.ipv6.nextheader_19))  InVars {hdr.ipv6.nextheader=v_hdr.ipv6.nextheader_19}  OutVars{hdr.ipv6.nextheader=v_hdr.ipv6.nextheader_19}  AuxVars[]  AssignedVars[] 8994#L468_T0_init [1839] L468_T0_init-->L469_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv6.hoplimit=v_hdr.ipv6.hoplimit_19}  AuxVars[]  AssignedVars[hdr.ipv6.hoplimit] 9117#L469_T0_init [1913] L469_T0_init-->L470_T0_init: Formula: (and (<= 0 v_hdr.ipv6.hoplimit_18) (< v_hdr.ipv6.hoplimit_18 256))  InVars {hdr.ipv6.hoplimit=v_hdr.ipv6.hoplimit_18}  OutVars{hdr.ipv6.hoplimit=v_hdr.ipv6.hoplimit_18}  AuxVars[]  AssignedVars[] 9183#L470_T0_init [2165] L470_T0_init-->L471_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv6.srcAddr=v_hdr.ipv6.srcAddr_16}  AuxVars[]  AssignedVars[hdr.ipv6.srcAddr] 8510#L471_T0_init [1460] L471_T0_init-->L472_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv6.dstAddr=v_hdr.ipv6.dstAddr_16}  AuxVars[]  AssignedVars[hdr.ipv6.dstAddr] 8511#L472_T0_init [1722] L472_T0_init-->L473_T0_init: Formula: (not v_hdr.ipv4_tunnel.valid_19)  InVars {}  OutVars{hdr.ipv4_tunnel.valid=v_hdr.ipv4_tunnel.valid_19}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.valid] 8749#L473_T0_init [1580] L473_T0_init-->L474_T0_init: Formula: (= v_emit_39 (store v_emit_40 v_hdr.ipv4_tunnel_9 false))  InVars {emit=v_emit_40, hdr.ipv4_tunnel=v_hdr.ipv4_tunnel_9}  OutVars{emit=v_emit_39, hdr.ipv4_tunnel=v_hdr.ipv4_tunnel_9}  AuxVars[]  AssignedVars[emit] 8729#L474_T0_init [1568] L474_T0_init-->L475_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.version=v_hdr.ipv4_tunnel.version_16}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.version] 8730#L475_T0_init [1816] L475_T0_init-->L476_T0_init: Formula: (and (<= 0 v_hdr.ipv4_tunnel.version_17) (< v_hdr.ipv4_tunnel.version_17 16))  InVars {hdr.ipv4_tunnel.version=v_hdr.ipv4_tunnel.version_17}  OutVars{hdr.ipv4_tunnel.version=v_hdr.ipv4_tunnel.version_17}  AuxVars[]  AssignedVars[] 9094#L476_T0_init [1885] L476_T0_init-->L477_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.ihl=v_hdr.ipv4_tunnel.ihl_14}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.ihl] 8508#L477_T0_init [1459] L477_T0_init-->L478_T0_init: Formula: (and (< v_hdr.ipv4_tunnel.ihl_17 16) (<= 0 v_hdr.ipv4_tunnel.ihl_17))  InVars {hdr.ipv4_tunnel.ihl=v_hdr.ipv4_tunnel.ihl_17}  OutVars{hdr.ipv4_tunnel.ihl=v_hdr.ipv4_tunnel.ihl_17}  AuxVars[]  AssignedVars[] 8509#L478_T0_init [1744] L478_T0_init-->L479_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.diffserv=v_hdr.ipv4_tunnel.diffserv_15}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.diffserv] 8883#L479_T0_init [1664] L479_T0_init-->L480_T0_init: Formula: (and (< v_hdr.ipv4_tunnel.diffserv_14 256) (<= 0 v_hdr.ipv4_tunnel.diffserv_14))  InVars {hdr.ipv4_tunnel.diffserv=v_hdr.ipv4_tunnel.diffserv_14}  OutVars{hdr.ipv4_tunnel.diffserv=v_hdr.ipv4_tunnel.diffserv_14}  AuxVars[]  AssignedVars[] 8787#L480_T0_init [1602] L480_T0_init-->L481_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.totalLen=v_hdr.ipv4_tunnel.totalLen_14}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.totalLen] 8788#L481_T0_init [2263] L481_T0_init-->L482_T0_init: Formula: (and (< v_hdr.ipv4_tunnel.totalLen_17 65536) (<= 0 v_hdr.ipv4_tunnel.totalLen_17))  InVars {hdr.ipv4_tunnel.totalLen=v_hdr.ipv4_tunnel.totalLen_17}  OutVars{hdr.ipv4_tunnel.totalLen=v_hdr.ipv4_tunnel.totalLen_17}  AuxVars[]  AssignedVars[] 8957#L482_T0_init [1709] L482_T0_init-->L483_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.identification=v_hdr.ipv4_tunnel.identification_15}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.identification] 8958#L483_T0_init [1823] L483_T0_init-->L484_T0_init: Formula: (and (<= 0 v_hdr.ipv4_tunnel.identification_17) (< v_hdr.ipv4_tunnel.identification_17 65536))  InVars {hdr.ipv4_tunnel.identification=v_hdr.ipv4_tunnel.identification_17}  OutVars{hdr.ipv4_tunnel.identification=v_hdr.ipv4_tunnel.identification_17}  AuxVars[]  AssignedVars[] 9100#L484_T0_init [1910] L484_T0_init-->L485_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.flags=v_hdr.ipv4_tunnel.flags_16}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.flags] 8859#L485_T0_init [1647] L485_T0_init-->L486_T0_init: Formula: (and (< v_hdr.ipv4_tunnel.flags_15 8) (<= 0 v_hdr.ipv4_tunnel.flags_15))  InVars {hdr.ipv4_tunnel.flags=v_hdr.ipv4_tunnel.flags_15}  OutVars{hdr.ipv4_tunnel.flags=v_hdr.ipv4_tunnel.flags_15}  AuxVars[]  AssignedVars[] 8860#L486_T0_init [1904] L486_T0_init-->L487_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.fragOffset=v_hdr.ipv4_tunnel.fragOffset_17}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.fragOffset] 9177#L487_T0_init [2094] L487_T0_init-->L488_T0_init: Formula: (and (< v_hdr.ipv4_tunnel.fragOffset_16 8192) (<= 0 v_hdr.ipv4_tunnel.fragOffset_16))  InVars {hdr.ipv4_tunnel.fragOffset=v_hdr.ipv4_tunnel.fragOffset_16}  OutVars{hdr.ipv4_tunnel.fragOffset=v_hdr.ipv4_tunnel.fragOffset_16}  AuxVars[]  AssignedVars[] 9319#L488_T0_init [2161] L488_T0_init-->L489_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.ttl=v_hdr.ipv4_tunnel.ttl_14}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.ttl] 9315#L489_T0_init [2081] L489_T0_init-->L490_T0_init: Formula: (and (< v_hdr.ipv4_tunnel.ttl_16 256) (<= 0 v_hdr.ipv4_tunnel.ttl_16))  InVars {hdr.ipv4_tunnel.ttl=v_hdr.ipv4_tunnel.ttl_16}  OutVars{hdr.ipv4_tunnel.ttl=v_hdr.ipv4_tunnel.ttl_16}  AuxVars[]  AssignedVars[] 8581#L490_T0_init [1489] L490_T0_init-->L491_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.protocol=v_hdr.ipv4_tunnel.protocol_17}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.protocol] 8582#L491_T0_init [2221] L491_T0_init-->L492_T0_init: Formula: (and (< v_hdr.ipv4_tunnel.protocol_16 256) (<= 0 v_hdr.ipv4_tunnel.protocol_16))  InVars {hdr.ipv4_tunnel.protocol=v_hdr.ipv4_tunnel.protocol_16}  OutVars{hdr.ipv4_tunnel.protocol=v_hdr.ipv4_tunnel.protocol_16}  AuxVars[]  AssignedVars[] 9374#L492_T0_init [2220] L492_T0_init-->L493_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.hdrChecksum=v_hdr.ipv4_tunnel.hdrChecksum_11}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.hdrChecksum] 9375#L493_T0_init [2277] L493_T0_init-->L494_T0_init: Formula: (and (<= 0 v_hdr.ipv4_tunnel.hdrChecksum_12) (< v_hdr.ipv4_tunnel.hdrChecksum_12 65536))  InVars {hdr.ipv4_tunnel.hdrChecksum=v_hdr.ipv4_tunnel.hdrChecksum_12}  OutVars{hdr.ipv4_tunnel.hdrChecksum=v_hdr.ipv4_tunnel.hdrChecksum_12}  AuxVars[]  AssignedVars[] 9330#L494_T0_init [2126] L494_T0_init-->L495_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.srcAddr=v_hdr.ipv4_tunnel.srcAddr_13}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.srcAddr] 8591#L495_T0_init [1493] L495_T0_init-->L496_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.dstAddr=v_hdr.ipv4_tunnel.dstAddr_13}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.dstAddr] 8592#L496_T0_init [1517] L496_T0_init-->L497_T0_init: Formula: (not v_hdr.ipv4.valid_25)  InVars {}  OutVars{hdr.ipv4.valid=v_hdr.ipv4.valid_25}  AuxVars[]  AssignedVars[hdr.ipv4.valid] 8633#L497_T0_init [1794] L497_T0_init-->L498_T0_init: Formula: (= v_emit_27 (store v_emit_28 v_hdr.ipv4_2 false))  InVars {hdr.ipv4=v_hdr.ipv4_2, emit=v_emit_28}  OutVars{hdr.ipv4=v_hdr.ipv4_2, emit=v_emit_27}  AuxVars[]  AssignedVars[emit] 9064#L498_T0_init [2117] L498_T0_init-->L499_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.version=v_hdr.ipv4.version_13}  AuxVars[]  AssignedVars[hdr.ipv4.version] 8934#L499_T0_init [1696] L499_T0_init-->L500_T0_init: Formula: (and (< v_hdr.ipv4.version_10 16) (<= 0 v_hdr.ipv4.version_10))  InVars {hdr.ipv4.version=v_hdr.ipv4.version_10}  OutVars{hdr.ipv4.version=v_hdr.ipv4.version_10}  AuxVars[]  AssignedVars[] 8935#L500_T0_init [2045] L500_T0_init-->L501_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.ihl=v_hdr.ipv4.ihl_9}  AuxVars[]  AssignedVars[hdr.ipv4.ihl] 9292#L501_T0_init [2140] L501_T0_init-->L502_T0_init: Formula: (and (< v_hdr.ipv4.ihl_10 16) (<= 0 v_hdr.ipv4.ihl_10))  InVars {hdr.ipv4.ihl=v_hdr.ipv4.ihl_10}  OutVars{hdr.ipv4.ihl=v_hdr.ipv4.ihl_10}  AuxVars[]  AssignedVars[] 9307#L502_T0_init [2067] L502_T0_init-->L503_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.diffserv=v_hdr.ipv4.diffserv_13}  AuxVars[]  AssignedVars[hdr.ipv4.diffserv] 9268#L503_T0_init [2009] L503_T0_init-->L504_T0_init: Formula: (and (<= 0 v_hdr.ipv4.diffserv_12) (< v_hdr.ipv4.diffserv_12 256))  InVars {hdr.ipv4.diffserv=v_hdr.ipv4.diffserv_12}  OutVars{hdr.ipv4.diffserv=v_hdr.ipv4.diffserv_12}  AuxVars[]  AssignedVars[] 9153#L504_T0_init [1875] L504_T0_init-->L505_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.totalLen=v_hdr.ipv4.totalLen_14}  AuxVars[]  AssignedVars[hdr.ipv4.totalLen] 8571#L505_T0_init [1486] L505_T0_init-->L506_T0_init: Formula: (and (< v_hdr.ipv4.totalLen_15 65536) (<= 0 v_hdr.ipv4.totalLen_15))  InVars {hdr.ipv4.totalLen=v_hdr.ipv4.totalLen_15}  OutVars{hdr.ipv4.totalLen=v_hdr.ipv4.totalLen_15}  AuxVars[]  AssignedVars[] 8572#L506_T0_init [2122] L506_T0_init-->L507_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.identification=v_hdr.ipv4.identification_12}  AuxVars[]  AssignedVars[hdr.ipv4.identification] 9184#L507_T0_init [1914] L507_T0_init-->L508_T0_init: Formula: (and (< v_hdr.ipv4.identification_11 65536) (<= 0 v_hdr.ipv4.identification_11))  InVars {hdr.ipv4.identification=v_hdr.ipv4.identification_11}  OutVars{hdr.ipv4.identification=v_hdr.ipv4.identification_11}  AuxVars[]  AssignedVars[] 9185#L508_T0_init [2054] L508_T0_init-->L509_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.flags=v_hdr.ipv4.flags_10}  AuxVars[]  AssignedVars[hdr.ipv4.flags] 9298#L509_T0_init [2246] L509_T0_init-->L510_T0_init: Formula: (and (< v_hdr.ipv4.flags_13 8) (<= 0 v_hdr.ipv4.flags_13))  InVars {hdr.ipv4.flags=v_hdr.ipv4.flags_13}  OutVars{hdr.ipv4.flags=v_hdr.ipv4.flags_13}  AuxVars[]  AssignedVars[] 8658#L510_T0_init [1529] L510_T0_init-->L511_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.fragOffset=v_hdr.ipv4.fragOffset_11}  AuxVars[]  AssignedVars[hdr.ipv4.fragOffset] 8659#L511_T0_init [1817] L511_T0_init-->L512_T0_init: Formula: (and (< v_hdr.ipv4.fragOffset_10 8192) (<= 0 v_hdr.ipv4.fragOffset_10))  InVars {hdr.ipv4.fragOffset=v_hdr.ipv4.fragOffset_10}  OutVars{hdr.ipv4.fragOffset=v_hdr.ipv4.fragOffset_10}  AuxVars[]  AssignedVars[] 8809#L512_T0_init [1615] L512_T0_init-->L513_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.ttl=v_hdr.ipv4.ttl_10}  AuxVars[]  AssignedVars[hdr.ipv4.ttl] 8810#L513_T0_init [2035] L513_T0_init-->L514_T0_init: Formula: (and (<= 0 v_hdr.ipv4.ttl_11) (< v_hdr.ipv4.ttl_11 256))  InVars {hdr.ipv4.ttl=v_hdr.ipv4.ttl_11}  OutVars{hdr.ipv4.ttl=v_hdr.ipv4.ttl_11}  AuxVars[]  AssignedVars[] 8952#L514_T0_init [1706] L514_T0_init-->L515_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.protocol=v_hdr.ipv4.protocol_12}  AuxVars[]  AssignedVars[hdr.ipv4.protocol] 8953#L515_T0_init [1778] L515_T0_init-->L516_T0_init: Formula: (and (<= 0 v_hdr.ipv4.protocol_14) (< v_hdr.ipv4.protocol_14 256))  InVars {hdr.ipv4.protocol=v_hdr.ipv4.protocol_14}  OutVars{hdr.ipv4.protocol=v_hdr.ipv4.protocol_14}  AuxVars[]  AssignedVars[] 9045#L516_T0_init [2106] L516_T0_init-->L517_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.hdrChecksum=v_hdr.ipv4.hdrChecksum_9}  AuxVars[]  AssignedVars[hdr.ipv4.hdrChecksum] 9122#L517_T0_init [1842] L517_T0_init-->L518_T0_init: Formula: (and (< v_hdr.ipv4.hdrChecksum_10 65536) (<= 0 v_hdr.ipv4.hdrChecksum_10))  InVars {hdr.ipv4.hdrChecksum=v_hdr.ipv4.hdrChecksum_10}  OutVars{hdr.ipv4.hdrChecksum=v_hdr.ipv4.hdrChecksum_10}  AuxVars[]  AssignedVars[] 9123#L518_T0_init [1932] L518_T0_init-->L519_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.srcAddr=v_hdr.ipv4.srcAddr_9}  AuxVars[]  AssignedVars[hdr.ipv4.srcAddr] 8954#L519_T0_init [1707] L519_T0_init-->L520_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_16}  AuxVars[]  AssignedVars[hdr.ipv4.dstAddr] 8739#L520_T0_init [1573] L520_T0_init-->L521_T0_init: Formula: (= v_hdr.ipv4.dstAddr_17 v__old_hdr.ipv4.dstAddr_13)  InVars {hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_17}  OutVars{_old_hdr.ipv4.dstAddr=v__old_hdr.ipv4.dstAddr_13, hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_17}  AuxVars[]  AssignedVars[_old_hdr.ipv4.dstAddr] 8740#L521_T0_init [1719] L521_T0_init-->L522_T0_init: Formula: (= v_hdr.ipv4.dstAddr_14 v__old_hdr.ipv4.dstAddr_11)  InVars {hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_14}  OutVars{_old_hdr.ipv4.dstAddr=v__old_hdr.ipv4.dstAddr_11, hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_14}  AuxVars[]  AssignedVars[_old_hdr.ipv4.dstAddr] 8975#L522_T0_init [2065] L522_T0_init-->L523_T0_init: Formula: (not v_hdr.tcp.valid_30)  InVars {}  OutVars{hdr.tcp.valid=v_hdr.tcp.valid_30}  AuxVars[]  AssignedVars[hdr.tcp.valid] 8821#L523_T0_init [1623] L523_T0_init-->L524_T0_init: Formula: (= v_emit_35 (store v_emit_36 v_hdr.tcp_3 false))  InVars {hdr.tcp=v_hdr.tcp_3, emit=v_emit_36}  OutVars{hdr.tcp=v_hdr.tcp_3, emit=v_emit_35}  AuxVars[]  AssignedVars[emit] 8505#L524_T0_init [1458] L524_T0_init-->L525_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.srcport=v_hdr.tcp.srcport_10}  AuxVars[]  AssignedVars[hdr.tcp.srcport] 8507#L525_T0_init [1565] L525_T0_init-->L526_T0_init: Formula: (and (<= 0 v_hdr.tcp.srcport_12) (< v_hdr.tcp.srcport_12 65536))  InVars {hdr.tcp.srcport=v_hdr.tcp.srcport_12}  OutVars{hdr.tcp.srcport=v_hdr.tcp.srcport_12}  AuxVars[]  AssignedVars[] 8728#L526_T0_init [1882] L526_T0_init-->L527_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.dstport=v_hdr.tcp.dstport_9}  AuxVars[]  AssignedVars[hdr.tcp.dstport] 8980#L527_T0_init [1725] L527_T0_init-->L528_T0_init: Formula: (and (< v_hdr.tcp.dstport_10 65536) (<= 0 v_hdr.tcp.dstport_10))  InVars {hdr.tcp.dstport=v_hdr.tcp.dstport_10}  OutVars{hdr.tcp.dstport=v_hdr.tcp.dstport_10}  AuxVars[]  AssignedVars[] 8981#L528_T0_init [1837] L528_T0_init-->L529_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.sequence=v_hdr.tcp.sequence_43}  AuxVars[]  AssignedVars[hdr.tcp.sequence] 9116#L529_T0_init [1941] L529_T0_init-->L530_T0_init: Formula: (and (< v_hdr.tcp.sequence_44 4294967296) (<= 0 v_hdr.tcp.sequence_44))  InVars {hdr.tcp.sequence=v_hdr.tcp.sequence_44}  OutVars{hdr.tcp.sequence=v_hdr.tcp.sequence_44}  AuxVars[]  AssignedVars[] 8816#L530_T0_init [1620] L530_T0_init-->L531_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.ackseq=v_hdr.tcp.ackseq_41}  AuxVars[]  AssignedVars[hdr.tcp.ackseq] 8559#L531_T0_init [1481] L531_T0_init-->L532_T0_init: Formula: (and (< v_hdr.tcp.ackseq_43 4294967296) (<= 0 v_hdr.tcp.ackseq_43))  InVars {hdr.tcp.ackseq=v_hdr.tcp.ackseq_43}  OutVars{hdr.tcp.ackseq=v_hdr.tcp.ackseq_43}  AuxVars[]  AssignedVars[] 8560#L532_T0_init [2244] L532_T0_init-->L533_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.headerlength=v_hdr.tcp.headerlength_10}  AuxVars[]  AssignedVars[hdr.tcp.headerlength] 9361#L533_T0_init [2188] L533_T0_init-->L534_T0_init: Formula: (and (< v_hdr.tcp.headerlength_9 16) (<= 0 v_hdr.tcp.headerlength_9))  InVars {hdr.tcp.headerlength=v_hdr.tcp.headerlength_9}  OutVars{hdr.tcp.headerlength=v_hdr.tcp.headerlength_9}  AuxVars[]  AssignedVars[] 8819#L534_T0_init [1622] L534_T0_init-->L535_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.reservation=v_hdr.tcp.reservation_11}  AuxVars[]  AssignedVars[hdr.tcp.reservation] 8820#L535_T0_init [2196] L535_T0_init-->L536_T0_init: Formula: (and (< v_hdr.tcp.reservation_9 64) (<= 0 v_hdr.tcp.reservation_9))  InVars {hdr.tcp.reservation=v_hdr.tcp.reservation_9}  OutVars{hdr.tcp.reservation=v_hdr.tcp.reservation_9}  AuxVars[]  AssignedVars[] 8871#L536_T0_init [1653] L536_T0_init-->L537_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.URG=v_hdr.tcp.URG_11}  AuxVars[]  AssignedVars[hdr.tcp.URG] 8872#L537_T0_init [1942] L537_T0_init-->L538_T0_init: Formula: (and (<= 0 v_hdr.tcp.URG_10) (< v_hdr.tcp.URG_10 2))  InVars {hdr.tcp.URG=v_hdr.tcp.URG_10}  OutVars{hdr.tcp.URG=v_hdr.tcp.URG_10}  AuxVars[]  AssignedVars[] 9210#L538_T0_init [1944] L538_T0_init-->L539_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.ACK=v_hdr.tcp.ACK_11}  AuxVars[]  AssignedVars[hdr.tcp.ACK] 9212#L539_T0_init [2252] L539_T0_init-->L540_T0_init: Formula: (and (<= 0 v_hdr.tcp.ACK_9) (< v_hdr.tcp.ACK_9 2))  InVars {hdr.tcp.ACK=v_hdr.tcp.ACK_9}  OutVars{hdr.tcp.ACK=v_hdr.tcp.ACK_9}  AuxVars[]  AssignedVars[] 9249#L540_T0_init [1986] L540_T0_init-->L541_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.PSH=v_hdr.tcp.PSH_12}  AuxVars[]  AssignedVars[hdr.tcp.PSH] 9250#L541_T0_init [2141] L541_T0_init-->L542_T0_init: Formula: (and (<= 0 v_hdr.tcp.PSH_10) (< v_hdr.tcp.PSH_10 2))  InVars {hdr.tcp.PSH=v_hdr.tcp.PSH_10}  OutVars{hdr.tcp.PSH=v_hdr.tcp.PSH_10}  AuxVars[]  AssignedVars[] 9331#L542_T0_init [2128] L542_T0_init-->L543_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.RST=v_hdr.tcp.RST_10}  AuxVars[]  AssignedVars[hdr.tcp.RST] 9332#L543_T0_init [2131] L543_T0_init-->L544_T0_init: Formula: (and (<= 0 v_hdr.tcp.RST_11) (< v_hdr.tcp.RST_11 2))  InVars {hdr.tcp.RST=v_hdr.tcp.RST_11}  OutVars{hdr.tcp.RST=v_hdr.tcp.RST_11}  AuxVars[]  AssignedVars[] 9333#L544_T0_init [2168] L544_T0_init-->L545_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.SYN=v_hdr.tcp.SYN_12}  AuxVars[]  AssignedVars[hdr.tcp.SYN] 9246#L545_T0_init [1983] L545_T0_init-->L546_T0_init: Formula: (and (<= 0 v_hdr.tcp.SYN_11) (< v_hdr.tcp.SYN_11 2))  InVars {hdr.tcp.SYN=v_hdr.tcp.SYN_11}  OutVars{hdr.tcp.SYN=v_hdr.tcp.SYN_11}  AuxVars[]  AssignedVars[] 9247#L546_T0_init [2272] L546_T0_init-->L547_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.FIN=v_hdr.tcp.FIN_11}  AuxVars[]  AssignedVars[hdr.tcp.FIN] 9259#L547_T0_init [1996] L547_T0_init-->L548_T0_init: Formula: (and (< v_hdr.tcp.FIN_12 2) (<= 0 v_hdr.tcp.FIN_12))  InVars {hdr.tcp.FIN=v_hdr.tcp.FIN_12}  OutVars{hdr.tcp.FIN=v_hdr.tcp.FIN_12}  AuxVars[]  AssignedVars[] 9107#L548_T0_init [1829] L548_T0_init-->L549_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.windowsize=v_hdr.tcp.windowsize_10}  AuxVars[]  AssignedVars[hdr.tcp.windowsize] 9108#L549_T0_init [2207] L549_T0_init-->L550_T0_init: Formula: (and (<= 0 v_hdr.tcp.windowsize_9) (< v_hdr.tcp.windowsize_9 65536))  InVars {hdr.tcp.windowsize=v_hdr.tcp.windowsize_9}  OutVars{hdr.tcp.windowsize=v_hdr.tcp.windowsize_9}  AuxVars[]  AssignedVars[] 9367#L550_T0_init [2197] L550_T0_init-->L551_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.checksum=v_hdr.tcp.checksum_9}  AuxVars[]  AssignedVars[hdr.tcp.checksum] 9126#L551_T0_init [1844] L551_T0_init-->L552_T0_init: Formula: (and (<= 0 v_hdr.tcp.checksum_11) (< v_hdr.tcp.checksum_11 65536))  InVars {hdr.tcp.checksum=v_hdr.tcp.checksum_11}  OutVars{hdr.tcp.checksum=v_hdr.tcp.checksum_11}  AuxVars[]  AssignedVars[] 8631#L552_T0_init [1516] L552_T0_init-->L553_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.pointer=v_hdr.tcp.pointer_12}  AuxVars[]  AssignedVars[hdr.tcp.pointer] 8632#L553_T0_init [1639] L553_T0_init-->L554_T0_init: Formula: (and (<= 0 v_hdr.tcp.pointer_9) (< v_hdr.tcp.pointer_9 65536))  InVars {hdr.tcp.pointer=v_hdr.tcp.pointer_9}  OutVars{hdr.tcp.pointer=v_hdr.tcp.pointer_9}  AuxVars[]  AssignedVars[] 8611#L554_T0_init [1507] L554_T0_init-->L555_T0_init: Formula: (not v_hdr.udp_tunnel.valid_19)  InVars {}  OutVars{hdr.udp_tunnel.valid=v_hdr.udp_tunnel.valid_19}  AuxVars[]  AssignedVars[hdr.udp_tunnel.valid] 8612#L555_T0_init [1731] L555_T0_init-->L556_T0_init: Formula: (= v_emit_19 (store v_emit_20 v_hdr.udp_tunnel_8 false))  InVars {emit=v_emit_20, hdr.udp_tunnel=v_hdr.udp_tunnel_8}  OutVars{emit=v_emit_19, hdr.udp_tunnel=v_hdr.udp_tunnel_8}  AuxVars[]  AssignedVars[emit] 8988#L556_T0_init [2063] L556_T0_init-->L557_T0_init: Formula: true  InVars {}  OutVars{hdr.udp_tunnel.srcport=v_hdr.udp_tunnel.srcport_14}  AuxVars[]  AssignedVars[hdr.udp_tunnel.srcport] 9305#L557_T0_init [2127] L557_T0_init-->L558_T0_init: Formula: (and (<= 0 v_hdr.udp_tunnel.srcport_15) (< v_hdr.udp_tunnel.srcport_15 65536))  InVars {hdr.udp_tunnel.srcport=v_hdr.udp_tunnel.srcport_15}  OutVars{hdr.udp_tunnel.srcport=v_hdr.udp_tunnel.srcport_15}  AuxVars[]  AssignedVars[] 9221#L558_T0_init [1950] L558_T0_init-->L559_T0_init: Formula: true  InVars {}  OutVars{hdr.udp_tunnel.dstport=v_hdr.udp_tunnel.dstport_16}  AuxVars[]  AssignedVars[hdr.udp_tunnel.dstport] 8989#L559_T0_init [1732] L559_T0_init-->L560_T0_init: Formula: (and (< v_hdr.udp_tunnel.dstport_17 65536) (<= 0 v_hdr.udp_tunnel.dstport_17))  InVars {hdr.udp_tunnel.dstport=v_hdr.udp_tunnel.dstport_17}  OutVars{hdr.udp_tunnel.dstport=v_hdr.udp_tunnel.dstport_17}  AuxVars[]  AssignedVars[] 8990#L560_T0_init [2022] L560_T0_init-->L561_T0_init: Formula: true  InVars {}  OutVars{hdr.udp_tunnel.userlength=v_hdr.udp_tunnel.userlength_15}  AuxVars[]  AssignedVars[hdr.udp_tunnel.userlength] 8895#L561_T0_init [1672] L561_T0_init-->L562_T0_init: Formula: (and (<= 0 v_hdr.udp_tunnel.userlength_14) (< v_hdr.udp_tunnel.userlength_14 65536))  InVars {hdr.udp_tunnel.userlength=v_hdr.udp_tunnel.userlength_14}  OutVars{hdr.udp_tunnel.userlength=v_hdr.udp_tunnel.userlength_14}  AuxVars[]  AssignedVars[] 8712#L562_T0_init [1557] L562_T0_init-->L563_T0_init: Formula: true  InVars {}  OutVars{hdr.udp_tunnel.checksum=v_hdr.udp_tunnel.checksum_16}  AuxVars[]  AssignedVars[hdr.udp_tunnel.checksum] 8713#L563_T0_init [1987] L563_T0_init-->havocProcedureFINAL_T0_init: Formula: (and (<= 0 v_hdr.udp_tunnel.checksum_15) (< v_hdr.udp_tunnel.checksum_15 65536))  InVars {hdr.udp_tunnel.checksum=v_hdr.udp_tunnel.checksum_15}  OutVars{hdr.udp_tunnel.checksum=v_hdr.udp_tunnel.checksum_15}  AuxVars[]  AssignedVars[] 9251#havocProcedureFINAL_T0_init [2225] havocProcedureFINAL_T0_init-->havocProcedureEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8755#havocProcedureEXIT_T0_init >[2321] havocProcedureEXIT_T0_init-->L568-D56: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8756#L568-D56 [1897] L568-D56-->L568_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8811#L568_T0_init [2049] L568_T0_init-->L568_T0_init-D50: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 9266#L568_T0_init-D50 [2006] L568_T0_init-D50-->_parser_MyParserENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8669#_parser_MyParserENTRY_T0_init [1616] _parser_MyParserENTRY_T0_init-->_parser_MyParserENTRY_T0_init-D18: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 8734#_parser_MyParserENTRY_T0_init-D18 [1570] _parser_MyParserENTRY_T0_init-D18-->startENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8735#startENTRY_T0_init [2032] startENTRY_T0_init-->L736_T0_init: Formula: v_hdr.ethernet.valid_16  InVars {}  OutVars{hdr.ethernet.valid=v_hdr.ethernet.valid_16}  AuxVars[]  AssignedVars[hdr.ethernet.valid] 9286#L736_T0_init [2125] L736_T0_init-->L739_T0_init: Formula: (not (= v_hdr.ethernet.etherType_37 34525))  InVars {hdr.ethernet.etherType=v_hdr.ethernet.etherType_37}  OutVars{hdr.ethernet.etherType=v_hdr.ethernet.etherType_37}  AuxVars[]  AssignedVars[] 8668#L739_T0_init [1536] L739_T0_init-->L739-1_T0_init: Formula: (not (= v_hdr.ethernet.etherType_33 2048))  InVars {hdr.ethernet.etherType=v_hdr.ethernet.etherType_33}  OutVars{hdr.ethernet.etherType=v_hdr.ethernet.etherType_33}  AuxVars[]  AssignedVars[] 8670#L739-1_T0_init [2115] L739-1_T0_init-->startEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8807#startEXIT_T0_init >[2288] startEXIT_T0_init-->_parser_MyParserFINAL-D66: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8808#_parser_MyParserFINAL-D66 [1668] _parser_MyParserFINAL-D66-->_parser_MyParserFINAL_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8890#_parser_MyParserFINAL_T0_init [2008] _parser_MyParserFINAL_T0_init-->_parser_MyParserEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 9267#_parser_MyParserEXIT_T0_init >[2306] _parser_MyParserEXIT_T0_init-->L569-D104: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 9329#L569-D104 [2130] L569-D104-->L569_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 9088#L569_T0_init [1812] L569_T0_init-->L569_T0_init-D52: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 9089#L569_T0_init-D52 [1845] L569_T0_init-D52-->MyVerifyChecksumFINAL_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 9127#MyVerifyChecksumFINAL_T0_init [1936] MyVerifyChecksumFINAL_T0_init-->MyVerifyChecksumEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 9197#MyVerifyChecksumEXIT_T0_init >[2382] MyVerifyChecksumEXIT_T0_init-->L570-D74: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 9136#L570-D74 [1855] L570-D74-->L570_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8518#L570_T0_init [1464] L570_T0_init-->L570_T0_init-D14: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 8520#L570_T0_init-D14 [2250] L570_T0_init-D14-->MyIngressENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8891#MyIngressENTRY_T0_init [1669] MyIngressENTRY_T0_init-->L259_T0_init: Formula: (= v_standard_metadata.ingress_port_20 0)  InVars {standard_metadata.ingress_port=v_standard_metadata.ingress_port_20}  OutVars{standard_metadata.ingress_port=v_standard_metadata.ingress_port_20}  AuxVars[]  AssignedVars[] 8892#L259_T0_init [1835] L259_T0_init-->L266_T0_init: Formula: (not (= v_hdr.ipv4.dstAddr_19 2071690107))  InVars {hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_19}  OutVars{hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_19}  AuxVars[]  AssignedVars[] 9113#L266_T0_init [2091] L266_T0_init-->L267_T0_init: Formula: (and (not (= v_hdr.ethernet.srcAddr_30 0)) (not (= 281474976710655 v_hdr.ethernet.dstAddr_39)))  InVars {hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_30, hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_39}  OutVars{hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_30, hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_39}  AuxVars[]  AssignedVars[] 8721#L267_T0_init [1689] L267_T0_init-->L267_T0_init-D34: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 8720#L267_T0_init-D34 [1561] L267_T0_init-D34-->store_user_macENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8550#store_user_macENTRY_T0_init [1584] store_user_macENTRY_T0_init-->store_user_macENTRY_T0_init-D40: Formula: (and (= v_user_mac.write_indexInParam_1 0) (= v_hdr.ethernet.srcAddr_21 v_user_mac.write_valueInParam_1))  InVars {hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_21}  OutVars{user_mac.write_value=v_user_mac.write_valueInParam_1, user_mac.write_index=v_user_mac.write_indexInParam_1, hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_21}  AuxVars[]  AssignedVars[user_mac.write_value, user_mac.write_index]< 8752#store_user_macENTRY_T0_init-D40 [1862] store_user_macENTRY_T0_init-D40-->user_mac.writeENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8549#user_mac.writeENTRY_T0_init [1477] user_mac.writeENTRY_T0_init-->user_mac.writeFINAL_T0_init: Formula: (= v_user_mac_18 (store v_user_mac_19 v_user_mac.write_index_3 v_user_mac.write_value_3))  InVars {user_mac.write_value=v_user_mac.write_value_3, user_mac.write_index=v_user_mac.write_index_3, user_mac=v_user_mac_19}  OutVars{user_mac.write_value=v_user_mac.write_value_3, user_mac.write_index=v_user_mac.write_index_3, user_mac=v_user_mac_18}  AuxVars[]  AssignedVars[user_mac] 8551#user_mac.writeFINAL_T0_init [2217] user_mac.writeFINAL_T0_init-->user_mac.writeEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 9373#user_mac.writeEXIT_T0_init >[2384] user_mac.writeEXIT_T0_init-->store_user_macFINAL-D64: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: (and (= v_user_mac.write_indexInParam_1 0) (= v_hdr.ethernet.srcAddr_21 v_user_mac.write_valueInParam_1))  InVars {hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_21}  OutVars{user_mac.write_value=v_user_mac.write_valueInParam_1, user_mac.write_index=v_user_mac.write_indexInParam_1, hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_21}  AuxVars[]  AssignedVars[user_mac.write_value, user_mac.write_index] 9293#store_user_macFINAL-D64 [2047] store_user_macFINAL-D64-->store_user_macFINAL_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 9254#store_user_macFINAL_T0_init [1991] store_user_macFINAL_T0_init-->store_user_macEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 9083#store_user_macEXIT_T0_init >[2359] store_user_macEXIT_T0_init-->L267-1-D68: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 9084#L267-1-D68 [2212] L267-1-D68-->L267-1_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8706#L267-1_T0_init [2166] L267-1_T0_init-->L267-1_T0_init-D6: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 9111#L267-1_T0_init-D6 [1831] L267-1_T0_init-D6-->read_esboxENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8976#read_esboxENTRY_T0_init [1720] read_esboxENTRY_T0_init-->L692_T0_init: Formula: (= (mod (div (+ (* (- 1) (mod 0 1)) v_hdr.tcp.sequence_74) 1) 256) v_tmp_0_12)  InVars {hdr.tcp.sequence=v_hdr.tcp.sequence_74}  OutVars{hdr.tcp.sequence=v_hdr.tcp.sequence_74, tmp_0=v_tmp_0_12}  AuxVars[]  AssignedVars[tmp_0] 8973#L692_T0_init [1718] L692_T0_init-->L693_T0_init: Formula: (= (select v_es_box_14 v_tmp_0_13) v_tmp_12)  InVars {es_box=v_es_box_14, tmp_0=v_tmp_0_13}  OutVars{tmp=v_tmp_12, es_box=v_es_box_14, tmp_0=v_tmp_0_13}  AuxVars[]  AssignedVars[tmp] 8974#L693_T0_init [2025] L693_T0_init-->L694_T0_init: Formula: (= (+ (mod 0 1) (* (- 1) (mod v_hdr.tcp.sequence_92 256)) v_hdr.tcp.sequence_92 v_tmp_14) v_hdr.tcp.sequence_91)  InVars {tmp=v_tmp_14, hdr.tcp.sequence=v_hdr.tcp.sequence_92}  OutVars{tmp=v_tmp_14, hdr.tcp.sequence=v_hdr.tcp.sequence_91}  AuxVars[]  AssignedVars[hdr.tcp.sequence] 9070#L694_T0_init [1799] L694_T0_init-->L696_T0_init: Formula: (= v_tmp_2_13 (mod (div (+ (* (- 1) (mod v_hdr.tcp.sequence_75 256)) v_hdr.tcp.sequence_75) 256) 256))  InVars {hdr.tcp.sequence=v_hdr.tcp.sequence_75}  OutVars{tmp_2=v_tmp_2_13, hdr.tcp.sequence=v_hdr.tcp.sequence_75}  AuxVars[]  AssignedVars[tmp_2] 9071#L696_T0_init [1853] L696_T0_init-->L697_T0_init: Formula: (= v_tmp_1_12 (select v_es_box_13 v_tmp_2_12))  InVars {es_box=v_es_box_13, tmp_2=v_tmp_2_12}  OutVars{tmp_2=v_tmp_2_12, es_box=v_es_box_13, tmp_1=v_tmp_1_12}  AuxVars[]  AssignedVars[tmp_1] 9097#L697_T0_init [1821] L697_T0_init-->L698_T0_init: Formula: (= v_hdr.tcp.sequence_89 (+ (mod v_hdr.tcp.sequence_90 256) (* 256 v_tmp_1_13) v_hdr.tcp.sequence_90 (* (- 1) (mod v_hdr.tcp.sequence_90 65536))))  InVars {hdr.tcp.sequence=v_hdr.tcp.sequence_90, tmp_1=v_tmp_1_13}  OutVars{hdr.tcp.sequence=v_hdr.tcp.sequence_89, tmp_1=v_tmp_1_13}  AuxVars[]  AssignedVars[hdr.tcp.sequence] 9098#L698_T0_init [1887] L698_T0_init-->L700_T0_init: Formula: (= (mod (div (+ v_hdr.tcp.sequence_78 (* (- 1) (mod v_hdr.tcp.sequence_78 65536))) 65536) 256) v_tmp_4_11)  InVars {hdr.tcp.sequence=v_hdr.tcp.sequence_78}  OutVars{hdr.tcp.sequence=v_hdr.tcp.sequence_78, tmp_4=v_tmp_4_11}  AuxVars[]  AssignedVars[tmp_4] 8879#L700_T0_init [1660] L700_T0_init-->L701_T0_init: Formula: (= (select v_es_box_24 v_tmp_4_14) v_tmp_3_14)  InVars {es_box=v_es_box_24, tmp_4=v_tmp_4_14}  OutVars{tmp_3=v_tmp_3_14, tmp_4=v_tmp_4_14, es_box=v_es_box_24}  AuxVars[]  AssignedVars[tmp_3] 8880#L701_T0_init [1786] L701_T0_init-->L702_T0_init: Formula: (= (+ (mod v_hdr.tcp.sequence_88 65536) (* 65536 v_tmp_3_13) v_hdr.tcp.sequence_88 (* (- 1) (mod v_hdr.tcp.sequence_88 16777216))) v_hdr.tcp.sequence_87)  InVars {tmp_3=v_tmp_3_13, hdr.tcp.sequence=v_hdr.tcp.sequence_88}  OutVars{tmp_3=v_tmp_3_13, hdr.tcp.sequence=v_hdr.tcp.sequence_87}  AuxVars[]  AssignedVars[hdr.tcp.sequence] 8705#L702_T0_init [1553] L702_T0_init-->L704_T0_init: Formula: (= (mod (div (+ v_hdr.tcp.sequence_82 (* (- 1) (mod v_hdr.tcp.sequence_82 16777216))) 16777216) 256) v_tmp_6_12)  InVars {hdr.tcp.sequence=v_hdr.tcp.sequence_82}  OutVars{tmp_6=v_tmp_6_12, hdr.tcp.sequence=v_hdr.tcp.sequence_82}  AuxVars[]  AssignedVars[tmp_6] 8707#L704_T0_init [1617] L704_T0_init-->L705_T0_init: Formula: (= v_tmp_5_13 (select v_es_box_19 v_tmp_6_13))  InVars {es_box=v_es_box_19, tmp_6=v_tmp_6_13}  OutVars{tmp_5=v_tmp_5_13, es_box=v_es_box_19, tmp_6=v_tmp_6_13}  AuxVars[]  AssignedVars[tmp_5] 8812#L705_T0_init [2237] L705_T0_init-->L706_T0_init: Formula: (= (+ (* (- 1) (mod v_hdr.tcp.sequence_77 4294967296)) (* 16777216 v_tmp_5_12) (mod v_hdr.tcp.sequence_77 16777216) v_hdr.tcp.sequence_77) v_hdr.tcp.sequence_76)  InVars {tmp_5=v_tmp_5_12, hdr.tcp.sequence=v_hdr.tcp.sequence_77}  OutVars{tmp_5=v_tmp_5_12, hdr.tcp.sequence=v_hdr.tcp.sequence_76}  AuxVars[]  AssignedVars[hdr.tcp.sequence] 8778#L706_T0_init [1597] L706_T0_init-->L708_T0_init: Formula: (= (mod (div (+ v_hdr.tcp.ackseq_92 (* (- 1) (mod 0 1))) 1) 256) v_tmp_8_14)  InVars {hdr.tcp.ackseq=v_hdr.tcp.ackseq_92}  OutVars{hdr.tcp.ackseq=v_hdr.tcp.ackseq_92, tmp_8=v_tmp_8_14}  AuxVars[]  AssignedVars[tmp_8] 8779#L708_T0_init [1763] L708_T0_init-->L709_T0_init: Formula: (= v_tmp_7_14 (select v_es_box_22 v_tmp_8_13))  InVars {es_box=v_es_box_22, tmp_8=v_tmp_8_13}  OutVars{tmp_7=v_tmp_7_14, es_box=v_es_box_22, tmp_8=v_tmp_8_13}  AuxVars[]  AssignedVars[tmp_7] 9023#L709_T0_init [2174] L709_T0_init-->L710_T0_init: Formula: (= v_hdr.tcp.ackseq_73 (+ v_hdr.tcp.ackseq_74 (* (- 1) (mod v_hdr.tcp.ackseq_74 256)) v_tmp_7_11 (mod 0 1)))  InVars {tmp_7=v_tmp_7_11, hdr.tcp.ackseq=v_hdr.tcp.ackseq_74}  OutVars{tmp_7=v_tmp_7_11, hdr.tcp.ackseq=v_hdr.tcp.ackseq_73}  AuxVars[]  AssignedVars[hdr.tcp.ackseq] 9033#L710_T0_init [1769] L710_T0_init-->L712_T0_init: Formula: (= (mod (div (+ (* (mod v_hdr.tcp.ackseq_85 256) (- 1)) v_hdr.tcp.ackseq_85) 256) 256) v_tmp_10_12)  InVars {hdr.tcp.ackseq=v_hdr.tcp.ackseq_85}  OutVars{hdr.tcp.ackseq=v_hdr.tcp.ackseq_85, tmp_10=v_tmp_10_12}  AuxVars[]  AssignedVars[tmp_10] 8911#L712_T0_init [1681] L712_T0_init-->L713_T0_init: Formula: (= v_tmp_9_12 (select v_es_box_16 v_tmp_10_11))  InVars {es_box=v_es_box_16, tmp_10=v_tmp_10_11}  OutVars{tmp_10=v_tmp_10_11, es_box=v_es_box_16, tmp_9=v_tmp_9_12}  AuxVars[]  AssignedVars[tmp_9] 8912#L713_T0_init [1976] L713_T0_init-->L714_T0_init: Formula: (= v_hdr.tcp.ackseq_79 (+ v_hdr.tcp.ackseq_80 (* (- 1) (mod v_hdr.tcp.ackseq_80 65536)) (mod v_hdr.tcp.ackseq_80 256) (* 256 v_tmp_9_11)))  InVars {hdr.tcp.ackseq=v_hdr.tcp.ackseq_80, tmp_9=v_tmp_9_11}  OutVars{hdr.tcp.ackseq=v_hdr.tcp.ackseq_79, tmp_9=v_tmp_9_11}  AuxVars[]  AssignedVars[hdr.tcp.ackseq] 9043#L714_T0_init [1777] L714_T0_init-->L716_T0_init: Formula: (= (mod (div (+ v_hdr.tcp.ackseq_72 (* (- 1) (mod v_hdr.tcp.ackseq_72 65536))) 65536) 256) v_tmp_12_11)  InVars {hdr.tcp.ackseq=v_hdr.tcp.ackseq_72}  OutVars{hdr.tcp.ackseq=v_hdr.tcp.ackseq_72, tmp_12=v_tmp_12_11}  AuxVars[]  AssignedVars[tmp_12] 9044#L716_T0_init [2050] L716_T0_init-->L717_T0_init: Formula: (= (select v_es_box_17 v_tmp_12_14) v_tmp_11_13)  InVars {es_box=v_es_box_17, tmp_12=v_tmp_12_14}  OutVars{tmp_11=v_tmp_11_13, tmp_12=v_tmp_12_14, es_box=v_es_box_17}  AuxVars[]  AssignedVars[tmp_11] 9157#L717_T0_init [1879] L717_T0_init-->L718_T0_init: Formula: (= v_hdr.tcp.ackseq_90 (+ v_hdr.tcp.ackseq_91 (* 65536 v_tmp_11_14) (* (- 1) (mod v_hdr.tcp.ackseq_91 16777216)) (mod v_hdr.tcp.ackseq_91 65536)))  InVars {tmp_11=v_tmp_11_14, hdr.tcp.ackseq=v_hdr.tcp.ackseq_91}  OutVars{tmp_11=v_tmp_11_14, hdr.tcp.ackseq=v_hdr.tcp.ackseq_90}  AuxVars[]  AssignedVars[hdr.tcp.ackseq] 9158#L718_T0_init [2266] L718_T0_init-->L720_T0_init: Formula: (= (mod (div (+ v_hdr.tcp.ackseq_89 (* (- 1) (mod v_hdr.tcp.ackseq_89 16777216))) 16777216) 256) v_tmp_14_14)  InVars {hdr.tcp.ackseq=v_hdr.tcp.ackseq_89}  OutVars{hdr.tcp.ackseq=v_hdr.tcp.ackseq_89, tmp_14=v_tmp_14_14}  AuxVars[]  AssignedVars[tmp_14] 9384#L720_T0_init [2275] L720_T0_init-->L721_T0_init: Formula: (= (select v_es_box_15 v_tmp_14_12) v_tmp_13_13)  InVars {es_box=v_es_box_15, tmp_14=v_tmp_14_12}  OutVars{es_box=v_es_box_15, tmp_13=v_tmp_13_13, tmp_14=v_tmp_14_12}  AuxVars[]  AssignedVars[tmp_13] 9360#L721_T0_init [2186] L721_T0_init-->read_esboxFINAL_T0_init: Formula: (= v_hdr.tcp.ackseq_77 (+ (mod v_hdr.tcp.ackseq_78 16777216) v_hdr.tcp.ackseq_78 (* 16777216 v_tmp_13_12) (* (mod v_hdr.tcp.ackseq_78 4294967296) (- 1))))  InVars {hdr.tcp.ackseq=v_hdr.tcp.ackseq_78, tmp_13=v_tmp_13_12}  OutVars{hdr.tcp.ackseq=v_hdr.tcp.ackseq_77, tmp_13=v_tmp_13_12}  AuxVars[]  AssignedVars[hdr.tcp.ackseq] 9272#read_esboxFINAL_T0_init [2014] read_esboxFINAL_T0_init-->read_esboxEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 9273#read_esboxEXIT_T0_init >[2355] read_esboxEXIT_T0_init-->L268-D82: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 9234#L268-D82 [1968] L268-D82-->L268_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 9011#L268_T0_init [2261] L268_T0_init-->L268_T0_init-D28: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 9261#L268_T0_init-D28 [2002] L268_T0_init-D28-->do_read_countENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 9135#do_read_countENTRY_T0_init [1854] do_read_countENTRY_T0_init-->do_read_countFINAL_T0_init: Formula: (= v_temp_0_29 (select v_count_17 0))  InVars {count=v_count_17}  OutVars{count=v_count_17, temp_0=v_temp_0_29}  AuxVars[]  AssignedVars[temp_0] 9010#do_read_countFINAL_T0_init [1750] do_read_countFINAL_T0_init-->do_read_countEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 9012#do_read_countEXIT_T0_init >[2388] do_read_countEXIT_T0_init-->L269-D84: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 9245#L269-D84 [2044] L269-D84-->L269_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 9291#L269_T0_init [2205] L269_T0_init-->L271_T0_init: Formula: (= v_temp_0_24 0)  InVars {temp_0=v_temp_0_24}  OutVars{temp_0=v_temp_0_24}  AuxVars[]  AssignedVars[] 8823#L271_T0_init [2185] L271_T0_init-->L271_T0_init-D10: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 9124#L271_T0_init-D10 [1843] L271_T0_init-D10-->creatipv6_1ENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 9125#creatipv6_1ENTRY_T0_init [2055] creatipv6_1ENTRY_T0_init-->L346_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 9299#L346_T0_init [2103] L346_T0_init-->L348_T0_init: Formula: (= 6 v_hdr.ipv6.version_21)  InVars {}  OutVars{hdr.ipv6.version=v_hdr.ipv6.version_21}  AuxVars[]  AssignedVars[hdr.ipv6.version] 9244#L348_T0_init [1981] L348_T0_init-->L349_T0_init: Formula: (= v_hdr.ipv6.payloadlen_22 v_hdr.ipv4.totalLen_22)  InVars {hdr.ipv4.totalLen=v_hdr.ipv4.totalLen_22}  OutVars{hdr.ipv4.totalLen=v_hdr.ipv4.totalLen_22, hdr.ipv6.payloadlen=v_hdr.ipv6.payloadlen_22}  AuxVars[]  AssignedVars[hdr.ipv6.payloadlen] 9020#L349_T0_init [1762] L349_T0_init-->L350_T0_init: Formula: (= v_hdr.ipv6.nextheader_28 65)  InVars {}  OutVars{hdr.ipv6.nextheader=v_hdr.ipv6.nextheader_28}  AuxVars[]  AssignedVars[hdr.ipv6.nextheader] 9021#L350_T0_init [2234] L350_T0_init-->L351_T0_init: Formula: (= 64 v_hdr.ipv6.hoplimit_22)  InVars {}  OutVars{hdr.ipv6.hoplimit=v_hdr.ipv6.hoplimit_22}  AuxVars[]  AssignedVars[hdr.ipv6.hoplimit] 9320#L351_T0_init [2098] L351_T0_init-->L352_T0_init: Formula: (= v_hdr.ethernet.etherType_28 34525)  InVars {}  OutVars{hdr.ethernet.etherType=v_hdr.ethernet.etherType_28}  AuxVars[]  AssignedVars[hdr.ethernet.etherType] 9321#L352_T0_init [2116] L352_T0_init-->L353_T0_init: Formula: (= v_hdr.ipv6.srcAddr_19 42545680458834377588178886921629466626)  InVars {}  OutVars{hdr.ipv6.srcAddr=v_hdr.ipv6.srcAddr_19}  AuxVars[]  AssignedVars[hdr.ipv6.srcAddr] 8897#L353_T0_init [1674] L353_T0_init-->L354_T0_init: Formula: (= v_hdr.ipv6.dstAddr_18 42540765144257160172006968799218772356)  InVars {}  OutVars{hdr.ipv6.dstAddr=v_hdr.ipv6.dstAddr_18}  AuxVars[]  AssignedVars[hdr.ipv6.dstAddr] 8898#L354_T0_init [1813] L354_T0_init-->L355_T0_init: Formula: (= v_hdr.ethernet.srcAddr_33 19799850608873)  InVars {}  OutVars{hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_33}  AuxVars[]  AssignedVars[hdr.ethernet.srcAddr] 9090#L355_T0_init [1935] L355_T0_init-->creatipv6_1FINAL_T0_init: Formula: (= 174219185552744 v_hdr.ethernet.dstAddr_41)  InVars {}  OutVars{hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_41}  AuxVars[]  AssignedVars[hdr.ethernet.dstAddr] 8822#creatipv6_1FINAL_T0_init [1624] creatipv6_1FINAL_T0_init-->creatipv6_1EXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8824#creatipv6_1EXIT_T0_init >[2290] creatipv6_1EXIT_T0_init-->L271-1-D62: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 9072#L271-1-D62 [1800] L271-1-D62-->L271-1_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8600#L271-1_T0_init [1857] L271-1_T0_init-->L271-1_T0_init-D32: Formula: (and (= v_count.write_indexInParam_1 0) (= v_count.write_valueInParam_1 1))  InVars {}  OutVars{count.write_index=v_count.write_indexInParam_1, count.write_value=v_count.write_valueInParam_1}  AuxVars[]  AssignedVars[count.write_index, count.write_value]< 8599#L271-1_T0_init-D32 [1499] L271-1_T0_init-D32-->count.writeENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8601#count.writeENTRY_T0_init [2149] count.writeENTRY_T0_init-->count.writeFINAL_T0_init: Formula: (= v_count_20 (store v_count_21 v_count.write_index_3 v_count.write_value_3))  InVars {count=v_count_21, count.write_index=v_count.write_index_3, count.write_value=v_count.write_value_3}  OutVars{count=v_count_20, count.write_index=v_count.write_index_3, count.write_value=v_count.write_value_3}  AuxVars[]  AssignedVars[count] 9465#count.writeFINAL_T0_init [1713] count.writeFINAL_T0_init-->count.writeEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 9462#count.writeEXIT_T0_init >[2376] count.writeEXIT_T0_init-->L273-D98: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: (and (= v_count.write_indexInParam_1 0) (= v_count.write_valueInParam_1 1))  InVars {}  OutVars{count.write_index=v_count.write_indexInParam_1, count.write_value=v_count.write_valueInParam_1}  AuxVars[]  AssignedVars[count.write_index, count.write_value] 9369#L273-D98 [2199] L273-D98-->L273_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 9191#L273_T0_init [1920] L273_T0_init-->L275_T0_init: Formula: (= v_standard_metadata.egress_spec_24 1)  InVars {}  OutVars{standard_metadata.egress_spec=v_standard_metadata.egress_spec_24}  AuxVars[]  AssignedVars[standard_metadata.egress_spec] 8700#L275_T0_init [1551] L275_T0_init-->L276_T0_init: Formula: (= 1 v_standard_metadata.egress_port_25)  InVars {}  OutVars{standard_metadata.egress_port=v_standard_metadata.egress_port_25}  AuxVars[]  AssignedVars[standard_metadata.egress_port] 8701#L276_T0_init [1801] L276_T0_init-->L270-1_T0_init: Formula: v_forward_24  InVars {}  OutVars{forward=v_forward_24}  AuxVars[]  AssignedVars[forward] 9073#L270-1_T0_init [1990] L270-1_T0_init-->L278-1_T0_init: Formula: (not (= v_temp_0_27 1))  InVars {temp_0=v_temp_0_27}  OutVars{temp_0=v_temp_0_27}  AuxVars[]  AssignedVars[] 9252#L278-1_T0_init [1644] L278-1_T0_init-->L258_T0_init: Formula: (not (= v_temp_0_23 2))  InVars {temp_0=v_temp_0_23}  OutVars{temp_0=v_temp_0_23}  AuxVars[]  AssignedVars[] 9535#L258_T0_init [2245] L258_T0_init-->MyIngressEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 9534#MyIngressEXIT_T0_init >[2333] MyIngressEXIT_T0_init-->L571-D108: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 9531#L571-D108 [2089] L571-D108-->L571_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 9528#L571_T0_init [1962] L571_T0_init-->L571_T0_init-D8: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 9529#L571_T0_init-D8 [2016] L571_T0_init-D8-->MyEgressENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 9532#MyEgressENTRY_T0_init [1650] MyEgressENTRY_T0_init-->L249_T0_init: Formula: (or (not v_hdr.tcp.valid_34) (not (= 0 v_standard_metadata.egress_port_34)))  InVars {standard_metadata.egress_port=v_standard_metadata.egress_port_34, hdr.tcp.valid=v_hdr.tcp.valid_34}  OutVars{standard_metadata.egress_port=v_standard_metadata.egress_port_34, hdr.tcp.valid=v_hdr.tcp.valid_34}  AuxVars[]  AssignedVars[] 9530#L249_T0_init [1652] L249_T0_init-->MyEgressEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 9527#MyEgressEXIT_T0_init >[2347] MyEgressEXIT_T0_init-->L572-D90: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 9526#L572-D90 [1791] L572-D90-->L572_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 9523#L572_T0_init [1466] L572_T0_init-->L572_T0_init-D22: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 9524#L572_T0_init-D22 [1889] L572_T0_init-D22-->MyComputeChecksumFINAL_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 9525#MyComputeChecksumFINAL_T0_init [1980] MyComputeChecksumFINAL_T0_init-->MyComputeChecksumEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 9522#MyComputeChecksumEXIT_T0_init >[2361] MyComputeChecksumEXIT_T0_init-->L573-D110: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 9521#L573-D110 [1858] L573-D110-->L573_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 9520#L573_T0_init [1734] L573_T0_init-->L574-1_T0_init: Formula: v_forward_30  InVars {forward=v_forward_30}  OutVars{forward=v_forward_30}  AuxVars[]  AssignedVars[] 9518#L574-1_T0_init [2112] L574-1_T0_init-->L578_T0_init: Formula: (let ((.cse0 (= v__old_hdr.ethernet.srcAddr_14 0))) (or (and v__p4ltl_0_6 (not .cse0)) (and (not v__p4ltl_0_6) .cse0)))  InVars {_old_hdr.ethernet.srcAddr=v__old_hdr.ethernet.srcAddr_14}  OutVars{_p4ltl_0=v__p4ltl_0_6, _old_hdr.ethernet.srcAddr=v__old_hdr.ethernet.srcAddr_14}  AuxVars[]  AssignedVars[_p4ltl_0] 9434#L578_T0_init [2269] L578_T0_init-->L579_T0_init: Formula: (let ((.cse0 (= 2071690107 v__old_hdr.ipv4.dstAddr_14))) (or (and v__p4ltl_1_6 (not .cse0)) (and .cse0 (not v__p4ltl_1_6))))  InVars {_old_hdr.ipv4.dstAddr=v__old_hdr.ipv4.dstAddr_14}  OutVars{_old_hdr.ipv4.dstAddr=v__old_hdr.ipv4.dstAddr_14, _p4ltl_1=v__p4ltl_1_6}  AuxVars[]  AssignedVars[_p4ltl_1] 9431#L579_T0_init [2198] L579_T0_init-->L580_T0_init: Formula: (let ((.cse0 (= 281474976710655 v__old_hdr.ethernet.dstAddr_14))) (or (and v__p4ltl_2_6 (not .cse0)) (and .cse0 (not v__p4ltl_2_6))))  InVars {_old_hdr.ethernet.dstAddr=v__old_hdr.ethernet.dstAddr_14}  OutVars{_p4ltl_2=v__p4ltl_2_6, _old_hdr.ethernet.dstAddr=v__old_hdr.ethernet.dstAddr_14}  AuxVars[]  AssignedVars[_p4ltl_2] 9428#L580_T0_init [2013] L580_T0_init-->mainFINAL_T0_init: Formula: (let ((.cse0 (= v_standard_metadata.ingress_port_23 0))) (or (and v__p4ltl_3_7 .cse0) (and (not .cse0) (not v__p4ltl_3_7))))  InVars {standard_metadata.ingress_port=v_standard_metadata.ingress_port_23}  OutVars{standard_metadata.ingress_port=v_standard_metadata.ingress_port_23, _p4ltl_3=v__p4ltl_3_7}  AuxVars[]  AssignedVars[_p4ltl_3] 9425#mainFINAL_T0_init [2061] mainFINAL_T0_init-->mainEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 9422#mainEXIT_T0_init >[2285] mainEXIT_T0_init-->L586-1-D72: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 9420#L586-1-D72 [1975] L586-1-D72-->L586-1_accept_S1: Formula: (and v__p4ltl_1_9 v__p4ltl_0_9 v__p4ltl_3_9 v__p4ltl_2_9 (or (not v__p4ltl_3_9) (not v__p4ltl_1_9) (= 1 v_standard_metadata.egress_port_30) (not v__p4ltl_2_9) (not v__p4ltl_0_9)))  InVars {_p4ltl_2=v__p4ltl_2_9, standard_metadata.egress_port=v_standard_metadata.egress_port_30, _p4ltl_3=v__p4ltl_3_9, _p4ltl_0=v__p4ltl_0_9, _p4ltl_1=v__p4ltl_1_9}  OutVars{_p4ltl_2=v__p4ltl_2_9, standard_metadata.egress_port=v_standard_metadata.egress_port_30, _p4ltl_3=v__p4ltl_3_9, _p4ltl_0=v__p4ltl_0_9, _p4ltl_1=v__p4ltl_1_9}  AuxVars[]  AssignedVars[] 8731#L586-1_accept_S1 
[2023-02-07 04:58:57,113 INFO  L754   eck$LassoCheckResult]: Loop: 8731#L586-1_accept_S1 [1566] L586-1_accept_S1-->L586_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8566#L586_accept_S1 [1923] L586_accept_S1-->L586_accept_S1-D19: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 8844#L586_accept_S1-D19 [1634] L586_accept_S1-D19-->mainENTRY_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8503#mainENTRY_accept_S1 [2037] mainENTRY_accept_S1-->mainENTRY_accept_S1-D37: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 9180#mainENTRY_accept_S1-D37 [1909] mainENTRY_accept_S1-D37-->havocProcedureENTRY_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 9181#havocProcedureENTRY_accept_S1 [2146] havocProcedureENTRY_accept_S1-->L421_accept_S1: Formula: (not v_drop_11)  InVars {}  OutVars{drop=v_drop_11}  AuxVars[]  AssignedVars[drop] 9262#L421_accept_S1 [2003] L421_accept_S1-->L422_accept_S1: Formula: (not v_forward_18)  InVars {}  OutVars{forward=v_forward_18}  AuxVars[]  AssignedVars[forward] 9263#L422_accept_S1 [2011] L422_accept_S1-->L423_accept_S1: Formula: true  InVars {}  OutVars{standard_metadata.ingress_port=v_standard_metadata.ingress_port_14}  AuxVars[]  AssignedVars[standard_metadata.ingress_port] 8531#L423_accept_S1 [1469] L423_accept_S1-->L424_accept_S1: Formula: (and (<= 0 v_standard_metadata.ingress_port_17) (< v_standard_metadata.ingress_port_17 512))  InVars {standard_metadata.ingress_port=v_standard_metadata.ingress_port_17}  OutVars{standard_metadata.ingress_port=v_standard_metadata.ingress_port_17}  AuxVars[]  AssignedVars[] 8532#L424_accept_S1 [1727] L424_accept_S1-->L425_accept_S1: Formula: (= v_standard_metadata.egress_spec_15 0)  InVars {}  OutVars{standard_metadata.egress_spec=v_standard_metadata.egress_spec_15}  AuxVars[]  AssignedVars[standard_metadata.egress_spec] 8905#L425_accept_S1 [1677] L425_accept_S1-->L426_accept_S1: Formula: (= 0 v_standard_metadata.egress_port_17)  InVars {}  OutVars{standard_metadata.egress_port=v_standard_metadata.egress_port_17}  AuxVars[]  AssignedVars[standard_metadata.egress_port] 8906#L426_accept_S1 [1861] L426_accept_S1-->L427_accept_S1: Formula: true  InVars {}  OutVars{standard_metadata.instance_type=v_standard_metadata.instance_type_12}  AuxVars[]  AssignedVars[standard_metadata.instance_type] 9002#L427_accept_S1 [1745] L427_accept_S1-->L428_accept_S1: Formula: (and (<= 0 v_standard_metadata.instance_type_9) (< v_standard_metadata.instance_type_9 4294967296))  InVars {standard_metadata.instance_type=v_standard_metadata.instance_type_9}  OutVars{standard_metadata.instance_type=v_standard_metadata.instance_type_9}  AuxVars[]  AssignedVars[] 8901#L428_accept_S1 [1676] L428_accept_S1-->L429_accept_S1: Formula: true  InVars {}  OutVars{standard_metadata.packet_length=v_standard_metadata.packet_length_10}  AuxVars[]  AssignedVars[standard_metadata.packet_length] 8902#L429_accept_S1 [2152] L429_accept_S1-->L430_accept_S1: Formula: (and (< v_standard_metadata.packet_length_9 4294967296) (<= 0 v_standard_metadata.packet_length_9))  InVars {standard_metadata.packet_length=v_standard_metadata.packet_length_9}  OutVars{standard_metadata.packet_length=v_standard_metadata.packet_length_9}  AuxVars[]  AssignedVars[] 9345#L430_accept_S1 [2171] L430_accept_S1-->L431_accept_S1: Formula: true  InVars {}  OutVars{standard_metadata.enq_timestamp=v_standard_metadata.enq_timestamp_12}  AuxVars[]  AssignedVars[standard_metadata.enq_timestamp] 8803#L431_accept_S1 [1612] L431_accept_S1-->L432_accept_S1: Formula: (and (< v_standard_metadata.enq_timestamp_11 4294967296) (<= 0 v_standard_metadata.enq_timestamp_11))  InVars {standard_metadata.enq_timestamp=v_standard_metadata.enq_timestamp_11}  OutVars{standard_metadata.enq_timestamp=v_standard_metadata.enq_timestamp_11}  AuxVars[]  AssignedVars[] 8502#L432_accept_S1 [1456] L432_accept_S1-->L433_accept_S1: Formula: (= v_standard_metadata.enq_qdepth_8 0)  InVars {}  OutVars{standard_metadata.enq_qdepth=v_standard_metadata.enq_qdepth_8}  AuxVars[]  AssignedVars[standard_metadata.enq_qdepth] 8504#L433_accept_S1 [2203] L433_accept_S1-->L434_accept_S1: Formula: true  InVars {}  OutVars{standard_metadata.deq_timedelta=v_standard_metadata.deq_timedelta_9}  AuxVars[]  AssignedVars[standard_metadata.deq_timedelta] 9314#L434_accept_S1 [2080] L434_accept_S1-->L435_accept_S1: Formula: (and (< v_standard_metadata.deq_timedelta_10 4294967296) (<= 0 v_standard_metadata.deq_timedelta_10))  InVars {standard_metadata.deq_timedelta=v_standard_metadata.deq_timedelta_10}  OutVars{standard_metadata.deq_timedelta=v_standard_metadata.deq_timedelta_10}  AuxVars[]  AssignedVars[] 9101#L435_accept_S1 [1824] L435_accept_S1-->L436_accept_S1: Formula: true  InVars {}  OutVars{standard_metadata.deq_qdepth=v_standard_metadata.deq_qdepth_12}  AuxVars[]  AssignedVars[standard_metadata.deq_qdepth] 9102#L436_accept_S1 [1907] L436_accept_S1-->L437_accept_S1: Formula: (and (< v_standard_metadata.deq_qdepth_9 524288) (<= 0 v_standard_metadata.deq_qdepth_9))  InVars {standard_metadata.deq_qdepth=v_standard_metadata.deq_qdepth_9}  OutVars{standard_metadata.deq_qdepth=v_standard_metadata.deq_qdepth_9}  AuxVars[]  AssignedVars[] 9024#L437_accept_S1 [1764] L437_accept_S1-->L438_accept_S1: Formula: true  InVars {}  OutVars{standard_metadata.ingress_global_timestamp=v_standard_metadata.ingress_global_timestamp_10}  AuxVars[]  AssignedVars[standard_metadata.ingress_global_timestamp] 9025#L438_accept_S1 [1869] L438_accept_S1-->L439_accept_S1: Formula: (and (<= 0 v_standard_metadata.ingress_global_timestamp_9) (< v_standard_metadata.ingress_global_timestamp_9 281474976710656))  InVars {standard_metadata.ingress_global_timestamp=v_standard_metadata.ingress_global_timestamp_9}  OutVars{standard_metadata.ingress_global_timestamp=v_standard_metadata.ingress_global_timestamp_9}  AuxVars[]  AssignedVars[] 9145#L439_accept_S1 [1930] L439_accept_S1-->L440_accept_S1: Formula: true  InVars {}  OutVars{standard_metadata.egress_global_timestamp=v_standard_metadata.egress_global_timestamp_9}  AuxVars[]  AssignedVars[standard_metadata.egress_global_timestamp] 8796#L440_accept_S1 [1607] L440_accept_S1-->L441_accept_S1: Formula: (and (< v_standard_metadata.egress_global_timestamp_10 281474976710656) (<= 0 v_standard_metadata.egress_global_timestamp_10))  InVars {standard_metadata.egress_global_timestamp=v_standard_metadata.egress_global_timestamp_10}  OutVars{standard_metadata.egress_global_timestamp=v_standard_metadata.egress_global_timestamp_10}  AuxVars[]  AssignedVars[] 8797#L441_accept_S1 [2068] L441_accept_S1-->L442_accept_S1: Formula: (= 0 v_standard_metadata.mcast_grp_9)  InVars {}  OutVars{standard_metadata.mcast_grp=v_standard_metadata.mcast_grp_9}  AuxVars[]  AssignedVars[standard_metadata.mcast_grp] 8941#L442_accept_S1 [1699] L442_accept_S1-->L443_accept_S1: Formula: (= v_standard_metadata.egress_rid_8 0)  InVars {}  OutVars{standard_metadata.egress_rid=v_standard_metadata.egress_rid_8}  AuxVars[]  AssignedVars[standard_metadata.egress_rid] 8942#L443_accept_S1 [2210] L443_accept_S1-->L444_accept_S1: Formula: (= v_standard_metadata.checksum_error_9 0)  InVars {}  OutVars{standard_metadata.checksum_error=v_standard_metadata.checksum_error_9}  AuxVars[]  AssignedVars[standard_metadata.checksum_error] 8789#L444_accept_S1 [1603] L444_accept_S1-->L445_accept_S1: Formula: (= v_standard_metadata.parser_error_8 0)  InVars {}  OutVars{standard_metadata.parser_error=v_standard_metadata.parser_error_8}  AuxVars[]  AssignedVars[standard_metadata.parser_error] 8790#L445_accept_S1 [2211] L445_accept_S1-->L446_accept_S1: Formula: (= v_standard_metadata.priority_8 0)  InVars {}  OutVars{standard_metadata.priority=v_standard_metadata.priority_8}  AuxVars[]  AssignedVars[standard_metadata.priority] 8907#L446_accept_S1 [1678] L446_accept_S1-->L447_accept_S1: Formula: (not v_hdr.ethernet.valid_14)  InVars {}  OutVars{hdr.ethernet.valid=v_hdr.ethernet.valid_14}  AuxVars[]  AssignedVars[hdr.ethernet.valid] 8908#L447_accept_S1 [2169] L447_accept_S1-->L448_accept_S1: Formula: (= v_emit_29 (store v_emit_30 v_hdr.ethernet_2 false))  InVars {emit=v_emit_30, hdr.ethernet=v_hdr.ethernet_2}  OutVars{emit=v_emit_29, hdr.ethernet=v_hdr.ethernet_2}  AuxVars[]  AssignedVars[emit] 9198#L448_accept_S1 [1927] L448_accept_S1-->L449_accept_S1: Formula: true  InVars {}  OutVars{hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_25}  AuxVars[]  AssignedVars[hdr.ethernet.dstAddr] 9189#L449_accept_S1 [1918] L449_accept_S1-->L450_accept_S1: Formula: (= v_hdr.ethernet.dstAddr_28 v__old_hdr.ethernet.dstAddr_11)  InVars {hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_28}  OutVars{_old_hdr.ethernet.dstAddr=v__old_hdr.ethernet.dstAddr_11, hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_28}  AuxVars[]  AssignedVars[_old_hdr.ethernet.dstAddr] 9190#L450_accept_S1 [2111] L450_accept_S1-->L451_accept_S1: Formula: (= v_hdr.ethernet.dstAddr_26 v__old_hdr.ethernet.dstAddr_10)  InVars {hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_26}  OutVars{_old_hdr.ethernet.dstAddr=v__old_hdr.ethernet.dstAddr_10, hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_26}  AuxVars[]  AssignedVars[_old_hdr.ethernet.dstAddr] 8527#L451_accept_S1 [1467] L451_accept_S1-->L452_accept_S1: Formula: true  InVars {}  OutVars{hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_26}  AuxVars[]  AssignedVars[hdr.ethernet.srcAddr] 8528#L452_accept_S1 [1655] L452_accept_S1-->L453_accept_S1: Formula: (= v_hdr.ethernet.srcAddr_23 v__old_hdr.ethernet.srcAddr_10)  InVars {hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_23}  OutVars{hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_23, _old_hdr.ethernet.srcAddr=v__old_hdr.ethernet.srcAddr_10}  AuxVars[]  AssignedVars[_old_hdr.ethernet.srcAddr] 8873#L453_accept_S1 [2176] L453_accept_S1-->L454_accept_S1: Formula: (= v_hdr.ethernet.srcAddr_24 v__old_hdr.ethernet.srcAddr_11)  InVars {hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_24}  OutVars{hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_24, _old_hdr.ethernet.srcAddr=v__old_hdr.ethernet.srcAddr_11}  AuxVars[]  AssignedVars[_old_hdr.ethernet.srcAddr] 9359#L454_accept_S1 [2235] L454_accept_S1-->L455_accept_S1: Formula: true  InVars {}  OutVars{hdr.ethernet.etherType=v_hdr.ethernet.etherType_22}  AuxVars[]  AssignedVars[hdr.ethernet.etherType] 9381#L455_accept_S1 [2254] L455_accept_S1-->L456_accept_S1: Formula: (and (<= 0 v_hdr.ethernet.etherType_23) (< v_hdr.ethernet.etherType_23 65536))  InVars {hdr.ethernet.etherType=v_hdr.ethernet.etherType_23}  OutVars{hdr.ethernet.etherType=v_hdr.ethernet.etherType_23}  AuxVars[]  AssignedVars[] 9003#L456_accept_S1 [1746] L456_accept_S1-->L457_accept_S1: Formula: (not v_hdr.ipv6.valid_18)  InVars {}  OutVars{hdr.ipv6.valid=v_hdr.ipv6.valid_18}  AuxVars[]  AssignedVars[hdr.ipv6.valid] 8923#L457_accept_S1 [1687] L457_accept_S1-->L458_accept_S1: Formula: (= v_emit_23 (store v_emit_24 v_hdr.ipv6_9 false))  InVars {emit=v_emit_24, hdr.ipv6=v_hdr.ipv6_9}  OutVars{emit=v_emit_23, hdr.ipv6=v_hdr.ipv6_9}  AuxVars[]  AssignedVars[emit] 8924#L458_accept_S1 [2024] L458_accept_S1-->L459_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv6.version=v_hdr.ipv6.version_19}  AuxVars[]  AssignedVars[hdr.ipv6.version] 9282#L459_accept_S1 [2104] L459_accept_S1-->L460_accept_S1: Formula: (and (< v_hdr.ipv6.version_20 16) (<= 0 v_hdr.ipv6.version_20))  InVars {hdr.ipv6.version=v_hdr.ipv6.version_20}  OutVars{hdr.ipv6.version=v_hdr.ipv6.version_20}  AuxVars[]  AssignedVars[] 9211#L460_accept_S1 [1943] L460_accept_S1-->L461_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv6.trafclass=v_hdr.ipv6.trafclass_9}  AuxVars[]  AssignedVars[hdr.ipv6.trafclass] 8609#L461_accept_S1 [1505] L461_accept_S1-->L462_accept_S1: Formula: (and (<= 0 v_hdr.ipv6.trafclass_10) (< v_hdr.ipv6.trafclass_10 256))  InVars {hdr.ipv6.trafclass=v_hdr.ipv6.trafclass_10}  OutVars{hdr.ipv6.trafclass=v_hdr.ipv6.trafclass_10}  AuxVars[]  AssignedVars[] 8610#L462_accept_S1 [2090] L462_accept_S1-->L463_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv6.flowlabel=v_hdr.ipv6.flowlabel_11}  AuxVars[]  AssignedVars[hdr.ipv6.flowlabel] 8552#L463_accept_S1 [1478] L463_accept_S1-->L464_accept_S1: Formula: (and (< v_hdr.ipv6.flowlabel_10 1048576) (<= 0 v_hdr.ipv6.flowlabel_10))  InVars {hdr.ipv6.flowlabel=v_hdr.ipv6.flowlabel_10}  OutVars{hdr.ipv6.flowlabel=v_hdr.ipv6.flowlabel_10}  AuxVars[]  AssignedVars[] 8553#L464_accept_S1 [1577] L464_accept_S1-->L465_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv6.payloadlen=v_hdr.ipv6.payloadlen_19}  AuxVars[]  AssignedVars[hdr.ipv6.payloadlen] 8745#L465_accept_S1 [2096] L465_accept_S1-->L466_accept_S1: Formula: (and (< v_hdr.ipv6.payloadlen_17 65536) (<= 0 v_hdr.ipv6.payloadlen_17))  InVars {hdr.ipv6.payloadlen=v_hdr.ipv6.payloadlen_17}  OutVars{hdr.ipv6.payloadlen=v_hdr.ipv6.payloadlen_17}  AuxVars[]  AssignedVars[] 9171#L466_accept_S1 [1898] L466_accept_S1-->L467_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv6.nextheader=v_hdr.ipv6.nextheader_21}  AuxVars[]  AssignedVars[hdr.ipv6.nextheader] 8605#L467_accept_S1 [1503] L467_accept_S1-->L468_accept_S1: Formula: (and (< v_hdr.ipv6.nextheader_20 256) (<= 0 v_hdr.ipv6.nextheader_20))  InVars {hdr.ipv6.nextheader=v_hdr.ipv6.nextheader_20}  OutVars{hdr.ipv6.nextheader=v_hdr.ipv6.nextheader_20}  AuxVars[]  AssignedVars[] 8606#L468_accept_S1 [2222] L468_accept_S1-->L469_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv6.hoplimit=v_hdr.ipv6.hoplimit_17}  AuxVars[]  AssignedVars[hdr.ipv6.hoplimit] 8929#L469_accept_S1 [1692] L469_accept_S1-->L470_accept_S1: Formula: (and (<= 0 v_hdr.ipv6.hoplimit_20) (< v_hdr.ipv6.hoplimit_20 256))  InVars {hdr.ipv6.hoplimit=v_hdr.ipv6.hoplimit_20}  OutVars{hdr.ipv6.hoplimit=v_hdr.ipv6.hoplimit_20}  AuxVars[]  AssignedVars[] 8930#L470_accept_S1 [1695] L470_accept_S1-->L471_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv6.srcAddr=v_hdr.ipv6.srcAddr_17}  AuxVars[]  AssignedVars[hdr.ipv6.srcAddr] 8933#L471_accept_S1 [1865] L471_accept_S1-->L472_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv6.dstAddr=v_hdr.ipv6.dstAddr_17}  AuxVars[]  AssignedVars[hdr.ipv6.dstAddr] 9141#L472_accept_S1 [2241] L472_accept_S1-->L473_accept_S1: Formula: (not v_hdr.ipv4_tunnel.valid_20)  InVars {}  OutVars{hdr.ipv4_tunnel.valid=v_hdr.ipv4_tunnel.valid_20}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.valid] 8874#L473_accept_S1 [1656] L473_accept_S1-->L474_accept_S1: Formula: (= v_emit_25 (store v_emit_26 v_hdr.ipv4_tunnel_8 false))  InVars {emit=v_emit_26, hdr.ipv4_tunnel=v_hdr.ipv4_tunnel_8}  OutVars{emit=v_emit_25, hdr.ipv4_tunnel=v_hdr.ipv4_tunnel_8}  AuxVars[]  AssignedVars[emit] 8875#L474_accept_S1 [1796] L474_accept_S1-->L475_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.version=v_hdr.ipv4_tunnel.version_14}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.version] 9069#L475_accept_S1 [2086] L475_accept_S1-->L476_accept_S1: Formula: (and (<= 0 v_hdr.ipv4_tunnel.version_15) (< v_hdr.ipv4_tunnel.version_15 16))  InVars {hdr.ipv4_tunnel.version=v_hdr.ipv4_tunnel.version_15}  OutVars{hdr.ipv4_tunnel.version=v_hdr.ipv4_tunnel.version_15}  AuxVars[]  AssignedVars[] 8742#L476_accept_S1 [1575] L476_accept_S1-->L477_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.ihl=v_hdr.ipv4_tunnel.ihl_16}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.ihl] 8743#L477_accept_S1 [1683] L477_accept_S1-->L478_accept_S1: Formula: (and (<= 0 v_hdr.ipv4_tunnel.ihl_15) (< v_hdr.ipv4_tunnel.ihl_15 16))  InVars {hdr.ipv4_tunnel.ihl=v_hdr.ipv4_tunnel.ihl_15}  OutVars{hdr.ipv4_tunnel.ihl=v_hdr.ipv4_tunnel.ihl_15}  AuxVars[]  AssignedVars[] 8741#L478_accept_S1 [1574] L478_accept_S1-->L479_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.diffserv=v_hdr.ipv4_tunnel.diffserv_17}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.diffserv] 8529#L479_accept_S1 [1468] L479_accept_S1-->L480_accept_S1: Formula: (and (< v_hdr.ipv4_tunnel.diffserv_16 256) (<= 0 v_hdr.ipv4_tunnel.diffserv_16))  InVars {hdr.ipv4_tunnel.diffserv=v_hdr.ipv4_tunnel.diffserv_16}  OutVars{hdr.ipv4_tunnel.diffserv=v_hdr.ipv4_tunnel.diffserv_16}  AuxVars[]  AssignedVars[] 8530#L480_accept_S1 [2136] L480_accept_S1-->L481_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.totalLen=v_hdr.ipv4_tunnel.totalLen_15}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.totalLen] 8699#L481_accept_S1 [1550] L481_accept_S1-->L482_accept_S1: Formula: (and (< v_hdr.ipv4_tunnel.totalLen_16 65536) (<= 0 v_hdr.ipv4_tunnel.totalLen_16))  InVars {hdr.ipv4_tunnel.totalLen=v_hdr.ipv4_tunnel.totalLen_16}  OutVars{hdr.ipv4_tunnel.totalLen=v_hdr.ipv4_tunnel.totalLen_16}  AuxVars[]  AssignedVars[] 8645#L482_accept_S1 [1523] L482_accept_S1-->L483_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.identification=v_hdr.ipv4_tunnel.identification_14}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.identification] 8646#L483_accept_S1 [2134] L483_accept_S1-->L484_accept_S1: Formula: (and (< v_hdr.ipv4_tunnel.identification_16 65536) (<= 0 v_hdr.ipv4_tunnel.identification_16))  InVars {hdr.ipv4_tunnel.identification=v_hdr.ipv4_tunnel.identification_16}  OutVars{hdr.ipv4_tunnel.identification=v_hdr.ipv4_tunnel.identification_16}  AuxVars[]  AssignedVars[] 9334#L484_accept_S1 [2184] L484_accept_S1-->L485_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.flags=v_hdr.ipv4_tunnel.flags_17}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.flags] 9167#L485_accept_S1 [1893] L485_accept_S1-->L486_accept_S1: Formula: (and (<= 0 v_hdr.ipv4_tunnel.flags_14) (< v_hdr.ipv4_tunnel.flags_14 8))  InVars {hdr.ipv4_tunnel.flags=v_hdr.ipv4_tunnel.flags_14}  OutVars{hdr.ipv4_tunnel.flags=v_hdr.ipv4_tunnel.flags_14}  AuxVars[]  AssignedVars[] 8969#L486_accept_S1 [1715] L486_accept_S1-->L487_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.fragOffset=v_hdr.ipv4_tunnel.fragOffset_14}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.fragOffset] 8837#L487_accept_S1 [1631] L487_accept_S1-->L488_accept_S1: Formula: (and (<= 0 v_hdr.ipv4_tunnel.fragOffset_15) (< v_hdr.ipv4_tunnel.fragOffset_15 8192))  InVars {hdr.ipv4_tunnel.fragOffset=v_hdr.ipv4_tunnel.fragOffset_15}  OutVars{hdr.ipv4_tunnel.fragOffset=v_hdr.ipv4_tunnel.fragOffset_15}  AuxVars[]  AssignedVars[] 8838#L488_accept_S1 [1766] L488_accept_S1-->L489_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.ttl=v_hdr.ipv4_tunnel.ttl_17}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.ttl] 9029#L489_accept_S1 [2172] L489_accept_S1-->L490_accept_S1: Formula: (and (< v_hdr.ipv4_tunnel.ttl_15 256) (<= 0 v_hdr.ipv4_tunnel.ttl_15))  InVars {hdr.ipv4_tunnel.ttl=v_hdr.ipv4_tunnel.ttl_15}  OutVars{hdr.ipv4_tunnel.ttl=v_hdr.ipv4_tunnel.ttl_15}  AuxVars[]  AssignedVars[] 9355#L490_accept_S1 [2204] L490_accept_S1-->L491_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.protocol=v_hdr.ipv4_tunnel.protocol_19}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.protocol] 8732#L491_accept_S1 [1569] L491_accept_S1-->L492_accept_S1: Formula: (and (<= 0 v_hdr.ipv4_tunnel.protocol_18) (< v_hdr.ipv4_tunnel.protocol_18 256))  InVars {hdr.ipv4_tunnel.protocol=v_hdr.ipv4_tunnel.protocol_18}  OutVars{hdr.ipv4_tunnel.protocol=v_hdr.ipv4_tunnel.protocol_18}  AuxVars[]  AssignedVars[] 8733#L492_accept_S1 [1999] L492_accept_S1-->L493_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.hdrChecksum=v_hdr.ipv4_tunnel.hdrChecksum_9}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.hdrChecksum] 9188#L493_accept_S1 [1917] L493_accept_S1-->L494_accept_S1: Formula: (and (<= 0 v_hdr.ipv4_tunnel.hdrChecksum_10) (< v_hdr.ipv4_tunnel.hdrChecksum_10 65536))  InVars {hdr.ipv4_tunnel.hdrChecksum=v_hdr.ipv4_tunnel.hdrChecksum_10}  OutVars{hdr.ipv4_tunnel.hdrChecksum=v_hdr.ipv4_tunnel.hdrChecksum_10}  AuxVars[]  AssignedVars[] 8910#L494_accept_S1 [1679] L494_accept_S1-->L495_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.srcAddr=v_hdr.ipv4_tunnel.srcAddr_14}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.srcAddr] 8765#L495_accept_S1 [1590] L495_accept_S1-->L496_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.dstAddr=v_hdr.ipv4_tunnel.dstAddr_14}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.dstAddr] 8766#L496_accept_S1 [1755] L496_accept_S1-->L497_accept_S1: Formula: (not v_hdr.ipv4.valid_26)  InVars {}  OutVars{hdr.ipv4.valid=v_hdr.ipv4.valid_26}  AuxVars[]  AssignedVars[hdr.ipv4.valid] 9016#L497_accept_S1 [2257] L497_accept_S1-->L498_accept_S1: Formula: (= v_emit_31 (store v_emit_32 v_hdr.ipv4_3 false))  InVars {hdr.ipv4=v_hdr.ipv4_3, emit=v_emit_32}  OutVars{hdr.ipv4=v_hdr.ipv4_3, emit=v_emit_31}  AuxVars[]  AssignedVars[emit] 9284#L498_accept_S1 [2029] L498_accept_S1-->L499_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.version=v_hdr.ipv4.version_11}  AuxVars[]  AssignedVars[hdr.ipv4.version] 9086#L499_accept_S1 [1809] L499_accept_S1-->L500_accept_S1: Formula: (and (< v_hdr.ipv4.version_12 16) (<= 0 v_hdr.ipv4.version_12))  InVars {hdr.ipv4.version=v_hdr.ipv4.version_12}  OutVars{hdr.ipv4.version=v_hdr.ipv4.version_12}  AuxVars[]  AssignedVars[] 9022#L500_accept_S1 [1761] L500_accept_S1-->L501_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.ihl=v_hdr.ipv4.ihl_11}  AuxVars[]  AssignedVars[hdr.ipv4.ihl] 8834#L501_accept_S1 [1629] L501_accept_S1-->L502_accept_S1: Formula: (and (<= 0 v_hdr.ipv4.ihl_12) (< v_hdr.ipv4.ihl_12 16))  InVars {hdr.ipv4.ihl=v_hdr.ipv4.ihl_12}  OutVars{hdr.ipv4.ihl=v_hdr.ipv4.ihl_12}  AuxVars[]  AssignedVars[] 8835#L502_accept_S1 [2167] L502_accept_S1-->L503_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.diffserv=v_hdr.ipv4.diffserv_10}  AuxVars[]  AssignedVars[hdr.ipv4.diffserv] 9354#L503_accept_S1 [2192] L503_accept_S1-->L504_accept_S1: Formula: (and (< v_hdr.ipv4.diffserv_11 256) (<= 0 v_hdr.ipv4.diffserv_11))  InVars {hdr.ipv4.diffserv=v_hdr.ipv4.diffserv_11}  OutVars{hdr.ipv4.diffserv=v_hdr.ipv4.diffserv_11}  AuxVars[]  AssignedVars[] 8617#L504_accept_S1 [1508] L504_accept_S1-->L505_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.totalLen=v_hdr.ipv4.totalLen_16}  AuxVars[]  AssignedVars[hdr.ipv4.totalLen] 8618#L505_accept_S1 [2099] L505_accept_S1-->L506_accept_S1: Formula: (and (<= 0 v_hdr.ipv4.totalLen_13) (< v_hdr.ipv4.totalLen_13 65536))  InVars {hdr.ipv4.totalLen=v_hdr.ipv4.totalLen_13}  OutVars{hdr.ipv4.totalLen=v_hdr.ipv4.totalLen_13}  AuxVars[]  AssignedVars[] 9199#L506_accept_S1 [1929] L506_accept_S1-->L507_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.identification=v_hdr.ipv4.identification_13}  AuxVars[]  AssignedVars[hdr.ipv4.identification] 9200#L507_accept_S1 [2182] L507_accept_S1-->L508_accept_S1: Formula: (and (<= 0 v_hdr.ipv4.identification_10) (< v_hdr.ipv4.identification_10 65536))  InVars {hdr.ipv4.identification=v_hdr.ipv4.identification_10}  OutVars{hdr.ipv4.identification=v_hdr.ipv4.identification_10}  AuxVars[]  AssignedVars[] 9309#L508_accept_S1 [2069] L508_accept_S1-->L509_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.flags=v_hdr.ipv4.flags_12}  AuxVars[]  AssignedVars[hdr.ipv4.flags] 9235#L509_accept_S1 [1969] L509_accept_S1-->L510_accept_S1: Formula: (and (< v_hdr.ipv4.flags_11 8) (<= 0 v_hdr.ipv4.flags_11))  InVars {hdr.ipv4.flags=v_hdr.ipv4.flags_11}  OutVars{hdr.ipv4.flags=v_hdr.ipv4.flags_11}  AuxVars[]  AssignedVars[] 9236#L510_accept_S1 [2265] L510_accept_S1-->L511_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.fragOffset=v_hdr.ipv4.fragOffset_12}  AuxVars[]  AssignedVars[hdr.ipv4.fragOffset] 8921#L511_accept_S1 [1685] L511_accept_S1-->L512_accept_S1: Formula: (and (<= 0 v_hdr.ipv4.fragOffset_13) (< v_hdr.ipv4.fragOffset_13 8192))  InVars {hdr.ipv4.fragOffset=v_hdr.ipv4.fragOffset_13}  OutVars{hdr.ipv4.fragOffset=v_hdr.ipv4.fragOffset_13}  AuxVars[]  AssignedVars[] 8604#L512_accept_S1 [1502] L512_accept_S1-->L513_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.ttl=v_hdr.ipv4.ttl_12}  AuxVars[]  AssignedVars[hdr.ipv4.ttl] 8521#L513_accept_S1 [1463] L513_accept_S1-->L514_accept_S1: Formula: (and (< v_hdr.ipv4.ttl_13 256) (<= 0 v_hdr.ipv4.ttl_13))  InVars {hdr.ipv4.ttl=v_hdr.ipv4.ttl_13}  OutVars{hdr.ipv4.ttl=v_hdr.ipv4.ttl_13}  AuxVars[]  AssignedVars[] 8522#L514_accept_S1 [2224] L514_accept_S1-->L515_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.protocol=v_hdr.ipv4.protocol_13}  AuxVars[]  AssignedVars[hdr.ipv4.protocol] 8687#L515_accept_S1 [1543] L515_accept_S1-->L516_accept_S1: Formula: (and (< v_hdr.ipv4.protocol_11 256) (<= 0 v_hdr.ipv4.protocol_11))  InVars {hdr.ipv4.protocol=v_hdr.ipv4.protocol_11}  OutVars{hdr.ipv4.protocol=v_hdr.ipv4.protocol_11}  AuxVars[]  AssignedVars[] 8688#L516_accept_S1 [1919] L516_accept_S1-->L517_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.hdrChecksum=v_hdr.ipv4.hdrChecksum_12}  AuxVars[]  AssignedVars[hdr.ipv4.hdrChecksum] 8978#L517_accept_S1 [1724] L517_accept_S1-->L518_accept_S1: Formula: (and (< v_hdr.ipv4.hdrChecksum_11 65536) (<= 0 v_hdr.ipv4.hdrChecksum_11))  InVars {hdr.ipv4.hdrChecksum=v_hdr.ipv4.hdrChecksum_11}  OutVars{hdr.ipv4.hdrChecksum=v_hdr.ipv4.hdrChecksum_11}  AuxVars[]  AssignedVars[] 8737#L518_accept_S1 [1572] L518_accept_S1-->L519_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.srcAddr=v_hdr.ipv4.srcAddr_10}  AuxVars[]  AssignedVars[hdr.ipv4.srcAddr] 8738#L519_accept_S1 [2232] L519_accept_S1-->L520_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_13}  AuxVars[]  AssignedVars[hdr.ipv4.dstAddr] 9310#L520_accept_S1 [2070] L520_accept_S1-->L521_accept_S1: Formula: (= v_hdr.ipv4.dstAddr_15 v__old_hdr.ipv4.dstAddr_12)  InVars {hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_15}  OutVars{_old_hdr.ipv4.dstAddr=v__old_hdr.ipv4.dstAddr_12, hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_15}  AuxVars[]  AssignedVars[_old_hdr.ipv4.dstAddr] 9081#L521_accept_S1 [1807] L521_accept_S1-->L522_accept_S1: Formula: (= v_hdr.ipv4.dstAddr_12 v__old_hdr.ipv4.dstAddr_10)  InVars {hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_12}  OutVars{_old_hdr.ipv4.dstAddr=v__old_hdr.ipv4.dstAddr_10, hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_12}  AuxVars[]  AssignedVars[_old_hdr.ipv4.dstAddr] 9082#L522_accept_S1 [2135] L522_accept_S1-->L523_accept_S1: Formula: (not v_hdr.tcp.valid_29)  InVars {}  OutVars{hdr.tcp.valid=v_hdr.tcp.valid_29}  AuxVars[]  AssignedVars[hdr.tcp.valid] 9132#L523_accept_S1 [1851] L523_accept_S1-->L524_accept_S1: Formula: (= v_emit_21 (store v_emit_22 v_hdr.tcp_2 false))  InVars {hdr.tcp=v_hdr.tcp_2, emit=v_emit_22}  OutVars{hdr.tcp=v_hdr.tcp_2, emit=v_emit_21}  AuxVars[]  AssignedVars[emit] 9133#L524_accept_S1 [1911] L524_accept_S1-->L525_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.srcport=v_hdr.tcp.srcport_11}  AuxVars[]  AssignedVars[hdr.tcp.srcport] 8744#L525_accept_S1 [1576] L525_accept_S1-->L526_accept_S1: Formula: (and (< v_hdr.tcp.srcport_9 65536) (<= 0 v_hdr.tcp.srcport_9))  InVars {hdr.tcp.srcport=v_hdr.tcp.srcport_9}  OutVars{hdr.tcp.srcport=v_hdr.tcp.srcport_9}  AuxVars[]  AssignedVars[] 8625#L526_accept_S1 [1513] L526_accept_S1-->L527_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.dstport=v_hdr.tcp.dstport_12}  AuxVars[]  AssignedVars[hdr.tcp.dstport] 8626#L527_accept_S1 [2101] L527_accept_S1-->L528_accept_S1: Formula: (and (<= 0 v_hdr.tcp.dstport_11) (< v_hdr.tcp.dstport_11 65536))  InVars {hdr.tcp.dstport=v_hdr.tcp.dstport_11}  OutVars{hdr.tcp.dstport=v_hdr.tcp.dstport_11}  AuxVars[]  AssignedVars[] 9243#L528_accept_S1 [1979] L528_accept_S1-->L529_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.sequence=v_hdr.tcp.sequence_41}  AuxVars[]  AssignedVars[hdr.tcp.sequence] 9109#L529_accept_S1 [1830] L529_accept_S1-->L530_accept_S1: Formula: (and (<= 0 v_hdr.tcp.sequence_42) (< v_hdr.tcp.sequence_42 4294967296))  InVars {hdr.tcp.sequence=v_hdr.tcp.sequence_42}  OutVars{hdr.tcp.sequence=v_hdr.tcp.sequence_42}  AuxVars[]  AssignedVars[] 9110#L530_accept_S1 [2084] L530_accept_S1-->L531_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.ackseq=v_hdr.tcp.ackseq_44}  AuxVars[]  AssignedVars[hdr.tcp.ackseq] 9294#L531_accept_S1 [2048] L531_accept_S1-->L532_accept_S1: Formula: (and (< v_hdr.tcp.ackseq_42 4294967296) (<= 0 v_hdr.tcp.ackseq_42))  InVars {hdr.tcp.ackseq=v_hdr.tcp.ackseq_42}  OutVars{hdr.tcp.ackseq=v_hdr.tcp.ackseq_42}  AuxVars[]  AssignedVars[] 9295#L532_accept_S1 [2085] L532_accept_S1-->L533_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.headerlength=v_hdr.tcp.headerlength_12}  AuxVars[]  AssignedVars[hdr.tcp.headerlength] 9182#L533_accept_S1 [1912] L533_accept_S1-->L534_accept_S1: Formula: (and (<= 0 v_hdr.tcp.headerlength_11) (< v_hdr.tcp.headerlength_11 16))  InVars {hdr.tcp.headerlength=v_hdr.tcp.headerlength_11}  OutVars{hdr.tcp.headerlength=v_hdr.tcp.headerlength_11}  AuxVars[]  AssignedVars[] 8948#L534_accept_S1 [1704] L534_accept_S1-->L535_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.reservation=v_hdr.tcp.reservation_10}  AuxVars[]  AssignedVars[hdr.tcp.reservation] 8949#L535_accept_S1 [2041] L535_accept_S1-->L536_accept_S1: Formula: (and (<= 0 v_hdr.tcp.reservation_12) (< v_hdr.tcp.reservation_12 64))  InVars {hdr.tcp.reservation=v_hdr.tcp.reservation_12}  OutVars{hdr.tcp.reservation=v_hdr.tcp.reservation_12}  AuxVars[]  AssignedVars[] 8776#L536_accept_S1 [1596] L536_accept_S1-->L537_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.URG=v_hdr.tcp.URG_9}  AuxVars[]  AssignedVars[hdr.tcp.URG] 8777#L537_accept_S1 [2017] L537_accept_S1-->L538_accept_S1: Formula: (and (< v_hdr.tcp.URG_12 2) (<= 0 v_hdr.tcp.URG_12))  InVars {hdr.tcp.URG=v_hdr.tcp.URG_12}  OutVars{hdr.tcp.URG=v_hdr.tcp.URG_12}  AuxVars[]  AssignedVars[] 9208#L538_accept_S1 [1940] L538_accept_S1-->L539_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.ACK=v_hdr.tcp.ACK_12}  AuxVars[]  AssignedVars[hdr.tcp.ACK] 9209#L539_accept_S1 [2076] L539_accept_S1-->L540_accept_S1: Formula: (and (<= 0 v_hdr.tcp.ACK_10) (< v_hdr.tcp.ACK_10 2))  InVars {hdr.tcp.ACK=v_hdr.tcp.ACK_10}  OutVars{hdr.tcp.ACK=v_hdr.tcp.ACK_10}  AuxVars[]  AssignedVars[] 8832#L540_accept_S1 [1628] L540_accept_S1-->L541_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.PSH=v_hdr.tcp.PSH_9}  AuxVars[]  AssignedVars[hdr.tcp.PSH] 8833#L541_accept_S1 [1688] L541_accept_S1-->L542_accept_S1: Formula: (and (< v_hdr.tcp.PSH_11 2) (<= 0 v_hdr.tcp.PSH_11))  InVars {hdr.tcp.PSH=v_hdr.tcp.PSH_11}  OutVars{hdr.tcp.PSH=v_hdr.tcp.PSH_11}  AuxVars[]  AssignedVars[] 8925#L542_accept_S1 [2030] L542_accept_S1-->L543_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.RST=v_hdr.tcp.RST_9}  AuxVars[]  AssignedVars[hdr.tcp.RST] 8586#L543_accept_S1 [1491] L543_accept_S1-->L544_accept_S1: Formula: (and (< v_hdr.tcp.RST_12 2) (<= 0 v_hdr.tcp.RST_12))  InVars {hdr.tcp.RST=v_hdr.tcp.RST_12}  OutVars{hdr.tcp.RST=v_hdr.tcp.RST_12}  AuxVars[]  AssignedVars[] 8587#L544_accept_S1 [1496] L544_accept_S1-->L545_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.SYN=v_hdr.tcp.SYN_9}  AuxVars[]  AssignedVars[hdr.tcp.SYN] 8595#L545_accept_S1 [2062] L545_accept_S1-->L546_accept_S1: Formula: (and (<= 0 v_hdr.tcp.SYN_10) (< v_hdr.tcp.SYN_10 2))  InVars {hdr.tcp.SYN=v_hdr.tcp.SYN_10}  OutVars{hdr.tcp.SYN=v_hdr.tcp.SYN_10}  AuxVars[]  AssignedVars[] 8864#L546_accept_S1 [1648] L546_accept_S1-->L547_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.FIN=v_hdr.tcp.FIN_9}  AuxVars[]  AssignedVars[hdr.tcp.FIN] 8865#L547_accept_S1 [2144] L547_accept_S1-->L548_accept_S1: Formula: (and (<= 0 v_hdr.tcp.FIN_10) (< v_hdr.tcp.FIN_10 2))  InVars {hdr.tcp.FIN=v_hdr.tcp.FIN_10}  OutVars{hdr.tcp.FIN=v_hdr.tcp.FIN_10}  AuxVars[]  AssignedVars[] 8886#L548_accept_S1 [1666] L548_accept_S1-->L549_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.windowsize=v_hdr.tcp.windowsize_12}  AuxVars[]  AssignedVars[hdr.tcp.windowsize] 8887#L549_accept_S1 [2267] L549_accept_S1-->L550_accept_S1: Formula: (and (< v_hdr.tcp.windowsize_11 65536) (<= 0 v_hdr.tcp.windowsize_11))  InVars {hdr.tcp.windowsize=v_hdr.tcp.windowsize_11}  OutVars{hdr.tcp.windowsize=v_hdr.tcp.windowsize_11}  AuxVars[]  AssignedVars[] 9077#L550_accept_S1 [1804] L550_accept_S1-->L551_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.checksum=v_hdr.tcp.checksum_12}  AuxVars[]  AssignedVars[hdr.tcp.checksum] 9078#L551_accept_S1 [2147] L551_accept_S1-->L552_accept_S1: Formula: (and (< v_hdr.tcp.checksum_10 65536) (<= 0 v_hdr.tcp.checksum_10))  InVars {hdr.tcp.checksum=v_hdr.tcp.checksum_10}  OutVars{hdr.tcp.checksum=v_hdr.tcp.checksum_10}  AuxVars[]  AssignedVars[] 9276#L552_accept_S1 [2018] L552_accept_S1-->L553_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.pointer=v_hdr.tcp.pointer_10}  AuxVars[]  AssignedVars[hdr.tcp.pointer] 9277#L553_accept_S1 [2046] L553_accept_S1-->L554_accept_S1: Formula: (and (< v_hdr.tcp.pointer_11 65536) (<= 0 v_hdr.tcp.pointer_11))  InVars {hdr.tcp.pointer=v_hdr.tcp.pointer_11}  OutVars{hdr.tcp.pointer=v_hdr.tcp.pointer_11}  AuxVars[]  AssignedVars[] 8717#L554_accept_S1 [1559] L554_accept_S1-->L555_accept_S1: Formula: (not v_hdr.udp_tunnel.valid_20)  InVars {}  OutVars{hdr.udp_tunnel.valid=v_hdr.udp_tunnel.valid_20}  AuxVars[]  AssignedVars[hdr.udp_tunnel.valid] 8718#L555_accept_S1 [1738] L555_accept_S1-->L556_accept_S1: Formula: (= v_emit_33 (store v_emit_34 v_hdr.udp_tunnel_9 false))  InVars {emit=v_emit_34, hdr.udp_tunnel=v_hdr.udp_tunnel_9}  OutVars{emit=v_emit_33, hdr.udp_tunnel=v_hdr.udp_tunnel_9}  AuxVars[]  AssignedVars[emit] 8996#L556_accept_S1 [1894] L556_accept_S1-->L557_accept_S1: Formula: true  InVars {}  OutVars{hdr.udp_tunnel.srcport=v_hdr.udp_tunnel.srcport_16}  AuxVars[]  AssignedVars[hdr.udp_tunnel.srcport] 8672#L557_accept_S1 [1537] L557_accept_S1-->L558_accept_S1: Formula: (and (< v_hdr.udp_tunnel.srcport_17 65536) (<= 0 v_hdr.udp_tunnel.srcport_17))  InVars {hdr.udp_tunnel.srcport=v_hdr.udp_tunnel.srcport_17}  OutVars{hdr.udp_tunnel.srcport=v_hdr.udp_tunnel.srcport_17}  AuxVars[]  AssignedVars[] 8673#L558_accept_S1 [1759] L558_accept_S1-->L559_accept_S1: Formula: true  InVars {}  OutVars{hdr.udp_tunnel.dstport=v_hdr.udp_tunnel.dstport_14}  AuxVars[]  AssignedVars[hdr.udp_tunnel.dstport] 8561#L559_accept_S1 [1482] L559_accept_S1-->L560_accept_S1: Formula: (and (<= 0 v_hdr.udp_tunnel.dstport_15) (< v_hdr.udp_tunnel.dstport_15 65536))  InVars {hdr.udp_tunnel.dstport=v_hdr.udp_tunnel.dstport_15}  OutVars{hdr.udp_tunnel.dstport=v_hdr.udp_tunnel.dstport_15}  AuxVars[]  AssignedVars[] 8562#L560_accept_S1 [1743] L560_accept_S1-->L561_accept_S1: Formula: true  InVars {}  OutVars{hdr.udp_tunnel.userlength=v_hdr.udp_tunnel.userlength_17}  AuxVars[]  AssignedVars[hdr.udp_tunnel.userlength] 8999#L561_accept_S1 [1788] L561_accept_S1-->L562_accept_S1: Formula: (and (<= 0 v_hdr.udp_tunnel.userlength_16) (< v_hdr.udp_tunnel.userlength_16 65536))  InVars {hdr.udp_tunnel.userlength=v_hdr.udp_tunnel.userlength_16}  OutVars{hdr.udp_tunnel.userlength=v_hdr.udp_tunnel.userlength_16}  AuxVars[]  AssignedVars[] 9058#L562_accept_S1 [2139] L562_accept_S1-->L563_accept_S1: Formula: true  InVars {}  OutVars{hdr.udp_tunnel.checksum=v_hdr.udp_tunnel.checksum_17}  AuxVars[]  AssignedVars[hdr.udp_tunnel.checksum] 9336#L563_accept_S1 [2177] L563_accept_S1-->havocProcedureFINAL_accept_S1: Formula: (and (< v_hdr.udp_tunnel.checksum_14 65536) (<= 0 v_hdr.udp_tunnel.checksum_14))  InVars {hdr.udp_tunnel.checksum=v_hdr.udp_tunnel.checksum_14}  OutVars{hdr.udp_tunnel.checksum=v_hdr.udp_tunnel.checksum_14}  AuxVars[]  AssignedVars[] 9067#havocProcedureFINAL_accept_S1 [1795] havocProcedureFINAL_accept_S1-->havocProcedureEXIT_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8774#havocProcedureEXIT_accept_S1 >[2387] havocProcedureEXIT_accept_S1-->L568-D55: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8775#L568-D55 [2015] L568-D55-->L568_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8736#L568_accept_S1 [2264] L568_accept_S1-->L568_accept_S1-D49: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 8786#L568_accept_S1-D49 [1601] L568_accept_S1-D49-->_parser_MyParserENTRY_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8574#_parser_MyParserENTRY_accept_S1 [1571] _parser_MyParserENTRY_accept_S1-->_parser_MyParserENTRY_accept_S1-D17: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 8573#_parser_MyParserENTRY_accept_S1-D17 [1487] _parser_MyParserENTRY_accept_S1-D17-->startENTRY_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8575#startENTRY_accept_S1 [1798] startENTRY_accept_S1-->L736_accept_S1: Formula: v_hdr.ethernet.valid_15  InVars {}  OutVars{hdr.ethernet.valid=v_hdr.ethernet.valid_15}  AuxVars[]  AssignedVars[hdr.ethernet.valid] 8684#L736_accept_S1 [1542] L736_accept_S1-->L739_accept_S1: Formula: (not (= v_hdr.ethernet.etherType_39 34525))  InVars {hdr.ethernet.etherType=v_hdr.ethernet.etherType_39}  OutVars{hdr.ethernet.etherType=v_hdr.ethernet.etherType_39}  AuxVars[]  AssignedVars[] 8686#L739_accept_S1 [1662] L739_accept_S1-->L739-1_accept_S1: Formula: (not (= v_hdr.ethernet.etherType_35 2048))  InVars {hdr.ethernet.etherType=v_hdr.ethernet.etherType_35}  OutVars{hdr.ethernet.etherType=v_hdr.ethernet.etherType_35}  AuxVars[]  AssignedVars[] 8703#L739-1_accept_S1 [1806] L739-1_accept_S1-->startEXIT_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 9080#startEXIT_accept_S1 >[2344] startEXIT_accept_S1-->_parser_MyParserFINAL-D65: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8767#_parser_MyParserFINAL-D65 [1591] _parser_MyParserFINAL-D65-->_parser_MyParserFINAL_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8768#_parser_MyParserFINAL_accept_S1 [1592] _parser_MyParserFINAL_accept_S1-->_parser_MyParserEXIT_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8769#_parser_MyParserEXIT_accept_S1 >[2283] _parser_MyParserEXIT_accept_S1-->L569-D103: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8965#L569-D103 [1714] L569-D103-->L569_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8876#L569_accept_S1 [1658] L569_accept_S1-->L569_accept_S1-D51: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 8877#L569_accept_S1-D51 [1684] L569_accept_S1-D51-->MyVerifyChecksumFINAL_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8919#MyVerifyChecksumFINAL_accept_S1 [1723] MyVerifyChecksumFINAL_accept_S1-->MyVerifyChecksumEXIT_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8979#MyVerifyChecksumEXIT_accept_S1 >[2336] MyVerifyChecksumEXIT_accept_S1-->L570-D73: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 9131#L570-D73 [1848] L570-D73-->L570_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8516#L570_accept_S1 [2056] L570_accept_S1-->L570_accept_S1-D13: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 9300#L570_accept_S1-D13 [2209] L570_accept_S1-D13-->MyIngressENTRY_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 9216#MyIngressENTRY_accept_S1 [1947] MyIngressENTRY_accept_S1-->L259_accept_S1: Formula: (= v_standard_metadata.ingress_port_18 0)  InVars {standard_metadata.ingress_port=v_standard_metadata.ingress_port_18}  OutVars{standard_metadata.ingress_port=v_standard_metadata.ingress_port_18}  AuxVars[]  AssignedVars[] 9217#L259_accept_S1 [2180] L259_accept_S1-->L266_accept_S1: Formula: (not (= v_hdr.ipv4.dstAddr_21 2071690107))  InVars {hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_21}  OutVars{hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_21}  AuxVars[]  AssignedVars[] 8619#L266_accept_S1 [1510] L266_accept_S1-->L267_accept_S1: Formula: (and (not (= 281474976710655 v_hdr.ethernet.dstAddr_37)) (not (= v_hdr.ethernet.srcAddr_28 0)))  InVars {hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_28, hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_37}  OutVars{hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_28, hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_37}  AuxVars[]  AssignedVars[] 8542#L267_accept_S1 [1500] L267_accept_S1-->L267_accept_S1-D33: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 8603#L267_accept_S1-D33 [1892] L267_accept_S1-D33-->store_user_macENTRY_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8613#store_user_macENTRY_accept_S1 [1506] store_user_macENTRY_accept_S1-->store_user_macENTRY_accept_S1-D39: Formula: (and (= v_user_mac.write_indexInParam_1 0) (= v_hdr.ethernet.srcAddr_21 v_user_mac.write_valueInParam_1))  InVars {hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_21}  OutVars{user_mac.write_value=v_user_mac.write_valueInParam_1, user_mac.write_index=v_user_mac.write_indexInParam_1, hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_21}  AuxVars[]  AssignedVars[user_mac.write_value, user_mac.write_index]< 8614#store_user_macENTRY_accept_S1-D39 [2039] store_user_macENTRY_accept_S1-D39-->user_mac.writeENTRY_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 9264#user_mac.writeENTRY_accept_S1 [2004] user_mac.writeENTRY_accept_S1-->user_mac.writeFINAL_accept_S1: Formula: (= v_user_mac_16 (store v_user_mac_17 v_user_mac.write_index_2 v_user_mac.write_value_2))  InVars {user_mac.write_value=v_user_mac.write_value_2, user_mac.write_index=v_user_mac.write_index_2, user_mac=v_user_mac_17}  OutVars{user_mac.write_value=v_user_mac.write_value_2, user_mac.write_index=v_user_mac.write_index_2, user_mac=v_user_mac_16}  AuxVars[]  AssignedVars[user_mac] 9206#user_mac.writeFINAL_accept_S1 [1939] user_mac.writeFINAL_accept_S1-->user_mac.writeEXIT_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 9207#user_mac.writeEXIT_accept_S1 >[2370] user_mac.writeEXIT_accept_S1-->store_user_macFINAL-D63: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: (and (= v_user_mac.write_indexInParam_1 0) (= v_hdr.ethernet.srcAddr_21 v_user_mac.write_valueInParam_1))  InVars {hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_21}  OutVars{user_mac.write_value=v_user_mac.write_valueInParam_1, user_mac.write_index=v_user_mac.write_indexInParam_1, hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_21}  AuxVars[]  AssignedVars[user_mac.write_value, user_mac.write_index] 8541#store_user_macFINAL-D63 [1473] store_user_macFINAL-D63-->store_user_macFINAL_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8543#store_user_macFINAL_accept_S1 [2072] store_user_macFINAL_accept_S1-->store_user_macEXIT_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8947#store_user_macEXIT_accept_S1 >[2378] store_user_macEXIT_accept_S1-->L267-1-D67: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8804#L267-1-D67 [1611] L267-1-D67-->L267-1_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8513#L267-1_accept_S1 [2271] L267-1_accept_S1-->L267-1_accept_S1-D5: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 8763#L267-1_accept_S1-D5 [1587] L267-1_accept_S1-D5-->read_esboxENTRY_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8764#read_esboxENTRY_accept_S1 [1632] read_esboxENTRY_accept_S1-->L692_accept_S1: Formula: (= v_tmp_0_14 (mod (div (+ (* (- 1) (mod 0 1)) v_hdr.tcp.sequence_83) 1) 256))  InVars {hdr.tcp.sequence=v_hdr.tcp.sequence_83}  OutVars{hdr.tcp.sequence=v_hdr.tcp.sequence_83, tmp_0=v_tmp_0_14}  AuxVars[]  AssignedVars[tmp_0] 8841#L692_accept_S1 [1890] L692_accept_S1-->L693_accept_S1: Formula: (= (select v_es_box_12 v_tmp_0_11) v_tmp_11)  InVars {es_box=v_es_box_12, tmp_0=v_tmp_0_11}  OutVars{tmp=v_tmp_11, es_box=v_es_box_12, tmp_0=v_tmp_0_11}  AuxVars[]  AssignedVars[tmp] 9166#L693_accept_S1 [2051] L693_accept_S1-->L694_accept_S1: Formula: (= (+ (* (- 1) (mod v_hdr.tcp.sequence_81 256)) (mod 0 1) v_hdr.tcp.sequence_81 v_tmp_13) v_hdr.tcp.sequence_80)  InVars {tmp=v_tmp_13, hdr.tcp.sequence=v_hdr.tcp.sequence_81}  OutVars{tmp=v_tmp_13, hdr.tcp.sequence=v_hdr.tcp.sequence_80}  AuxVars[]  AssignedVars[hdr.tcp.sequence] 9296#L694_accept_S1 [2082] L694_accept_S1-->L696_accept_S1: Formula: (= (mod (div (+ (* (- 1) (mod v_hdr.tcp.sequence_71 256)) v_hdr.tcp.sequence_71) 256) 256) v_tmp_2_11)  InVars {hdr.tcp.sequence=v_hdr.tcp.sequence_71}  OutVars{tmp_2=v_tmp_2_11, hdr.tcp.sequence=v_hdr.tcp.sequence_71}  AuxVars[]  AssignedVars[tmp_2] 8647#L696_accept_S1 [1522] L696_accept_S1-->L697_accept_S1: Formula: (= v_tmp_1_14 (select v_es_box_25 v_tmp_2_14))  InVars {es_box=v_es_box_25, tmp_2=v_tmp_2_14}  OutVars{tmp_2=v_tmp_2_14, es_box=v_es_box_25, tmp_1=v_tmp_1_14}  AuxVars[]  AssignedVars[tmp_1] 8648#L697_accept_S1 [1966] L697_accept_S1-->L698_accept_S1: Formula: (= (+ (mod v_hdr.tcp.sequence_70 256) (* (- 1) (mod v_hdr.tcp.sequence_70 65536)) (* 256 v_tmp_1_11) v_hdr.tcp.sequence_70) v_hdr.tcp.sequence_69)  InVars {hdr.tcp.sequence=v_hdr.tcp.sequence_70, tmp_1=v_tmp_1_11}  OutVars{hdr.tcp.sequence=v_hdr.tcp.sequence_69, tmp_1=v_tmp_1_11}  AuxVars[]  AssignedVars[hdr.tcp.sequence] 9233#L698_accept_S1 [2157] L698_accept_S1-->L700_accept_S1: Formula: (= v_tmp_4_13 (mod (div (+ v_hdr.tcp.sequence_86 (* (- 1) (mod v_hdr.tcp.sequence_86 65536))) 65536) 256))  InVars {hdr.tcp.sequence=v_hdr.tcp.sequence_86}  OutVars{hdr.tcp.sequence=v_hdr.tcp.sequence_86, tmp_4=v_tmp_4_13}  AuxVars[]  AssignedVars[tmp_4] 8794#L700_accept_S1 [1604] L700_accept_S1-->L701_accept_S1: Formula: (= v_tmp_3_12 (select v_es_box_20 v_tmp_4_12))  InVars {es_box=v_es_box_20, tmp_4=v_tmp_4_12}  OutVars{tmp_3=v_tmp_3_12, tmp_4=v_tmp_4_12, es_box=v_es_box_20}  AuxVars[]  AssignedVars[tmp_3] 8512#L701_accept_S1 [1461] L701_accept_S1-->L702_accept_S1: Formula: (= v_hdr.tcp.sequence_84 (+ (* 65536 v_tmp_3_11) (* (- 1) (mod v_hdr.tcp.sequence_85 16777216)) (mod v_hdr.tcp.sequence_85 65536) v_hdr.tcp.sequence_85))  InVars {tmp_3=v_tmp_3_11, hdr.tcp.sequence=v_hdr.tcp.sequence_85}  OutVars{tmp_3=v_tmp_3_11, hdr.tcp.sequence=v_hdr.tcp.sequence_84}  AuxVars[]  AssignedVars[hdr.tcp.sequence] 8514#L702_accept_S1 [2200] L702_accept_S1-->L704_accept_S1: Formula: (= v_tmp_6_11 (mod (div (+ v_hdr.tcp.sequence_79 (* (- 1) (mod v_hdr.tcp.sequence_79 16777216))) 16777216) 256))  InVars {hdr.tcp.sequence=v_hdr.tcp.sequence_79}  OutVars{tmp_6=v_tmp_6_11, hdr.tcp.sequence=v_hdr.tcp.sequence_79}  AuxVars[]  AssignedVars[tmp_6] 8726#L704_accept_S1 [1564] L704_accept_S1-->L705_accept_S1: Formula: (= v_tmp_5_14 (select v_es_box_26 v_tmp_6_14))  InVars {es_box=v_es_box_26, tmp_6=v_tmp_6_14}  OutVars{tmp_5=v_tmp_5_14, es_box=v_es_box_26, tmp_6=v_tmp_6_14}  AuxVars[]  AssignedVars[tmp_5] 8727#L705_accept_S1 [1960] L705_accept_S1-->L706_accept_S1: Formula: (= (+ (* (- 1) (mod v_hdr.tcp.sequence_73 4294967296)) (* 16777216 v_tmp_5_11) v_hdr.tcp.sequence_73 (mod v_hdr.tcp.sequence_73 16777216)) v_hdr.tcp.sequence_72)  InVars {tmp_5=v_tmp_5_11, hdr.tcp.sequence=v_hdr.tcp.sequence_73}  OutVars{tmp_5=v_tmp_5_11, hdr.tcp.sequence=v_hdr.tcp.sequence_72}  AuxVars[]  AssignedVars[hdr.tcp.sequence] 8652#L706_accept_S1 [1525] L706_accept_S1-->L708_accept_S1: Formula: (= v_tmp_8_11 (mod (div (+ v_hdr.tcp.ackseq_75 (* (- 1) (mod 0 1))) 1) 256))  InVars {hdr.tcp.ackseq=v_hdr.tcp.ackseq_75}  OutVars{hdr.tcp.ackseq=v_hdr.tcp.ackseq_75, tmp_8=v_tmp_8_11}  AuxVars[]  AssignedVars[tmp_8] 8653#L708_accept_S1 [1922] L708_accept_S1-->L709_accept_S1: Formula: (= v_tmp_7_13 (select v_es_box_21 v_tmp_8_12))  InVars {es_box=v_es_box_21, tmp_8=v_tmp_8_12}  OutVars{tmp_7=v_tmp_7_13, es_box=v_es_box_21, tmp_8=v_tmp_8_12}  AuxVars[]  AssignedVars[tmp_7] 9194#L709_accept_S1 [2074] L709_accept_S1-->L710_accept_S1: Formula: (= v_hdr.tcp.ackseq_83 (+ v_hdr.tcp.ackseq_84 v_tmp_7_12 (mod 0 1) (* (- 1) (mod v_hdr.tcp.ackseq_84 256))))  InVars {tmp_7=v_tmp_7_12, hdr.tcp.ackseq=v_hdr.tcp.ackseq_84}  OutVars{tmp_7=v_tmp_7_12, hdr.tcp.ackseq=v_hdr.tcp.ackseq_83}  AuxVars[]  AssignedVars[hdr.tcp.ackseq] 9311#L710_accept_S1 [2138] L710_accept_S1-->L712_accept_S1: Formula: (= (mod (div (+ v_hdr.tcp.ackseq_88 (* (- 1) (mod v_hdr.tcp.ackseq_88 256))) 256) 256) v_tmp_10_13)  InVars {hdr.tcp.ackseq=v_hdr.tcp.ackseq_88}  OutVars{hdr.tcp.ackseq=v_hdr.tcp.ackseq_88, tmp_10=v_tmp_10_13}  AuxVars[]  AssignedVars[tmp_10] 9168#L712_accept_S1 [1895] L712_accept_S1-->L713_accept_S1: Formula: (= v_tmp_9_14 (select v_es_box_23 v_tmp_10_14))  InVars {es_box=v_es_box_23, tmp_10=v_tmp_10_14}  OutVars{tmp_10=v_tmp_10_14, es_box=v_es_box_23, tmp_9=v_tmp_9_14}  AuxVars[]  AssignedVars[tmp_9] 8724#L713_accept_S1 [1563] L713_accept_S1-->L714_accept_S1: Formula: (= v_hdr.tcp.ackseq_86 (+ v_hdr.tcp.ackseq_87 (* (- 1) (mod v_hdr.tcp.ackseq_87 65536)) (mod v_hdr.tcp.ackseq_87 256) (* 256 v_tmp_9_13)))  InVars {hdr.tcp.ackseq=v_hdr.tcp.ackseq_87, tmp_9=v_tmp_9_13}  OutVars{hdr.tcp.ackseq=v_hdr.tcp.ackseq_86, tmp_9=v_tmp_9_13}  AuxVars[]  AssignedVars[hdr.tcp.ackseq] 8725#L714_accept_S1 [1868] L714_accept_S1-->L716_accept_S1: Formula: (= (mod (div (+ v_hdr.tcp.ackseq_76 (* (- 1) (mod v_hdr.tcp.ackseq_76 65536))) 65536) 256) v_tmp_12_13)  InVars {hdr.tcp.ackseq=v_hdr.tcp.ackseq_76}  OutVars{hdr.tcp.ackseq=v_hdr.tcp.ackseq_76, tmp_12=v_tmp_12_13}  AuxVars[]  AssignedVars[tmp_12] 9144#L716_accept_S1 [1888] L716_accept_S1-->L717_accept_S1: Formula: (= (select v_es_box_11 v_tmp_12_12) v_tmp_11_11)  InVars {es_box=v_es_box_11, tmp_12=v_tmp_12_12}  OutVars{tmp_11=v_tmp_11_11, tmp_12=v_tmp_12_12, es_box=v_es_box_11}  AuxVars[]  AssignedVars[tmp_11] 8607#L717_accept_S1 [1504] L717_accept_S1-->L718_accept_S1: Formula: (= v_hdr.tcp.ackseq_81 (+ v_hdr.tcp.ackseq_82 (* 65536 v_tmp_11_12) (mod v_hdr.tcp.ackseq_82 65536) (* (- 1) (mod v_hdr.tcp.ackseq_82 16777216))))  InVars {tmp_11=v_tmp_11_12, hdr.tcp.ackseq=v_hdr.tcp.ackseq_82}  OutVars{tmp_11=v_tmp_11_12, hdr.tcp.ackseq=v_hdr.tcp.ackseq_81}  AuxVars[]  AssignedVars[hdr.tcp.ackseq] 8608#L718_accept_S1 [1637] L718_accept_S1-->L720_accept_S1: Formula: (= (mod (div (+ v_hdr.tcp.ackseq_69 (* (- 1) (mod v_hdr.tcp.ackseq_69 16777216))) 16777216) 256) v_tmp_14_11)  InVars {hdr.tcp.ackseq=v_hdr.tcp.ackseq_69}  OutVars{hdr.tcp.ackseq=v_hdr.tcp.ackseq_69, tmp_14=v_tmp_14_11}  AuxVars[]  AssignedVars[tmp_14] 8629#L720_accept_S1 [1515] L720_accept_S1-->L721_accept_S1: Formula: (= (select v_es_box_18 v_tmp_14_13) v_tmp_13_14)  InVars {es_box=v_es_box_18, tmp_14=v_tmp_14_13}  OutVars{es_box=v_es_box_18, tmp_13=v_tmp_13_14, tmp_14=v_tmp_14_13}  AuxVars[]  AssignedVars[tmp_13] 8630#L721_accept_S1 [1805] L721_accept_S1-->read_esboxFINAL_accept_S1: Formula: (= v_hdr.tcp.ackseq_70 (+ (* (- 1) (mod v_hdr.tcp.ackseq_71 4294967296)) v_hdr.tcp.ackseq_71 (mod v_hdr.tcp.ackseq_71 16777216) (* 16777216 v_tmp_13_11)))  InVars {hdr.tcp.ackseq=v_hdr.tcp.ackseq_71, tmp_13=v_tmp_13_11}  OutVars{hdr.tcp.ackseq=v_hdr.tcp.ackseq_70, tmp_13=v_tmp_13_11}  AuxVars[]  AssignedVars[hdr.tcp.ackseq] 9079#read_esboxFINAL_accept_S1 [2183] read_esboxFINAL_accept_S1-->read_esboxEXIT_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 9274#read_esboxEXIT_accept_S1 >[2350] read_esboxEXIT_accept_S1-->L268-D81: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 9013#L268-D81 [1753] L268-D81-->L268_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8826#L268_accept_S1 [2027] L268_accept_S1-->L268_accept_S1-D27: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 8825#L268_accept_S1-D27 [1626] L268_accept_S1-D27-->do_read_countENTRY_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8827#do_read_countENTRY_accept_S1 [2153] do_read_countENTRY_accept_S1-->do_read_countFINAL_accept_S1: Formula: (= (select v_count_16 0) v_temp_0_28)  InVars {count=v_count_16}  OutVars{count=v_count_16, temp_0=v_temp_0_28}  AuxVars[]  AssignedVars[temp_0] 9288#do_read_countFINAL_accept_S1 [2036] do_read_countFINAL_accept_S1-->do_read_countEXIT_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8828#do_read_countEXIT_accept_S1 >[2308] do_read_countEXIT_accept_S1-->L269-D83: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8829#L269-D83 [1712] L269-D83-->L269_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8963#L269_accept_S1 [2242] L269_accept_S1-->L271_accept_S1: Formula: (= v_temp_0_18 0)  InVars {temp_0=v_temp_0_18}  OutVars{temp_0=v_temp_0_18}  AuxVars[]  AssignedVars[] 8918#L271_accept_S1 [1956] L271_accept_S1-->L271_accept_S1-D9: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 9225#L271_accept_S1-D9 [1967] L271_accept_S1-D9-->creatipv6_1ENTRY_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8971#creatipv6_1ENTRY_accept_S1 [1717] creatipv6_1ENTRY_accept_S1-->L346_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8972#L346_accept_S1 [1811] L346_accept_S1-->L348_accept_S1: Formula: (= 6 v_hdr.ipv6.version_22)  InVars {}  OutVars{hdr.ipv6.version=v_hdr.ipv6.version_22}  AuxVars[]  AssignedVars[hdr.ipv6.version] 9087#L348_accept_S1 [2278] L348_accept_S1-->L349_accept_S1: Formula: (= v_hdr.ipv6.payloadlen_21 v_hdr.ipv4.totalLen_21)  InVars {hdr.ipv4.totalLen=v_hdr.ipv4.totalLen_21}  OutVars{hdr.ipv4.totalLen=v_hdr.ipv4.totalLen_21, hdr.ipv6.payloadlen=v_hdr.ipv6.payloadlen_21}  AuxVars[]  AssignedVars[hdr.ipv6.payloadlen] 9356#L349_accept_S1 [2173] L349_accept_S1-->L350_accept_S1: Formula: (= v_hdr.ipv6.nextheader_27 65)  InVars {}  OutVars{hdr.ipv6.nextheader=v_hdr.ipv6.nextheader_27}  AuxVars[]  AssignedVars[hdr.ipv6.nextheader] 9346#L350_accept_S1 [2154] L350_accept_S1-->L351_accept_S1: Formula: (= 64 v_hdr.ipv6.hoplimit_21)  InVars {}  OutVars{hdr.ipv6.hoplimit=v_hdr.ipv6.hoplimit_21}  AuxVars[]  AssignedVars[hdr.ipv6.hoplimit] 9340#L351_accept_S1 [2145] L351_accept_S1-->L352_accept_S1: Formula: (= v_hdr.ethernet.etherType_29 34525)  InVars {}  OutVars{hdr.ethernet.etherType=v_hdr.ethernet.etherType_29}  AuxVars[]  AssignedVars[hdr.ethernet.etherType] 9257#L352_accept_S1 [1994] L352_accept_S1-->L353_accept_S1: Formula: (= v_hdr.ipv6.srcAddr_18 42545680458834377588178886921629466626)  InVars {}  OutVars{hdr.ipv6.srcAddr=v_hdr.ipv6.srcAddr_18}  AuxVars[]  AssignedVars[hdr.ipv6.srcAddr] 9201#L353_accept_S1 [1931] L353_accept_S1-->L354_accept_S1: Formula: (= v_hdr.ipv6.dstAddr_19 42540765144257160172006968799218772356)  InVars {}  OutVars{hdr.ipv6.dstAddr=v_hdr.ipv6.dstAddr_19}  AuxVars[]  AssignedVars[hdr.ipv6.dstAddr] 9039#L354_accept_S1 [1773] L354_accept_S1-->L355_accept_S1: Formula: (= v_hdr.ethernet.srcAddr_32 19799850608873)  InVars {}  OutVars{hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_32}  AuxVars[]  AssignedVars[hdr.ethernet.srcAddr] 9014#L355_accept_S1 [1752] L355_accept_S1-->creatipv6_1FINAL_accept_S1: Formula: (= 174219185552744 v_hdr.ethernet.dstAddr_42)  InVars {}  OutVars{hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_42}  AuxVars[]  AssignedVars[hdr.ethernet.dstAddr] 9015#creatipv6_1FINAL_accept_S1 [1886] creatipv6_1FINAL_accept_S1-->creatipv6_1EXIT_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8917#creatipv6_1EXIT_accept_S1 >[2329] creatipv6_1EXIT_accept_S1-->L271-1-D61: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8536#L271-1-D61 [1471] L271-1-D61-->L271-1_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8537#L271-1_accept_S1 [1952] L271-1_accept_S1-->L271-1_accept_S1-D31: Formula: (and (= v_count.write_indexInParam_1 0) (= v_count.write_valueInParam_1 1))  InVars {}  OutVars{count.write_index=v_count.write_indexInParam_1, count.write_value=v_count.write_valueInParam_1}  AuxVars[]  AssignedVars[count.write_index, count.write_value]< 8554#L271-1_accept_S1-D31 [1479] L271-1_accept_S1-D31-->count.writeENTRY_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8555#count.writeENTRY_accept_S1 [1836] count.writeENTRY_accept_S1-->count.writeFINAL_accept_S1: Formula: (= (store v_count_19 v_count.write_index_2 v_count.write_value_2) v_count_18)  InVars {count=v_count_19, count.write_index=v_count.write_index_2, count.write_value=v_count.write_value_2}  OutVars{count=v_count_18, count.write_index=v_count.write_index_2, count.write_value=v_count.write_value_2}  AuxVars[]  AssignedVars[count] 9388#count.writeFINAL_accept_S1 [1787] count.writeFINAL_accept_S1-->count.writeEXIT_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 9385#count.writeEXIT_accept_S1 >[2341] count.writeEXIT_accept_S1-->L273-D97: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: (and (= v_count.write_indexInParam_1 0) (= v_count.write_valueInParam_1 1))  InVars {}  OutVars{count.write_index=v_count.write_indexInParam_1, count.write_value=v_count.write_valueInParam_1}  AuxVars[]  AssignedVars[count.write_index, count.write_value] 8982#L273-D97 [1726] L273-D97-->L273_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8983#L273_accept_S1 [1754] L273_accept_S1-->L275_accept_S1: Formula: (= v_standard_metadata.egress_spec_21 1)  InVars {}  OutVars{standard_metadata.egress_spec=v_standard_metadata.egress_spec_21}  AuxVars[]  AssignedVars[standard_metadata.egress_spec] 8842#L275_accept_S1 [1635] L275_accept_S1-->L276_accept_S1: Formula: (= 1 v_standard_metadata.egress_port_26)  InVars {}  OutVars{standard_metadata.egress_port=v_standard_metadata.egress_port_26}  AuxVars[]  AssignedVars[standard_metadata.egress_port] 8843#L276_accept_S1 [1849] L276_accept_S1-->L270-1_accept_S1: Formula: v_forward_27  InVars {}  OutVars{forward=v_forward_27}  AuxVars[]  AssignedVars[forward] 8931#L270-1_accept_S1 [1694] L270-1_accept_S1-->L278-1_accept_S1: Formula: (not (= v_temp_0_21 1))  InVars {temp_0=v_temp_0_21}  OutVars{temp_0=v_temp_0_21}  AuxVars[]  AssignedVars[] 8932#L278-1_accept_S1 [2114] L278-1_accept_S1-->L258_accept_S1: Formula: (not (= v_temp_0_17 2))  InVars {temp_0=v_temp_0_17}  OutVars{temp_0=v_temp_0_17}  AuxVars[]  AssignedVars[] 9327#L258_accept_S1 [1924] L258_accept_S1-->MyIngressEXIT_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 9457#MyIngressEXIT_accept_S1 >[2368] MyIngressEXIT_accept_S1-->L571-D107: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 9454#L571-D107 [2247] L571-D107-->L571_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 9451#L571_accept_S1 [2088] L571_accept_S1-->L571_accept_S1-D7: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 9452#L571_accept_S1-D7 [2158] L571_accept_S1-D7-->MyEgressENTRY_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 9455#MyEgressENTRY_accept_S1 [1527] MyEgressENTRY_accept_S1-->L249_accept_S1: Formula: (or (not (= 0 v_standard_metadata.egress_port_36)) (not v_hdr.tcp.valid_36))  InVars {standard_metadata.egress_port=v_standard_metadata.egress_port_36, hdr.tcp.valid=v_hdr.tcp.valid_36}  OutVars{standard_metadata.egress_port=v_standard_metadata.egress_port_36, hdr.tcp.valid=v_hdr.tcp.valid_36}  AuxVars[]  AssignedVars[] 9453#L249_accept_S1 [1585] L249_accept_S1-->MyEgressEXIT_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 9450#MyEgressEXIT_accept_S1 >[2312] MyEgressEXIT_accept_S1-->L572-D89: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 9448#L572-D89 [2123] L572-D89-->L572_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 9444#L572_accept_S1 [1899] L572_accept_S1-->L572_accept_S1-D21: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 9445#L572_accept_S1-D21 [2213] L572_accept_S1-D21-->MyComputeChecksumFINAL_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 9447#MyComputeChecksumFINAL_accept_S1 [1852] MyComputeChecksumFINAL_accept_S1-->MyComputeChecksumEXIT_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 9443#MyComputeChecksumEXIT_accept_S1 >[2326] MyComputeChecksumEXIT_accept_S1-->L573-D109: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 9441#L573-D109 [1832] L573-D109-->L573_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 9439#L573_accept_S1 [1547] L573_accept_S1-->L574-1_accept_S1: Formula: v_forward_32  InVars {forward=v_forward_32}  OutVars{forward=v_forward_32}  AuxVars[]  AssignedVars[] 9436#L574-1_accept_S1 [2191] L574-1_accept_S1-->L578_accept_S1: Formula: (let ((.cse0 (= v__old_hdr.ethernet.srcAddr_15 0))) (or (and .cse0 (not v__p4ltl_0_7)) (and v__p4ltl_0_7 (not .cse0))))  InVars {_old_hdr.ethernet.srcAddr=v__old_hdr.ethernet.srcAddr_15}  OutVars{_p4ltl_0=v__p4ltl_0_7, _old_hdr.ethernet.srcAddr=v__old_hdr.ethernet.srcAddr_15}  AuxVars[]  AssignedVars[_p4ltl_0] 9433#L578_accept_S1 [2040] L578_accept_S1-->L579_accept_S1: Formula: (let ((.cse0 (= 2071690107 v__old_hdr.ipv4.dstAddr_15))) (or (and v__p4ltl_1_7 (not .cse0)) (and .cse0 (not v__p4ltl_1_7))))  InVars {_old_hdr.ipv4.dstAddr=v__old_hdr.ipv4.dstAddr_15}  OutVars{_old_hdr.ipv4.dstAddr=v__old_hdr.ipv4.dstAddr_15, _p4ltl_1=v__p4ltl_1_7}  AuxVars[]  AssignedVars[_p4ltl_1] 9430#L579_accept_S1 [1721] L579_accept_S1-->L580_accept_S1: Formula: (let ((.cse0 (= 281474976710655 v__old_hdr.ethernet.dstAddr_15))) (or (and v__p4ltl_2_7 (not .cse0)) (and (not v__p4ltl_2_7) .cse0)))  InVars {_old_hdr.ethernet.dstAddr=v__old_hdr.ethernet.dstAddr_15}  OutVars{_p4ltl_2=v__p4ltl_2_7, _old_hdr.ethernet.dstAddr=v__old_hdr.ethernet.dstAddr_15}  AuxVars[]  AssignedVars[_p4ltl_2] 9427#L580_accept_S1 [1485] L580_accept_S1-->mainFINAL_accept_S1: Formula: (let ((.cse0 (= v_standard_metadata.ingress_port_22 0))) (or (and .cse0 v__p4ltl_3_6) (and (not .cse0) (not v__p4ltl_3_6))))  InVars {standard_metadata.ingress_port=v_standard_metadata.ingress_port_22}  OutVars{standard_metadata.ingress_port=v_standard_metadata.ingress_port_22, _p4ltl_3=v__p4ltl_3_6}  AuxVars[]  AssignedVars[_p4ltl_3] 9424#mainFINAL_accept_S1 [1840] mainFINAL_accept_S1-->mainEXIT_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 9421#mainEXIT_accept_S1 >[2385] mainEXIT_accept_S1-->L586-1-D71: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 9419#L586-1-D71 [1955] L586-1-D71-->L586-1_accept_S1: Formula: (and v__p4ltl_3_11 v__p4ltl_2_11 v__p4ltl_1_11 v__p4ltl_0_11 (or (not v__p4ltl_2_11) (not v__p4ltl_0_11) (not v__p4ltl_3_11) (not v__p4ltl_1_11) (= 1 v_standard_metadata.egress_port_32)))  InVars {_p4ltl_2=v__p4ltl_2_11, standard_metadata.egress_port=v_standard_metadata.egress_port_32, _p4ltl_3=v__p4ltl_3_11, _p4ltl_0=v__p4ltl_0_11, _p4ltl_1=v__p4ltl_1_11}  OutVars{_p4ltl_2=v__p4ltl_2_11, standard_metadata.egress_port=v_standard_metadata.egress_port_32, _p4ltl_3=v__p4ltl_3_11, _p4ltl_0=v__p4ltl_0_11, _p4ltl_1=v__p4ltl_1_11}  AuxVars[]  AssignedVars[] 8731#L586-1_accept_S1 
[2023-02-07 04:58:57,113 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2023-02-07 04:58:57,113 INFO  L85        PathProgramCache]: Analyzing trace with hash 1578930191, now seen corresponding path program 1 times
[2023-02-07 04:58:57,113 INFO  L118   FreeRefinementEngine]: Executing refinement strategy CAMEL
[2023-02-07 04:58:57,113 INFO  L333   FreeRefinementEngine]: Using trace check IpTcStrategyModuleSmtInterpolCraig [1140972802]
[2023-02-07 04:58:57,113 INFO  L95    rtionOrderModulation]: Keeping assertion order NOT_INCREMENTALLY
[2023-02-07 04:58:57,114 INFO  L127          SolverBuilder]: Constructing new instance of SMTInterpol with explicit timeout -1 ms and remaining time -1 ms
[2023-02-07 04:58:57,131 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is sat
[2023-02-07 04:58:57,131 INFO  L352             TraceCheck]: Trace is feasible, we will do another trace check, this time with branch encoders.
[2023-02-07 04:58:57,157 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is sat
[2023-02-07 04:58:57,338 INFO  L130   FreeRefinementEngine]: Strategy CAMEL found a feasible trace
[2023-02-07 04:58:57,338 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2023-02-07 04:58:57,339 INFO  L85        PathProgramCache]: Analyzing trace with hash 1128084386, now seen corresponding path program 1 times
[2023-02-07 04:58:57,339 INFO  L118   FreeRefinementEngine]: Executing refinement strategy CAMEL
[2023-02-07 04:58:57,339 INFO  L333   FreeRefinementEngine]: Using trace check IpTcStrategyModuleSmtInterpolCraig [1332154873]
[2023-02-07 04:58:57,339 INFO  L95    rtionOrderModulation]: Keeping assertion order NOT_INCREMENTALLY
[2023-02-07 04:58:57,339 INFO  L127          SolverBuilder]: Constructing new instance of SMTInterpol with explicit timeout -1 ms and remaining time -1 ms
[2023-02-07 04:58:57,357 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is sat
[2023-02-07 04:58:57,357 INFO  L352             TraceCheck]: Trace is feasible, we will do another trace check, this time with branch encoders.
[2023-02-07 04:58:57,373 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is sat
[2023-02-07 04:58:57,518 INFO  L130   FreeRefinementEngine]: Strategy CAMEL found a feasible trace
[2023-02-07 04:58:57,518 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2023-02-07 04:58:57,519 INFO  L85        PathProgramCache]: Analyzing trace with hash -1039150288, now seen corresponding path program 1 times
[2023-02-07 04:58:57,519 INFO  L118   FreeRefinementEngine]: Executing refinement strategy CAMEL
[2023-02-07 04:58:57,519 INFO  L333   FreeRefinementEngine]: Using trace check IpTcStrategyModuleSmtInterpolCraig [214953325]
[2023-02-07 04:58:57,519 INFO  L95    rtionOrderModulation]: Keeping assertion order NOT_INCREMENTALLY
[2023-02-07 04:58:57,519 INFO  L127          SolverBuilder]: Constructing new instance of SMTInterpol with explicit timeout -1 ms and remaining time -1 ms
[2023-02-07 04:58:57,560 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-02-07 04:58:57,768 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 2
[2023-02-07 04:58:57,790 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-02-07 04:58:57,857 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 1
[2023-02-07 04:58:57,861 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-02-07 04:58:57,871 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 150
[2023-02-07 04:58:57,872 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-02-07 04:58:57,877 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 1
[2023-02-07 04:58:57,878 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-02-07 04:58:57,879 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 163
[2023-02-07 04:58:57,880 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-02-07 04:58:57,911 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 168
[2023-02-07 04:58:57,918 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-02-07 04:58:57,930 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 4
[2023-02-07 04:58:57,931 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-02-07 04:58:57,932 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 1
[2023-02-07 04:58:57,933 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-02-07 04:58:57,944 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 15
[2023-02-07 04:58:57,947 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-02-07 04:58:57,956 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 44
[2023-02-07 04:58:57,957 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-02-07 04:58:57,967 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 51
[2023-02-07 04:58:57,968 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-02-07 04:58:57,976 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 66
[2023-02-07 04:58:57,978 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-02-07 04:58:57,999 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 249
[2023-02-07 04:58:58,001 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-02-07 04:58:58,002 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 255
[2023-02-07 04:58:58,003 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-02-07 04:58:58,006 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 272
[2023-02-07 04:58:58,027 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-02-07 04:58:58,056 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 1
[2023-02-07 04:58:58,069 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-02-07 04:58:58,079 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 150
[2023-02-07 04:58:58,081 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-02-07 04:58:58,082 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 1
[2023-02-07 04:58:58,083 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-02-07 04:58:58,083 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 163
[2023-02-07 04:58:58,085 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-02-07 04:58:58,086 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 168
[2023-02-07 04:58:58,093 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-02-07 04:58:58,114 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 4
[2023-02-07 04:58:58,116 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-02-07 04:58:58,117 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 1
[2023-02-07 04:58:58,118 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-02-07 04:58:58,118 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 15
[2023-02-07 04:58:58,122 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-02-07 04:58:58,125 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 44
[2023-02-07 04:58:58,126 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-02-07 04:58:58,133 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 51
[2023-02-07 04:58:58,135 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-02-07 04:58:58,137 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 66
[2023-02-07 04:58:58,138 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-02-07 04:58:58,140 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 249
[2023-02-07 04:58:58,141 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-02-07 04:58:58,142 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 255
[2023-02-07 04:58:58,143 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-02-07 04:58:58,144 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2023-02-07 04:58:58,144 INFO  L136   FreeRefinementEngine]: Strategy CAMEL found an infeasible trace
[2023-02-07 04:58:58,145 INFO  L333   FreeRefinementEngine]: Using interpolant generator IpTcStrategyModuleSmtInterpolCraig [214953325]
[2023-02-07 04:58:58,145 INFO  L157   FreeRefinementEngine]: IpTcStrategyModuleSmtInterpolCraig [214953325] provided 1 perfect and 0 imperfect interpolant sequences
[2023-02-07 04:58:58,145 INFO  L184   FreeRefinementEngine]: Found 1 perfect and 0 imperfect interpolant sequences.
[2023-02-07 04:58:58,145 INFO  L197   FreeRefinementEngine]: Number of different interpolants: perfect sequences [19] imperfect sequences [] total 19
[2023-02-07 04:58:58,145 INFO  L121   tionRefinementEngine]: Using interpolant automaton builder IpAbStrategyModuleStraightlineAll [226591196]
[2023-02-07 04:58:58,145 INFO  L85    oduleStraightlineAll]: Using 1 perfect interpolants to construct interpolant automaton
[2023-02-07 04:58:58,146 INFO  L100   FreeRefinementEngine]: Using predicate unifier PredicateUnifier provided by strategy CAMEL
[2023-02-07 04:58:58,146 INFO  L143   InterpolantAutomaton]: Constructing interpolant automaton starting with 19 interpolants.
[2023-02-07 04:58:58,146 INFO  L145   InterpolantAutomaton]: CoverageRelationStatistics Valid=57, Invalid=285, Unknown=0, NotChecked=0, Total=342
[2023-02-07 04:58:58,146 INFO  L87              Difference]: Start difference. First operand 1171 states and 1229 transitions. cyclomatic complexity: 59 Second operand  has 19 states, 19 states have (on average 25.473684210526315) internal successors, (484), 9 states have internal predecessors, (484), 5 states have call successors, (29), 12 states have call predecessors, (29), 5 states have return successors, (28), 7 states have call predecessors, (28), 5 states have call successors, (28)
[2023-02-07 04:59:03,551 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2023-02-07 04:59:03,551 INFO  L93              Difference]: Finished difference Result 2241 states and 2414 transitions.
[2023-02-07 04:59:03,551 INFO  L141   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 70 states. 
[2023-02-07 04:59:03,552 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2241 states and 2414 transitions.
[2023-02-07 04:59:03,558 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 30
[2023-02-07 04:59:03,565 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2241 states to 2241 states and 2414 transitions.
[2023-02-07 04:59:03,565 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2023-02-07 04:59:03,566 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 4
[2023-02-07 04:59:03,566 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2241 states and 2414 transitions.
[2023-02-07 04:59:03,568 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2023-02-07 04:59:03,568 INFO  L369   hiAutomatonCegarLoop]: Abstraction has 2241 states and 2414 transitions.
[2023-02-07 04:59:03,569 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2241 states and 2414 transitions.
[2023-02-07 04:59:03,589 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2241 to 2065.
[2023-02-07 04:59:03,591 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand  has 2065 states, 1774 states have (on average 1.0462232243517475) internal successors, (1856), 1780 states have internal predecessors, (1856), 147 states have call successors, (147), 127 states have call predecessors, (147), 144 states have return successors, (181), 158 states have call predecessors, (181), 146 states have call successors, (181)
[2023-02-07 04:59:03,595 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2065 states to 2065 states and 2184 transitions.
[2023-02-07 04:59:03,595 INFO  L392   hiAutomatonCegarLoop]: Abstraction has 2065 states and 2184 transitions.
[2023-02-07 04:59:03,595 INFO  L399   stractBuchiCegarLoop]: Abstraction has 2065 states and 2184 transitions.
[2023-02-07 04:59:03,595 INFO  L287   stractBuchiCegarLoop]: ======== Iteration 5 ============
[2023-02-07 04:59:03,595 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2065 states and 2184 transitions.
[2023-02-07 04:59:03,598 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 15
[2023-02-07 04:59:03,598 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2023-02-07 04:59:03,599 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2023-02-07 04:59:03,601 INFO  L179   hiAutomatonCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2023-02-07 04:59:03,601 INFO  L180   hiAutomatonCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2023-02-07 04:59:03,603 INFO  L752   eck$LassoCheckResult]: Stem: 13341#ULTIMATE.startENTRY_NONWA [1520] ULTIMATE.startENTRY_NONWA-->L586-1_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 13391#L586-1_T0_init [1494] L586-1_T0_init-->L586_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14369#L586_T0_init [2105] L586_T0_init-->L586_T0_init-D20: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 14409#L586_T0_init-D20 [2227] L586_T0_init-D20-->mainENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14402#mainENTRY_T0_init [1864] mainENTRY_T0_init-->mainENTRY_T0_init-D38: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 14403#mainENTRY_T0_init-D38 [1636] mainENTRY_T0_init-D38-->havocProcedureENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14627#havocProcedureENTRY_T0_init [1671] havocProcedureENTRY_T0_init-->L421_T0_init: Formula: (not v_drop_12)  InVars {}  OutVars{drop=v_drop_12}  AuxVars[]  AssignedVars[drop] 14626#L421_T0_init [2201] L421_T0_init-->L422_T0_init: Formula: (not v_forward_17)  InVars {}  OutVars{forward=v_forward_17}  AuxVars[]  AssignedVars[forward] 14625#L422_T0_init [2151] L422_T0_init-->L423_T0_init: Formula: true  InVars {}  OutVars{standard_metadata.ingress_port=v_standard_metadata.ingress_port_16}  AuxVars[]  AssignedVars[standard_metadata.ingress_port] 14624#L423_T0_init [1949] L423_T0_init-->L424_T0_init: Formula: (and (<= 0 v_standard_metadata.ingress_port_15) (< v_standard_metadata.ingress_port_15 512))  InVars {standard_metadata.ingress_port=v_standard_metadata.ingress_port_15}  OutVars{standard_metadata.ingress_port=v_standard_metadata.ingress_port_15}  AuxVars[]  AssignedVars[] 14623#L424_T0_init [2007] L424_T0_init-->L425_T0_init: Formula: (= v_standard_metadata.egress_spec_16 0)  InVars {}  OutVars{standard_metadata.egress_spec=v_standard_metadata.egress_spec_16}  AuxVars[]  AssignedVars[standard_metadata.egress_spec] 14622#L425_T0_init [1998] L425_T0_init-->L426_T0_init: Formula: (= 0 v_standard_metadata.egress_port_18)  InVars {}  OutVars{standard_metadata.egress_port=v_standard_metadata.egress_port_18}  AuxVars[]  AssignedVars[standard_metadata.egress_port] 14621#L426_T0_init [1739] L426_T0_init-->L427_T0_init: Formula: true  InVars {}  OutVars{standard_metadata.instance_type=v_standard_metadata.instance_type_10}  AuxVars[]  AssignedVars[standard_metadata.instance_type] 14620#L427_T0_init [1475] L427_T0_init-->L428_T0_init: Formula: (and (< v_standard_metadata.instance_type_11 4294967296) (<= 0 v_standard_metadata.instance_type_11))  InVars {standard_metadata.instance_type=v_standard_metadata.instance_type_11}  OutVars{standard_metadata.instance_type=v_standard_metadata.instance_type_11}  AuxVars[]  AssignedVars[] 14619#L428_T0_init [1613] L428_T0_init-->L429_T0_init: Formula: true  InVars {}  OutVars{standard_metadata.packet_length=v_standard_metadata.packet_length_12}  AuxVars[]  AssignedVars[standard_metadata.packet_length] 14618#L429_T0_init [1908] L429_T0_init-->L430_T0_init: Formula: (and (<= 0 v_standard_metadata.packet_length_11) (< v_standard_metadata.packet_length_11 4294967296))  InVars {standard_metadata.packet_length=v_standard_metadata.packet_length_11}  OutVars{standard_metadata.packet_length=v_standard_metadata.packet_length_11}  AuxVars[]  AssignedVars[] 14617#L430_T0_init [1545] L430_T0_init-->L431_T0_init: Formula: true  InVars {}  OutVars{standard_metadata.enq_timestamp=v_standard_metadata.enq_timestamp_10}  AuxVars[]  AssignedVars[standard_metadata.enq_timestamp] 14616#L431_T0_init [1642] L431_T0_init-->L432_T0_init: Formula: (and (<= 0 v_standard_metadata.enq_timestamp_9) (< v_standard_metadata.enq_timestamp_9 4294967296))  InVars {standard_metadata.enq_timestamp=v_standard_metadata.enq_timestamp_9}  OutVars{standard_metadata.enq_timestamp=v_standard_metadata.enq_timestamp_9}  AuxVars[]  AssignedVars[] 14615#L432_T0_init [2160] L432_T0_init-->L433_T0_init: Formula: (= v_standard_metadata.enq_qdepth_9 0)  InVars {}  OutVars{standard_metadata.enq_qdepth=v_standard_metadata.enq_qdepth_9}  AuxVars[]  AssignedVars[standard_metadata.enq_qdepth] 14614#L433_T0_init [1815] L433_T0_init-->L434_T0_init: Formula: true  InVars {}  OutVars{standard_metadata.deq_timedelta=v_standard_metadata.deq_timedelta_12}  AuxVars[]  AssignedVars[standard_metadata.deq_timedelta] 14613#L434_T0_init [2053] L434_T0_init-->L435_T0_init: Formula: (and (<= 0 v_standard_metadata.deq_timedelta_11) (< v_standard_metadata.deq_timedelta_11 4294967296))  InVars {standard_metadata.deq_timedelta=v_standard_metadata.deq_timedelta_11}  OutVars{standard_metadata.deq_timedelta=v_standard_metadata.deq_timedelta_11}  AuxVars[]  AssignedVars[] 14612#L435_T0_init [1534] L435_T0_init-->L436_T0_init: Formula: true  InVars {}  OutVars{standard_metadata.deq_qdepth=v_standard_metadata.deq_qdepth_10}  AuxVars[]  AssignedVars[standard_metadata.deq_qdepth] 14611#L436_T0_init [2057] L436_T0_init-->L437_T0_init: Formula: (and (< v_standard_metadata.deq_qdepth_11 524288) (<= 0 v_standard_metadata.deq_qdepth_11))  InVars {standard_metadata.deq_qdepth=v_standard_metadata.deq_qdepth_11}  OutVars{standard_metadata.deq_qdepth=v_standard_metadata.deq_qdepth_11}  AuxVars[]  AssignedVars[] 14610#L437_T0_init [1659] L437_T0_init-->L438_T0_init: Formula: true  InVars {}  OutVars{standard_metadata.ingress_global_timestamp=v_standard_metadata.ingress_global_timestamp_11}  AuxVars[]  AssignedVars[standard_metadata.ingress_global_timestamp] 14609#L438_T0_init [1627] L438_T0_init-->L439_T0_init: Formula: (and (<= 0 v_standard_metadata.ingress_global_timestamp_12) (< v_standard_metadata.ingress_global_timestamp_12 281474976710656))  InVars {standard_metadata.ingress_global_timestamp=v_standard_metadata.ingress_global_timestamp_12}  OutVars{standard_metadata.ingress_global_timestamp=v_standard_metadata.ingress_global_timestamp_12}  AuxVars[]  AssignedVars[] 14608#L439_T0_init [2231] L439_T0_init-->L440_T0_init: Formula: true  InVars {}  OutVars{standard_metadata.egress_global_timestamp=v_standard_metadata.egress_global_timestamp_11}  AuxVars[]  AssignedVars[standard_metadata.egress_global_timestamp] 14607#L440_T0_init [1488] L440_T0_init-->L441_T0_init: Formula: (and (<= 0 v_standard_metadata.egress_global_timestamp_12) (< v_standard_metadata.egress_global_timestamp_12 281474976710656))  InVars {standard_metadata.egress_global_timestamp=v_standard_metadata.egress_global_timestamp_12}  OutVars{standard_metadata.egress_global_timestamp=v_standard_metadata.egress_global_timestamp_12}  AuxVars[]  AssignedVars[] 14606#L441_T0_init [1497] L441_T0_init-->L442_T0_init: Formula: (= 0 v_standard_metadata.mcast_grp_8)  InVars {}  OutVars{standard_metadata.mcast_grp=v_standard_metadata.mcast_grp_8}  AuxVars[]  AssignedVars[standard_metadata.mcast_grp] 14605#L442_T0_init [1783] L442_T0_init-->L443_T0_init: Formula: (= v_standard_metadata.egress_rid_9 0)  InVars {}  OutVars{standard_metadata.egress_rid=v_standard_metadata.egress_rid_9}  AuxVars[]  AssignedVars[standard_metadata.egress_rid] 14604#L443_T0_init [1900] L443_T0_init-->L444_T0_init: Formula: (= v_standard_metadata.checksum_error_8 0)  InVars {}  OutVars{standard_metadata.checksum_error=v_standard_metadata.checksum_error_8}  AuxVars[]  AssignedVars[standard_metadata.checksum_error] 14603#L444_T0_init [1711] L444_T0_init-->L445_T0_init: Formula: (= v_standard_metadata.parser_error_9 0)  InVars {}  OutVars{standard_metadata.parser_error=v_standard_metadata.parser_error_9}  AuxVars[]  AssignedVars[standard_metadata.parser_error] 14602#L445_T0_init [2251] L445_T0_init-->L446_T0_init: Formula: (= v_standard_metadata.priority_9 0)  InVars {}  OutVars{standard_metadata.priority=v_standard_metadata.priority_9}  AuxVars[]  AssignedVars[standard_metadata.priority] 14601#L446_T0_init [2120] L446_T0_init-->L447_T0_init: Formula: (not v_hdr.ethernet.valid_13)  InVars {}  OutVars{hdr.ethernet.valid=v_hdr.ethernet.valid_13}  AuxVars[]  AssignedVars[hdr.ethernet.valid] 14600#L447_T0_init [1771] L447_T0_init-->L448_T0_init: Formula: (= v_emit_37 (store v_emit_38 v_hdr.ethernet_3 false))  InVars {emit=v_emit_38, hdr.ethernet=v_hdr.ethernet_3}  OutVars{emit=v_emit_37, hdr.ethernet=v_hdr.ethernet_3}  AuxVars[]  AssignedVars[emit] 14599#L448_T0_init [1833] L448_T0_init-->L449_T0_init: Formula: true  InVars {}  OutVars{hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_27}  AuxVars[]  AssignedVars[hdr.ethernet.dstAddr] 14598#L449_T0_init [2216] L449_T0_init-->L450_T0_init: Formula: (= v_hdr.ethernet.dstAddr_29 v__old_hdr.ethernet.dstAddr_12)  InVars {hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_29}  OutVars{_old_hdr.ethernet.dstAddr=v__old_hdr.ethernet.dstAddr_12, hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_29}  AuxVars[]  AssignedVars[_old_hdr.ethernet.dstAddr] 14597#L450_T0_init [1701] L450_T0_init-->L451_T0_init: Formula: (= v_hdr.ethernet.dstAddr_30 v__old_hdr.ethernet.dstAddr_13)  InVars {hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_30}  OutVars{_old_hdr.ethernet.dstAddr=v__old_hdr.ethernet.dstAddr_13, hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_30}  AuxVars[]  AssignedVars[_old_hdr.ethernet.dstAddr] 14596#L451_T0_init [2155] L451_T0_init-->L452_T0_init: Formula: true  InVars {}  OutVars{hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_22}  AuxVars[]  AssignedVars[hdr.ethernet.srcAddr] 14595#L452_T0_init [1964] L452_T0_init-->L453_T0_init: Formula: (= v_hdr.ethernet.srcAddr_27 v__old_hdr.ethernet.srcAddr_13)  InVars {hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_27}  OutVars{hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_27, _old_hdr.ethernet.srcAddr=v__old_hdr.ethernet.srcAddr_13}  AuxVars[]  AssignedVars[_old_hdr.ethernet.srcAddr] 14594#L453_T0_init [1958] L453_T0_init-->L454_T0_init: Formula: (= v_hdr.ethernet.srcAddr_25 v__old_hdr.ethernet.srcAddr_12)  InVars {hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_25}  OutVars{hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_25, _old_hdr.ethernet.srcAddr=v__old_hdr.ethernet.srcAddr_12}  AuxVars[]  AssignedVars[_old_hdr.ethernet.srcAddr] 14593#L454_T0_init [1770] L454_T0_init-->L455_T0_init: Formula: true  InVars {}  OutVars{hdr.ethernet.etherType=v_hdr.ethernet.etherType_24}  AuxVars[]  AssignedVars[hdr.ethernet.etherType] 14592#L455_T0_init [1870] L455_T0_init-->L456_T0_init: Formula: (and (<= 0 v_hdr.ethernet.etherType_25) (< v_hdr.ethernet.etherType_25 65536))  InVars {hdr.ethernet.etherType=v_hdr.ethernet.etherType_25}  OutVars{hdr.ethernet.etherType=v_hdr.ethernet.etherType_25}  AuxVars[]  AssignedVars[] 14591#L456_T0_init [2121] L456_T0_init-->L457_T0_init: Formula: (not v_hdr.ipv6.valid_17)  InVars {}  OutVars{hdr.ipv6.valid=v_hdr.ipv6.valid_17}  AuxVars[]  AssignedVars[hdr.ipv6.valid] 14590#L457_T0_init [1901] L457_T0_init-->L458_T0_init: Formula: (= v_emit_41 (store v_emit_42 v_hdr.ipv6_10 false))  InVars {emit=v_emit_42, hdr.ipv6=v_hdr.ipv6_10}  OutVars{emit=v_emit_41, hdr.ipv6=v_hdr.ipv6_10}  AuxVars[]  AssignedVars[emit] 14589#L458_T0_init [1803] L458_T0_init-->L459_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv6.version=v_hdr.ipv6.version_18}  AuxVars[]  AssignedVars[hdr.ipv6.version] 14588#L459_T0_init [2031] L459_T0_init-->L460_T0_init: Formula: (and (<= 0 v_hdr.ipv6.version_17) (< v_hdr.ipv6.version_17 16))  InVars {hdr.ipv6.version=v_hdr.ipv6.version_17}  OutVars{hdr.ipv6.version=v_hdr.ipv6.version_17}  AuxVars[]  AssignedVars[] 14587#L460_T0_init [1599] L460_T0_init-->L461_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv6.trafclass=v_hdr.ipv6.trafclass_12}  AuxVars[]  AssignedVars[hdr.ipv6.trafclass] 14586#L461_T0_init [1539] L461_T0_init-->L462_T0_init: Formula: (and (< v_hdr.ipv6.trafclass_11 256) (<= 0 v_hdr.ipv6.trafclass_11))  InVars {hdr.ipv6.trafclass=v_hdr.ipv6.trafclass_11}  OutVars{hdr.ipv6.trafclass=v_hdr.ipv6.trafclass_11}  AuxVars[]  AssignedVars[] 14585#L462_T0_init [1654] L462_T0_init-->L463_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv6.flowlabel=v_hdr.ipv6.flowlabel_9}  AuxVars[]  AssignedVars[hdr.ipv6.flowlabel] 14584#L463_T0_init [1484] L463_T0_init-->L464_T0_init: Formula: (and (<= 0 v_hdr.ipv6.flowlabel_12) (< v_hdr.ipv6.flowlabel_12 1048576))  InVars {hdr.ipv6.flowlabel=v_hdr.ipv6.flowlabel_12}  OutVars{hdr.ipv6.flowlabel=v_hdr.ipv6.flowlabel_12}  AuxVars[]  AssignedVars[] 14583#L464_T0_init [1528] L464_T0_init-->L465_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv6.payloadlen=v_hdr.ipv6.payloadlen_18}  AuxVars[]  AssignedVars[hdr.ipv6.payloadlen] 14582#L465_T0_init [1682] L465_T0_init-->L466_T0_init: Formula: (and (<= 0 v_hdr.ipv6.payloadlen_20) (< v_hdr.ipv6.payloadlen_20 65536))  InVars {hdr.ipv6.payloadlen=v_hdr.ipv6.payloadlen_20}  OutVars{hdr.ipv6.payloadlen=v_hdr.ipv6.payloadlen_20}  AuxVars[]  AssignedVars[] 14581#L466_T0_init [1760] L466_T0_init-->L467_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv6.nextheader=v_hdr.ipv6.nextheader_22}  AuxVars[]  AssignedVars[hdr.ipv6.nextheader] 14580#L467_T0_init [1735] L467_T0_init-->L468_T0_init: Formula: (and (< v_hdr.ipv6.nextheader_19 256) (<= 0 v_hdr.ipv6.nextheader_19))  InVars {hdr.ipv6.nextheader=v_hdr.ipv6.nextheader_19}  OutVars{hdr.ipv6.nextheader=v_hdr.ipv6.nextheader_19}  AuxVars[]  AssignedVars[] 14579#L468_T0_init [1839] L468_T0_init-->L469_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv6.hoplimit=v_hdr.ipv6.hoplimit_19}  AuxVars[]  AssignedVars[hdr.ipv6.hoplimit] 14578#L469_T0_init [1913] L469_T0_init-->L470_T0_init: Formula: (and (<= 0 v_hdr.ipv6.hoplimit_18) (< v_hdr.ipv6.hoplimit_18 256))  InVars {hdr.ipv6.hoplimit=v_hdr.ipv6.hoplimit_18}  OutVars{hdr.ipv6.hoplimit=v_hdr.ipv6.hoplimit_18}  AuxVars[]  AssignedVars[] 14577#L470_T0_init [2165] L470_T0_init-->L471_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv6.srcAddr=v_hdr.ipv6.srcAddr_16}  AuxVars[]  AssignedVars[hdr.ipv6.srcAddr] 14576#L471_T0_init [1460] L471_T0_init-->L472_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv6.dstAddr=v_hdr.ipv6.dstAddr_16}  AuxVars[]  AssignedVars[hdr.ipv6.dstAddr] 14575#L472_T0_init [1722] L472_T0_init-->L473_T0_init: Formula: (not v_hdr.ipv4_tunnel.valid_19)  InVars {}  OutVars{hdr.ipv4_tunnel.valid=v_hdr.ipv4_tunnel.valid_19}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.valid] 14574#L473_T0_init [1580] L473_T0_init-->L474_T0_init: Formula: (= v_emit_39 (store v_emit_40 v_hdr.ipv4_tunnel_9 false))  InVars {emit=v_emit_40, hdr.ipv4_tunnel=v_hdr.ipv4_tunnel_9}  OutVars{emit=v_emit_39, hdr.ipv4_tunnel=v_hdr.ipv4_tunnel_9}  AuxVars[]  AssignedVars[emit] 14573#L474_T0_init [1568] L474_T0_init-->L475_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.version=v_hdr.ipv4_tunnel.version_16}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.version] 14572#L475_T0_init [1816] L475_T0_init-->L476_T0_init: Formula: (and (<= 0 v_hdr.ipv4_tunnel.version_17) (< v_hdr.ipv4_tunnel.version_17 16))  InVars {hdr.ipv4_tunnel.version=v_hdr.ipv4_tunnel.version_17}  OutVars{hdr.ipv4_tunnel.version=v_hdr.ipv4_tunnel.version_17}  AuxVars[]  AssignedVars[] 14571#L476_T0_init [1885] L476_T0_init-->L477_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.ihl=v_hdr.ipv4_tunnel.ihl_14}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.ihl] 14570#L477_T0_init [1459] L477_T0_init-->L478_T0_init: Formula: (and (< v_hdr.ipv4_tunnel.ihl_17 16) (<= 0 v_hdr.ipv4_tunnel.ihl_17))  InVars {hdr.ipv4_tunnel.ihl=v_hdr.ipv4_tunnel.ihl_17}  OutVars{hdr.ipv4_tunnel.ihl=v_hdr.ipv4_tunnel.ihl_17}  AuxVars[]  AssignedVars[] 14569#L478_T0_init [1744] L478_T0_init-->L479_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.diffserv=v_hdr.ipv4_tunnel.diffserv_15}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.diffserv] 14568#L479_T0_init [1664] L479_T0_init-->L480_T0_init: Formula: (and (< v_hdr.ipv4_tunnel.diffserv_14 256) (<= 0 v_hdr.ipv4_tunnel.diffserv_14))  InVars {hdr.ipv4_tunnel.diffserv=v_hdr.ipv4_tunnel.diffserv_14}  OutVars{hdr.ipv4_tunnel.diffserv=v_hdr.ipv4_tunnel.diffserv_14}  AuxVars[]  AssignedVars[] 14567#L480_T0_init [1602] L480_T0_init-->L481_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.totalLen=v_hdr.ipv4_tunnel.totalLen_14}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.totalLen] 14566#L481_T0_init [2263] L481_T0_init-->L482_T0_init: Formula: (and (< v_hdr.ipv4_tunnel.totalLen_17 65536) (<= 0 v_hdr.ipv4_tunnel.totalLen_17))  InVars {hdr.ipv4_tunnel.totalLen=v_hdr.ipv4_tunnel.totalLen_17}  OutVars{hdr.ipv4_tunnel.totalLen=v_hdr.ipv4_tunnel.totalLen_17}  AuxVars[]  AssignedVars[] 14565#L482_T0_init [1709] L482_T0_init-->L483_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.identification=v_hdr.ipv4_tunnel.identification_15}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.identification] 14564#L483_T0_init [1823] L483_T0_init-->L484_T0_init: Formula: (and (<= 0 v_hdr.ipv4_tunnel.identification_17) (< v_hdr.ipv4_tunnel.identification_17 65536))  InVars {hdr.ipv4_tunnel.identification=v_hdr.ipv4_tunnel.identification_17}  OutVars{hdr.ipv4_tunnel.identification=v_hdr.ipv4_tunnel.identification_17}  AuxVars[]  AssignedVars[] 14563#L484_T0_init [1910] L484_T0_init-->L485_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.flags=v_hdr.ipv4_tunnel.flags_16}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.flags] 14561#L485_T0_init [1647] L485_T0_init-->L486_T0_init: Formula: (and (< v_hdr.ipv4_tunnel.flags_15 8) (<= 0 v_hdr.ipv4_tunnel.flags_15))  InVars {hdr.ipv4_tunnel.flags=v_hdr.ipv4_tunnel.flags_15}  OutVars{hdr.ipv4_tunnel.flags=v_hdr.ipv4_tunnel.flags_15}  AuxVars[]  AssignedVars[] 14559#L486_T0_init [1904] L486_T0_init-->L487_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.fragOffset=v_hdr.ipv4_tunnel.fragOffset_17}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.fragOffset] 14557#L487_T0_init [2094] L487_T0_init-->L488_T0_init: Formula: (and (< v_hdr.ipv4_tunnel.fragOffset_16 8192) (<= 0 v_hdr.ipv4_tunnel.fragOffset_16))  InVars {hdr.ipv4_tunnel.fragOffset=v_hdr.ipv4_tunnel.fragOffset_16}  OutVars{hdr.ipv4_tunnel.fragOffset=v_hdr.ipv4_tunnel.fragOffset_16}  AuxVars[]  AssignedVars[] 14555#L488_T0_init [2161] L488_T0_init-->L489_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.ttl=v_hdr.ipv4_tunnel.ttl_14}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.ttl] 14553#L489_T0_init [2081] L489_T0_init-->L490_T0_init: Formula: (and (< v_hdr.ipv4_tunnel.ttl_16 256) (<= 0 v_hdr.ipv4_tunnel.ttl_16))  InVars {hdr.ipv4_tunnel.ttl=v_hdr.ipv4_tunnel.ttl_16}  OutVars{hdr.ipv4_tunnel.ttl=v_hdr.ipv4_tunnel.ttl_16}  AuxVars[]  AssignedVars[] 14551#L490_T0_init [1489] L490_T0_init-->L491_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.protocol=v_hdr.ipv4_tunnel.protocol_17}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.protocol] 14549#L491_T0_init [2221] L491_T0_init-->L492_T0_init: Formula: (and (< v_hdr.ipv4_tunnel.protocol_16 256) (<= 0 v_hdr.ipv4_tunnel.protocol_16))  InVars {hdr.ipv4_tunnel.protocol=v_hdr.ipv4_tunnel.protocol_16}  OutVars{hdr.ipv4_tunnel.protocol=v_hdr.ipv4_tunnel.protocol_16}  AuxVars[]  AssignedVars[] 14547#L492_T0_init [2220] L492_T0_init-->L493_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.hdrChecksum=v_hdr.ipv4_tunnel.hdrChecksum_11}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.hdrChecksum] 14545#L493_T0_init [2277] L493_T0_init-->L494_T0_init: Formula: (and (<= 0 v_hdr.ipv4_tunnel.hdrChecksum_12) (< v_hdr.ipv4_tunnel.hdrChecksum_12 65536))  InVars {hdr.ipv4_tunnel.hdrChecksum=v_hdr.ipv4_tunnel.hdrChecksum_12}  OutVars{hdr.ipv4_tunnel.hdrChecksum=v_hdr.ipv4_tunnel.hdrChecksum_12}  AuxVars[]  AssignedVars[] 14543#L494_T0_init [2126] L494_T0_init-->L495_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.srcAddr=v_hdr.ipv4_tunnel.srcAddr_13}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.srcAddr] 14541#L495_T0_init [1493] L495_T0_init-->L496_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.dstAddr=v_hdr.ipv4_tunnel.dstAddr_13}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.dstAddr] 14537#L496_T0_init [1517] L496_T0_init-->L497_T0_init: Formula: (not v_hdr.ipv4.valid_25)  InVars {}  OutVars{hdr.ipv4.valid=v_hdr.ipv4.valid_25}  AuxVars[]  AssignedVars[hdr.ipv4.valid] 14536#L497_T0_init [1794] L497_T0_init-->L498_T0_init: Formula: (= v_emit_27 (store v_emit_28 v_hdr.ipv4_2 false))  InVars {hdr.ipv4=v_hdr.ipv4_2, emit=v_emit_28}  OutVars{hdr.ipv4=v_hdr.ipv4_2, emit=v_emit_27}  AuxVars[]  AssignedVars[emit] 14535#L498_T0_init [2117] L498_T0_init-->L499_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.version=v_hdr.ipv4.version_13}  AuxVars[]  AssignedVars[hdr.ipv4.version] 14534#L499_T0_init [1696] L499_T0_init-->L500_T0_init: Formula: (and (< v_hdr.ipv4.version_10 16) (<= 0 v_hdr.ipv4.version_10))  InVars {hdr.ipv4.version=v_hdr.ipv4.version_10}  OutVars{hdr.ipv4.version=v_hdr.ipv4.version_10}  AuxVars[]  AssignedVars[] 14533#L500_T0_init [2045] L500_T0_init-->L501_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.ihl=v_hdr.ipv4.ihl_9}  AuxVars[]  AssignedVars[hdr.ipv4.ihl] 14532#L501_T0_init [2140] L501_T0_init-->L502_T0_init: Formula: (and (< v_hdr.ipv4.ihl_10 16) (<= 0 v_hdr.ipv4.ihl_10))  InVars {hdr.ipv4.ihl=v_hdr.ipv4.ihl_10}  OutVars{hdr.ipv4.ihl=v_hdr.ipv4.ihl_10}  AuxVars[]  AssignedVars[] 14531#L502_T0_init [2067] L502_T0_init-->L503_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.diffserv=v_hdr.ipv4.diffserv_13}  AuxVars[]  AssignedVars[hdr.ipv4.diffserv] 14530#L503_T0_init [2009] L503_T0_init-->L504_T0_init: Formula: (and (<= 0 v_hdr.ipv4.diffserv_12) (< v_hdr.ipv4.diffserv_12 256))  InVars {hdr.ipv4.diffserv=v_hdr.ipv4.diffserv_12}  OutVars{hdr.ipv4.diffserv=v_hdr.ipv4.diffserv_12}  AuxVars[]  AssignedVars[] 14529#L504_T0_init [1875] L504_T0_init-->L505_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.totalLen=v_hdr.ipv4.totalLen_14}  AuxVars[]  AssignedVars[hdr.ipv4.totalLen] 14528#L505_T0_init [1486] L505_T0_init-->L506_T0_init: Formula: (and (< v_hdr.ipv4.totalLen_15 65536) (<= 0 v_hdr.ipv4.totalLen_15))  InVars {hdr.ipv4.totalLen=v_hdr.ipv4.totalLen_15}  OutVars{hdr.ipv4.totalLen=v_hdr.ipv4.totalLen_15}  AuxVars[]  AssignedVars[] 14527#L506_T0_init [2122] L506_T0_init-->L507_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.identification=v_hdr.ipv4.identification_12}  AuxVars[]  AssignedVars[hdr.ipv4.identification] 14526#L507_T0_init [1914] L507_T0_init-->L508_T0_init: Formula: (and (< v_hdr.ipv4.identification_11 65536) (<= 0 v_hdr.ipv4.identification_11))  InVars {hdr.ipv4.identification=v_hdr.ipv4.identification_11}  OutVars{hdr.ipv4.identification=v_hdr.ipv4.identification_11}  AuxVars[]  AssignedVars[] 14525#L508_T0_init [2054] L508_T0_init-->L509_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.flags=v_hdr.ipv4.flags_10}  AuxVars[]  AssignedVars[hdr.ipv4.flags] 14524#L509_T0_init [2246] L509_T0_init-->L510_T0_init: Formula: (and (< v_hdr.ipv4.flags_13 8) (<= 0 v_hdr.ipv4.flags_13))  InVars {hdr.ipv4.flags=v_hdr.ipv4.flags_13}  OutVars{hdr.ipv4.flags=v_hdr.ipv4.flags_13}  AuxVars[]  AssignedVars[] 14523#L510_T0_init [1529] L510_T0_init-->L511_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.fragOffset=v_hdr.ipv4.fragOffset_11}  AuxVars[]  AssignedVars[hdr.ipv4.fragOffset] 14522#L511_T0_init [1817] L511_T0_init-->L512_T0_init: Formula: (and (< v_hdr.ipv4.fragOffset_10 8192) (<= 0 v_hdr.ipv4.fragOffset_10))  InVars {hdr.ipv4.fragOffset=v_hdr.ipv4.fragOffset_10}  OutVars{hdr.ipv4.fragOffset=v_hdr.ipv4.fragOffset_10}  AuxVars[]  AssignedVars[] 14521#L512_T0_init [1615] L512_T0_init-->L513_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.ttl=v_hdr.ipv4.ttl_10}  AuxVars[]  AssignedVars[hdr.ipv4.ttl] 14520#L513_T0_init [2035] L513_T0_init-->L514_T0_init: Formula: (and (<= 0 v_hdr.ipv4.ttl_11) (< v_hdr.ipv4.ttl_11 256))  InVars {hdr.ipv4.ttl=v_hdr.ipv4.ttl_11}  OutVars{hdr.ipv4.ttl=v_hdr.ipv4.ttl_11}  AuxVars[]  AssignedVars[] 14519#L514_T0_init [1706] L514_T0_init-->L515_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.protocol=v_hdr.ipv4.protocol_12}  AuxVars[]  AssignedVars[hdr.ipv4.protocol] 14518#L515_T0_init [1778] L515_T0_init-->L516_T0_init: Formula: (and (<= 0 v_hdr.ipv4.protocol_14) (< v_hdr.ipv4.protocol_14 256))  InVars {hdr.ipv4.protocol=v_hdr.ipv4.protocol_14}  OutVars{hdr.ipv4.protocol=v_hdr.ipv4.protocol_14}  AuxVars[]  AssignedVars[] 14517#L516_T0_init [2106] L516_T0_init-->L517_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.hdrChecksum=v_hdr.ipv4.hdrChecksum_9}  AuxVars[]  AssignedVars[hdr.ipv4.hdrChecksum] 14516#L517_T0_init [1842] L517_T0_init-->L518_T0_init: Formula: (and (< v_hdr.ipv4.hdrChecksum_10 65536) (<= 0 v_hdr.ipv4.hdrChecksum_10))  InVars {hdr.ipv4.hdrChecksum=v_hdr.ipv4.hdrChecksum_10}  OutVars{hdr.ipv4.hdrChecksum=v_hdr.ipv4.hdrChecksum_10}  AuxVars[]  AssignedVars[] 14515#L518_T0_init [1932] L518_T0_init-->L519_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.srcAddr=v_hdr.ipv4.srcAddr_9}  AuxVars[]  AssignedVars[hdr.ipv4.srcAddr] 14514#L519_T0_init [1707] L519_T0_init-->L520_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_16}  AuxVars[]  AssignedVars[hdr.ipv4.dstAddr] 14513#L520_T0_init [1573] L520_T0_init-->L521_T0_init: Formula: (= v_hdr.ipv4.dstAddr_17 v__old_hdr.ipv4.dstAddr_13)  InVars {hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_17}  OutVars{_old_hdr.ipv4.dstAddr=v__old_hdr.ipv4.dstAddr_13, hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_17}  AuxVars[]  AssignedVars[_old_hdr.ipv4.dstAddr] 14512#L521_T0_init [1719] L521_T0_init-->L522_T0_init: Formula: (= v_hdr.ipv4.dstAddr_14 v__old_hdr.ipv4.dstAddr_11)  InVars {hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_14}  OutVars{_old_hdr.ipv4.dstAddr=v__old_hdr.ipv4.dstAddr_11, hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_14}  AuxVars[]  AssignedVars[_old_hdr.ipv4.dstAddr] 14511#L522_T0_init [2065] L522_T0_init-->L523_T0_init: Formula: (not v_hdr.tcp.valid_30)  InVars {}  OutVars{hdr.tcp.valid=v_hdr.tcp.valid_30}  AuxVars[]  AssignedVars[hdr.tcp.valid] 14510#L523_T0_init [1623] L523_T0_init-->L524_T0_init: Formula: (= v_emit_35 (store v_emit_36 v_hdr.tcp_3 false))  InVars {hdr.tcp=v_hdr.tcp_3, emit=v_emit_36}  OutVars{hdr.tcp=v_hdr.tcp_3, emit=v_emit_35}  AuxVars[]  AssignedVars[emit] 14509#L524_T0_init [1458] L524_T0_init-->L525_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.srcport=v_hdr.tcp.srcport_10}  AuxVars[]  AssignedVars[hdr.tcp.srcport] 14508#L525_T0_init [1565] L525_T0_init-->L526_T0_init: Formula: (and (<= 0 v_hdr.tcp.srcport_12) (< v_hdr.tcp.srcport_12 65536))  InVars {hdr.tcp.srcport=v_hdr.tcp.srcport_12}  OutVars{hdr.tcp.srcport=v_hdr.tcp.srcport_12}  AuxVars[]  AssignedVars[] 14507#L526_T0_init [1882] L526_T0_init-->L527_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.dstport=v_hdr.tcp.dstport_9}  AuxVars[]  AssignedVars[hdr.tcp.dstport] 14506#L527_T0_init [1725] L527_T0_init-->L528_T0_init: Formula: (and (< v_hdr.tcp.dstport_10 65536) (<= 0 v_hdr.tcp.dstport_10))  InVars {hdr.tcp.dstport=v_hdr.tcp.dstport_10}  OutVars{hdr.tcp.dstport=v_hdr.tcp.dstport_10}  AuxVars[]  AssignedVars[] 14505#L528_T0_init [1837] L528_T0_init-->L529_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.sequence=v_hdr.tcp.sequence_43}  AuxVars[]  AssignedVars[hdr.tcp.sequence] 14504#L529_T0_init [1941] L529_T0_init-->L530_T0_init: Formula: (and (< v_hdr.tcp.sequence_44 4294967296) (<= 0 v_hdr.tcp.sequence_44))  InVars {hdr.tcp.sequence=v_hdr.tcp.sequence_44}  OutVars{hdr.tcp.sequence=v_hdr.tcp.sequence_44}  AuxVars[]  AssignedVars[] 14503#L530_T0_init [1620] L530_T0_init-->L531_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.ackseq=v_hdr.tcp.ackseq_41}  AuxVars[]  AssignedVars[hdr.tcp.ackseq] 14502#L531_T0_init [1481] L531_T0_init-->L532_T0_init: Formula: (and (< v_hdr.tcp.ackseq_43 4294967296) (<= 0 v_hdr.tcp.ackseq_43))  InVars {hdr.tcp.ackseq=v_hdr.tcp.ackseq_43}  OutVars{hdr.tcp.ackseq=v_hdr.tcp.ackseq_43}  AuxVars[]  AssignedVars[] 14501#L532_T0_init [2244] L532_T0_init-->L533_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.headerlength=v_hdr.tcp.headerlength_10}  AuxVars[]  AssignedVars[hdr.tcp.headerlength] 14500#L533_T0_init [2188] L533_T0_init-->L534_T0_init: Formula: (and (< v_hdr.tcp.headerlength_9 16) (<= 0 v_hdr.tcp.headerlength_9))  InVars {hdr.tcp.headerlength=v_hdr.tcp.headerlength_9}  OutVars{hdr.tcp.headerlength=v_hdr.tcp.headerlength_9}  AuxVars[]  AssignedVars[] 14499#L534_T0_init [1622] L534_T0_init-->L535_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.reservation=v_hdr.tcp.reservation_11}  AuxVars[]  AssignedVars[hdr.tcp.reservation] 14498#L535_T0_init [2196] L535_T0_init-->L536_T0_init: Formula: (and (< v_hdr.tcp.reservation_9 64) (<= 0 v_hdr.tcp.reservation_9))  InVars {hdr.tcp.reservation=v_hdr.tcp.reservation_9}  OutVars{hdr.tcp.reservation=v_hdr.tcp.reservation_9}  AuxVars[]  AssignedVars[] 14497#L536_T0_init [1653] L536_T0_init-->L537_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.URG=v_hdr.tcp.URG_11}  AuxVars[]  AssignedVars[hdr.tcp.URG] 14496#L537_T0_init [1942] L537_T0_init-->L538_T0_init: Formula: (and (<= 0 v_hdr.tcp.URG_10) (< v_hdr.tcp.URG_10 2))  InVars {hdr.tcp.URG=v_hdr.tcp.URG_10}  OutVars{hdr.tcp.URG=v_hdr.tcp.URG_10}  AuxVars[]  AssignedVars[] 14495#L538_T0_init [1944] L538_T0_init-->L539_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.ACK=v_hdr.tcp.ACK_11}  AuxVars[]  AssignedVars[hdr.tcp.ACK] 14494#L539_T0_init [2252] L539_T0_init-->L540_T0_init: Formula: (and (<= 0 v_hdr.tcp.ACK_9) (< v_hdr.tcp.ACK_9 2))  InVars {hdr.tcp.ACK=v_hdr.tcp.ACK_9}  OutVars{hdr.tcp.ACK=v_hdr.tcp.ACK_9}  AuxVars[]  AssignedVars[] 14493#L540_T0_init [1986] L540_T0_init-->L541_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.PSH=v_hdr.tcp.PSH_12}  AuxVars[]  AssignedVars[hdr.tcp.PSH] 14492#L541_T0_init [2141] L541_T0_init-->L542_T0_init: Formula: (and (<= 0 v_hdr.tcp.PSH_10) (< v_hdr.tcp.PSH_10 2))  InVars {hdr.tcp.PSH=v_hdr.tcp.PSH_10}  OutVars{hdr.tcp.PSH=v_hdr.tcp.PSH_10}  AuxVars[]  AssignedVars[] 14491#L542_T0_init [2128] L542_T0_init-->L543_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.RST=v_hdr.tcp.RST_10}  AuxVars[]  AssignedVars[hdr.tcp.RST] 14490#L543_T0_init [2131] L543_T0_init-->L544_T0_init: Formula: (and (<= 0 v_hdr.tcp.RST_11) (< v_hdr.tcp.RST_11 2))  InVars {hdr.tcp.RST=v_hdr.tcp.RST_11}  OutVars{hdr.tcp.RST=v_hdr.tcp.RST_11}  AuxVars[]  AssignedVars[] 14488#L544_T0_init [2168] L544_T0_init-->L545_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.SYN=v_hdr.tcp.SYN_12}  AuxVars[]  AssignedVars[hdr.tcp.SYN] 14486#L545_T0_init [1983] L545_T0_init-->L546_T0_init: Formula: (and (<= 0 v_hdr.tcp.SYN_11) (< v_hdr.tcp.SYN_11 2))  InVars {hdr.tcp.SYN=v_hdr.tcp.SYN_11}  OutVars{hdr.tcp.SYN=v_hdr.tcp.SYN_11}  AuxVars[]  AssignedVars[] 14485#L546_T0_init [2272] L546_T0_init-->L547_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.FIN=v_hdr.tcp.FIN_11}  AuxVars[]  AssignedVars[hdr.tcp.FIN] 14484#L547_T0_init [1996] L547_T0_init-->L548_T0_init: Formula: (and (< v_hdr.tcp.FIN_12 2) (<= 0 v_hdr.tcp.FIN_12))  InVars {hdr.tcp.FIN=v_hdr.tcp.FIN_12}  OutVars{hdr.tcp.FIN=v_hdr.tcp.FIN_12}  AuxVars[]  AssignedVars[] 14483#L548_T0_init [1829] L548_T0_init-->L549_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.windowsize=v_hdr.tcp.windowsize_10}  AuxVars[]  AssignedVars[hdr.tcp.windowsize] 14482#L549_T0_init [2207] L549_T0_init-->L550_T0_init: Formula: (and (<= 0 v_hdr.tcp.windowsize_9) (< v_hdr.tcp.windowsize_9 65536))  InVars {hdr.tcp.windowsize=v_hdr.tcp.windowsize_9}  OutVars{hdr.tcp.windowsize=v_hdr.tcp.windowsize_9}  AuxVars[]  AssignedVars[] 14479#L550_T0_init [2197] L550_T0_init-->L551_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.checksum=v_hdr.tcp.checksum_9}  AuxVars[]  AssignedVars[hdr.tcp.checksum] 14478#L551_T0_init [1844] L551_T0_init-->L552_T0_init: Formula: (and (<= 0 v_hdr.tcp.checksum_11) (< v_hdr.tcp.checksum_11 65536))  InVars {hdr.tcp.checksum=v_hdr.tcp.checksum_11}  OutVars{hdr.tcp.checksum=v_hdr.tcp.checksum_11}  AuxVars[]  AssignedVars[] 14474#L552_T0_init [1516] L552_T0_init-->L553_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.pointer=v_hdr.tcp.pointer_12}  AuxVars[]  AssignedVars[hdr.tcp.pointer] 14468#L553_T0_init [1639] L553_T0_init-->L554_T0_init: Formula: (and (<= 0 v_hdr.tcp.pointer_9) (< v_hdr.tcp.pointer_9 65536))  InVars {hdr.tcp.pointer=v_hdr.tcp.pointer_9}  OutVars{hdr.tcp.pointer=v_hdr.tcp.pointer_9}  AuxVars[]  AssignedVars[] 14463#L554_T0_init [1507] L554_T0_init-->L555_T0_init: Formula: (not v_hdr.udp_tunnel.valid_19)  InVars {}  OutVars{hdr.udp_tunnel.valid=v_hdr.udp_tunnel.valid_19}  AuxVars[]  AssignedVars[hdr.udp_tunnel.valid] 14459#L555_T0_init [1731] L555_T0_init-->L556_T0_init: Formula: (= v_emit_19 (store v_emit_20 v_hdr.udp_tunnel_8 false))  InVars {emit=v_emit_20, hdr.udp_tunnel=v_hdr.udp_tunnel_8}  OutVars{emit=v_emit_19, hdr.udp_tunnel=v_hdr.udp_tunnel_8}  AuxVars[]  AssignedVars[emit] 14453#L556_T0_init [2063] L556_T0_init-->L557_T0_init: Formula: true  InVars {}  OutVars{hdr.udp_tunnel.srcport=v_hdr.udp_tunnel.srcport_14}  AuxVars[]  AssignedVars[hdr.udp_tunnel.srcport] 14447#L557_T0_init [2127] L557_T0_init-->L558_T0_init: Formula: (and (<= 0 v_hdr.udp_tunnel.srcport_15) (< v_hdr.udp_tunnel.srcport_15 65536))  InVars {hdr.udp_tunnel.srcport=v_hdr.udp_tunnel.srcport_15}  OutVars{hdr.udp_tunnel.srcport=v_hdr.udp_tunnel.srcport_15}  AuxVars[]  AssignedVars[] 14442#L558_T0_init [1950] L558_T0_init-->L559_T0_init: Formula: true  InVars {}  OutVars{hdr.udp_tunnel.dstport=v_hdr.udp_tunnel.dstport_16}  AuxVars[]  AssignedVars[hdr.udp_tunnel.dstport] 14435#L559_T0_init [1732] L559_T0_init-->L560_T0_init: Formula: (and (< v_hdr.udp_tunnel.dstport_17 65536) (<= 0 v_hdr.udp_tunnel.dstport_17))  InVars {hdr.udp_tunnel.dstport=v_hdr.udp_tunnel.dstport_17}  OutVars{hdr.udp_tunnel.dstport=v_hdr.udp_tunnel.dstport_17}  AuxVars[]  AssignedVars[] 14430#L560_T0_init [2022] L560_T0_init-->L561_T0_init: Formula: true  InVars {}  OutVars{hdr.udp_tunnel.userlength=v_hdr.udp_tunnel.userlength_15}  AuxVars[]  AssignedVars[hdr.udp_tunnel.userlength] 14426#L561_T0_init [1672] L561_T0_init-->L562_T0_init: Formula: (and (<= 0 v_hdr.udp_tunnel.userlength_14) (< v_hdr.udp_tunnel.userlength_14 65536))  InVars {hdr.udp_tunnel.userlength=v_hdr.udp_tunnel.userlength_14}  OutVars{hdr.udp_tunnel.userlength=v_hdr.udp_tunnel.userlength_14}  AuxVars[]  AssignedVars[] 14418#L562_T0_init [1557] L562_T0_init-->L563_T0_init: Formula: true  InVars {}  OutVars{hdr.udp_tunnel.checksum=v_hdr.udp_tunnel.checksum_16}  AuxVars[]  AssignedVars[hdr.udp_tunnel.checksum] 14412#L563_T0_init [1987] L563_T0_init-->havocProcedureFINAL_T0_init: Formula: (and (<= 0 v_hdr.udp_tunnel.checksum_15) (< v_hdr.udp_tunnel.checksum_15 65536))  InVars {hdr.udp_tunnel.checksum=v_hdr.udp_tunnel.checksum_15}  OutVars{hdr.udp_tunnel.checksum=v_hdr.udp_tunnel.checksum_15}  AuxVars[]  AssignedVars[] 14408#havocProcedureFINAL_T0_init [2225] havocProcedureFINAL_T0_init-->havocProcedureEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14401#havocProcedureEXIT_T0_init >[2321] havocProcedureEXIT_T0_init-->L568-D56: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14398#L568-D56 [1897] L568-D56-->L568_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14394#L568_T0_init [2049] L568_T0_init-->L568_T0_init-D50: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 14395#L568_T0_init-D50 [2006] L568_T0_init-D50-->_parser_MyParserENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14406#_parser_MyParserENTRY_T0_init [1616] _parser_MyParserENTRY_T0_init-->_parser_MyParserENTRY_T0_init-D18: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 14407#_parser_MyParserENTRY_T0_init-D18 [1570] _parser_MyParserENTRY_T0_init-D18-->startENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14428#startENTRY_T0_init [2032] startENTRY_T0_init-->L736_T0_init: Formula: v_hdr.ethernet.valid_16  InVars {}  OutVars{hdr.ethernet.valid=v_hdr.ethernet.valid_16}  AuxVars[]  AssignedVars[hdr.ethernet.valid] 14420#L736_T0_init [2125] L736_T0_init-->L739_T0_init: Formula: (not (= v_hdr.ethernet.etherType_37 34525))  InVars {hdr.ethernet.etherType=v_hdr.ethernet.etherType_37}  OutVars{hdr.ethernet.etherType=v_hdr.ethernet.etherType_37}  AuxVars[]  AssignedVars[] 14414#L739_T0_init [1536] L739_T0_init-->L739-1_T0_init: Formula: (not (= v_hdr.ethernet.etherType_33 2048))  InVars {hdr.ethernet.etherType=v_hdr.ethernet.etherType_33}  OutVars{hdr.ethernet.etherType=v_hdr.ethernet.etherType_33}  AuxVars[]  AssignedVars[] 14411#L739-1_T0_init [2115] L739-1_T0_init-->startEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14405#startEXIT_T0_init >[2288] startEXIT_T0_init-->_parser_MyParserFINAL-D66: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14400#_parser_MyParserFINAL-D66 [1668] _parser_MyParserFINAL-D66-->_parser_MyParserFINAL_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14397#_parser_MyParserFINAL_T0_init [2008] _parser_MyParserFINAL_T0_init-->_parser_MyParserEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14393#_parser_MyParserEXIT_T0_init >[2306] _parser_MyParserEXIT_T0_init-->L569-D104: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14391#L569-D104 [2130] L569-D104-->L569_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14375#L569_T0_init [1812] L569_T0_init-->L569_T0_init-D52: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 14376#L569_T0_init-D52 [1845] L569_T0_init-D52-->MyVerifyChecksumFINAL_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14377#MyVerifyChecksumFINAL_T0_init [1936] MyVerifyChecksumFINAL_T0_init-->MyVerifyChecksumEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14374#MyVerifyChecksumEXIT_T0_init >[2382] MyVerifyChecksumEXIT_T0_init-->L570-D74: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14373#L570-D74 [1855] L570-D74-->L570_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13411#L570_T0_init [1464] L570_T0_init-->L570_T0_init-D14: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 14367#L570_T0_init-D14 [2250] L570_T0_init-D14-->MyIngressENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14365#MyIngressENTRY_T0_init [1669] MyIngressENTRY_T0_init-->L259_T0_init: Formula: (= v_standard_metadata.ingress_port_20 0)  InVars {standard_metadata.ingress_port=v_standard_metadata.ingress_port_20}  OutVars{standard_metadata.ingress_port=v_standard_metadata.ingress_port_20}  AuxVars[]  AssignedVars[] 14363#L259_T0_init [1835] L259_T0_init-->L266_T0_init: Formula: (not (= v_hdr.ipv4.dstAddr_19 2071690107))  InVars {hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_19}  OutVars{hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_19}  AuxVars[]  AssignedVars[] 14361#L266_T0_init [2091] L266_T0_init-->L267_T0_init: Formula: (and (not (= v_hdr.ethernet.srcAddr_30 0)) (not (= 281474976710655 v_hdr.ethernet.dstAddr_39)))  InVars {hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_30, hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_39}  OutVars{hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_30, hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_39}  AuxVars[]  AssignedVars[] 14359#L267_T0_init [1689] L267_T0_init-->L267_T0_init-D34: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 14360#L267_T0_init-D34 [1561] L267_T0_init-D34-->store_user_macENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14371#store_user_macENTRY_T0_init [1584] store_user_macENTRY_T0_init-->store_user_macENTRY_T0_init-D40: Formula: (and (= v_user_mac.write_indexInParam_1 0) (= v_hdr.ethernet.srcAddr_21 v_user_mac.write_valueInParam_1))  InVars {hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_21}  OutVars{user_mac.write_value=v_user_mac.write_valueInParam_1, user_mac.write_index=v_user_mac.write_indexInParam_1, hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_21}  AuxVars[]  AssignedVars[user_mac.write_value, user_mac.write_index]< 14372#store_user_macENTRY_T0_init-D40 [1862] store_user_macENTRY_T0_init-D40-->user_mac.writeENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14379#user_mac.writeENTRY_T0_init [1477] user_mac.writeENTRY_T0_init-->user_mac.writeFINAL_T0_init: Formula: (= v_user_mac_18 (store v_user_mac_19 v_user_mac.write_index_3 v_user_mac.write_value_3))  InVars {user_mac.write_value=v_user_mac.write_value_3, user_mac.write_index=v_user_mac.write_index_3, user_mac=v_user_mac_19}  OutVars{user_mac.write_value=v_user_mac.write_value_3, user_mac.write_index=v_user_mac.write_index_3, user_mac=v_user_mac_18}  AuxVars[]  AssignedVars[user_mac] 14378#user_mac.writeFINAL_T0_init [2217] user_mac.writeFINAL_T0_init-->user_mac.writeEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14370#user_mac.writeEXIT_T0_init >[2384] user_mac.writeEXIT_T0_init-->store_user_macFINAL-D64: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: (and (= v_user_mac.write_indexInParam_1 0) (= v_hdr.ethernet.srcAddr_21 v_user_mac.write_valueInParam_1))  InVars {hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_21}  OutVars{user_mac.write_value=v_user_mac.write_valueInParam_1, user_mac.write_index=v_user_mac.write_indexInParam_1, hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_21}  AuxVars[]  AssignedVars[user_mac.write_value, user_mac.write_index] 14368#store_user_macFINAL-D64 [2047] store_user_macFINAL-D64-->store_user_macFINAL_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14366#store_user_macFINAL_T0_init [1991] store_user_macFINAL_T0_init-->store_user_macEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14358#store_user_macEXIT_T0_init >[2359] store_user_macEXIT_T0_init-->L267-1-D68: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14356#L267-1-D68 [2212] L267-1-D68-->L267-1_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14353#L267-1_T0_init [2166] L267-1_T0_init-->L267-1_T0_init-D6: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 14354#L267-1_T0_init-D6 [1831] L267-1_T0_init-D6-->read_esboxENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14469#read_esboxENTRY_T0_init [1720] read_esboxENTRY_T0_init-->L692_T0_init: Formula: (= (mod (div (+ (* (- 1) (mod 0 1)) v_hdr.tcp.sequence_74) 1) 256) v_tmp_0_12)  InVars {hdr.tcp.sequence=v_hdr.tcp.sequence_74}  OutVars{hdr.tcp.sequence=v_hdr.tcp.sequence_74, tmp_0=v_tmp_0_12}  AuxVars[]  AssignedVars[tmp_0] 14464#L692_T0_init [1718] L692_T0_init-->L693_T0_init: Formula: (= (select v_es_box_14 v_tmp_0_13) v_tmp_12)  InVars {es_box=v_es_box_14, tmp_0=v_tmp_0_13}  OutVars{tmp=v_tmp_12, es_box=v_es_box_14, tmp_0=v_tmp_0_13}  AuxVars[]  AssignedVars[tmp] 14460#L693_T0_init [2025] L693_T0_init-->L694_T0_init: Formula: (= (+ (mod 0 1) (* (- 1) (mod v_hdr.tcp.sequence_92 256)) v_hdr.tcp.sequence_92 v_tmp_14) v_hdr.tcp.sequence_91)  InVars {tmp=v_tmp_14, hdr.tcp.sequence=v_hdr.tcp.sequence_92}  OutVars{tmp=v_tmp_14, hdr.tcp.sequence=v_hdr.tcp.sequence_91}  AuxVars[]  AssignedVars[hdr.tcp.sequence] 14454#L694_T0_init [1799] L694_T0_init-->L696_T0_init: Formula: (= v_tmp_2_13 (mod (div (+ (* (- 1) (mod v_hdr.tcp.sequence_75 256)) v_hdr.tcp.sequence_75) 256) 256))  InVars {hdr.tcp.sequence=v_hdr.tcp.sequence_75}  OutVars{tmp_2=v_tmp_2_13, hdr.tcp.sequence=v_hdr.tcp.sequence_75}  AuxVars[]  AssignedVars[tmp_2] 14448#L696_T0_init [1853] L696_T0_init-->L697_T0_init: Formula: (= v_tmp_1_12 (select v_es_box_13 v_tmp_2_12))  InVars {es_box=v_es_box_13, tmp_2=v_tmp_2_12}  OutVars{tmp_2=v_tmp_2_12, es_box=v_es_box_13, tmp_1=v_tmp_1_12}  AuxVars[]  AssignedVars[tmp_1] 14443#L697_T0_init [1821] L697_T0_init-->L698_T0_init: Formula: (= v_hdr.tcp.sequence_89 (+ (mod v_hdr.tcp.sequence_90 256) (* 256 v_tmp_1_13) v_hdr.tcp.sequence_90 (* (- 1) (mod v_hdr.tcp.sequence_90 65536))))  InVars {hdr.tcp.sequence=v_hdr.tcp.sequence_90, tmp_1=v_tmp_1_13}  OutVars{hdr.tcp.sequence=v_hdr.tcp.sequence_89, tmp_1=v_tmp_1_13}  AuxVars[]  AssignedVars[hdr.tcp.sequence] 14436#L698_T0_init [1887] L698_T0_init-->L700_T0_init: Formula: (= (mod (div (+ v_hdr.tcp.sequence_78 (* (- 1) (mod v_hdr.tcp.sequence_78 65536))) 65536) 256) v_tmp_4_11)  InVars {hdr.tcp.sequence=v_hdr.tcp.sequence_78}  OutVars{hdr.tcp.sequence=v_hdr.tcp.sequence_78, tmp_4=v_tmp_4_11}  AuxVars[]  AssignedVars[tmp_4] 14431#L700_T0_init [1660] L700_T0_init-->L701_T0_init: Formula: (= (select v_es_box_24 v_tmp_4_14) v_tmp_3_14)  InVars {es_box=v_es_box_24, tmp_4=v_tmp_4_14}  OutVars{tmp_3=v_tmp_3_14, tmp_4=v_tmp_4_14, es_box=v_es_box_24}  AuxVars[]  AssignedVars[tmp_3] 14427#L701_T0_init [1786] L701_T0_init-->L702_T0_init: Formula: (= (+ (mod v_hdr.tcp.sequence_88 65536) (* 65536 v_tmp_3_13) v_hdr.tcp.sequence_88 (* (- 1) (mod v_hdr.tcp.sequence_88 16777216))) v_hdr.tcp.sequence_87)  InVars {tmp_3=v_tmp_3_13, hdr.tcp.sequence=v_hdr.tcp.sequence_88}  OutVars{tmp_3=v_tmp_3_13, hdr.tcp.sequence=v_hdr.tcp.sequence_87}  AuxVars[]  AssignedVars[hdr.tcp.sequence] 14419#L702_T0_init [1553] L702_T0_init-->L704_T0_init: Formula: (= (mod (div (+ v_hdr.tcp.sequence_82 (* (- 1) (mod v_hdr.tcp.sequence_82 16777216))) 16777216) 256) v_tmp_6_12)  InVars {hdr.tcp.sequence=v_hdr.tcp.sequence_82}  OutVars{tmp_6=v_tmp_6_12, hdr.tcp.sequence=v_hdr.tcp.sequence_82}  AuxVars[]  AssignedVars[tmp_6] 14413#L704_T0_init [1617] L704_T0_init-->L705_T0_init: Formula: (= v_tmp_5_13 (select v_es_box_19 v_tmp_6_13))  InVars {es_box=v_es_box_19, tmp_6=v_tmp_6_13}  OutVars{tmp_5=v_tmp_5_13, es_box=v_es_box_19, tmp_6=v_tmp_6_13}  AuxVars[]  AssignedVars[tmp_5] 14410#L705_T0_init [2237] L705_T0_init-->L706_T0_init: Formula: (= (+ (* (- 1) (mod v_hdr.tcp.sequence_77 4294967296)) (* 16777216 v_tmp_5_12) (mod v_hdr.tcp.sequence_77 16777216) v_hdr.tcp.sequence_77) v_hdr.tcp.sequence_76)  InVars {tmp_5=v_tmp_5_12, hdr.tcp.sequence=v_hdr.tcp.sequence_77}  OutVars{tmp_5=v_tmp_5_12, hdr.tcp.sequence=v_hdr.tcp.sequence_76}  AuxVars[]  AssignedVars[hdr.tcp.sequence] 14404#L706_T0_init [1597] L706_T0_init-->L708_T0_init: Formula: (= (mod (div (+ v_hdr.tcp.ackseq_92 (* (- 1) (mod 0 1))) 1) 256) v_tmp_8_14)  InVars {hdr.tcp.ackseq=v_hdr.tcp.ackseq_92}  OutVars{hdr.tcp.ackseq=v_hdr.tcp.ackseq_92, tmp_8=v_tmp_8_14}  AuxVars[]  AssignedVars[tmp_8] 14399#L708_T0_init [1763] L708_T0_init-->L709_T0_init: Formula: (= v_tmp_7_14 (select v_es_box_22 v_tmp_8_13))  InVars {es_box=v_es_box_22, tmp_8=v_tmp_8_13}  OutVars{tmp_7=v_tmp_7_14, es_box=v_es_box_22, tmp_8=v_tmp_8_13}  AuxVars[]  AssignedVars[tmp_7] 14396#L709_T0_init [2174] L709_T0_init-->L710_T0_init: Formula: (= v_hdr.tcp.ackseq_73 (+ v_hdr.tcp.ackseq_74 (* (- 1) (mod v_hdr.tcp.ackseq_74 256)) v_tmp_7_11 (mod 0 1)))  InVars {tmp_7=v_tmp_7_11, hdr.tcp.ackseq=v_hdr.tcp.ackseq_74}  OutVars{tmp_7=v_tmp_7_11, hdr.tcp.ackseq=v_hdr.tcp.ackseq_73}  AuxVars[]  AssignedVars[hdr.tcp.ackseq] 14392#L710_T0_init [1769] L710_T0_init-->L712_T0_init: Formula: (= (mod (div (+ (* (mod v_hdr.tcp.ackseq_85 256) (- 1)) v_hdr.tcp.ackseq_85) 256) 256) v_tmp_10_12)  InVars {hdr.tcp.ackseq=v_hdr.tcp.ackseq_85}  OutVars{hdr.tcp.ackseq=v_hdr.tcp.ackseq_85, tmp_10=v_tmp_10_12}  AuxVars[]  AssignedVars[tmp_10] 14390#L712_T0_init [1681] L712_T0_init-->L713_T0_init: Formula: (= v_tmp_9_12 (select v_es_box_16 v_tmp_10_11))  InVars {es_box=v_es_box_16, tmp_10=v_tmp_10_11}  OutVars{tmp_10=v_tmp_10_11, es_box=v_es_box_16, tmp_9=v_tmp_9_12}  AuxVars[]  AssignedVars[tmp_9] 14389#L713_T0_init [1976] L713_T0_init-->L714_T0_init: Formula: (= v_hdr.tcp.ackseq_79 (+ v_hdr.tcp.ackseq_80 (* (- 1) (mod v_hdr.tcp.ackseq_80 65536)) (mod v_hdr.tcp.ackseq_80 256) (* 256 v_tmp_9_11)))  InVars {hdr.tcp.ackseq=v_hdr.tcp.ackseq_80, tmp_9=v_tmp_9_11}  OutVars{hdr.tcp.ackseq=v_hdr.tcp.ackseq_79, tmp_9=v_tmp_9_11}  AuxVars[]  AssignedVars[hdr.tcp.ackseq] 14388#L714_T0_init [1777] L714_T0_init-->L716_T0_init: Formula: (= (mod (div (+ v_hdr.tcp.ackseq_72 (* (- 1) (mod v_hdr.tcp.ackseq_72 65536))) 65536) 256) v_tmp_12_11)  InVars {hdr.tcp.ackseq=v_hdr.tcp.ackseq_72}  OutVars{hdr.tcp.ackseq=v_hdr.tcp.ackseq_72, tmp_12=v_tmp_12_11}  AuxVars[]  AssignedVars[tmp_12] 14387#L716_T0_init [2050] L716_T0_init-->L717_T0_init: Formula: (= (select v_es_box_17 v_tmp_12_14) v_tmp_11_13)  InVars {es_box=v_es_box_17, tmp_12=v_tmp_12_14}  OutVars{tmp_11=v_tmp_11_13, tmp_12=v_tmp_12_14, es_box=v_es_box_17}  AuxVars[]  AssignedVars[tmp_11] 14386#L717_T0_init [1879] L717_T0_init-->L718_T0_init: Formula: (= v_hdr.tcp.ackseq_90 (+ v_hdr.tcp.ackseq_91 (* 65536 v_tmp_11_14) (* (- 1) (mod v_hdr.tcp.ackseq_91 16777216)) (mod v_hdr.tcp.ackseq_91 65536)))  InVars {tmp_11=v_tmp_11_14, hdr.tcp.ackseq=v_hdr.tcp.ackseq_91}  OutVars{tmp_11=v_tmp_11_14, hdr.tcp.ackseq=v_hdr.tcp.ackseq_90}  AuxVars[]  AssignedVars[hdr.tcp.ackseq] 14383#L718_T0_init [2266] L718_T0_init-->L720_T0_init: Formula: (= (mod (div (+ v_hdr.tcp.ackseq_89 (* (- 1) (mod v_hdr.tcp.ackseq_89 16777216))) 16777216) 256) v_tmp_14_14)  InVars {hdr.tcp.ackseq=v_hdr.tcp.ackseq_89}  OutVars{hdr.tcp.ackseq=v_hdr.tcp.ackseq_89, tmp_14=v_tmp_14_14}  AuxVars[]  AssignedVars[tmp_14] 14382#L720_T0_init [2275] L720_T0_init-->L721_T0_init: Formula: (= (select v_es_box_15 v_tmp_14_12) v_tmp_13_13)  InVars {es_box=v_es_box_15, tmp_14=v_tmp_14_12}  OutVars{es_box=v_es_box_15, tmp_13=v_tmp_13_13, tmp_14=v_tmp_14_12}  AuxVars[]  AssignedVars[tmp_13] 14381#L721_T0_init [2186] L721_T0_init-->read_esboxFINAL_T0_init: Formula: (= v_hdr.tcp.ackseq_77 (+ (mod v_hdr.tcp.ackseq_78 16777216) v_hdr.tcp.ackseq_78 (* 16777216 v_tmp_13_12) (* (mod v_hdr.tcp.ackseq_78 4294967296) (- 1))))  InVars {hdr.tcp.ackseq=v_hdr.tcp.ackseq_78, tmp_13=v_tmp_13_12}  OutVars{hdr.tcp.ackseq=v_hdr.tcp.ackseq_77, tmp_13=v_tmp_13_12}  AuxVars[]  AssignedVars[hdr.tcp.ackseq] 14380#read_esboxFINAL_T0_init [2014] read_esboxFINAL_T0_init-->read_esboxEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14352#read_esboxEXIT_T0_init >[2355] read_esboxEXIT_T0_init-->L268-D82: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14351#L268-D82 [1968] L268-D82-->L268_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14349#L268_T0_init [2261] L268_T0_init-->L268_T0_init-D28: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 14350#L268_T0_init-D28 [2002] L268_T0_init-D28-->do_read_countENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14357#do_read_countENTRY_T0_init [1854] do_read_countENTRY_T0_init-->do_read_countFINAL_T0_init: Formula: (= v_temp_0_29 (select v_count_17 0))  InVars {count=v_count_17}  OutVars{count=v_count_17, temp_0=v_temp_0_29}  AuxVars[]  AssignedVars[temp_0] 14355#do_read_countFINAL_T0_init [1750] do_read_countFINAL_T0_init-->do_read_countEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14348#do_read_countEXIT_T0_init >[2388] do_read_countEXIT_T0_init-->L269-D84: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14347#L269-D84 [2044] L269-D84-->L269_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14346#L269_T0_init [2205] L269_T0_init-->L271_T0_init: Formula: (= v_temp_0_24 0)  InVars {temp_0=v_temp_0_24}  OutVars{temp_0=v_temp_0_24}  AuxVars[]  AssignedVars[] 13590#L271_T0_init [2185] L271_T0_init-->L271_T0_init-D10: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 13924#L271_T0_init-D10 [1843] L271_T0_init-D10-->creatipv6_1ENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13925#creatipv6_1ENTRY_T0_init [2055] creatipv6_1ENTRY_T0_init-->L346_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14165#L346_T0_init [2103] L346_T0_init-->L348_T0_init: Formula: (= 6 v_hdr.ipv6.version_21)  InVars {}  OutVars{hdr.ipv6.version=v_hdr.ipv6.version_21}  AuxVars[]  AssignedVars[hdr.ipv6.version] 14082#L348_T0_init [1981] L348_T0_init-->L349_T0_init: Formula: (= v_hdr.ipv6.payloadlen_22 v_hdr.ipv4.totalLen_22)  InVars {hdr.ipv4.totalLen=v_hdr.ipv4.totalLen_22}  OutVars{hdr.ipv4.totalLen=v_hdr.ipv4.totalLen_22, hdr.ipv6.payloadlen=v_hdr.ipv6.payloadlen_22}  AuxVars[]  AssignedVars[hdr.ipv6.payloadlen] 13811#L349_T0_init [1762] L349_T0_init-->L350_T0_init: Formula: (= v_hdr.ipv6.nextheader_28 65)  InVars {}  OutVars{hdr.ipv6.nextheader=v_hdr.ipv6.nextheader_28}  AuxVars[]  AssignedVars[hdr.ipv6.nextheader] 13812#L350_T0_init [2234] L350_T0_init-->L351_T0_init: Formula: (= 64 v_hdr.ipv6.hoplimit_22)  InVars {}  OutVars{hdr.ipv6.hoplimit=v_hdr.ipv6.hoplimit_22}  AuxVars[]  AssignedVars[hdr.ipv6.hoplimit] 14199#L351_T0_init [2098] L351_T0_init-->L352_T0_init: Formula: (= v_hdr.ethernet.etherType_28 34525)  InVars {}  OutVars{hdr.ethernet.etherType=v_hdr.ethernet.etherType_28}  AuxVars[]  AssignedVars[hdr.ethernet.etherType] 14200#L352_T0_init [2116] L352_T0_init-->L353_T0_init: Formula: (= v_hdr.ipv6.srcAddr_19 42545680458834377588178886921629466626)  InVars {}  OutVars{hdr.ipv6.srcAddr=v_hdr.ipv6.srcAddr_19}  AuxVars[]  AssignedVars[hdr.ipv6.srcAddr] 13673#L353_T0_init [1674] L353_T0_init-->L354_T0_init: Formula: (= v_hdr.ipv6.dstAddr_18 42540765144257160172006968799218772356)  InVars {}  OutVars{hdr.ipv6.dstAddr=v_hdr.ipv6.dstAddr_18}  AuxVars[]  AssignedVars[hdr.ipv6.dstAddr] 13674#L354_T0_init [1813] L354_T0_init-->L355_T0_init: Formula: (= v_hdr.ethernet.srcAddr_33 19799850608873)  InVars {}  OutVars{hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_33}  AuxVars[]  AssignedVars[hdr.ethernet.srcAddr] 13882#L355_T0_init [1935] L355_T0_init-->creatipv6_1FINAL_T0_init: Formula: (= 174219185552744 v_hdr.ethernet.dstAddr_41)  InVars {}  OutVars{hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_41}  AuxVars[]  AssignedVars[hdr.ethernet.dstAddr] 13589#creatipv6_1FINAL_T0_init [1624] creatipv6_1FINAL_T0_init-->creatipv6_1EXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13591#creatipv6_1EXIT_T0_init >[2290] creatipv6_1EXIT_T0_init-->L271-1-D62: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13865#L271-1-D62 [1800] L271-1-D62-->L271-1_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13348#L271-1_T0_init [1857] L271-1_T0_init-->L271-1_T0_init-D32: Formula: (and (= v_count.write_indexInParam_1 0) (= v_count.write_valueInParam_1 1))  InVars {}  OutVars{count.write_index=v_count.write_indexInParam_1, count.write_value=v_count.write_valueInParam_1}  AuxVars[]  AssignedVars[count.write_index, count.write_value]< 13347#L271-1_T0_init-D32 [1499] L271-1_T0_init-D32-->count.writeENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13349#count.writeENTRY_T0_init [2149] count.writeENTRY_T0_init-->count.writeFINAL_T0_init: Formula: (= v_count_20 (store v_count_21 v_count.write_index_3 v_count.write_value_3))  InVars {count=v_count_21, count.write_index=v_count.write_index_3, count.write_value=v_count.write_value_3}  OutVars{count=v_count_20, count.write_index=v_count.write_index_3, count.write_value=v_count.write_value_3}  AuxVars[]  AssignedVars[count] 14489#count.writeFINAL_T0_init [1713] count.writeFINAL_T0_init-->count.writeEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14487#count.writeEXIT_T0_init >[2376] count.writeEXIT_T0_init-->L273-D98: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: (and (= v_count.write_indexInParam_1 0) (= v_count.write_valueInParam_1 1))  InVars {}  OutVars{count.write_index=v_count.write_indexInParam_1, count.write_value=v_count.write_valueInParam_1}  AuxVars[]  AssignedVars[count.write_index, count.write_value] 14283#L273-D98 [2199] L273-D98-->L273_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14018#L273_T0_init [1920] L273_T0_init-->L275_T0_init: Formula: (= v_standard_metadata.egress_spec_24 1)  InVars {}  OutVars{standard_metadata.egress_spec=v_standard_metadata.egress_spec_24}  AuxVars[]  AssignedVars[standard_metadata.egress_spec] 13455#L275_T0_init [1551] L275_T0_init-->L276_T0_init: Formula: (= 1 v_standard_metadata.egress_port_25)  InVars {}  OutVars{standard_metadata.egress_port=v_standard_metadata.egress_port_25}  AuxVars[]  AssignedVars[standard_metadata.egress_port] 13456#L276_T0_init [1801] L276_T0_init-->L270-1_T0_init: Formula: v_forward_24  InVars {}  OutVars{forward=v_forward_24}  AuxVars[]  AssignedVars[forward] 13866#L270-1_T0_init [1990] L270-1_T0_init-->L278-1_T0_init: Formula: (not (= v_temp_0_27 1))  InVars {temp_0=v_temp_0_27}  OutVars{temp_0=v_temp_0_27}  AuxVars[]  AssignedVars[] 14658#L278-1_T0_init [1644] L278-1_T0_init-->L258_T0_init: Formula: (not (= v_temp_0_23 2))  InVars {temp_0=v_temp_0_23}  OutVars{temp_0=v_temp_0_23}  AuxVars[]  AssignedVars[] 14657#L258_T0_init [2245] L258_T0_init-->MyIngressEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14656#MyIngressEXIT_T0_init >[2333] MyIngressEXIT_T0_init-->L571-D108: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14653#L571-D108 [2089] L571-D108-->L571_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14650#L571_T0_init [1962] L571_T0_init-->L571_T0_init-D8: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 14651#L571_T0_init-D8 [2016] L571_T0_init-D8-->MyEgressENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14654#MyEgressENTRY_T0_init [1650] MyEgressENTRY_T0_init-->L249_T0_init: Formula: (or (not v_hdr.tcp.valid_34) (not (= 0 v_standard_metadata.egress_port_34)))  InVars {standard_metadata.egress_port=v_standard_metadata.egress_port_34, hdr.tcp.valid=v_hdr.tcp.valid_34}  OutVars{standard_metadata.egress_port=v_standard_metadata.egress_port_34, hdr.tcp.valid=v_hdr.tcp.valid_34}  AuxVars[]  AssignedVars[] 14652#L249_T0_init [1652] L249_T0_init-->MyEgressEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14649#MyEgressEXIT_T0_init >[2347] MyEgressEXIT_T0_init-->L572-D90: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14648#L572-D90 [1791] L572-D90-->L572_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14645#L572_T0_init [1466] L572_T0_init-->L572_T0_init-D22: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 14646#L572_T0_init-D22 [1889] L572_T0_init-D22-->MyComputeChecksumFINAL_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14647#MyComputeChecksumFINAL_T0_init [1980] MyComputeChecksumFINAL_T0_init-->MyComputeChecksumEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14644#MyComputeChecksumEXIT_T0_init >[2361] MyComputeChecksumEXIT_T0_init-->L573-D110: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14643#L573-D110 [1858] L573-D110-->L573_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14642#L573_T0_init [1734] L573_T0_init-->L574-1_T0_init: Formula: v_forward_30  InVars {forward=v_forward_30}  OutVars{forward=v_forward_30}  AuxVars[]  AssignedVars[] 14640#L574-1_T0_init [2112] L574-1_T0_init-->L578_T0_init: Formula: (let ((.cse0 (= v__old_hdr.ethernet.srcAddr_14 0))) (or (and v__p4ltl_0_6 (not .cse0)) (and (not v__p4ltl_0_6) .cse0)))  InVars {_old_hdr.ethernet.srcAddr=v__old_hdr.ethernet.srcAddr_14}  OutVars{_p4ltl_0=v__p4ltl_0_6, _old_hdr.ethernet.srcAddr=v__old_hdr.ethernet.srcAddr_14}  AuxVars[]  AssignedVars[_p4ltl_0] 14639#L578_T0_init [2269] L578_T0_init-->L579_T0_init: Formula: (let ((.cse0 (= 2071690107 v__old_hdr.ipv4.dstAddr_14))) (or (and v__p4ltl_1_6 (not .cse0)) (and .cse0 (not v__p4ltl_1_6))))  InVars {_old_hdr.ipv4.dstAddr=v__old_hdr.ipv4.dstAddr_14}  OutVars{_old_hdr.ipv4.dstAddr=v__old_hdr.ipv4.dstAddr_14, _p4ltl_1=v__p4ltl_1_6}  AuxVars[]  AssignedVars[_p4ltl_1] 14638#L579_T0_init [2198] L579_T0_init-->L580_T0_init: Formula: (let ((.cse0 (= 281474976710655 v__old_hdr.ethernet.dstAddr_14))) (or (and v__p4ltl_2_6 (not .cse0)) (and .cse0 (not v__p4ltl_2_6))))  InVars {_old_hdr.ethernet.dstAddr=v__old_hdr.ethernet.dstAddr_14}  OutVars{_p4ltl_2=v__p4ltl_2_6, _old_hdr.ethernet.dstAddr=v__old_hdr.ethernet.dstAddr_14}  AuxVars[]  AssignedVars[_p4ltl_2] 14637#L580_T0_init [2013] L580_T0_init-->mainFINAL_T0_init: Formula: (let ((.cse0 (= v_standard_metadata.ingress_port_23 0))) (or (and v__p4ltl_3_7 .cse0) (and (not .cse0) (not v__p4ltl_3_7))))  InVars {standard_metadata.ingress_port=v_standard_metadata.ingress_port_23}  OutVars{standard_metadata.ingress_port=v_standard_metadata.ingress_port_23, _p4ltl_3=v__p4ltl_3_7}  AuxVars[]  AssignedVars[_p4ltl_3] 14636#mainFINAL_T0_init [2061] mainFINAL_T0_init-->mainEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14635#mainEXIT_T0_init >[2285] mainEXIT_T0_init-->L586-1-D72: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14633#L586-1-D72 [1975] L586-1-D72-->L586-1_accept_S1: Formula: (and v__p4ltl_1_9 v__p4ltl_0_9 v__p4ltl_3_9 v__p4ltl_2_9 (or (not v__p4ltl_3_9) (not v__p4ltl_1_9) (= 1 v_standard_metadata.egress_port_30) (not v__p4ltl_2_9) (not v__p4ltl_0_9)))  InVars {_p4ltl_2=v__p4ltl_2_9, standard_metadata.egress_port=v_standard_metadata.egress_port_30, _p4ltl_3=v__p4ltl_3_9, _p4ltl_0=v__p4ltl_0_9, _p4ltl_1=v__p4ltl_1_9}  OutVars{_p4ltl_2=v__p4ltl_2_9, standard_metadata.egress_port=v_standard_metadata.egress_port_30, _p4ltl_3=v__p4ltl_3_9, _p4ltl_0=v__p4ltl_0_9, _p4ltl_1=v__p4ltl_1_9}  AuxVars[]  AssignedVars[] 13487#L586-1_accept_S1 
[2023-02-07 04:59:03,607 INFO  L754   eck$LassoCheckResult]: Loop: 13487#L586-1_accept_S1 [1566] L586-1_accept_S1-->L586_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13309#L586_accept_S1 [1923] L586_accept_S1-->L586_accept_S1-D19: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 13610#L586_accept_S1-D19 [1634] L586_accept_S1-D19-->mainENTRY_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13250#mainENTRY_accept_S1 [2037] mainENTRY_accept_S1-->mainENTRY_accept_S1-D37: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 14001#mainENTRY_accept_S1-D37 [1909] mainENTRY_accept_S1-D37-->havocProcedureENTRY_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14002#havocProcedureENTRY_accept_S1 [2146] havocProcedureENTRY_accept_S1-->L421_accept_S1: Formula: (not v_drop_11)  InVars {}  OutVars{drop=v_drop_11}  AuxVars[]  AssignedVars[drop] 14106#L421_accept_S1 [2003] L421_accept_S1-->L422_accept_S1: Formula: (not v_forward_18)  InVars {}  OutVars{forward=v_forward_18}  AuxVars[]  AssignedVars[forward] 14107#L422_accept_S1 [2011] L422_accept_S1-->L423_accept_S1: Formula: true  InVars {}  OutVars{standard_metadata.ingress_port=v_standard_metadata.ingress_port_14}  AuxVars[]  AssignedVars[standard_metadata.ingress_port] 13279#L423_accept_S1 [1469] L423_accept_S1-->L424_accept_S1: Formula: (and (<= 0 v_standard_metadata.ingress_port_17) (< v_standard_metadata.ingress_port_17 512))  InVars {standard_metadata.ingress_port=v_standard_metadata.ingress_port_17}  OutVars{standard_metadata.ingress_port=v_standard_metadata.ingress_port_17}  AuxVars[]  AssignedVars[] 13280#L424_accept_S1 [1727] L424_accept_S1-->L425_accept_S1: Formula: (= v_standard_metadata.egress_spec_15 0)  InVars {}  OutVars{standard_metadata.egress_spec=v_standard_metadata.egress_spec_15}  AuxVars[]  AssignedVars[standard_metadata.egress_spec] 13683#L425_accept_S1 [1677] L425_accept_S1-->L426_accept_S1: Formula: (= 0 v_standard_metadata.egress_port_17)  InVars {}  OutVars{standard_metadata.egress_port=v_standard_metadata.egress_port_17}  AuxVars[]  AssignedVars[standard_metadata.egress_port] 13684#L426_accept_S1 [1861] L426_accept_S1-->L427_accept_S1: Formula: true  InVars {}  OutVars{standard_metadata.instance_type=v_standard_metadata.instance_type_12}  AuxVars[]  AssignedVars[standard_metadata.instance_type] 13792#L427_accept_S1 [1745] L427_accept_S1-->L428_accept_S1: Formula: (and (<= 0 v_standard_metadata.instance_type_9) (< v_standard_metadata.instance_type_9 4294967296))  InVars {standard_metadata.instance_type=v_standard_metadata.instance_type_9}  OutVars{standard_metadata.instance_type=v_standard_metadata.instance_type_9}  AuxVars[]  AssignedVars[] 13677#L428_accept_S1 [1676] L428_accept_S1-->L429_accept_S1: Formula: true  InVars {}  OutVars{standard_metadata.packet_length=v_standard_metadata.packet_length_10}  AuxVars[]  AssignedVars[standard_metadata.packet_length] 13678#L429_accept_S1 [2152] L429_accept_S1-->L430_accept_S1: Formula: (and (< v_standard_metadata.packet_length_9 4294967296) (<= 0 v_standard_metadata.packet_length_9))  InVars {standard_metadata.packet_length=v_standard_metadata.packet_length_9}  OutVars{standard_metadata.packet_length=v_standard_metadata.packet_length_9}  AuxVars[]  AssignedVars[] 14251#L430_accept_S1 [2171] L430_accept_S1-->L431_accept_S1: Formula: true  InVars {}  OutVars{standard_metadata.enq_timestamp=v_standard_metadata.enq_timestamp_12}  AuxVars[]  AssignedVars[standard_metadata.enq_timestamp] 13567#L431_accept_S1 [1612] L431_accept_S1-->L432_accept_S1: Formula: (and (< v_standard_metadata.enq_timestamp_11 4294967296) (<= 0 v_standard_metadata.enq_timestamp_11))  InVars {standard_metadata.enq_timestamp=v_standard_metadata.enq_timestamp_11}  OutVars{standard_metadata.enq_timestamp=v_standard_metadata.enq_timestamp_11}  AuxVars[]  AssignedVars[] 13249#L432_accept_S1 [1456] L432_accept_S1-->L433_accept_S1: Formula: (= v_standard_metadata.enq_qdepth_8 0)  InVars {}  OutVars{standard_metadata.enq_qdepth=v_standard_metadata.enq_qdepth_8}  AuxVars[]  AssignedVars[standard_metadata.enq_qdepth] 13251#L433_accept_S1 [2203] L433_accept_S1-->L434_accept_S1: Formula: true  InVars {}  OutVars{standard_metadata.deq_timedelta=v_standard_metadata.deq_timedelta_9}  AuxVars[]  AssignedVars[standard_metadata.deq_timedelta] 14188#L434_accept_S1 [2080] L434_accept_S1-->L435_accept_S1: Formula: (and (< v_standard_metadata.deq_timedelta_10 4294967296) (<= 0 v_standard_metadata.deq_timedelta_10))  InVars {standard_metadata.deq_timedelta=v_standard_metadata.deq_timedelta_10}  OutVars{standard_metadata.deq_timedelta=v_standard_metadata.deq_timedelta_10}  AuxVars[]  AssignedVars[] 13898#L435_accept_S1 [1824] L435_accept_S1-->L436_accept_S1: Formula: true  InVars {}  OutVars{standard_metadata.deq_qdepth=v_standard_metadata.deq_qdepth_12}  AuxVars[]  AssignedVars[standard_metadata.deq_qdepth] 13899#L436_accept_S1 [1907] L436_accept_S1-->L437_accept_S1: Formula: (and (< v_standard_metadata.deq_qdepth_9 524288) (<= 0 v_standard_metadata.deq_qdepth_9))  InVars {standard_metadata.deq_qdepth=v_standard_metadata.deq_qdepth_9}  OutVars{standard_metadata.deq_qdepth=v_standard_metadata.deq_qdepth_9}  AuxVars[]  AssignedVars[] 13815#L437_accept_S1 [1764] L437_accept_S1-->L438_accept_S1: Formula: true  InVars {}  OutVars{standard_metadata.ingress_global_timestamp=v_standard_metadata.ingress_global_timestamp_10}  AuxVars[]  AssignedVars[standard_metadata.ingress_global_timestamp] 13816#L438_accept_S1 [1869] L438_accept_S1-->L439_accept_S1: Formula: (and (<= 0 v_standard_metadata.ingress_global_timestamp_9) (< v_standard_metadata.ingress_global_timestamp_9 281474976710656))  InVars {standard_metadata.ingress_global_timestamp=v_standard_metadata.ingress_global_timestamp_9}  OutVars{standard_metadata.ingress_global_timestamp=v_standard_metadata.ingress_global_timestamp_9}  AuxVars[]  AssignedVars[] 13951#L439_accept_S1 [1930] L439_accept_S1-->L440_accept_S1: Formula: true  InVars {}  OutVars{standard_metadata.egress_global_timestamp=v_standard_metadata.egress_global_timestamp_9}  AuxVars[]  AssignedVars[standard_metadata.egress_global_timestamp] 13558#L440_accept_S1 [1607] L440_accept_S1-->L441_accept_S1: Formula: (and (< v_standard_metadata.egress_global_timestamp_10 281474976710656) (<= 0 v_standard_metadata.egress_global_timestamp_10))  InVars {standard_metadata.egress_global_timestamp=v_standard_metadata.egress_global_timestamp_10}  OutVars{standard_metadata.egress_global_timestamp=v_standard_metadata.egress_global_timestamp_10}  AuxVars[]  AssignedVars[] 13559#L441_accept_S1 [2068] L441_accept_S1-->L442_accept_S1: Formula: (= 0 v_standard_metadata.mcast_grp_9)  InVars {}  OutVars{standard_metadata.mcast_grp=v_standard_metadata.mcast_grp_9}  AuxVars[]  AssignedVars[standard_metadata.mcast_grp] 13720#L442_accept_S1 [1699] L442_accept_S1-->L443_accept_S1: Formula: (= v_standard_metadata.egress_rid_8 0)  InVars {}  OutVars{standard_metadata.egress_rid=v_standard_metadata.egress_rid_8}  AuxVars[]  AssignedVars[standard_metadata.egress_rid] 13721#L443_accept_S1 [2210] L443_accept_S1-->L444_accept_S1: Formula: (= v_standard_metadata.checksum_error_9 0)  InVars {}  OutVars{standard_metadata.checksum_error=v_standard_metadata.checksum_error_9}  AuxVars[]  AssignedVars[standard_metadata.checksum_error] 13551#L444_accept_S1 [1603] L444_accept_S1-->L445_accept_S1: Formula: (= v_standard_metadata.parser_error_8 0)  InVars {}  OutVars{standard_metadata.parser_error=v_standard_metadata.parser_error_8}  AuxVars[]  AssignedVars[standard_metadata.parser_error] 13552#L445_accept_S1 [2211] L445_accept_S1-->L446_accept_S1: Formula: (= v_standard_metadata.priority_8 0)  InVars {}  OutVars{standard_metadata.priority=v_standard_metadata.priority_8}  AuxVars[]  AssignedVars[standard_metadata.priority] 13685#L446_accept_S1 [1678] L446_accept_S1-->L447_accept_S1: Formula: (not v_hdr.ethernet.valid_14)  InVars {}  OutVars{hdr.ethernet.valid=v_hdr.ethernet.valid_14}  AuxVars[]  AssignedVars[hdr.ethernet.valid] 13686#L447_accept_S1 [2169] L447_accept_S1-->L448_accept_S1: Formula: (= v_emit_29 (store v_emit_30 v_hdr.ethernet_2 false))  InVars {emit=v_emit_30, hdr.ethernet=v_hdr.ethernet_2}  OutVars{emit=v_emit_29, hdr.ethernet=v_hdr.ethernet_2}  AuxVars[]  AssignedVars[emit] 14025#L448_accept_S1 [1927] L448_accept_S1-->L449_accept_S1: Formula: true  InVars {}  OutVars{hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_25}  AuxVars[]  AssignedVars[hdr.ethernet.dstAddr] 14016#L449_accept_S1 [1918] L449_accept_S1-->L450_accept_S1: Formula: (= v_hdr.ethernet.dstAddr_28 v__old_hdr.ethernet.dstAddr_11)  InVars {hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_28}  OutVars{_old_hdr.ethernet.dstAddr=v__old_hdr.ethernet.dstAddr_11, hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_28}  AuxVars[]  AssignedVars[_old_hdr.ethernet.dstAddr] 14017#L450_accept_S1 [2111] L450_accept_S1-->L451_accept_S1: Formula: (= v_hdr.ethernet.dstAddr_26 v__old_hdr.ethernet.dstAddr_10)  InVars {hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_26}  OutVars{_old_hdr.ethernet.dstAddr=v__old_hdr.ethernet.dstAddr_10, hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_26}  AuxVars[]  AssignedVars[_old_hdr.ethernet.dstAddr] 13275#L451_accept_S1 [1467] L451_accept_S1-->L452_accept_S1: Formula: true  InVars {}  OutVars{hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_26}  AuxVars[]  AssignedVars[hdr.ethernet.srcAddr] 13276#L452_accept_S1 [1655] L452_accept_S1-->L453_accept_S1: Formula: (= v_hdr.ethernet.srcAddr_23 v__old_hdr.ethernet.srcAddr_10)  InVars {hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_23}  OutVars{hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_23, _old_hdr.ethernet.srcAddr=v__old_hdr.ethernet.srcAddr_10}  AuxVars[]  AssignedVars[_old_hdr.ethernet.srcAddr] 13643#L453_accept_S1 [2176] L453_accept_S1-->L454_accept_S1: Formula: (= v_hdr.ethernet.srcAddr_24 v__old_hdr.ethernet.srcAddr_11)  InVars {hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_24}  OutVars{hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_24, _old_hdr.ethernet.srcAddr=v__old_hdr.ethernet.srcAddr_11}  AuxVars[]  AssignedVars[_old_hdr.ethernet.srcAddr] 14268#L454_accept_S1 [2235] L454_accept_S1-->L455_accept_S1: Formula: true  InVars {}  OutVars{hdr.ethernet.etherType=v_hdr.ethernet.etherType_22}  AuxVars[]  AssignedVars[hdr.ethernet.etherType] 14316#L455_accept_S1 [2254] L455_accept_S1-->L456_accept_S1: Formula: (and (<= 0 v_hdr.ethernet.etherType_23) (< v_hdr.ethernet.etherType_23 65536))  InVars {hdr.ethernet.etherType=v_hdr.ethernet.etherType_23}  OutVars{hdr.ethernet.etherType=v_hdr.ethernet.etherType_23}  AuxVars[]  AssignedVars[] 13793#L456_accept_S1 [1746] L456_accept_S1-->L457_accept_S1: Formula: (not v_hdr.ipv6.valid_18)  InVars {}  OutVars{hdr.ipv6.valid=v_hdr.ipv6.valid_18}  AuxVars[]  AssignedVars[hdr.ipv6.valid] 13702#L457_accept_S1 [1687] L457_accept_S1-->L458_accept_S1: Formula: (= v_emit_23 (store v_emit_24 v_hdr.ipv6_9 false))  InVars {emit=v_emit_24, hdr.ipv6=v_hdr.ipv6_9}  OutVars{emit=v_emit_23, hdr.ipv6=v_hdr.ipv6_9}  AuxVars[]  AssignedVars[emit] 13703#L458_accept_S1 [2024] L458_accept_S1-->L459_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv6.version=v_hdr.ipv6.version_19}  AuxVars[]  AssignedVars[hdr.ipv6.version] 14132#L459_accept_S1 [2104] L459_accept_S1-->L460_accept_S1: Formula: (and (< v_hdr.ipv6.version_20 16) (<= 0 v_hdr.ipv6.version_20))  InVars {hdr.ipv6.version=v_hdr.ipv6.version_20}  OutVars{hdr.ipv6.version=v_hdr.ipv6.version_20}  AuxVars[]  AssignedVars[] 14043#L460_accept_S1 [1943] L460_accept_S1-->L461_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv6.trafclass=v_hdr.ipv6.trafclass_9}  AuxVars[]  AssignedVars[hdr.ipv6.trafclass] 13359#L461_accept_S1 [1505] L461_accept_S1-->L462_accept_S1: Formula: (and (<= 0 v_hdr.ipv6.trafclass_10) (< v_hdr.ipv6.trafclass_10 256))  InVars {hdr.ipv6.trafclass=v_hdr.ipv6.trafclass_10}  OutVars{hdr.ipv6.trafclass=v_hdr.ipv6.trafclass_10}  AuxVars[]  AssignedVars[] 13360#L462_accept_S1 [2090] L462_accept_S1-->L463_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv6.flowlabel=v_hdr.ipv6.flowlabel_11}  AuxVars[]  AssignedVars[hdr.ipv6.flowlabel] 13297#L463_accept_S1 [1478] L463_accept_S1-->L464_accept_S1: Formula: (and (< v_hdr.ipv6.flowlabel_10 1048576) (<= 0 v_hdr.ipv6.flowlabel_10))  InVars {hdr.ipv6.flowlabel=v_hdr.ipv6.flowlabel_10}  OutVars{hdr.ipv6.flowlabel=v_hdr.ipv6.flowlabel_10}  AuxVars[]  AssignedVars[] 13298#L464_accept_S1 [1577] L464_accept_S1-->L465_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv6.payloadlen=v_hdr.ipv6.payloadlen_19}  AuxVars[]  AssignedVars[hdr.ipv6.payloadlen] 13504#L465_accept_S1 [2096] L465_accept_S1-->L466_accept_S1: Formula: (and (< v_hdr.ipv6.payloadlen_17 65536) (<= 0 v_hdr.ipv6.payloadlen_17))  InVars {hdr.ipv6.payloadlen=v_hdr.ipv6.payloadlen_17}  OutVars{hdr.ipv6.payloadlen=v_hdr.ipv6.payloadlen_17}  AuxVars[]  AssignedVars[] 13984#L466_accept_S1 [1898] L466_accept_S1-->L467_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv6.nextheader=v_hdr.ipv6.nextheader_21}  AuxVars[]  AssignedVars[hdr.ipv6.nextheader] 13355#L467_accept_S1 [1503] L467_accept_S1-->L468_accept_S1: Formula: (and (< v_hdr.ipv6.nextheader_20 256) (<= 0 v_hdr.ipv6.nextheader_20))  InVars {hdr.ipv6.nextheader=v_hdr.ipv6.nextheader_20}  OutVars{hdr.ipv6.nextheader=v_hdr.ipv6.nextheader_20}  AuxVars[]  AssignedVars[] 13356#L468_accept_S1 [2222] L468_accept_S1-->L469_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv6.hoplimit=v_hdr.ipv6.hoplimit_17}  AuxVars[]  AssignedVars[hdr.ipv6.hoplimit] 13708#L469_accept_S1 [1692] L469_accept_S1-->L470_accept_S1: Formula: (and (<= 0 v_hdr.ipv6.hoplimit_20) (< v_hdr.ipv6.hoplimit_20 256))  InVars {hdr.ipv6.hoplimit=v_hdr.ipv6.hoplimit_20}  OutVars{hdr.ipv6.hoplimit=v_hdr.ipv6.hoplimit_20}  AuxVars[]  AssignedVars[] 13709#L470_accept_S1 [1695] L470_accept_S1-->L471_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv6.srcAddr=v_hdr.ipv6.srcAddr_17}  AuxVars[]  AssignedVars[hdr.ipv6.srcAddr] 13712#L471_accept_S1 [1865] L471_accept_S1-->L472_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv6.dstAddr=v_hdr.ipv6.dstAddr_17}  AuxVars[]  AssignedVars[hdr.ipv6.dstAddr] 13947#L472_accept_S1 [2241] L472_accept_S1-->L473_accept_S1: Formula: (not v_hdr.ipv4_tunnel.valid_20)  InVars {}  OutVars{hdr.ipv4_tunnel.valid=v_hdr.ipv4_tunnel.valid_20}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.valid] 13644#L473_accept_S1 [1656] L473_accept_S1-->L474_accept_S1: Formula: (= v_emit_25 (store v_emit_26 v_hdr.ipv4_tunnel_8 false))  InVars {emit=v_emit_26, hdr.ipv4_tunnel=v_hdr.ipv4_tunnel_8}  OutVars{emit=v_emit_25, hdr.ipv4_tunnel=v_hdr.ipv4_tunnel_8}  AuxVars[]  AssignedVars[emit] 13645#L474_accept_S1 [1796] L474_accept_S1-->L475_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.version=v_hdr.ipv4_tunnel.version_14}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.version] 13862#L475_accept_S1 [2086] L475_accept_S1-->L476_accept_S1: Formula: (and (<= 0 v_hdr.ipv4_tunnel.version_15) (< v_hdr.ipv4_tunnel.version_15 16))  InVars {hdr.ipv4_tunnel.version=v_hdr.ipv4_tunnel.version_15}  OutVars{hdr.ipv4_tunnel.version=v_hdr.ipv4_tunnel.version_15}  AuxVars[]  AssignedVars[] 13501#L476_accept_S1 [1575] L476_accept_S1-->L477_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.ihl=v_hdr.ipv4_tunnel.ihl_16}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.ihl] 13502#L477_accept_S1 [1683] L477_accept_S1-->L478_accept_S1: Formula: (and (<= 0 v_hdr.ipv4_tunnel.ihl_15) (< v_hdr.ipv4_tunnel.ihl_15 16))  InVars {hdr.ipv4_tunnel.ihl=v_hdr.ipv4_tunnel.ihl_15}  OutVars{hdr.ipv4_tunnel.ihl=v_hdr.ipv4_tunnel.ihl_15}  AuxVars[]  AssignedVars[] 13500#L478_accept_S1 [1574] L478_accept_S1-->L479_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.diffserv=v_hdr.ipv4_tunnel.diffserv_17}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.diffserv] 13277#L479_accept_S1 [1468] L479_accept_S1-->L480_accept_S1: Formula: (and (< v_hdr.ipv4_tunnel.diffserv_16 256) (<= 0 v_hdr.ipv4_tunnel.diffserv_16))  InVars {hdr.ipv4_tunnel.diffserv=v_hdr.ipv4_tunnel.diffserv_16}  OutVars{hdr.ipv4_tunnel.diffserv=v_hdr.ipv4_tunnel.diffserv_16}  AuxVars[]  AssignedVars[] 13278#L480_accept_S1 [2136] L480_accept_S1-->L481_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.totalLen=v_hdr.ipv4_tunnel.totalLen_15}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.totalLen] 13454#L481_accept_S1 [1550] L481_accept_S1-->L482_accept_S1: Formula: (and (< v_hdr.ipv4_tunnel.totalLen_16 65536) (<= 0 v_hdr.ipv4_tunnel.totalLen_16))  InVars {hdr.ipv4_tunnel.totalLen=v_hdr.ipv4_tunnel.totalLen_16}  OutVars{hdr.ipv4_tunnel.totalLen=v_hdr.ipv4_tunnel.totalLen_16}  AuxVars[]  AssignedVars[] 13397#L482_accept_S1 [1523] L482_accept_S1-->L483_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.identification=v_hdr.ipv4_tunnel.identification_14}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.identification] 13398#L483_accept_S1 [2134] L483_accept_S1-->L484_accept_S1: Formula: (and (< v_hdr.ipv4_tunnel.identification_16 65536) (<= 0 v_hdr.ipv4_tunnel.identification_16))  InVars {hdr.ipv4_tunnel.identification=v_hdr.ipv4_tunnel.identification_16}  OutVars{hdr.ipv4_tunnel.identification=v_hdr.ipv4_tunnel.identification_16}  AuxVars[]  AssignedVars[] 14236#L484_accept_S1 [2184] L484_accept_S1-->L485_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.flags=v_hdr.ipv4_tunnel.flags_17}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.flags] 13980#L485_accept_S1 [1893] L485_accept_S1-->L486_accept_S1: Formula: (and (<= 0 v_hdr.ipv4_tunnel.flags_14) (< v_hdr.ipv4_tunnel.flags_14 8))  InVars {hdr.ipv4_tunnel.flags=v_hdr.ipv4_tunnel.flags_14}  OutVars{hdr.ipv4_tunnel.flags=v_hdr.ipv4_tunnel.flags_14}  AuxVars[]  AssignedVars[] 13753#L486_accept_S1 [1715] L486_accept_S1-->L487_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.fragOffset=v_hdr.ipv4_tunnel.fragOffset_14}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.fragOffset] 13605#L487_accept_S1 [1631] L487_accept_S1-->L488_accept_S1: Formula: (and (<= 0 v_hdr.ipv4_tunnel.fragOffset_15) (< v_hdr.ipv4_tunnel.fragOffset_15 8192))  InVars {hdr.ipv4_tunnel.fragOffset=v_hdr.ipv4_tunnel.fragOffset_15}  OutVars{hdr.ipv4_tunnel.fragOffset=v_hdr.ipv4_tunnel.fragOffset_15}  AuxVars[]  AssignedVars[] 13606#L488_accept_S1 [1766] L488_accept_S1-->L489_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.ttl=v_hdr.ipv4_tunnel.ttl_17}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.ttl] 13820#L489_accept_S1 [2172] L489_accept_S1-->L490_accept_S1: Formula: (and (< v_hdr.ipv4_tunnel.ttl_15 256) (<= 0 v_hdr.ipv4_tunnel.ttl_15))  InVars {hdr.ipv4_tunnel.ttl=v_hdr.ipv4_tunnel.ttl_15}  OutVars{hdr.ipv4_tunnel.ttl=v_hdr.ipv4_tunnel.ttl_15}  AuxVars[]  AssignedVars[] 14267#L490_accept_S1 [2204] L490_accept_S1-->L491_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.protocol=v_hdr.ipv4_tunnel.protocol_19}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.protocol] 13490#L491_accept_S1 [1569] L491_accept_S1-->L492_accept_S1: Formula: (and (<= 0 v_hdr.ipv4_tunnel.protocol_18) (< v_hdr.ipv4_tunnel.protocol_18 256))  InVars {hdr.ipv4_tunnel.protocol=v_hdr.ipv4_tunnel.protocol_18}  OutVars{hdr.ipv4_tunnel.protocol=v_hdr.ipv4_tunnel.protocol_18}  AuxVars[]  AssignedVars[] 13491#L492_accept_S1 [1999] L492_accept_S1-->L493_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.hdrChecksum=v_hdr.ipv4_tunnel.hdrChecksum_9}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.hdrChecksum] 14015#L493_accept_S1 [1917] L493_accept_S1-->L494_accept_S1: Formula: (and (<= 0 v_hdr.ipv4_tunnel.hdrChecksum_10) (< v_hdr.ipv4_tunnel.hdrChecksum_10 65536))  InVars {hdr.ipv4_tunnel.hdrChecksum=v_hdr.ipv4_tunnel.hdrChecksum_10}  OutVars{hdr.ipv4_tunnel.hdrChecksum=v_hdr.ipv4_tunnel.hdrChecksum_10}  AuxVars[]  AssignedVars[] 13689#L494_accept_S1 [1679] L494_accept_S1-->L495_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.srcAddr=v_hdr.ipv4_tunnel.srcAddr_14}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.srcAddr] 13526#L495_accept_S1 [1590] L495_accept_S1-->L496_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.dstAddr=v_hdr.ipv4_tunnel.dstAddr_14}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.dstAddr] 13527#L496_accept_S1 [1755] L496_accept_S1-->L497_accept_S1: Formula: (not v_hdr.ipv4.valid_26)  InVars {}  OutVars{hdr.ipv4.valid=v_hdr.ipv4.valid_26}  AuxVars[]  AssignedVars[hdr.ipv4.valid] 13804#L497_accept_S1 [2257] L497_accept_S1-->L498_accept_S1: Formula: (= v_emit_31 (store v_emit_32 v_hdr.ipv4_3 false))  InVars {hdr.ipv4=v_hdr.ipv4_3, emit=v_emit_32}  OutVars{hdr.ipv4=v_hdr.ipv4_3, emit=v_emit_31}  AuxVars[]  AssignedVars[emit] 14135#L498_accept_S1 [2029] L498_accept_S1-->L499_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.version=v_hdr.ipv4.version_11}  AuxVars[]  AssignedVars[hdr.ipv4.version] 13879#L499_accept_S1 [1809] L499_accept_S1-->L500_accept_S1: Formula: (and (< v_hdr.ipv4.version_12 16) (<= 0 v_hdr.ipv4.version_12))  InVars {hdr.ipv4.version=v_hdr.ipv4.version_12}  OutVars{hdr.ipv4.version=v_hdr.ipv4.version_12}  AuxVars[]  AssignedVars[] 13813#L500_accept_S1 [1761] L500_accept_S1-->L501_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.ihl=v_hdr.ipv4.ihl_11}  AuxVars[]  AssignedVars[hdr.ipv4.ihl] 13601#L501_accept_S1 [1629] L501_accept_S1-->L502_accept_S1: Formula: (and (<= 0 v_hdr.ipv4.ihl_12) (< v_hdr.ipv4.ihl_12 16))  InVars {hdr.ipv4.ihl=v_hdr.ipv4.ihl_12}  OutVars{hdr.ipv4.ihl=v_hdr.ipv4.ihl_12}  AuxVars[]  AssignedVars[] 13602#L502_accept_S1 [2167] L502_accept_S1-->L503_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.diffserv=v_hdr.ipv4.diffserv_10}  AuxVars[]  AssignedVars[hdr.ipv4.diffserv] 14264#L503_accept_S1 [2192] L503_accept_S1-->L504_accept_S1: Formula: (and (< v_hdr.ipv4.diffserv_11 256) (<= 0 v_hdr.ipv4.diffserv_11))  InVars {hdr.ipv4.diffserv=v_hdr.ipv4.diffserv_11}  OutVars{hdr.ipv4.diffserv=v_hdr.ipv4.diffserv_11}  AuxVars[]  AssignedVars[] 13367#L504_accept_S1 [1508] L504_accept_S1-->L505_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.totalLen=v_hdr.ipv4.totalLen_16}  AuxVars[]  AssignedVars[hdr.ipv4.totalLen] 13368#L505_accept_S1 [2099] L505_accept_S1-->L506_accept_S1: Formula: (and (<= 0 v_hdr.ipv4.totalLen_13) (< v_hdr.ipv4.totalLen_13 65536))  InVars {hdr.ipv4.totalLen=v_hdr.ipv4.totalLen_13}  OutVars{hdr.ipv4.totalLen=v_hdr.ipv4.totalLen_13}  AuxVars[]  AssignedVars[] 14026#L506_accept_S1 [1929] L506_accept_S1-->L507_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.identification=v_hdr.ipv4.identification_13}  AuxVars[]  AssignedVars[hdr.ipv4.identification] 14027#L507_accept_S1 [2182] L507_accept_S1-->L508_accept_S1: Formula: (and (<= 0 v_hdr.ipv4.identification_10) (< v_hdr.ipv4.identification_10 65536))  InVars {hdr.ipv4.identification=v_hdr.ipv4.identification_10}  OutVars{hdr.ipv4.identification=v_hdr.ipv4.identification_10}  AuxVars[]  AssignedVars[] 14179#L508_accept_S1 [2069] L508_accept_S1-->L509_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.flags=v_hdr.ipv4.flags_12}  AuxVars[]  AssignedVars[hdr.ipv4.flags] 14071#L509_accept_S1 [1969] L509_accept_S1-->L510_accept_S1: Formula: (and (< v_hdr.ipv4.flags_11 8) (<= 0 v_hdr.ipv4.flags_11))  InVars {hdr.ipv4.flags=v_hdr.ipv4.flags_11}  OutVars{hdr.ipv4.flags=v_hdr.ipv4.flags_11}  AuxVars[]  AssignedVars[] 14072#L510_accept_S1 [2265] L510_accept_S1-->L511_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.fragOffset=v_hdr.ipv4.fragOffset_12}  AuxVars[]  AssignedVars[hdr.ipv4.fragOffset] 13699#L511_accept_S1 [1685] L511_accept_S1-->L512_accept_S1: Formula: (and (<= 0 v_hdr.ipv4.fragOffset_13) (< v_hdr.ipv4.fragOffset_13 8192))  InVars {hdr.ipv4.fragOffset=v_hdr.ipv4.fragOffset_13}  OutVars{hdr.ipv4.fragOffset=v_hdr.ipv4.fragOffset_13}  AuxVars[]  AssignedVars[] 13354#L512_accept_S1 [1502] L512_accept_S1-->L513_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.ttl=v_hdr.ipv4.ttl_12}  AuxVars[]  AssignedVars[hdr.ipv4.ttl] 13269#L513_accept_S1 [1463] L513_accept_S1-->L514_accept_S1: Formula: (and (< v_hdr.ipv4.ttl_13 256) (<= 0 v_hdr.ipv4.ttl_13))  InVars {hdr.ipv4.ttl=v_hdr.ipv4.ttl_13}  OutVars{hdr.ipv4.ttl=v_hdr.ipv4.ttl_13}  AuxVars[]  AssignedVars[] 13270#L514_accept_S1 [2224] L514_accept_S1-->L515_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.protocol=v_hdr.ipv4.protocol_13}  AuxVars[]  AssignedVars[hdr.ipv4.protocol] 13442#L515_accept_S1 [1543] L515_accept_S1-->L516_accept_S1: Formula: (and (< v_hdr.ipv4.protocol_11 256) (<= 0 v_hdr.ipv4.protocol_11))  InVars {hdr.ipv4.protocol=v_hdr.ipv4.protocol_11}  OutVars{hdr.ipv4.protocol=v_hdr.ipv4.protocol_11}  AuxVars[]  AssignedVars[] 13443#L516_accept_S1 [1919] L516_accept_S1-->L517_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.hdrChecksum=v_hdr.ipv4.hdrChecksum_12}  AuxVars[]  AssignedVars[hdr.ipv4.hdrChecksum] 13765#L517_accept_S1 [1724] L517_accept_S1-->L518_accept_S1: Formula: (and (< v_hdr.ipv4.hdrChecksum_11 65536) (<= 0 v_hdr.ipv4.hdrChecksum_11))  InVars {hdr.ipv4.hdrChecksum=v_hdr.ipv4.hdrChecksum_11}  OutVars{hdr.ipv4.hdrChecksum=v_hdr.ipv4.hdrChecksum_11}  AuxVars[]  AssignedVars[] 13496#L518_accept_S1 [1572] L518_accept_S1-->L519_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.srcAddr=v_hdr.ipv4.srcAddr_10}  AuxVars[]  AssignedVars[hdr.ipv4.srcAddr] 13497#L519_accept_S1 [2232] L519_accept_S1-->L520_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_13}  AuxVars[]  AssignedVars[hdr.ipv4.dstAddr] 14180#L520_accept_S1 [2070] L520_accept_S1-->L521_accept_S1: Formula: (= v_hdr.ipv4.dstAddr_15 v__old_hdr.ipv4.dstAddr_12)  InVars {hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_15}  OutVars{_old_hdr.ipv4.dstAddr=v__old_hdr.ipv4.dstAddr_12, hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_15}  AuxVars[]  AssignedVars[_old_hdr.ipv4.dstAddr] 13874#L521_accept_S1 [1807] L521_accept_S1-->L522_accept_S1: Formula: (= v_hdr.ipv4.dstAddr_12 v__old_hdr.ipv4.dstAddr_10)  InVars {hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_12}  OutVars{_old_hdr.ipv4.dstAddr=v__old_hdr.ipv4.dstAddr_10, hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_12}  AuxVars[]  AssignedVars[_old_hdr.ipv4.dstAddr] 13875#L522_accept_S1 [2135] L522_accept_S1-->L523_accept_S1: Formula: (not v_hdr.tcp.valid_29)  InVars {}  OutVars{hdr.tcp.valid=v_hdr.tcp.valid_29}  AuxVars[]  AssignedVars[hdr.tcp.valid] 13934#L523_accept_S1 [1851] L523_accept_S1-->L524_accept_S1: Formula: (= v_emit_21 (store v_emit_22 v_hdr.tcp_2 false))  InVars {hdr.tcp=v_hdr.tcp_2, emit=v_emit_22}  OutVars{hdr.tcp=v_hdr.tcp_2, emit=v_emit_21}  AuxVars[]  AssignedVars[emit] 13935#L524_accept_S1 [1911] L524_accept_S1-->L525_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.srcport=v_hdr.tcp.srcport_11}  AuxVars[]  AssignedVars[hdr.tcp.srcport] 13503#L525_accept_S1 [1576] L525_accept_S1-->L526_accept_S1: Formula: (and (< v_hdr.tcp.srcport_9 65536) (<= 0 v_hdr.tcp.srcport_9))  InVars {hdr.tcp.srcport=v_hdr.tcp.srcport_9}  OutVars{hdr.tcp.srcport=v_hdr.tcp.srcport_9}  AuxVars[]  AssignedVars[] 13376#L526_accept_S1 [1513] L526_accept_S1-->L527_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.dstport=v_hdr.tcp.dstport_12}  AuxVars[]  AssignedVars[hdr.tcp.dstport] 13377#L527_accept_S1 [2101] L527_accept_S1-->L528_accept_S1: Formula: (and (<= 0 v_hdr.tcp.dstport_11) (< v_hdr.tcp.dstport_11 65536))  InVars {hdr.tcp.dstport=v_hdr.tcp.dstport_11}  OutVars{hdr.tcp.dstport=v_hdr.tcp.dstport_11}  AuxVars[]  AssignedVars[] 14081#L528_accept_S1 [1979] L528_accept_S1-->L529_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.sequence=v_hdr.tcp.sequence_41}  AuxVars[]  AssignedVars[hdr.tcp.sequence] 13904#L529_accept_S1 [1830] L529_accept_S1-->L530_accept_S1: Formula: (and (<= 0 v_hdr.tcp.sequence_42) (< v_hdr.tcp.sequence_42 4294967296))  InVars {hdr.tcp.sequence=v_hdr.tcp.sequence_42}  OutVars{hdr.tcp.sequence=v_hdr.tcp.sequence_42}  AuxVars[]  AssignedVars[] 13905#L530_accept_S1 [2084] L530_accept_S1-->L531_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.ackseq=v_hdr.tcp.ackseq_44}  AuxVars[]  AssignedVars[hdr.tcp.ackseq] 14157#L531_accept_S1 [2048] L531_accept_S1-->L532_accept_S1: Formula: (and (< v_hdr.tcp.ackseq_42 4294967296) (<= 0 v_hdr.tcp.ackseq_42))  InVars {hdr.tcp.ackseq=v_hdr.tcp.ackseq_42}  OutVars{hdr.tcp.ackseq=v_hdr.tcp.ackseq_42}  AuxVars[]  AssignedVars[] 14158#L532_accept_S1 [2085] L532_accept_S1-->L533_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.headerlength=v_hdr.tcp.headerlength_12}  AuxVars[]  AssignedVars[hdr.tcp.headerlength] 14005#L533_accept_S1 [1912] L533_accept_S1-->L534_accept_S1: Formula: (and (<= 0 v_hdr.tcp.headerlength_11) (< v_hdr.tcp.headerlength_11 16))  InVars {hdr.tcp.headerlength=v_hdr.tcp.headerlength_11}  OutVars{hdr.tcp.headerlength=v_hdr.tcp.headerlength_11}  AuxVars[]  AssignedVars[] 13728#L534_accept_S1 [1704] L534_accept_S1-->L535_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.reservation=v_hdr.tcp.reservation_10}  AuxVars[]  AssignedVars[hdr.tcp.reservation] 13729#L535_accept_S1 [2041] L535_accept_S1-->L536_accept_S1: Formula: (and (<= 0 v_hdr.tcp.reservation_12) (< v_hdr.tcp.reservation_12 64))  InVars {hdr.tcp.reservation=v_hdr.tcp.reservation_12}  OutVars{hdr.tcp.reservation=v_hdr.tcp.reservation_12}  AuxVars[]  AssignedVars[] 13537#L536_accept_S1 [1596] L536_accept_S1-->L537_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.URG=v_hdr.tcp.URG_9}  AuxVars[]  AssignedVars[hdr.tcp.URG] 13538#L537_accept_S1 [2017] L537_accept_S1-->L538_accept_S1: Formula: (and (< v_hdr.tcp.URG_12 2) (<= 0 v_hdr.tcp.URG_12))  InVars {hdr.tcp.URG=v_hdr.tcp.URG_12}  OutVars{hdr.tcp.URG=v_hdr.tcp.URG_12}  AuxVars[]  AssignedVars[] 14037#L538_accept_S1 [1940] L538_accept_S1-->L539_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.ACK=v_hdr.tcp.ACK_12}  AuxVars[]  AssignedVars[hdr.tcp.ACK] 14038#L539_accept_S1 [2076] L539_accept_S1-->L540_accept_S1: Formula: (and (<= 0 v_hdr.tcp.ACK_10) (< v_hdr.tcp.ACK_10 2))  InVars {hdr.tcp.ACK=v_hdr.tcp.ACK_10}  OutVars{hdr.tcp.ACK=v_hdr.tcp.ACK_10}  AuxVars[]  AssignedVars[] 13599#L540_accept_S1 [1628] L540_accept_S1-->L541_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.PSH=v_hdr.tcp.PSH_9}  AuxVars[]  AssignedVars[hdr.tcp.PSH] 13600#L541_accept_S1 [1688] L541_accept_S1-->L542_accept_S1: Formula: (and (< v_hdr.tcp.PSH_11 2) (<= 0 v_hdr.tcp.PSH_11))  InVars {hdr.tcp.PSH=v_hdr.tcp.PSH_11}  OutVars{hdr.tcp.PSH=v_hdr.tcp.PSH_11}  AuxVars[]  AssignedVars[] 13704#L542_accept_S1 [2030] L542_accept_S1-->L543_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.RST=v_hdr.tcp.RST_9}  AuxVars[]  AssignedVars[hdr.tcp.RST] 13333#L543_accept_S1 [1491] L543_accept_S1-->L544_accept_S1: Formula: (and (< v_hdr.tcp.RST_12 2) (<= 0 v_hdr.tcp.RST_12))  InVars {hdr.tcp.RST=v_hdr.tcp.RST_12}  OutVars{hdr.tcp.RST=v_hdr.tcp.RST_12}  AuxVars[]  AssignedVars[] 13334#L544_accept_S1 [1496] L544_accept_S1-->L545_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.SYN=v_hdr.tcp.SYN_9}  AuxVars[]  AssignedVars[hdr.tcp.SYN] 13342#L545_accept_S1 [2062] L545_accept_S1-->L546_accept_S1: Formula: (and (<= 0 v_hdr.tcp.SYN_10) (< v_hdr.tcp.SYN_10 2))  InVars {hdr.tcp.SYN=v_hdr.tcp.SYN_10}  OutVars{hdr.tcp.SYN=v_hdr.tcp.SYN_10}  AuxVars[]  AssignedVars[] 13635#L546_accept_S1 [1648] L546_accept_S1-->L547_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.FIN=v_hdr.tcp.FIN_9}  AuxVars[]  AssignedVars[hdr.tcp.FIN] 13636#L547_accept_S1 [2144] L547_accept_S1-->L548_accept_S1: Formula: (and (<= 0 v_hdr.tcp.FIN_10) (< v_hdr.tcp.FIN_10 2))  InVars {hdr.tcp.FIN=v_hdr.tcp.FIN_10}  OutVars{hdr.tcp.FIN=v_hdr.tcp.FIN_10}  AuxVars[]  AssignedVars[] 13658#L548_accept_S1 [1666] L548_accept_S1-->L549_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.windowsize=v_hdr.tcp.windowsize_12}  AuxVars[]  AssignedVars[hdr.tcp.windowsize] 13659#L549_accept_S1 [2267] L549_accept_S1-->L550_accept_S1: Formula: (and (< v_hdr.tcp.windowsize_11 65536) (<= 0 v_hdr.tcp.windowsize_11))  InVars {hdr.tcp.windowsize=v_hdr.tcp.windowsize_11}  OutVars{hdr.tcp.windowsize=v_hdr.tcp.windowsize_11}  AuxVars[]  AssignedVars[] 13870#L550_accept_S1 [1804] L550_accept_S1-->L551_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.checksum=v_hdr.tcp.checksum_12}  AuxVars[]  AssignedVars[hdr.tcp.checksum] 13871#L551_accept_S1 [2147] L551_accept_S1-->L552_accept_S1: Formula: (and (< v_hdr.tcp.checksum_10 65536) (<= 0 v_hdr.tcp.checksum_10))  InVars {hdr.tcp.checksum=v_hdr.tcp.checksum_10}  OutVars{hdr.tcp.checksum=v_hdr.tcp.checksum_10}  AuxVars[]  AssignedVars[] 14124#L552_accept_S1 [2018] L552_accept_S1-->L553_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.pointer=v_hdr.tcp.pointer_10}  AuxVars[]  AssignedVars[hdr.tcp.pointer] 14125#L553_accept_S1 [2046] L553_accept_S1-->L554_accept_S1: Formula: (and (< v_hdr.tcp.pointer_11 65536) (<= 0 v_hdr.tcp.pointer_11))  InVars {hdr.tcp.pointer=v_hdr.tcp.pointer_11}  OutVars{hdr.tcp.pointer=v_hdr.tcp.pointer_11}  AuxVars[]  AssignedVars[] 13473#L554_accept_S1 [1559] L554_accept_S1-->L555_accept_S1: Formula: (not v_hdr.udp_tunnel.valid_20)  InVars {}  OutVars{hdr.udp_tunnel.valid=v_hdr.udp_tunnel.valid_20}  AuxVars[]  AssignedVars[hdr.udp_tunnel.valid] 13474#L555_accept_S1 [1738] L555_accept_S1-->L556_accept_S1: Formula: (= v_emit_33 (store v_emit_34 v_hdr.udp_tunnel_9 false))  InVars {emit=v_emit_34, hdr.udp_tunnel=v_hdr.udp_tunnel_9}  OutVars{emit=v_emit_33, hdr.udp_tunnel=v_hdr.udp_tunnel_9}  AuxVars[]  AssignedVars[emit] 13784#L556_accept_S1 [1894] L556_accept_S1-->L557_accept_S1: Formula: true  InVars {}  OutVars{hdr.udp_tunnel.srcport=v_hdr.udp_tunnel.srcport_16}  AuxVars[]  AssignedVars[hdr.udp_tunnel.srcport] 13424#L557_accept_S1 [1537] L557_accept_S1-->L558_accept_S1: Formula: (and (< v_hdr.udp_tunnel.srcport_17 65536) (<= 0 v_hdr.udp_tunnel.srcport_17))  InVars {hdr.udp_tunnel.srcport=v_hdr.udp_tunnel.srcport_17}  OutVars{hdr.udp_tunnel.srcport=v_hdr.udp_tunnel.srcport_17}  AuxVars[]  AssignedVars[] 13425#L558_accept_S1 [1759] L558_accept_S1-->L559_accept_S1: Formula: true  InVars {}  OutVars{hdr.udp_tunnel.dstport=v_hdr.udp_tunnel.dstport_14}  AuxVars[]  AssignedVars[hdr.udp_tunnel.dstport] 13304#L559_accept_S1 [1482] L559_accept_S1-->L560_accept_S1: Formula: (and (<= 0 v_hdr.udp_tunnel.dstport_15) (< v_hdr.udp_tunnel.dstport_15 65536))  InVars {hdr.udp_tunnel.dstport=v_hdr.udp_tunnel.dstport_15}  OutVars{hdr.udp_tunnel.dstport=v_hdr.udp_tunnel.dstport_15}  AuxVars[]  AssignedVars[] 13305#L560_accept_S1 [1743] L560_accept_S1-->L561_accept_S1: Formula: true  InVars {}  OutVars{hdr.udp_tunnel.userlength=v_hdr.udp_tunnel.userlength_17}  AuxVars[]  AssignedVars[hdr.udp_tunnel.userlength] 13787#L561_accept_S1 [1788] L561_accept_S1-->L562_accept_S1: Formula: (and (<= 0 v_hdr.udp_tunnel.userlength_16) (< v_hdr.udp_tunnel.userlength_16 65536))  InVars {hdr.udp_tunnel.userlength=v_hdr.udp_tunnel.userlength_16}  OutVars{hdr.udp_tunnel.userlength=v_hdr.udp_tunnel.userlength_16}  AuxVars[]  AssignedVars[] 13850#L562_accept_S1 [2139] L562_accept_S1-->L563_accept_S1: Formula: true  InVars {}  OutVars{hdr.udp_tunnel.checksum=v_hdr.udp_tunnel.checksum_17}  AuxVars[]  AssignedVars[hdr.udp_tunnel.checksum] 14239#L563_accept_S1 [2177] L563_accept_S1-->havocProcedureFINAL_accept_S1: Formula: (and (< v_hdr.udp_tunnel.checksum_14 65536) (<= 0 v_hdr.udp_tunnel.checksum_14))  InVars {hdr.udp_tunnel.checksum=v_hdr.udp_tunnel.checksum_14}  OutVars{hdr.udp_tunnel.checksum=v_hdr.udp_tunnel.checksum_14}  AuxVars[]  AssignedVars[] 13859#havocProcedureFINAL_accept_S1 [1795] havocProcedureFINAL_accept_S1-->havocProcedureEXIT_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13535#havocProcedureEXIT_accept_S1 >[2387] havocProcedureEXIT_accept_S1-->L568-D55: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13536#L568-D55 [2015] L568-D55-->L568_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13495#L568_accept_S1 [2264] L568_accept_S1-->L568_accept_S1-D49: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 13548#L568_accept_S1-D49 [1601] L568_accept_S1-D49-->_parser_MyParserENTRY_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13317#_parser_MyParserENTRY_accept_S1 [1571] _parser_MyParserENTRY_accept_S1-->_parser_MyParserENTRY_accept_S1-D17: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 13316#_parser_MyParserENTRY_accept_S1-D17 [1487] _parser_MyParserENTRY_accept_S1-D17-->startENTRY_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13318#startENTRY_accept_S1 [1798] startENTRY_accept_S1-->L736_accept_S1: Formula: v_hdr.ethernet.valid_15  InVars {}  OutVars{hdr.ethernet.valid=v_hdr.ethernet.valid_15}  AuxVars[]  AssignedVars[hdr.ethernet.valid] 13439#L736_accept_S1 [1542] L736_accept_S1-->L739_accept_S1: Formula: (not (= v_hdr.ethernet.etherType_39 34525))  InVars {hdr.ethernet.etherType=v_hdr.ethernet.etherType_39}  OutVars{hdr.ethernet.etherType=v_hdr.ethernet.etherType_39}  AuxVars[]  AssignedVars[] 13441#L739_accept_S1 [1662] L739_accept_S1-->L739-1_accept_S1: Formula: (not (= v_hdr.ethernet.etherType_35 2048))  InVars {hdr.ethernet.etherType=v_hdr.ethernet.etherType_35}  OutVars{hdr.ethernet.etherType=v_hdr.ethernet.etherType_35}  AuxVars[]  AssignedVars[] 13458#L739-1_accept_S1 [1806] L739-1_accept_S1-->startEXIT_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13873#startEXIT_accept_S1 >[2344] startEXIT_accept_S1-->_parser_MyParserFINAL-D65: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13528#_parser_MyParserFINAL-D65 [1591] _parser_MyParserFINAL-D65-->_parser_MyParserFINAL_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13529#_parser_MyParserFINAL_accept_S1 [1592] _parser_MyParserFINAL_accept_S1-->_parser_MyParserEXIT_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13530#_parser_MyParserEXIT_accept_S1 >[2283] _parser_MyParserEXIT_accept_S1-->L569-D103: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13749#L569-D103 [1714] L569-D103-->L569_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13646#L569_accept_S1 [1658] L569_accept_S1-->L569_accept_S1-D51: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 13647#L569_accept_S1-D51 [1684] L569_accept_S1-D51-->MyVerifyChecksumFINAL_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13697#MyVerifyChecksumFINAL_accept_S1 [1723] MyVerifyChecksumFINAL_accept_S1-->MyVerifyChecksumEXIT_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13764#MyVerifyChecksumEXIT_accept_S1 >[2336] MyVerifyChecksumEXIT_accept_S1-->L570-D73: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13933#L570-D73 [1848] L570-D73-->L570_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13264#L570_accept_S1 [2056] L570_accept_S1-->L570_accept_S1-D13: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 14166#L570_accept_S1-D13 [2209] L570_accept_S1-D13-->MyIngressENTRY_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14049#MyIngressENTRY_accept_S1 [1947] MyIngressENTRY_accept_S1-->L259_accept_S1: Formula: (= v_standard_metadata.ingress_port_18 0)  InVars {standard_metadata.ingress_port=v_standard_metadata.ingress_port_18}  OutVars{standard_metadata.ingress_port=v_standard_metadata.ingress_port_18}  AuxVars[]  AssignedVars[] 14050#L259_accept_S1 [2180] L259_accept_S1-->L266_accept_S1: Formula: (not (= v_hdr.ipv4.dstAddr_21 2071690107))  InVars {hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_21}  OutVars{hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_21}  AuxVars[]  AssignedVars[] 13369#L266_accept_S1 [1510] L266_accept_S1-->L267_accept_S1: Formula: (and (not (= 281474976710655 v_hdr.ethernet.dstAddr_37)) (not (= v_hdr.ethernet.srcAddr_28 0)))  InVars {hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_28, hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_37}  OutVars{hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_28, hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_37}  AuxVars[]  AssignedVars[] 13287#L267_accept_S1 [1500] L267_accept_S1-->L267_accept_S1-D33: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 13350#L267_accept_S1-D33 [1892] L267_accept_S1-D33-->store_user_macENTRY_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13361#store_user_macENTRY_accept_S1 [1506] store_user_macENTRY_accept_S1-->store_user_macENTRY_accept_S1-D39: Formula: (and (= v_user_mac.write_indexInParam_1 0) (= v_hdr.ethernet.srcAddr_21 v_user_mac.write_valueInParam_1))  InVars {hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_21}  OutVars{user_mac.write_value=v_user_mac.write_valueInParam_1, user_mac.write_index=v_user_mac.write_indexInParam_1, hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_21}  AuxVars[]  AssignedVars[user_mac.write_value, user_mac.write_index]< 13362#store_user_macENTRY_accept_S1-D39 [2039] store_user_macENTRY_accept_S1-D39-->user_mac.writeENTRY_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14108#user_mac.writeENTRY_accept_S1 [2004] user_mac.writeENTRY_accept_S1-->user_mac.writeFINAL_accept_S1: Formula: (= v_user_mac_16 (store v_user_mac_17 v_user_mac.write_index_2 v_user_mac.write_value_2))  InVars {user_mac.write_value=v_user_mac.write_value_2, user_mac.write_index=v_user_mac.write_index_2, user_mac=v_user_mac_17}  OutVars{user_mac.write_value=v_user_mac.write_value_2, user_mac.write_index=v_user_mac.write_index_2, user_mac=v_user_mac_16}  AuxVars[]  AssignedVars[user_mac] 14035#user_mac.writeFINAL_accept_S1 [1939] user_mac.writeFINAL_accept_S1-->user_mac.writeEXIT_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14036#user_mac.writeEXIT_accept_S1 >[2370] user_mac.writeEXIT_accept_S1-->store_user_macFINAL-D63: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: (and (= v_user_mac.write_indexInParam_1 0) (= v_hdr.ethernet.srcAddr_21 v_user_mac.write_valueInParam_1))  InVars {hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_21}  OutVars{user_mac.write_value=v_user_mac.write_valueInParam_1, user_mac.write_index=v_user_mac.write_indexInParam_1, hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_21}  AuxVars[]  AssignedVars[user_mac.write_value, user_mac.write_index] 13286#store_user_macFINAL-D63 [1473] store_user_macFINAL-D63-->store_user_macFINAL_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13288#store_user_macFINAL_accept_S1 [2072] store_user_macFINAL_accept_S1-->store_user_macEXIT_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13727#store_user_macEXIT_accept_S1 >[2378] store_user_macEXIT_accept_S1-->L267-1-D67: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13566#L267-1-D67 [1611] L267-1-D67-->L267-1_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13261#L267-1_accept_S1 [2271] L267-1_accept_S1-->L267-1_accept_S1-D5: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 13523#L267-1_accept_S1-D5 [1587] L267-1_accept_S1-D5-->read_esboxENTRY_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13524#read_esboxENTRY_accept_S1 [1632] read_esboxENTRY_accept_S1-->L692_accept_S1: Formula: (= v_tmp_0_14 (mod (div (+ (* (- 1) (mod 0 1)) v_hdr.tcp.sequence_83) 1) 256))  InVars {hdr.tcp.sequence=v_hdr.tcp.sequence_83}  OutVars{hdr.tcp.sequence=v_hdr.tcp.sequence_83, tmp_0=v_tmp_0_14}  AuxVars[]  AssignedVars[tmp_0] 13609#L692_accept_S1 [1890] L692_accept_S1-->L693_accept_S1: Formula: (= (select v_es_box_12 v_tmp_0_11) v_tmp_11)  InVars {es_box=v_es_box_12, tmp_0=v_tmp_0_11}  OutVars{tmp=v_tmp_11, es_box=v_es_box_12, tmp_0=v_tmp_0_11}  AuxVars[]  AssignedVars[tmp] 13979#L693_accept_S1 [2051] L693_accept_S1-->L694_accept_S1: Formula: (= (+ (* (- 1) (mod v_hdr.tcp.sequence_81 256)) (mod 0 1) v_hdr.tcp.sequence_81 v_tmp_13) v_hdr.tcp.sequence_80)  InVars {tmp=v_tmp_13, hdr.tcp.sequence=v_hdr.tcp.sequence_81}  OutVars{tmp=v_tmp_13, hdr.tcp.sequence=v_hdr.tcp.sequence_80}  AuxVars[]  AssignedVars[hdr.tcp.sequence] 14159#L694_accept_S1 [2082] L694_accept_S1-->L696_accept_S1: Formula: (= (mod (div (+ (* (- 1) (mod v_hdr.tcp.sequence_71 256)) v_hdr.tcp.sequence_71) 256) 256) v_tmp_2_11)  InVars {hdr.tcp.sequence=v_hdr.tcp.sequence_71}  OutVars{tmp_2=v_tmp_2_11, hdr.tcp.sequence=v_hdr.tcp.sequence_71}  AuxVars[]  AssignedVars[tmp_2] 13395#L696_accept_S1 [1522] L696_accept_S1-->L697_accept_S1: Formula: (= v_tmp_1_14 (select v_es_box_25 v_tmp_2_14))  InVars {es_box=v_es_box_25, tmp_2=v_tmp_2_14}  OutVars{tmp_2=v_tmp_2_14, es_box=v_es_box_25, tmp_1=v_tmp_1_14}  AuxVars[]  AssignedVars[tmp_1] 13396#L697_accept_S1 [1966] L697_accept_S1-->L698_accept_S1: Formula: (= (+ (mod v_hdr.tcp.sequence_70 256) (* (- 1) (mod v_hdr.tcp.sequence_70 65536)) (* 256 v_tmp_1_11) v_hdr.tcp.sequence_70) v_hdr.tcp.sequence_69)  InVars {hdr.tcp.sequence=v_hdr.tcp.sequence_70, tmp_1=v_tmp_1_11}  OutVars{hdr.tcp.sequence=v_hdr.tcp.sequence_69, tmp_1=v_tmp_1_11}  AuxVars[]  AssignedVars[hdr.tcp.sequence] 14068#L698_accept_S1 [2157] L698_accept_S1-->L700_accept_S1: Formula: (= v_tmp_4_13 (mod (div (+ v_hdr.tcp.sequence_86 (* (- 1) (mod v_hdr.tcp.sequence_86 65536))) 65536) 256))  InVars {hdr.tcp.sequence=v_hdr.tcp.sequence_86}  OutVars{hdr.tcp.sequence=v_hdr.tcp.sequence_86, tmp_4=v_tmp_4_13}  AuxVars[]  AssignedVars[tmp_4] 13556#L700_accept_S1 [1604] L700_accept_S1-->L701_accept_S1: Formula: (= v_tmp_3_12 (select v_es_box_20 v_tmp_4_12))  InVars {es_box=v_es_box_20, tmp_4=v_tmp_4_12}  OutVars{tmp_3=v_tmp_3_12, tmp_4=v_tmp_4_12, es_box=v_es_box_20}  AuxVars[]  AssignedVars[tmp_3] 13260#L701_accept_S1 [1461] L701_accept_S1-->L702_accept_S1: Formula: (= v_hdr.tcp.sequence_84 (+ (* 65536 v_tmp_3_11) (* (- 1) (mod v_hdr.tcp.sequence_85 16777216)) (mod v_hdr.tcp.sequence_85 65536) v_hdr.tcp.sequence_85))  InVars {tmp_3=v_tmp_3_11, hdr.tcp.sequence=v_hdr.tcp.sequence_85}  OutVars{tmp_3=v_tmp_3_11, hdr.tcp.sequence=v_hdr.tcp.sequence_84}  AuxVars[]  AssignedVars[hdr.tcp.sequence] 13262#L702_accept_S1 [2200] L702_accept_S1-->L704_accept_S1: Formula: (= v_tmp_6_11 (mod (div (+ v_hdr.tcp.sequence_79 (* (- 1) (mod v_hdr.tcp.sequence_79 16777216))) 16777216) 256))  InVars {hdr.tcp.sequence=v_hdr.tcp.sequence_79}  OutVars{tmp_6=v_tmp_6_11, hdr.tcp.sequence=v_hdr.tcp.sequence_79}  AuxVars[]  AssignedVars[tmp_6] 13483#L704_accept_S1 [1564] L704_accept_S1-->L705_accept_S1: Formula: (= v_tmp_5_14 (select v_es_box_26 v_tmp_6_14))  InVars {es_box=v_es_box_26, tmp_6=v_tmp_6_14}  OutVars{tmp_5=v_tmp_5_14, es_box=v_es_box_26, tmp_6=v_tmp_6_14}  AuxVars[]  AssignedVars[tmp_5] 13484#L705_accept_S1 [1960] L705_accept_S1-->L706_accept_S1: Formula: (= (+ (* (- 1) (mod v_hdr.tcp.sequence_73 4294967296)) (* 16777216 v_tmp_5_11) v_hdr.tcp.sequence_73 (mod v_hdr.tcp.sequence_73 16777216)) v_hdr.tcp.sequence_72)  InVars {tmp_5=v_tmp_5_11, hdr.tcp.sequence=v_hdr.tcp.sequence_73}  OutVars{tmp_5=v_tmp_5_11, hdr.tcp.sequence=v_hdr.tcp.sequence_72}  AuxVars[]  AssignedVars[hdr.tcp.sequence] 13402#L706_accept_S1 [1525] L706_accept_S1-->L708_accept_S1: Formula: (= v_tmp_8_11 (mod (div (+ v_hdr.tcp.ackseq_75 (* (- 1) (mod 0 1))) 1) 256))  InVars {hdr.tcp.ackseq=v_hdr.tcp.ackseq_75}  OutVars{hdr.tcp.ackseq=v_hdr.tcp.ackseq_75, tmp_8=v_tmp_8_11}  AuxVars[]  AssignedVars[tmp_8] 13403#L708_accept_S1 [1922] L708_accept_S1-->L709_accept_S1: Formula: (= v_tmp_7_13 (select v_es_box_21 v_tmp_8_12))  InVars {es_box=v_es_box_21, tmp_8=v_tmp_8_12}  OutVars{tmp_7=v_tmp_7_13, es_box=v_es_box_21, tmp_8=v_tmp_8_12}  AuxVars[]  AssignedVars[tmp_7] 14020#L709_accept_S1 [2074] L709_accept_S1-->L710_accept_S1: Formula: (= v_hdr.tcp.ackseq_83 (+ v_hdr.tcp.ackseq_84 v_tmp_7_12 (mod 0 1) (* (- 1) (mod v_hdr.tcp.ackseq_84 256))))  InVars {tmp_7=v_tmp_7_12, hdr.tcp.ackseq=v_hdr.tcp.ackseq_84}  OutVars{tmp_7=v_tmp_7_12, hdr.tcp.ackseq=v_hdr.tcp.ackseq_83}  AuxVars[]  AssignedVars[hdr.tcp.ackseq] 14184#L710_accept_S1 [2138] L710_accept_S1-->L712_accept_S1: Formula: (= (mod (div (+ v_hdr.tcp.ackseq_88 (* (- 1) (mod v_hdr.tcp.ackseq_88 256))) 256) 256) v_tmp_10_13)  InVars {hdr.tcp.ackseq=v_hdr.tcp.ackseq_88}  OutVars{hdr.tcp.ackseq=v_hdr.tcp.ackseq_88, tmp_10=v_tmp_10_13}  AuxVars[]  AssignedVars[tmp_10] 13981#L712_accept_S1 [1895] L712_accept_S1-->L713_accept_S1: Formula: (= v_tmp_9_14 (select v_es_box_23 v_tmp_10_14))  InVars {es_box=v_es_box_23, tmp_10=v_tmp_10_14}  OutVars{tmp_10=v_tmp_10_14, es_box=v_es_box_23, tmp_9=v_tmp_9_14}  AuxVars[]  AssignedVars[tmp_9] 13481#L713_accept_S1 [1563] L713_accept_S1-->L714_accept_S1: Formula: (= v_hdr.tcp.ackseq_86 (+ v_hdr.tcp.ackseq_87 (* (- 1) (mod v_hdr.tcp.ackseq_87 65536)) (mod v_hdr.tcp.ackseq_87 256) (* 256 v_tmp_9_13)))  InVars {hdr.tcp.ackseq=v_hdr.tcp.ackseq_87, tmp_9=v_tmp_9_13}  OutVars{hdr.tcp.ackseq=v_hdr.tcp.ackseq_86, tmp_9=v_tmp_9_13}  AuxVars[]  AssignedVars[hdr.tcp.ackseq] 13482#L714_accept_S1 [1868] L714_accept_S1-->L716_accept_S1: Formula: (= (mod (div (+ v_hdr.tcp.ackseq_76 (* (- 1) (mod v_hdr.tcp.ackseq_76 65536))) 65536) 256) v_tmp_12_13)  InVars {hdr.tcp.ackseq=v_hdr.tcp.ackseq_76}  OutVars{hdr.tcp.ackseq=v_hdr.tcp.ackseq_76, tmp_12=v_tmp_12_13}  AuxVars[]  AssignedVars[tmp_12] 13950#L716_accept_S1 [1888] L716_accept_S1-->L717_accept_S1: Formula: (= (select v_es_box_11 v_tmp_12_12) v_tmp_11_11)  InVars {es_box=v_es_box_11, tmp_12=v_tmp_12_12}  OutVars{tmp_11=v_tmp_11_11, tmp_12=v_tmp_12_12, es_box=v_es_box_11}  AuxVars[]  AssignedVars[tmp_11] 13357#L717_accept_S1 [1504] L717_accept_S1-->L718_accept_S1: Formula: (= v_hdr.tcp.ackseq_81 (+ v_hdr.tcp.ackseq_82 (* 65536 v_tmp_11_12) (mod v_hdr.tcp.ackseq_82 65536) (* (- 1) (mod v_hdr.tcp.ackseq_82 16777216))))  InVars {tmp_11=v_tmp_11_12, hdr.tcp.ackseq=v_hdr.tcp.ackseq_82}  OutVars{tmp_11=v_tmp_11_12, hdr.tcp.ackseq=v_hdr.tcp.ackseq_81}  AuxVars[]  AssignedVars[hdr.tcp.ackseq] 13358#L718_accept_S1 [1637] L718_accept_S1-->L720_accept_S1: Formula: (= (mod (div (+ v_hdr.tcp.ackseq_69 (* (- 1) (mod v_hdr.tcp.ackseq_69 16777216))) 16777216) 256) v_tmp_14_11)  InVars {hdr.tcp.ackseq=v_hdr.tcp.ackseq_69}  OutVars{hdr.tcp.ackseq=v_hdr.tcp.ackseq_69, tmp_14=v_tmp_14_11}  AuxVars[]  AssignedVars[tmp_14] 13378#L720_accept_S1 [1515] L720_accept_S1-->L721_accept_S1: Formula: (= (select v_es_box_18 v_tmp_14_13) v_tmp_13_14)  InVars {es_box=v_es_box_18, tmp_14=v_tmp_14_13}  OutVars{es_box=v_es_box_18, tmp_13=v_tmp_13_14, tmp_14=v_tmp_14_13}  AuxVars[]  AssignedVars[tmp_13] 13379#L721_accept_S1 [1805] L721_accept_S1-->read_esboxFINAL_accept_S1: Formula: (= v_hdr.tcp.ackseq_70 (+ (* (- 1) (mod v_hdr.tcp.ackseq_71 4294967296)) v_hdr.tcp.ackseq_71 (mod v_hdr.tcp.ackseq_71 16777216) (* 16777216 v_tmp_13_11)))  InVars {hdr.tcp.ackseq=v_hdr.tcp.ackseq_71, tmp_13=v_tmp_13_11}  OutVars{hdr.tcp.ackseq=v_hdr.tcp.ackseq_70, tmp_13=v_tmp_13_11}  AuxVars[]  AssignedVars[hdr.tcp.ackseq] 13872#read_esboxFINAL_accept_S1 [2183] read_esboxFINAL_accept_S1-->read_esboxEXIT_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14123#read_esboxEXIT_accept_S1 >[2350] read_esboxEXIT_accept_S1-->L268-D81: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13803#L268-D81 [1753] L268-D81-->L268_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13593#L268_accept_S1 [2027] L268_accept_S1-->L268_accept_S1-D27: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 13592#L268_accept_S1-D27 [1626] L268_accept_S1-D27-->do_read_countENTRY_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13594#do_read_countENTRY_accept_S1 [2153] do_read_countENTRY_accept_S1-->do_read_countFINAL_accept_S1: Formula: (= (select v_count_16 0) v_temp_0_28)  InVars {count=v_count_16}  OutVars{count=v_count_16, temp_0=v_temp_0_28}  AuxVars[]  AssignedVars[temp_0] 14147#do_read_countFINAL_accept_S1 [2036] do_read_countFINAL_accept_S1-->do_read_countEXIT_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13595#do_read_countEXIT_accept_S1 >[2308] do_read_countEXIT_accept_S1-->L269-D83: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13596#L269-D83 [1712] L269-D83-->L269_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13744#L269_accept_S1 [2243] L269_accept_S1-->L270-1_accept_S1: Formula: (not (= v_temp_0_19 0))  InVars {temp_0=v_temp_0_19}  OutVars{temp_0=v_temp_0_19}  AuxVars[]  AssignedVars[] 13710#L270-1_accept_S1 [1694] L270-1_accept_S1-->L278-1_accept_S1: Formula: (not (= v_temp_0_21 1))  InVars {temp_0=v_temp_0_21}  OutVars{temp_0=v_temp_0_21}  AuxVars[]  AssignedVars[] 13711#L278-1_accept_S1 [2113] L278-1_accept_S1-->L287_accept_S1: Formula: (= v_temp_0_16 2)  InVars {temp_0=v_temp_0_16}  OutVars{temp_0=v_temp_0_16}  AuxVars[]  AssignedVars[] 13393#L287_accept_S1 [2268] L287_accept_S1-->L287_accept_S1-D11: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 13570#L287_accept_S1-D11 [1614] L287_accept_S1-D11-->creatipv6_2ENTRY_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13392#creatipv6_2ENTRY_accept_S1 [1521] creatipv6_2ENTRY_accept_S1-->L362_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13394#L362_accept_S1 [1765] L362_accept_S1-->L364_accept_S1: Formula: (= 6 v_hdr.ipv6.version_24)  InVars {}  OutVars{hdr.ipv6.version=v_hdr.ipv6.version_24}  AuxVars[]  AssignedVars[hdr.ipv6.version] 13819#L364_accept_S1 [2170] L364_accept_S1-->L365_accept_S1: Formula: (= v_hdr.ipv6.payloadlen_23 v_hdr.ipv4.totalLen_23)  InVars {hdr.ipv4.totalLen=v_hdr.ipv4.totalLen_23}  OutVars{hdr.ipv4.totalLen=v_hdr.ipv4.totalLen_23, hdr.ipv6.payloadlen=v_hdr.ipv6.payloadlen_23}  AuxVars[]  AssignedVars[hdr.ipv6.payloadlen] 14109#L365_accept_S1 [2005] L365_accept_S1-->L366_accept_S1: Formula: (= v_hdr.ipv6.nextheader_29 65)  InVars {}  OutVars{hdr.ipv6.nextheader=v_hdr.ipv6.nextheader_29}  AuxVars[]  AssignedVars[hdr.ipv6.nextheader] 13464#L366_accept_S1 [1555] L366_accept_S1-->L367_accept_S1: Formula: (= 64 v_hdr.ipv6.hoplimit_23)  InVars {}  OutVars{hdr.ipv6.hoplimit=v_hdr.ipv6.hoplimit_23}  AuxVars[]  AssignedVars[hdr.ipv6.hoplimit] 13465#L367_accept_S1 [1703] L367_accept_S1-->L368_accept_S1: Formula: (= v_hdr.ethernet.etherType_30 34525)  InVars {}  OutVars{hdr.ethernet.etherType=v_hdr.ethernet.etherType_30}  AuxVars[]  AssignedVars[hdr.ethernet.etherType] 13533#L368_accept_S1 [1593] L368_accept_S1-->L369_accept_S1: Formula: (= v_hdr.ipv6.srcAddr_21 42556065052551447243435947914287906818)  InVars {}  OutVars{hdr.ipv6.srcAddr=v_hdr.ipv6.srcAddr_21}  AuxVars[]  AssignedVars[hdr.ipv6.srcAddr] 13534#L369_accept_S1 [1963] L369_accept_S1-->L370_accept_S1: Formula: (= v_hdr.ipv6.dstAddr_21 42540765144257160172006968799218772358)  InVars {}  OutVars{hdr.ipv6.dstAddr=v_hdr.ipv6.dstAddr_21}  AuxVars[]  AssignedVars[hdr.ipv6.dstAddr] 14063#L370_accept_S1 [2163] L370_accept_S1-->L371_accept_S1: Formula: (= 33595163910409 v_hdr.ethernet.srcAddr_35)  InVars {}  OutVars{hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_35}  AuxVars[]  AssignedVars[hdr.ethernet.srcAddr] 14191#L371_accept_S1 [2083] L371_accept_S1-->creatipv6_2FINAL_accept_S1: Formula: (= v_hdr.ethernet.dstAddr_44 20159709288469)  InVars {}  OutVars{hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_44}  AuxVars[]  AssignedVars[hdr.ethernet.dstAddr] 13847#creatipv6_2FINAL_accept_S1 [1785] creatipv6_2FINAL_accept_S1-->creatipv6_2EXIT_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13848#creatipv6_2EXIT_accept_S1 >[2317] creatipv6_2EXIT_accept_S1-->L287-1-D95: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14319#L287-1-D95 [1878] L287-1-D95-->L287-1_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13706#L287-1_accept_S1 [1465] L287-1_accept_S1-->L287-1_accept_S1-D23: Formula: (and (= v_count.write_indexInParam_3 0) (= v_count.write_valueInParam_3 0))  InVars {}  OutVars{count.write_index=v_count.write_indexInParam_3, count.write_value=v_count.write_valueInParam_3}  AuxVars[]  AssignedVars[count.write_index, count.write_value]< 13705#L287-1_accept_S1-D23 [1691] L287-1_accept_S1-D23-->count.writeENTRY_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13707#count.writeENTRY_accept_S1 [1836] count.writeENTRY_accept_S1-->count.writeFINAL_accept_S1: Formula: (= (store v_count_19 v_count.write_index_2 v_count.write_value_2) v_count_18)  InVars {count=v_count_19, count.write_index=v_count.write_index_2, count.write_value=v_count.write_value_2}  OutVars{count=v_count_18, count.write_index=v_count.write_index_2, count.write_value=v_count.write_value_2}  AuxVars[]  AssignedVars[count] 14385#count.writeFINAL_accept_S1 [1787] count.writeFINAL_accept_S1-->count.writeEXIT_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14384#count.writeEXIT_accept_S1 >[2353] count.writeEXIT_accept_S1-->L289-D101: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: (and (= v_count.write_indexInParam_3 0) (= v_count.write_valueInParam_3 0))  InVars {}  OutVars{count.write_index=v_count.write_indexInParam_3, count.write_value=v_count.write_valueInParam_3}  AuxVars[]  AssignedVars[count.write_index, count.write_value] 13751#L289-D101 [1971] L289-D101-->L289_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14073#L289_accept_S1 [2262] L289_accept_S1-->L291_accept_S1: Formula: (= 3 v_standard_metadata.egress_spec_22)  InVars {}  OutVars{standard_metadata.egress_spec=v_standard_metadata.egress_spec_22}  AuxVars[]  AssignedVars[standard_metadata.egress_spec] 13675#L291_accept_S1 [1675] L291_accept_S1-->L292_accept_S1: Formula: (= 3 v_standard_metadata.egress_port_27)  InVars {}  OutVars{standard_metadata.egress_port=v_standard_metadata.egress_port_27}  AuxVars[]  AssignedVars[standard_metadata.egress_port] 13676#L292_accept_S1 [2095] L292_accept_S1-->L258_accept_S1: Formula: v_forward_20  InVars {}  OutVars{forward=v_forward_20}  AuxVars[]  AssignedVars[forward] 14197#L258_accept_S1 [1924] L258_accept_S1-->MyIngressEXIT_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14708#MyIngressEXIT_accept_S1 >[2368] MyIngressEXIT_accept_S1-->L571-D107: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14707#L571-D107 [2247] L571-D107-->L571_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14705#L571_accept_S1 [2088] L571_accept_S1-->L571_accept_S1-D7: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 14706#L571_accept_S1-D7 [2158] L571_accept_S1-D7-->MyEgressENTRY_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14711#MyEgressENTRY_accept_S1 [1527] MyEgressENTRY_accept_S1-->L249_accept_S1: Formula: (or (not (= 0 v_standard_metadata.egress_port_36)) (not v_hdr.tcp.valid_36))  InVars {standard_metadata.egress_port=v_standard_metadata.egress_port_36, hdr.tcp.valid=v_hdr.tcp.valid_36}  OutVars{standard_metadata.egress_port=v_standard_metadata.egress_port_36, hdr.tcp.valid=v_hdr.tcp.valid_36}  AuxVars[]  AssignedVars[] 14709#L249_accept_S1 [1585] L249_accept_S1-->MyEgressEXIT_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14704#MyEgressEXIT_accept_S1 >[2312] MyEgressEXIT_accept_S1-->L572-D89: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14703#L572-D89 [2123] L572-D89-->L572_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13937#L572_accept_S1 [1899] L572_accept_S1-->L572_accept_S1-D21: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 14702#L572_accept_S1-D21 [2213] L572_accept_S1-D21-->MyComputeChecksumFINAL_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13936#MyComputeChecksumFINAL_accept_S1 [1852] MyComputeChecksumFINAL_accept_S1-->MyComputeChecksumEXIT_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13938#MyComputeChecksumEXIT_accept_S1 >[2326] MyComputeChecksumEXIT_accept_S1-->L573-D109: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14701#L573-D109 [1832] L573-D109-->L573_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14700#L573_accept_S1 [1547] L573_accept_S1-->L574-1_accept_S1: Formula: v_forward_32  InVars {forward=v_forward_32}  OutVars{forward=v_forward_32}  AuxVars[]  AssignedVars[] 14698#L574-1_accept_S1 [2191] L574-1_accept_S1-->L578_accept_S1: Formula: (let ((.cse0 (= v__old_hdr.ethernet.srcAddr_15 0))) (or (and .cse0 (not v__p4ltl_0_7)) (and v__p4ltl_0_7 (not .cse0))))  InVars {_old_hdr.ethernet.srcAddr=v__old_hdr.ethernet.srcAddr_15}  OutVars{_p4ltl_0=v__p4ltl_0_7, _old_hdr.ethernet.srcAddr=v__old_hdr.ethernet.srcAddr_15}  AuxVars[]  AssignedVars[_p4ltl_0] 14697#L578_accept_S1 [2040] L578_accept_S1-->L579_accept_S1: Formula: (let ((.cse0 (= 2071690107 v__old_hdr.ipv4.dstAddr_15))) (or (and v__p4ltl_1_7 (not .cse0)) (and .cse0 (not v__p4ltl_1_7))))  InVars {_old_hdr.ipv4.dstAddr=v__old_hdr.ipv4.dstAddr_15}  OutVars{_old_hdr.ipv4.dstAddr=v__old_hdr.ipv4.dstAddr_15, _p4ltl_1=v__p4ltl_1_7}  AuxVars[]  AssignedVars[_p4ltl_1] 14696#L579_accept_S1 [1721] L579_accept_S1-->L580_accept_S1: Formula: (let ((.cse0 (= 281474976710655 v__old_hdr.ethernet.dstAddr_15))) (or (and v__p4ltl_2_7 (not .cse0)) (and (not v__p4ltl_2_7) .cse0)))  InVars {_old_hdr.ethernet.dstAddr=v__old_hdr.ethernet.dstAddr_15}  OutVars{_p4ltl_2=v__p4ltl_2_7, _old_hdr.ethernet.dstAddr=v__old_hdr.ethernet.dstAddr_15}  AuxVars[]  AssignedVars[_p4ltl_2] 14695#L580_accept_S1 [1485] L580_accept_S1-->mainFINAL_accept_S1: Formula: (let ((.cse0 (= v_standard_metadata.ingress_port_22 0))) (or (and .cse0 v__p4ltl_3_6) (and (not .cse0) (not v__p4ltl_3_6))))  InVars {standard_metadata.ingress_port=v_standard_metadata.ingress_port_22}  OutVars{standard_metadata.ingress_port=v_standard_metadata.ingress_port_22, _p4ltl_3=v__p4ltl_3_6}  AuxVars[]  AssignedVars[_p4ltl_3] 14694#mainFINAL_accept_S1 [1840] mainFINAL_accept_S1-->mainEXIT_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14693#mainEXIT_accept_S1 >[2385] mainEXIT_accept_S1-->L586-1-D71: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14691#L586-1-D71 [1954] L586-1-D71-->L586-1_T0_init: Formula: (or (not v__p4ltl_2_10) (= 1 v_standard_metadata.egress_port_31) (not v__p4ltl_0_10) (not v__p4ltl_1_10) (not v__p4ltl_3_10))  InVars {_p4ltl_2=v__p4ltl_2_10, standard_metadata.egress_port=v_standard_metadata.egress_port_31, _p4ltl_3=v__p4ltl_3_10, _p4ltl_0=v__p4ltl_0_10, _p4ltl_1=v__p4ltl_1_10}  OutVars{_p4ltl_2=v__p4ltl_2_10, standard_metadata.egress_port=v_standard_metadata.egress_port_31, _p4ltl_3=v__p4ltl_3_10, _p4ltl_0=v__p4ltl_0_10, _p4ltl_1=v__p4ltl_1_10}  AuxVars[]  AssignedVars[] 13391#L586-1_T0_init [1494] L586-1_T0_init-->L586_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14369#L586_T0_init [2105] L586_T0_init-->L586_T0_init-D20: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 14409#L586_T0_init-D20 [2227] L586_T0_init-D20-->mainENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14402#mainENTRY_T0_init [1864] mainENTRY_T0_init-->mainENTRY_T0_init-D38: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 14403#mainENTRY_T0_init-D38 [1636] mainENTRY_T0_init-D38-->havocProcedureENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14627#havocProcedureENTRY_T0_init [1671] havocProcedureENTRY_T0_init-->L421_T0_init: Formula: (not v_drop_12)  InVars {}  OutVars{drop=v_drop_12}  AuxVars[]  AssignedVars[drop] 14626#L421_T0_init [2201] L421_T0_init-->L422_T0_init: Formula: (not v_forward_17)  InVars {}  OutVars{forward=v_forward_17}  AuxVars[]  AssignedVars[forward] 14625#L422_T0_init [2151] L422_T0_init-->L423_T0_init: Formula: true  InVars {}  OutVars{standard_metadata.ingress_port=v_standard_metadata.ingress_port_16}  AuxVars[]  AssignedVars[standard_metadata.ingress_port] 14624#L423_T0_init [1949] L423_T0_init-->L424_T0_init: Formula: (and (<= 0 v_standard_metadata.ingress_port_15) (< v_standard_metadata.ingress_port_15 512))  InVars {standard_metadata.ingress_port=v_standard_metadata.ingress_port_15}  OutVars{standard_metadata.ingress_port=v_standard_metadata.ingress_port_15}  AuxVars[]  AssignedVars[] 14623#L424_T0_init [2007] L424_T0_init-->L425_T0_init: Formula: (= v_standard_metadata.egress_spec_16 0)  InVars {}  OutVars{standard_metadata.egress_spec=v_standard_metadata.egress_spec_16}  AuxVars[]  AssignedVars[standard_metadata.egress_spec] 14622#L425_T0_init [1998] L425_T0_init-->L426_T0_init: Formula: (= 0 v_standard_metadata.egress_port_18)  InVars {}  OutVars{standard_metadata.egress_port=v_standard_metadata.egress_port_18}  AuxVars[]  AssignedVars[standard_metadata.egress_port] 14621#L426_T0_init [1739] L426_T0_init-->L427_T0_init: Formula: true  InVars {}  OutVars{standard_metadata.instance_type=v_standard_metadata.instance_type_10}  AuxVars[]  AssignedVars[standard_metadata.instance_type] 14620#L427_T0_init [1475] L427_T0_init-->L428_T0_init: Formula: (and (< v_standard_metadata.instance_type_11 4294967296) (<= 0 v_standard_metadata.instance_type_11))  InVars {standard_metadata.instance_type=v_standard_metadata.instance_type_11}  OutVars{standard_metadata.instance_type=v_standard_metadata.instance_type_11}  AuxVars[]  AssignedVars[] 14619#L428_T0_init [1613] L428_T0_init-->L429_T0_init: Formula: true  InVars {}  OutVars{standard_metadata.packet_length=v_standard_metadata.packet_length_12}  AuxVars[]  AssignedVars[standard_metadata.packet_length] 14618#L429_T0_init [1908] L429_T0_init-->L430_T0_init: Formula: (and (<= 0 v_standard_metadata.packet_length_11) (< v_standard_metadata.packet_length_11 4294967296))  InVars {standard_metadata.packet_length=v_standard_metadata.packet_length_11}  OutVars{standard_metadata.packet_length=v_standard_metadata.packet_length_11}  AuxVars[]  AssignedVars[] 14617#L430_T0_init [1545] L430_T0_init-->L431_T0_init: Formula: true  InVars {}  OutVars{standard_metadata.enq_timestamp=v_standard_metadata.enq_timestamp_10}  AuxVars[]  AssignedVars[standard_metadata.enq_timestamp] 14616#L431_T0_init [1642] L431_T0_init-->L432_T0_init: Formula: (and (<= 0 v_standard_metadata.enq_timestamp_9) (< v_standard_metadata.enq_timestamp_9 4294967296))  InVars {standard_metadata.enq_timestamp=v_standard_metadata.enq_timestamp_9}  OutVars{standard_metadata.enq_timestamp=v_standard_metadata.enq_timestamp_9}  AuxVars[]  AssignedVars[] 14615#L432_T0_init [2160] L432_T0_init-->L433_T0_init: Formula: (= v_standard_metadata.enq_qdepth_9 0)  InVars {}  OutVars{standard_metadata.enq_qdepth=v_standard_metadata.enq_qdepth_9}  AuxVars[]  AssignedVars[standard_metadata.enq_qdepth] 14614#L433_T0_init [1815] L433_T0_init-->L434_T0_init: Formula: true  InVars {}  OutVars{standard_metadata.deq_timedelta=v_standard_metadata.deq_timedelta_12}  AuxVars[]  AssignedVars[standard_metadata.deq_timedelta] 14613#L434_T0_init [2053] L434_T0_init-->L435_T0_init: Formula: (and (<= 0 v_standard_metadata.deq_timedelta_11) (< v_standard_metadata.deq_timedelta_11 4294967296))  InVars {standard_metadata.deq_timedelta=v_standard_metadata.deq_timedelta_11}  OutVars{standard_metadata.deq_timedelta=v_standard_metadata.deq_timedelta_11}  AuxVars[]  AssignedVars[] 14612#L435_T0_init [1534] L435_T0_init-->L436_T0_init: Formula: true  InVars {}  OutVars{standard_metadata.deq_qdepth=v_standard_metadata.deq_qdepth_10}  AuxVars[]  AssignedVars[standard_metadata.deq_qdepth] 14611#L436_T0_init [2057] L436_T0_init-->L437_T0_init: Formula: (and (< v_standard_metadata.deq_qdepth_11 524288) (<= 0 v_standard_metadata.deq_qdepth_11))  InVars {standard_metadata.deq_qdepth=v_standard_metadata.deq_qdepth_11}  OutVars{standard_metadata.deq_qdepth=v_standard_metadata.deq_qdepth_11}  AuxVars[]  AssignedVars[] 14610#L437_T0_init [1659] L437_T0_init-->L438_T0_init: Formula: true  InVars {}  OutVars{standard_metadata.ingress_global_timestamp=v_standard_metadata.ingress_global_timestamp_11}  AuxVars[]  AssignedVars[standard_metadata.ingress_global_timestamp] 14609#L438_T0_init [1627] L438_T0_init-->L439_T0_init: Formula: (and (<= 0 v_standard_metadata.ingress_global_timestamp_12) (< v_standard_metadata.ingress_global_timestamp_12 281474976710656))  InVars {standard_metadata.ingress_global_timestamp=v_standard_metadata.ingress_global_timestamp_12}  OutVars{standard_metadata.ingress_global_timestamp=v_standard_metadata.ingress_global_timestamp_12}  AuxVars[]  AssignedVars[] 14608#L439_T0_init [2231] L439_T0_init-->L440_T0_init: Formula: true  InVars {}  OutVars{standard_metadata.egress_global_timestamp=v_standard_metadata.egress_global_timestamp_11}  AuxVars[]  AssignedVars[standard_metadata.egress_global_timestamp] 14607#L440_T0_init [1488] L440_T0_init-->L441_T0_init: Formula: (and (<= 0 v_standard_metadata.egress_global_timestamp_12) (< v_standard_metadata.egress_global_timestamp_12 281474976710656))  InVars {standard_metadata.egress_global_timestamp=v_standard_metadata.egress_global_timestamp_12}  OutVars{standard_metadata.egress_global_timestamp=v_standard_metadata.egress_global_timestamp_12}  AuxVars[]  AssignedVars[] 14606#L441_T0_init [1497] L441_T0_init-->L442_T0_init: Formula: (= 0 v_standard_metadata.mcast_grp_8)  InVars {}  OutVars{standard_metadata.mcast_grp=v_standard_metadata.mcast_grp_8}  AuxVars[]  AssignedVars[standard_metadata.mcast_grp] 14605#L442_T0_init [1783] L442_T0_init-->L443_T0_init: Formula: (= v_standard_metadata.egress_rid_9 0)  InVars {}  OutVars{standard_metadata.egress_rid=v_standard_metadata.egress_rid_9}  AuxVars[]  AssignedVars[standard_metadata.egress_rid] 14604#L443_T0_init [1900] L443_T0_init-->L444_T0_init: Formula: (= v_standard_metadata.checksum_error_8 0)  InVars {}  OutVars{standard_metadata.checksum_error=v_standard_metadata.checksum_error_8}  AuxVars[]  AssignedVars[standard_metadata.checksum_error] 14603#L444_T0_init [1711] L444_T0_init-->L445_T0_init: Formula: (= v_standard_metadata.parser_error_9 0)  InVars {}  OutVars{standard_metadata.parser_error=v_standard_metadata.parser_error_9}  AuxVars[]  AssignedVars[standard_metadata.parser_error] 14602#L445_T0_init [2251] L445_T0_init-->L446_T0_init: Formula: (= v_standard_metadata.priority_9 0)  InVars {}  OutVars{standard_metadata.priority=v_standard_metadata.priority_9}  AuxVars[]  AssignedVars[standard_metadata.priority] 14601#L446_T0_init [2120] L446_T0_init-->L447_T0_init: Formula: (not v_hdr.ethernet.valid_13)  InVars {}  OutVars{hdr.ethernet.valid=v_hdr.ethernet.valid_13}  AuxVars[]  AssignedVars[hdr.ethernet.valid] 14600#L447_T0_init [1771] L447_T0_init-->L448_T0_init: Formula: (= v_emit_37 (store v_emit_38 v_hdr.ethernet_3 false))  InVars {emit=v_emit_38, hdr.ethernet=v_hdr.ethernet_3}  OutVars{emit=v_emit_37, hdr.ethernet=v_hdr.ethernet_3}  AuxVars[]  AssignedVars[emit] 14599#L448_T0_init [1833] L448_T0_init-->L449_T0_init: Formula: true  InVars {}  OutVars{hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_27}  AuxVars[]  AssignedVars[hdr.ethernet.dstAddr] 14598#L449_T0_init [2216] L449_T0_init-->L450_T0_init: Formula: (= v_hdr.ethernet.dstAddr_29 v__old_hdr.ethernet.dstAddr_12)  InVars {hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_29}  OutVars{_old_hdr.ethernet.dstAddr=v__old_hdr.ethernet.dstAddr_12, hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_29}  AuxVars[]  AssignedVars[_old_hdr.ethernet.dstAddr] 14597#L450_T0_init [1701] L450_T0_init-->L451_T0_init: Formula: (= v_hdr.ethernet.dstAddr_30 v__old_hdr.ethernet.dstAddr_13)  InVars {hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_30}  OutVars{_old_hdr.ethernet.dstAddr=v__old_hdr.ethernet.dstAddr_13, hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_30}  AuxVars[]  AssignedVars[_old_hdr.ethernet.dstAddr] 14596#L451_T0_init [2155] L451_T0_init-->L452_T0_init: Formula: true  InVars {}  OutVars{hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_22}  AuxVars[]  AssignedVars[hdr.ethernet.srcAddr] 14595#L452_T0_init [1964] L452_T0_init-->L453_T0_init: Formula: (= v_hdr.ethernet.srcAddr_27 v__old_hdr.ethernet.srcAddr_13)  InVars {hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_27}  OutVars{hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_27, _old_hdr.ethernet.srcAddr=v__old_hdr.ethernet.srcAddr_13}  AuxVars[]  AssignedVars[_old_hdr.ethernet.srcAddr] 14594#L453_T0_init [1958] L453_T0_init-->L454_T0_init: Formula: (= v_hdr.ethernet.srcAddr_25 v__old_hdr.ethernet.srcAddr_12)  InVars {hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_25}  OutVars{hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_25, _old_hdr.ethernet.srcAddr=v__old_hdr.ethernet.srcAddr_12}  AuxVars[]  AssignedVars[_old_hdr.ethernet.srcAddr] 14593#L454_T0_init [1770] L454_T0_init-->L455_T0_init: Formula: true  InVars {}  OutVars{hdr.ethernet.etherType=v_hdr.ethernet.etherType_24}  AuxVars[]  AssignedVars[hdr.ethernet.etherType] 14592#L455_T0_init [1870] L455_T0_init-->L456_T0_init: Formula: (and (<= 0 v_hdr.ethernet.etherType_25) (< v_hdr.ethernet.etherType_25 65536))  InVars {hdr.ethernet.etherType=v_hdr.ethernet.etherType_25}  OutVars{hdr.ethernet.etherType=v_hdr.ethernet.etherType_25}  AuxVars[]  AssignedVars[] 14591#L456_T0_init [2121] L456_T0_init-->L457_T0_init: Formula: (not v_hdr.ipv6.valid_17)  InVars {}  OutVars{hdr.ipv6.valid=v_hdr.ipv6.valid_17}  AuxVars[]  AssignedVars[hdr.ipv6.valid] 14590#L457_T0_init [1901] L457_T0_init-->L458_T0_init: Formula: (= v_emit_41 (store v_emit_42 v_hdr.ipv6_10 false))  InVars {emit=v_emit_42, hdr.ipv6=v_hdr.ipv6_10}  OutVars{emit=v_emit_41, hdr.ipv6=v_hdr.ipv6_10}  AuxVars[]  AssignedVars[emit] 14589#L458_T0_init [1803] L458_T0_init-->L459_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv6.version=v_hdr.ipv6.version_18}  AuxVars[]  AssignedVars[hdr.ipv6.version] 14588#L459_T0_init [2031] L459_T0_init-->L460_T0_init: Formula: (and (<= 0 v_hdr.ipv6.version_17) (< v_hdr.ipv6.version_17 16))  InVars {hdr.ipv6.version=v_hdr.ipv6.version_17}  OutVars{hdr.ipv6.version=v_hdr.ipv6.version_17}  AuxVars[]  AssignedVars[] 14587#L460_T0_init [1599] L460_T0_init-->L461_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv6.trafclass=v_hdr.ipv6.trafclass_12}  AuxVars[]  AssignedVars[hdr.ipv6.trafclass] 14586#L461_T0_init [1539] L461_T0_init-->L462_T0_init: Formula: (and (< v_hdr.ipv6.trafclass_11 256) (<= 0 v_hdr.ipv6.trafclass_11))  InVars {hdr.ipv6.trafclass=v_hdr.ipv6.trafclass_11}  OutVars{hdr.ipv6.trafclass=v_hdr.ipv6.trafclass_11}  AuxVars[]  AssignedVars[] 14585#L462_T0_init [1654] L462_T0_init-->L463_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv6.flowlabel=v_hdr.ipv6.flowlabel_9}  AuxVars[]  AssignedVars[hdr.ipv6.flowlabel] 14584#L463_T0_init [1484] L463_T0_init-->L464_T0_init: Formula: (and (<= 0 v_hdr.ipv6.flowlabel_12) (< v_hdr.ipv6.flowlabel_12 1048576))  InVars {hdr.ipv6.flowlabel=v_hdr.ipv6.flowlabel_12}  OutVars{hdr.ipv6.flowlabel=v_hdr.ipv6.flowlabel_12}  AuxVars[]  AssignedVars[] 14583#L464_T0_init [1528] L464_T0_init-->L465_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv6.payloadlen=v_hdr.ipv6.payloadlen_18}  AuxVars[]  AssignedVars[hdr.ipv6.payloadlen] 14582#L465_T0_init [1682] L465_T0_init-->L466_T0_init: Formula: (and (<= 0 v_hdr.ipv6.payloadlen_20) (< v_hdr.ipv6.payloadlen_20 65536))  InVars {hdr.ipv6.payloadlen=v_hdr.ipv6.payloadlen_20}  OutVars{hdr.ipv6.payloadlen=v_hdr.ipv6.payloadlen_20}  AuxVars[]  AssignedVars[] 14581#L466_T0_init [1760] L466_T0_init-->L467_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv6.nextheader=v_hdr.ipv6.nextheader_22}  AuxVars[]  AssignedVars[hdr.ipv6.nextheader] 14580#L467_T0_init [1735] L467_T0_init-->L468_T0_init: Formula: (and (< v_hdr.ipv6.nextheader_19 256) (<= 0 v_hdr.ipv6.nextheader_19))  InVars {hdr.ipv6.nextheader=v_hdr.ipv6.nextheader_19}  OutVars{hdr.ipv6.nextheader=v_hdr.ipv6.nextheader_19}  AuxVars[]  AssignedVars[] 14579#L468_T0_init [1839] L468_T0_init-->L469_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv6.hoplimit=v_hdr.ipv6.hoplimit_19}  AuxVars[]  AssignedVars[hdr.ipv6.hoplimit] 14578#L469_T0_init [1913] L469_T0_init-->L470_T0_init: Formula: (and (<= 0 v_hdr.ipv6.hoplimit_18) (< v_hdr.ipv6.hoplimit_18 256))  InVars {hdr.ipv6.hoplimit=v_hdr.ipv6.hoplimit_18}  OutVars{hdr.ipv6.hoplimit=v_hdr.ipv6.hoplimit_18}  AuxVars[]  AssignedVars[] 14577#L470_T0_init [2165] L470_T0_init-->L471_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv6.srcAddr=v_hdr.ipv6.srcAddr_16}  AuxVars[]  AssignedVars[hdr.ipv6.srcAddr] 14576#L471_T0_init [1460] L471_T0_init-->L472_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv6.dstAddr=v_hdr.ipv6.dstAddr_16}  AuxVars[]  AssignedVars[hdr.ipv6.dstAddr] 14575#L472_T0_init [1722] L472_T0_init-->L473_T0_init: Formula: (not v_hdr.ipv4_tunnel.valid_19)  InVars {}  OutVars{hdr.ipv4_tunnel.valid=v_hdr.ipv4_tunnel.valid_19}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.valid] 14574#L473_T0_init [1580] L473_T0_init-->L474_T0_init: Formula: (= v_emit_39 (store v_emit_40 v_hdr.ipv4_tunnel_9 false))  InVars {emit=v_emit_40, hdr.ipv4_tunnel=v_hdr.ipv4_tunnel_9}  OutVars{emit=v_emit_39, hdr.ipv4_tunnel=v_hdr.ipv4_tunnel_9}  AuxVars[]  AssignedVars[emit] 14573#L474_T0_init [1568] L474_T0_init-->L475_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.version=v_hdr.ipv4_tunnel.version_16}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.version] 14572#L475_T0_init [1816] L475_T0_init-->L476_T0_init: Formula: (and (<= 0 v_hdr.ipv4_tunnel.version_17) (< v_hdr.ipv4_tunnel.version_17 16))  InVars {hdr.ipv4_tunnel.version=v_hdr.ipv4_tunnel.version_17}  OutVars{hdr.ipv4_tunnel.version=v_hdr.ipv4_tunnel.version_17}  AuxVars[]  AssignedVars[] 14571#L476_T0_init [1885] L476_T0_init-->L477_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.ihl=v_hdr.ipv4_tunnel.ihl_14}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.ihl] 14570#L477_T0_init [1459] L477_T0_init-->L478_T0_init: Formula: (and (< v_hdr.ipv4_tunnel.ihl_17 16) (<= 0 v_hdr.ipv4_tunnel.ihl_17))  InVars {hdr.ipv4_tunnel.ihl=v_hdr.ipv4_tunnel.ihl_17}  OutVars{hdr.ipv4_tunnel.ihl=v_hdr.ipv4_tunnel.ihl_17}  AuxVars[]  AssignedVars[] 14569#L478_T0_init [1744] L478_T0_init-->L479_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.diffserv=v_hdr.ipv4_tunnel.diffserv_15}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.diffserv] 14568#L479_T0_init [1664] L479_T0_init-->L480_T0_init: Formula: (and (< v_hdr.ipv4_tunnel.diffserv_14 256) (<= 0 v_hdr.ipv4_tunnel.diffserv_14))  InVars {hdr.ipv4_tunnel.diffserv=v_hdr.ipv4_tunnel.diffserv_14}  OutVars{hdr.ipv4_tunnel.diffserv=v_hdr.ipv4_tunnel.diffserv_14}  AuxVars[]  AssignedVars[] 14567#L480_T0_init [1602] L480_T0_init-->L481_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.totalLen=v_hdr.ipv4_tunnel.totalLen_14}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.totalLen] 14566#L481_T0_init [2263] L481_T0_init-->L482_T0_init: Formula: (and (< v_hdr.ipv4_tunnel.totalLen_17 65536) (<= 0 v_hdr.ipv4_tunnel.totalLen_17))  InVars {hdr.ipv4_tunnel.totalLen=v_hdr.ipv4_tunnel.totalLen_17}  OutVars{hdr.ipv4_tunnel.totalLen=v_hdr.ipv4_tunnel.totalLen_17}  AuxVars[]  AssignedVars[] 14565#L482_T0_init [1709] L482_T0_init-->L483_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.identification=v_hdr.ipv4_tunnel.identification_15}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.identification] 14564#L483_T0_init [1823] L483_T0_init-->L484_T0_init: Formula: (and (<= 0 v_hdr.ipv4_tunnel.identification_17) (< v_hdr.ipv4_tunnel.identification_17 65536))  InVars {hdr.ipv4_tunnel.identification=v_hdr.ipv4_tunnel.identification_17}  OutVars{hdr.ipv4_tunnel.identification=v_hdr.ipv4_tunnel.identification_17}  AuxVars[]  AssignedVars[] 14563#L484_T0_init [1910] L484_T0_init-->L485_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.flags=v_hdr.ipv4_tunnel.flags_16}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.flags] 14561#L485_T0_init [1647] L485_T0_init-->L486_T0_init: Formula: (and (< v_hdr.ipv4_tunnel.flags_15 8) (<= 0 v_hdr.ipv4_tunnel.flags_15))  InVars {hdr.ipv4_tunnel.flags=v_hdr.ipv4_tunnel.flags_15}  OutVars{hdr.ipv4_tunnel.flags=v_hdr.ipv4_tunnel.flags_15}  AuxVars[]  AssignedVars[] 14559#L486_T0_init [1904] L486_T0_init-->L487_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.fragOffset=v_hdr.ipv4_tunnel.fragOffset_17}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.fragOffset] 14557#L487_T0_init [2094] L487_T0_init-->L488_T0_init: Formula: (and (< v_hdr.ipv4_tunnel.fragOffset_16 8192) (<= 0 v_hdr.ipv4_tunnel.fragOffset_16))  InVars {hdr.ipv4_tunnel.fragOffset=v_hdr.ipv4_tunnel.fragOffset_16}  OutVars{hdr.ipv4_tunnel.fragOffset=v_hdr.ipv4_tunnel.fragOffset_16}  AuxVars[]  AssignedVars[] 14555#L488_T0_init [2161] L488_T0_init-->L489_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.ttl=v_hdr.ipv4_tunnel.ttl_14}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.ttl] 14553#L489_T0_init [2081] L489_T0_init-->L490_T0_init: Formula: (and (< v_hdr.ipv4_tunnel.ttl_16 256) (<= 0 v_hdr.ipv4_tunnel.ttl_16))  InVars {hdr.ipv4_tunnel.ttl=v_hdr.ipv4_tunnel.ttl_16}  OutVars{hdr.ipv4_tunnel.ttl=v_hdr.ipv4_tunnel.ttl_16}  AuxVars[]  AssignedVars[] 14551#L490_T0_init [1489] L490_T0_init-->L491_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.protocol=v_hdr.ipv4_tunnel.protocol_17}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.protocol] 14549#L491_T0_init [2221] L491_T0_init-->L492_T0_init: Formula: (and (< v_hdr.ipv4_tunnel.protocol_16 256) (<= 0 v_hdr.ipv4_tunnel.protocol_16))  InVars {hdr.ipv4_tunnel.protocol=v_hdr.ipv4_tunnel.protocol_16}  OutVars{hdr.ipv4_tunnel.protocol=v_hdr.ipv4_tunnel.protocol_16}  AuxVars[]  AssignedVars[] 14547#L492_T0_init [2220] L492_T0_init-->L493_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.hdrChecksum=v_hdr.ipv4_tunnel.hdrChecksum_11}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.hdrChecksum] 14545#L493_T0_init [2277] L493_T0_init-->L494_T0_init: Formula: (and (<= 0 v_hdr.ipv4_tunnel.hdrChecksum_12) (< v_hdr.ipv4_tunnel.hdrChecksum_12 65536))  InVars {hdr.ipv4_tunnel.hdrChecksum=v_hdr.ipv4_tunnel.hdrChecksum_12}  OutVars{hdr.ipv4_tunnel.hdrChecksum=v_hdr.ipv4_tunnel.hdrChecksum_12}  AuxVars[]  AssignedVars[] 14543#L494_T0_init [2126] L494_T0_init-->L495_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.srcAddr=v_hdr.ipv4_tunnel.srcAddr_13}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.srcAddr] 14541#L495_T0_init [1493] L495_T0_init-->L496_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.dstAddr=v_hdr.ipv4_tunnel.dstAddr_13}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.dstAddr] 14537#L496_T0_init [1517] L496_T0_init-->L497_T0_init: Formula: (not v_hdr.ipv4.valid_25)  InVars {}  OutVars{hdr.ipv4.valid=v_hdr.ipv4.valid_25}  AuxVars[]  AssignedVars[hdr.ipv4.valid] 14536#L497_T0_init [1794] L497_T0_init-->L498_T0_init: Formula: (= v_emit_27 (store v_emit_28 v_hdr.ipv4_2 false))  InVars {hdr.ipv4=v_hdr.ipv4_2, emit=v_emit_28}  OutVars{hdr.ipv4=v_hdr.ipv4_2, emit=v_emit_27}  AuxVars[]  AssignedVars[emit] 14535#L498_T0_init [2117] L498_T0_init-->L499_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.version=v_hdr.ipv4.version_13}  AuxVars[]  AssignedVars[hdr.ipv4.version] 14534#L499_T0_init [1696] L499_T0_init-->L500_T0_init: Formula: (and (< v_hdr.ipv4.version_10 16) (<= 0 v_hdr.ipv4.version_10))  InVars {hdr.ipv4.version=v_hdr.ipv4.version_10}  OutVars{hdr.ipv4.version=v_hdr.ipv4.version_10}  AuxVars[]  AssignedVars[] 14533#L500_T0_init [2045] L500_T0_init-->L501_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.ihl=v_hdr.ipv4.ihl_9}  AuxVars[]  AssignedVars[hdr.ipv4.ihl] 14532#L501_T0_init [2140] L501_T0_init-->L502_T0_init: Formula: (and (< v_hdr.ipv4.ihl_10 16) (<= 0 v_hdr.ipv4.ihl_10))  InVars {hdr.ipv4.ihl=v_hdr.ipv4.ihl_10}  OutVars{hdr.ipv4.ihl=v_hdr.ipv4.ihl_10}  AuxVars[]  AssignedVars[] 14531#L502_T0_init [2067] L502_T0_init-->L503_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.diffserv=v_hdr.ipv4.diffserv_13}  AuxVars[]  AssignedVars[hdr.ipv4.diffserv] 14530#L503_T0_init [2009] L503_T0_init-->L504_T0_init: Formula: (and (<= 0 v_hdr.ipv4.diffserv_12) (< v_hdr.ipv4.diffserv_12 256))  InVars {hdr.ipv4.diffserv=v_hdr.ipv4.diffserv_12}  OutVars{hdr.ipv4.diffserv=v_hdr.ipv4.diffserv_12}  AuxVars[]  AssignedVars[] 14529#L504_T0_init [1875] L504_T0_init-->L505_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.totalLen=v_hdr.ipv4.totalLen_14}  AuxVars[]  AssignedVars[hdr.ipv4.totalLen] 14528#L505_T0_init [1486] L505_T0_init-->L506_T0_init: Formula: (and (< v_hdr.ipv4.totalLen_15 65536) (<= 0 v_hdr.ipv4.totalLen_15))  InVars {hdr.ipv4.totalLen=v_hdr.ipv4.totalLen_15}  OutVars{hdr.ipv4.totalLen=v_hdr.ipv4.totalLen_15}  AuxVars[]  AssignedVars[] 14527#L506_T0_init [2122] L506_T0_init-->L507_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.identification=v_hdr.ipv4.identification_12}  AuxVars[]  AssignedVars[hdr.ipv4.identification] 14526#L507_T0_init [1914] L507_T0_init-->L508_T0_init: Formula: (and (< v_hdr.ipv4.identification_11 65536) (<= 0 v_hdr.ipv4.identification_11))  InVars {hdr.ipv4.identification=v_hdr.ipv4.identification_11}  OutVars{hdr.ipv4.identification=v_hdr.ipv4.identification_11}  AuxVars[]  AssignedVars[] 14525#L508_T0_init [2054] L508_T0_init-->L509_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.flags=v_hdr.ipv4.flags_10}  AuxVars[]  AssignedVars[hdr.ipv4.flags] 14524#L509_T0_init [2246] L509_T0_init-->L510_T0_init: Formula: (and (< v_hdr.ipv4.flags_13 8) (<= 0 v_hdr.ipv4.flags_13))  InVars {hdr.ipv4.flags=v_hdr.ipv4.flags_13}  OutVars{hdr.ipv4.flags=v_hdr.ipv4.flags_13}  AuxVars[]  AssignedVars[] 14523#L510_T0_init [1529] L510_T0_init-->L511_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.fragOffset=v_hdr.ipv4.fragOffset_11}  AuxVars[]  AssignedVars[hdr.ipv4.fragOffset] 14522#L511_T0_init [1817] L511_T0_init-->L512_T0_init: Formula: (and (< v_hdr.ipv4.fragOffset_10 8192) (<= 0 v_hdr.ipv4.fragOffset_10))  InVars {hdr.ipv4.fragOffset=v_hdr.ipv4.fragOffset_10}  OutVars{hdr.ipv4.fragOffset=v_hdr.ipv4.fragOffset_10}  AuxVars[]  AssignedVars[] 14521#L512_T0_init [1615] L512_T0_init-->L513_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.ttl=v_hdr.ipv4.ttl_10}  AuxVars[]  AssignedVars[hdr.ipv4.ttl] 14520#L513_T0_init [2035] L513_T0_init-->L514_T0_init: Formula: (and (<= 0 v_hdr.ipv4.ttl_11) (< v_hdr.ipv4.ttl_11 256))  InVars {hdr.ipv4.ttl=v_hdr.ipv4.ttl_11}  OutVars{hdr.ipv4.ttl=v_hdr.ipv4.ttl_11}  AuxVars[]  AssignedVars[] 14519#L514_T0_init [1706] L514_T0_init-->L515_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.protocol=v_hdr.ipv4.protocol_12}  AuxVars[]  AssignedVars[hdr.ipv4.protocol] 14518#L515_T0_init [1778] L515_T0_init-->L516_T0_init: Formula: (and (<= 0 v_hdr.ipv4.protocol_14) (< v_hdr.ipv4.protocol_14 256))  InVars {hdr.ipv4.protocol=v_hdr.ipv4.protocol_14}  OutVars{hdr.ipv4.protocol=v_hdr.ipv4.protocol_14}  AuxVars[]  AssignedVars[] 14517#L516_T0_init [2106] L516_T0_init-->L517_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.hdrChecksum=v_hdr.ipv4.hdrChecksum_9}  AuxVars[]  AssignedVars[hdr.ipv4.hdrChecksum] 14516#L517_T0_init [1842] L517_T0_init-->L518_T0_init: Formula: (and (< v_hdr.ipv4.hdrChecksum_10 65536) (<= 0 v_hdr.ipv4.hdrChecksum_10))  InVars {hdr.ipv4.hdrChecksum=v_hdr.ipv4.hdrChecksum_10}  OutVars{hdr.ipv4.hdrChecksum=v_hdr.ipv4.hdrChecksum_10}  AuxVars[]  AssignedVars[] 14515#L518_T0_init [1932] L518_T0_init-->L519_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.srcAddr=v_hdr.ipv4.srcAddr_9}  AuxVars[]  AssignedVars[hdr.ipv4.srcAddr] 14514#L519_T0_init [1707] L519_T0_init-->L520_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_16}  AuxVars[]  AssignedVars[hdr.ipv4.dstAddr] 14513#L520_T0_init [1573] L520_T0_init-->L521_T0_init: Formula: (= v_hdr.ipv4.dstAddr_17 v__old_hdr.ipv4.dstAddr_13)  InVars {hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_17}  OutVars{_old_hdr.ipv4.dstAddr=v__old_hdr.ipv4.dstAddr_13, hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_17}  AuxVars[]  AssignedVars[_old_hdr.ipv4.dstAddr] 14512#L521_T0_init [1719] L521_T0_init-->L522_T0_init: Formula: (= v_hdr.ipv4.dstAddr_14 v__old_hdr.ipv4.dstAddr_11)  InVars {hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_14}  OutVars{_old_hdr.ipv4.dstAddr=v__old_hdr.ipv4.dstAddr_11, hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_14}  AuxVars[]  AssignedVars[_old_hdr.ipv4.dstAddr] 14511#L522_T0_init [2065] L522_T0_init-->L523_T0_init: Formula: (not v_hdr.tcp.valid_30)  InVars {}  OutVars{hdr.tcp.valid=v_hdr.tcp.valid_30}  AuxVars[]  AssignedVars[hdr.tcp.valid] 14510#L523_T0_init [1623] L523_T0_init-->L524_T0_init: Formula: (= v_emit_35 (store v_emit_36 v_hdr.tcp_3 false))  InVars {hdr.tcp=v_hdr.tcp_3, emit=v_emit_36}  OutVars{hdr.tcp=v_hdr.tcp_3, emit=v_emit_35}  AuxVars[]  AssignedVars[emit] 14509#L524_T0_init [1458] L524_T0_init-->L525_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.srcport=v_hdr.tcp.srcport_10}  AuxVars[]  AssignedVars[hdr.tcp.srcport] 14508#L525_T0_init [1565] L525_T0_init-->L526_T0_init: Formula: (and (<= 0 v_hdr.tcp.srcport_12) (< v_hdr.tcp.srcport_12 65536))  InVars {hdr.tcp.srcport=v_hdr.tcp.srcport_12}  OutVars{hdr.tcp.srcport=v_hdr.tcp.srcport_12}  AuxVars[]  AssignedVars[] 14507#L526_T0_init [1882] L526_T0_init-->L527_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.dstport=v_hdr.tcp.dstport_9}  AuxVars[]  AssignedVars[hdr.tcp.dstport] 14506#L527_T0_init [1725] L527_T0_init-->L528_T0_init: Formula: (and (< v_hdr.tcp.dstport_10 65536) (<= 0 v_hdr.tcp.dstport_10))  InVars {hdr.tcp.dstport=v_hdr.tcp.dstport_10}  OutVars{hdr.tcp.dstport=v_hdr.tcp.dstport_10}  AuxVars[]  AssignedVars[] 14505#L528_T0_init [1837] L528_T0_init-->L529_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.sequence=v_hdr.tcp.sequence_43}  AuxVars[]  AssignedVars[hdr.tcp.sequence] 14504#L529_T0_init [1941] L529_T0_init-->L530_T0_init: Formula: (and (< v_hdr.tcp.sequence_44 4294967296) (<= 0 v_hdr.tcp.sequence_44))  InVars {hdr.tcp.sequence=v_hdr.tcp.sequence_44}  OutVars{hdr.tcp.sequence=v_hdr.tcp.sequence_44}  AuxVars[]  AssignedVars[] 14503#L530_T0_init [1620] L530_T0_init-->L531_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.ackseq=v_hdr.tcp.ackseq_41}  AuxVars[]  AssignedVars[hdr.tcp.ackseq] 14502#L531_T0_init [1481] L531_T0_init-->L532_T0_init: Formula: (and (< v_hdr.tcp.ackseq_43 4294967296) (<= 0 v_hdr.tcp.ackseq_43))  InVars {hdr.tcp.ackseq=v_hdr.tcp.ackseq_43}  OutVars{hdr.tcp.ackseq=v_hdr.tcp.ackseq_43}  AuxVars[]  AssignedVars[] 14501#L532_T0_init [2244] L532_T0_init-->L533_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.headerlength=v_hdr.tcp.headerlength_10}  AuxVars[]  AssignedVars[hdr.tcp.headerlength] 14500#L533_T0_init [2188] L533_T0_init-->L534_T0_init: Formula: (and (< v_hdr.tcp.headerlength_9 16) (<= 0 v_hdr.tcp.headerlength_9))  InVars {hdr.tcp.headerlength=v_hdr.tcp.headerlength_9}  OutVars{hdr.tcp.headerlength=v_hdr.tcp.headerlength_9}  AuxVars[]  AssignedVars[] 14499#L534_T0_init [1622] L534_T0_init-->L535_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.reservation=v_hdr.tcp.reservation_11}  AuxVars[]  AssignedVars[hdr.tcp.reservation] 14498#L535_T0_init [2196] L535_T0_init-->L536_T0_init: Formula: (and (< v_hdr.tcp.reservation_9 64) (<= 0 v_hdr.tcp.reservation_9))  InVars {hdr.tcp.reservation=v_hdr.tcp.reservation_9}  OutVars{hdr.tcp.reservation=v_hdr.tcp.reservation_9}  AuxVars[]  AssignedVars[] 14497#L536_T0_init [1653] L536_T0_init-->L537_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.URG=v_hdr.tcp.URG_11}  AuxVars[]  AssignedVars[hdr.tcp.URG] 14496#L537_T0_init [1942] L537_T0_init-->L538_T0_init: Formula: (and (<= 0 v_hdr.tcp.URG_10) (< v_hdr.tcp.URG_10 2))  InVars {hdr.tcp.URG=v_hdr.tcp.URG_10}  OutVars{hdr.tcp.URG=v_hdr.tcp.URG_10}  AuxVars[]  AssignedVars[] 14495#L538_T0_init [1944] L538_T0_init-->L539_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.ACK=v_hdr.tcp.ACK_11}  AuxVars[]  AssignedVars[hdr.tcp.ACK] 14494#L539_T0_init [2252] L539_T0_init-->L540_T0_init: Formula: (and (<= 0 v_hdr.tcp.ACK_9) (< v_hdr.tcp.ACK_9 2))  InVars {hdr.tcp.ACK=v_hdr.tcp.ACK_9}  OutVars{hdr.tcp.ACK=v_hdr.tcp.ACK_9}  AuxVars[]  AssignedVars[] 14493#L540_T0_init [1986] L540_T0_init-->L541_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.PSH=v_hdr.tcp.PSH_12}  AuxVars[]  AssignedVars[hdr.tcp.PSH] 14492#L541_T0_init [2141] L541_T0_init-->L542_T0_init: Formula: (and (<= 0 v_hdr.tcp.PSH_10) (< v_hdr.tcp.PSH_10 2))  InVars {hdr.tcp.PSH=v_hdr.tcp.PSH_10}  OutVars{hdr.tcp.PSH=v_hdr.tcp.PSH_10}  AuxVars[]  AssignedVars[] 14491#L542_T0_init [2128] L542_T0_init-->L543_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.RST=v_hdr.tcp.RST_10}  AuxVars[]  AssignedVars[hdr.tcp.RST] 14490#L543_T0_init [2131] L543_T0_init-->L544_T0_init: Formula: (and (<= 0 v_hdr.tcp.RST_11) (< v_hdr.tcp.RST_11 2))  InVars {hdr.tcp.RST=v_hdr.tcp.RST_11}  OutVars{hdr.tcp.RST=v_hdr.tcp.RST_11}  AuxVars[]  AssignedVars[] 14488#L544_T0_init [2168] L544_T0_init-->L545_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.SYN=v_hdr.tcp.SYN_12}  AuxVars[]  AssignedVars[hdr.tcp.SYN] 14486#L545_T0_init [1983] L545_T0_init-->L546_T0_init: Formula: (and (<= 0 v_hdr.tcp.SYN_11) (< v_hdr.tcp.SYN_11 2))  InVars {hdr.tcp.SYN=v_hdr.tcp.SYN_11}  OutVars{hdr.tcp.SYN=v_hdr.tcp.SYN_11}  AuxVars[]  AssignedVars[] 14485#L546_T0_init [2272] L546_T0_init-->L547_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.FIN=v_hdr.tcp.FIN_11}  AuxVars[]  AssignedVars[hdr.tcp.FIN] 14484#L547_T0_init [1996] L547_T0_init-->L548_T0_init: Formula: (and (< v_hdr.tcp.FIN_12 2) (<= 0 v_hdr.tcp.FIN_12))  InVars {hdr.tcp.FIN=v_hdr.tcp.FIN_12}  OutVars{hdr.tcp.FIN=v_hdr.tcp.FIN_12}  AuxVars[]  AssignedVars[] 14483#L548_T0_init [1829] L548_T0_init-->L549_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.windowsize=v_hdr.tcp.windowsize_10}  AuxVars[]  AssignedVars[hdr.tcp.windowsize] 14482#L549_T0_init [2207] L549_T0_init-->L550_T0_init: Formula: (and (<= 0 v_hdr.tcp.windowsize_9) (< v_hdr.tcp.windowsize_9 65536))  InVars {hdr.tcp.windowsize=v_hdr.tcp.windowsize_9}  OutVars{hdr.tcp.windowsize=v_hdr.tcp.windowsize_9}  AuxVars[]  AssignedVars[] 14479#L550_T0_init [2197] L550_T0_init-->L551_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.checksum=v_hdr.tcp.checksum_9}  AuxVars[]  AssignedVars[hdr.tcp.checksum] 14478#L551_T0_init [1844] L551_T0_init-->L552_T0_init: Formula: (and (<= 0 v_hdr.tcp.checksum_11) (< v_hdr.tcp.checksum_11 65536))  InVars {hdr.tcp.checksum=v_hdr.tcp.checksum_11}  OutVars{hdr.tcp.checksum=v_hdr.tcp.checksum_11}  AuxVars[]  AssignedVars[] 14474#L552_T0_init [1516] L552_T0_init-->L553_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.pointer=v_hdr.tcp.pointer_12}  AuxVars[]  AssignedVars[hdr.tcp.pointer] 14468#L553_T0_init [1639] L553_T0_init-->L554_T0_init: Formula: (and (<= 0 v_hdr.tcp.pointer_9) (< v_hdr.tcp.pointer_9 65536))  InVars {hdr.tcp.pointer=v_hdr.tcp.pointer_9}  OutVars{hdr.tcp.pointer=v_hdr.tcp.pointer_9}  AuxVars[]  AssignedVars[] 14463#L554_T0_init [1507] L554_T0_init-->L555_T0_init: Formula: (not v_hdr.udp_tunnel.valid_19)  InVars {}  OutVars{hdr.udp_tunnel.valid=v_hdr.udp_tunnel.valid_19}  AuxVars[]  AssignedVars[hdr.udp_tunnel.valid] 14459#L555_T0_init [1731] L555_T0_init-->L556_T0_init: Formula: (= v_emit_19 (store v_emit_20 v_hdr.udp_tunnel_8 false))  InVars {emit=v_emit_20, hdr.udp_tunnel=v_hdr.udp_tunnel_8}  OutVars{emit=v_emit_19, hdr.udp_tunnel=v_hdr.udp_tunnel_8}  AuxVars[]  AssignedVars[emit] 14453#L556_T0_init [2063] L556_T0_init-->L557_T0_init: Formula: true  InVars {}  OutVars{hdr.udp_tunnel.srcport=v_hdr.udp_tunnel.srcport_14}  AuxVars[]  AssignedVars[hdr.udp_tunnel.srcport] 14447#L557_T0_init [2127] L557_T0_init-->L558_T0_init: Formula: (and (<= 0 v_hdr.udp_tunnel.srcport_15) (< v_hdr.udp_tunnel.srcport_15 65536))  InVars {hdr.udp_tunnel.srcport=v_hdr.udp_tunnel.srcport_15}  OutVars{hdr.udp_tunnel.srcport=v_hdr.udp_tunnel.srcport_15}  AuxVars[]  AssignedVars[] 14442#L558_T0_init [1950] L558_T0_init-->L559_T0_init: Formula: true  InVars {}  OutVars{hdr.udp_tunnel.dstport=v_hdr.udp_tunnel.dstport_16}  AuxVars[]  AssignedVars[hdr.udp_tunnel.dstport] 14435#L559_T0_init [1732] L559_T0_init-->L560_T0_init: Formula: (and (< v_hdr.udp_tunnel.dstport_17 65536) (<= 0 v_hdr.udp_tunnel.dstport_17))  InVars {hdr.udp_tunnel.dstport=v_hdr.udp_tunnel.dstport_17}  OutVars{hdr.udp_tunnel.dstport=v_hdr.udp_tunnel.dstport_17}  AuxVars[]  AssignedVars[] 14430#L560_T0_init [2022] L560_T0_init-->L561_T0_init: Formula: true  InVars {}  OutVars{hdr.udp_tunnel.userlength=v_hdr.udp_tunnel.userlength_15}  AuxVars[]  AssignedVars[hdr.udp_tunnel.userlength] 14426#L561_T0_init [1672] L561_T0_init-->L562_T0_init: Formula: (and (<= 0 v_hdr.udp_tunnel.userlength_14) (< v_hdr.udp_tunnel.userlength_14 65536))  InVars {hdr.udp_tunnel.userlength=v_hdr.udp_tunnel.userlength_14}  OutVars{hdr.udp_tunnel.userlength=v_hdr.udp_tunnel.userlength_14}  AuxVars[]  AssignedVars[] 14418#L562_T0_init [1557] L562_T0_init-->L563_T0_init: Formula: true  InVars {}  OutVars{hdr.udp_tunnel.checksum=v_hdr.udp_tunnel.checksum_16}  AuxVars[]  AssignedVars[hdr.udp_tunnel.checksum] 14412#L563_T0_init [1987] L563_T0_init-->havocProcedureFINAL_T0_init: Formula: (and (<= 0 v_hdr.udp_tunnel.checksum_15) (< v_hdr.udp_tunnel.checksum_15 65536))  InVars {hdr.udp_tunnel.checksum=v_hdr.udp_tunnel.checksum_15}  OutVars{hdr.udp_tunnel.checksum=v_hdr.udp_tunnel.checksum_15}  AuxVars[]  AssignedVars[] 14408#havocProcedureFINAL_T0_init [2225] havocProcedureFINAL_T0_init-->havocProcedureEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14401#havocProcedureEXIT_T0_init >[2321] havocProcedureEXIT_T0_init-->L568-D56: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14398#L568-D56 [1897] L568-D56-->L568_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14394#L568_T0_init [2049] L568_T0_init-->L568_T0_init-D50: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 14395#L568_T0_init-D50 [2006] L568_T0_init-D50-->_parser_MyParserENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14406#_parser_MyParserENTRY_T0_init [1616] _parser_MyParserENTRY_T0_init-->_parser_MyParserENTRY_T0_init-D18: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 14407#_parser_MyParserENTRY_T0_init-D18 [1570] _parser_MyParserENTRY_T0_init-D18-->startENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14428#startENTRY_T0_init [2032] startENTRY_T0_init-->L736_T0_init: Formula: v_hdr.ethernet.valid_16  InVars {}  OutVars{hdr.ethernet.valid=v_hdr.ethernet.valid_16}  AuxVars[]  AssignedVars[hdr.ethernet.valid] 14420#L736_T0_init [2125] L736_T0_init-->L739_T0_init: Formula: (not (= v_hdr.ethernet.etherType_37 34525))  InVars {hdr.ethernet.etherType=v_hdr.ethernet.etherType_37}  OutVars{hdr.ethernet.etherType=v_hdr.ethernet.etherType_37}  AuxVars[]  AssignedVars[] 14414#L739_T0_init [1536] L739_T0_init-->L739-1_T0_init: Formula: (not (= v_hdr.ethernet.etherType_33 2048))  InVars {hdr.ethernet.etherType=v_hdr.ethernet.etherType_33}  OutVars{hdr.ethernet.etherType=v_hdr.ethernet.etherType_33}  AuxVars[]  AssignedVars[] 14411#L739-1_T0_init [2115] L739-1_T0_init-->startEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14405#startEXIT_T0_init >[2288] startEXIT_T0_init-->_parser_MyParserFINAL-D66: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14400#_parser_MyParserFINAL-D66 [1668] _parser_MyParserFINAL-D66-->_parser_MyParserFINAL_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14397#_parser_MyParserFINAL_T0_init [2008] _parser_MyParserFINAL_T0_init-->_parser_MyParserEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14393#_parser_MyParserEXIT_T0_init >[2306] _parser_MyParserEXIT_T0_init-->L569-D104: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14391#L569-D104 [2130] L569-D104-->L569_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14375#L569_T0_init [1812] L569_T0_init-->L569_T0_init-D52: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 14376#L569_T0_init-D52 [1845] L569_T0_init-D52-->MyVerifyChecksumFINAL_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14377#MyVerifyChecksumFINAL_T0_init [1936] MyVerifyChecksumFINAL_T0_init-->MyVerifyChecksumEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14374#MyVerifyChecksumEXIT_T0_init >[2382] MyVerifyChecksumEXIT_T0_init-->L570-D74: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14373#L570-D74 [1855] L570-D74-->L570_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13411#L570_T0_init [1464] L570_T0_init-->L570_T0_init-D14: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 14367#L570_T0_init-D14 [2250] L570_T0_init-D14-->MyIngressENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14365#MyIngressENTRY_T0_init [1669] MyIngressENTRY_T0_init-->L259_T0_init: Formula: (= v_standard_metadata.ingress_port_20 0)  InVars {standard_metadata.ingress_port=v_standard_metadata.ingress_port_20}  OutVars{standard_metadata.ingress_port=v_standard_metadata.ingress_port_20}  AuxVars[]  AssignedVars[] 14363#L259_T0_init [1835] L259_T0_init-->L266_T0_init: Formula: (not (= v_hdr.ipv4.dstAddr_19 2071690107))  InVars {hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_19}  OutVars{hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_19}  AuxVars[]  AssignedVars[] 14361#L266_T0_init [2091] L266_T0_init-->L267_T0_init: Formula: (and (not (= v_hdr.ethernet.srcAddr_30 0)) (not (= 281474976710655 v_hdr.ethernet.dstAddr_39)))  InVars {hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_30, hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_39}  OutVars{hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_30, hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_39}  AuxVars[]  AssignedVars[] 14359#L267_T0_init [1689] L267_T0_init-->L267_T0_init-D34: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 14360#L267_T0_init-D34 [1561] L267_T0_init-D34-->store_user_macENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14371#store_user_macENTRY_T0_init [1584] store_user_macENTRY_T0_init-->store_user_macENTRY_T0_init-D40: Formula: (and (= v_user_mac.write_indexInParam_1 0) (= v_hdr.ethernet.srcAddr_21 v_user_mac.write_valueInParam_1))  InVars {hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_21}  OutVars{user_mac.write_value=v_user_mac.write_valueInParam_1, user_mac.write_index=v_user_mac.write_indexInParam_1, hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_21}  AuxVars[]  AssignedVars[user_mac.write_value, user_mac.write_index]< 14372#store_user_macENTRY_T0_init-D40 [1862] store_user_macENTRY_T0_init-D40-->user_mac.writeENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14379#user_mac.writeENTRY_T0_init [1477] user_mac.writeENTRY_T0_init-->user_mac.writeFINAL_T0_init: Formula: (= v_user_mac_18 (store v_user_mac_19 v_user_mac.write_index_3 v_user_mac.write_value_3))  InVars {user_mac.write_value=v_user_mac.write_value_3, user_mac.write_index=v_user_mac.write_index_3, user_mac=v_user_mac_19}  OutVars{user_mac.write_value=v_user_mac.write_value_3, user_mac.write_index=v_user_mac.write_index_3, user_mac=v_user_mac_18}  AuxVars[]  AssignedVars[user_mac] 14378#user_mac.writeFINAL_T0_init [2217] user_mac.writeFINAL_T0_init-->user_mac.writeEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14370#user_mac.writeEXIT_T0_init >[2384] user_mac.writeEXIT_T0_init-->store_user_macFINAL-D64: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: (and (= v_user_mac.write_indexInParam_1 0) (= v_hdr.ethernet.srcAddr_21 v_user_mac.write_valueInParam_1))  InVars {hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_21}  OutVars{user_mac.write_value=v_user_mac.write_valueInParam_1, user_mac.write_index=v_user_mac.write_indexInParam_1, hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_21}  AuxVars[]  AssignedVars[user_mac.write_value, user_mac.write_index] 14368#store_user_macFINAL-D64 [2047] store_user_macFINAL-D64-->store_user_macFINAL_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14366#store_user_macFINAL_T0_init [1991] store_user_macFINAL_T0_init-->store_user_macEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14358#store_user_macEXIT_T0_init >[2359] store_user_macEXIT_T0_init-->L267-1-D68: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14356#L267-1-D68 [2212] L267-1-D68-->L267-1_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14353#L267-1_T0_init [2166] L267-1_T0_init-->L267-1_T0_init-D6: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 14354#L267-1_T0_init-D6 [1831] L267-1_T0_init-D6-->read_esboxENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14469#read_esboxENTRY_T0_init [1720] read_esboxENTRY_T0_init-->L692_T0_init: Formula: (= (mod (div (+ (* (- 1) (mod 0 1)) v_hdr.tcp.sequence_74) 1) 256) v_tmp_0_12)  InVars {hdr.tcp.sequence=v_hdr.tcp.sequence_74}  OutVars{hdr.tcp.sequence=v_hdr.tcp.sequence_74, tmp_0=v_tmp_0_12}  AuxVars[]  AssignedVars[tmp_0] 14464#L692_T0_init [1718] L692_T0_init-->L693_T0_init: Formula: (= (select v_es_box_14 v_tmp_0_13) v_tmp_12)  InVars {es_box=v_es_box_14, tmp_0=v_tmp_0_13}  OutVars{tmp=v_tmp_12, es_box=v_es_box_14, tmp_0=v_tmp_0_13}  AuxVars[]  AssignedVars[tmp] 14460#L693_T0_init [2025] L693_T0_init-->L694_T0_init: Formula: (= (+ (mod 0 1) (* (- 1) (mod v_hdr.tcp.sequence_92 256)) v_hdr.tcp.sequence_92 v_tmp_14) v_hdr.tcp.sequence_91)  InVars {tmp=v_tmp_14, hdr.tcp.sequence=v_hdr.tcp.sequence_92}  OutVars{tmp=v_tmp_14, hdr.tcp.sequence=v_hdr.tcp.sequence_91}  AuxVars[]  AssignedVars[hdr.tcp.sequence] 14454#L694_T0_init [1799] L694_T0_init-->L696_T0_init: Formula: (= v_tmp_2_13 (mod (div (+ (* (- 1) (mod v_hdr.tcp.sequence_75 256)) v_hdr.tcp.sequence_75) 256) 256))  InVars {hdr.tcp.sequence=v_hdr.tcp.sequence_75}  OutVars{tmp_2=v_tmp_2_13, hdr.tcp.sequence=v_hdr.tcp.sequence_75}  AuxVars[]  AssignedVars[tmp_2] 14448#L696_T0_init [1853] L696_T0_init-->L697_T0_init: Formula: (= v_tmp_1_12 (select v_es_box_13 v_tmp_2_12))  InVars {es_box=v_es_box_13, tmp_2=v_tmp_2_12}  OutVars{tmp_2=v_tmp_2_12, es_box=v_es_box_13, tmp_1=v_tmp_1_12}  AuxVars[]  AssignedVars[tmp_1] 14443#L697_T0_init [1821] L697_T0_init-->L698_T0_init: Formula: (= v_hdr.tcp.sequence_89 (+ (mod v_hdr.tcp.sequence_90 256) (* 256 v_tmp_1_13) v_hdr.tcp.sequence_90 (* (- 1) (mod v_hdr.tcp.sequence_90 65536))))  InVars {hdr.tcp.sequence=v_hdr.tcp.sequence_90, tmp_1=v_tmp_1_13}  OutVars{hdr.tcp.sequence=v_hdr.tcp.sequence_89, tmp_1=v_tmp_1_13}  AuxVars[]  AssignedVars[hdr.tcp.sequence] 14436#L698_T0_init [1887] L698_T0_init-->L700_T0_init: Formula: (= (mod (div (+ v_hdr.tcp.sequence_78 (* (- 1) (mod v_hdr.tcp.sequence_78 65536))) 65536) 256) v_tmp_4_11)  InVars {hdr.tcp.sequence=v_hdr.tcp.sequence_78}  OutVars{hdr.tcp.sequence=v_hdr.tcp.sequence_78, tmp_4=v_tmp_4_11}  AuxVars[]  AssignedVars[tmp_4] 14431#L700_T0_init [1660] L700_T0_init-->L701_T0_init: Formula: (= (select v_es_box_24 v_tmp_4_14) v_tmp_3_14)  InVars {es_box=v_es_box_24, tmp_4=v_tmp_4_14}  OutVars{tmp_3=v_tmp_3_14, tmp_4=v_tmp_4_14, es_box=v_es_box_24}  AuxVars[]  AssignedVars[tmp_3] 14427#L701_T0_init [1786] L701_T0_init-->L702_T0_init: Formula: (= (+ (mod v_hdr.tcp.sequence_88 65536) (* 65536 v_tmp_3_13) v_hdr.tcp.sequence_88 (* (- 1) (mod v_hdr.tcp.sequence_88 16777216))) v_hdr.tcp.sequence_87)  InVars {tmp_3=v_tmp_3_13, hdr.tcp.sequence=v_hdr.tcp.sequence_88}  OutVars{tmp_3=v_tmp_3_13, hdr.tcp.sequence=v_hdr.tcp.sequence_87}  AuxVars[]  AssignedVars[hdr.tcp.sequence] 14419#L702_T0_init [1553] L702_T0_init-->L704_T0_init: Formula: (= (mod (div (+ v_hdr.tcp.sequence_82 (* (- 1) (mod v_hdr.tcp.sequence_82 16777216))) 16777216) 256) v_tmp_6_12)  InVars {hdr.tcp.sequence=v_hdr.tcp.sequence_82}  OutVars{tmp_6=v_tmp_6_12, hdr.tcp.sequence=v_hdr.tcp.sequence_82}  AuxVars[]  AssignedVars[tmp_6] 14413#L704_T0_init [1617] L704_T0_init-->L705_T0_init: Formula: (= v_tmp_5_13 (select v_es_box_19 v_tmp_6_13))  InVars {es_box=v_es_box_19, tmp_6=v_tmp_6_13}  OutVars{tmp_5=v_tmp_5_13, es_box=v_es_box_19, tmp_6=v_tmp_6_13}  AuxVars[]  AssignedVars[tmp_5] 14410#L705_T0_init [2237] L705_T0_init-->L706_T0_init: Formula: (= (+ (* (- 1) (mod v_hdr.tcp.sequence_77 4294967296)) (* 16777216 v_tmp_5_12) (mod v_hdr.tcp.sequence_77 16777216) v_hdr.tcp.sequence_77) v_hdr.tcp.sequence_76)  InVars {tmp_5=v_tmp_5_12, hdr.tcp.sequence=v_hdr.tcp.sequence_77}  OutVars{tmp_5=v_tmp_5_12, hdr.tcp.sequence=v_hdr.tcp.sequence_76}  AuxVars[]  AssignedVars[hdr.tcp.sequence] 14404#L706_T0_init [1597] L706_T0_init-->L708_T0_init: Formula: (= (mod (div (+ v_hdr.tcp.ackseq_92 (* (- 1) (mod 0 1))) 1) 256) v_tmp_8_14)  InVars {hdr.tcp.ackseq=v_hdr.tcp.ackseq_92}  OutVars{hdr.tcp.ackseq=v_hdr.tcp.ackseq_92, tmp_8=v_tmp_8_14}  AuxVars[]  AssignedVars[tmp_8] 14399#L708_T0_init [1763] L708_T0_init-->L709_T0_init: Formula: (= v_tmp_7_14 (select v_es_box_22 v_tmp_8_13))  InVars {es_box=v_es_box_22, tmp_8=v_tmp_8_13}  OutVars{tmp_7=v_tmp_7_14, es_box=v_es_box_22, tmp_8=v_tmp_8_13}  AuxVars[]  AssignedVars[tmp_7] 14396#L709_T0_init [2174] L709_T0_init-->L710_T0_init: Formula: (= v_hdr.tcp.ackseq_73 (+ v_hdr.tcp.ackseq_74 (* (- 1) (mod v_hdr.tcp.ackseq_74 256)) v_tmp_7_11 (mod 0 1)))  InVars {tmp_7=v_tmp_7_11, hdr.tcp.ackseq=v_hdr.tcp.ackseq_74}  OutVars{tmp_7=v_tmp_7_11, hdr.tcp.ackseq=v_hdr.tcp.ackseq_73}  AuxVars[]  AssignedVars[hdr.tcp.ackseq] 14392#L710_T0_init [1769] L710_T0_init-->L712_T0_init: Formula: (= (mod (div (+ (* (mod v_hdr.tcp.ackseq_85 256) (- 1)) v_hdr.tcp.ackseq_85) 256) 256) v_tmp_10_12)  InVars {hdr.tcp.ackseq=v_hdr.tcp.ackseq_85}  OutVars{hdr.tcp.ackseq=v_hdr.tcp.ackseq_85, tmp_10=v_tmp_10_12}  AuxVars[]  AssignedVars[tmp_10] 14390#L712_T0_init [1681] L712_T0_init-->L713_T0_init: Formula: (= v_tmp_9_12 (select v_es_box_16 v_tmp_10_11))  InVars {es_box=v_es_box_16, tmp_10=v_tmp_10_11}  OutVars{tmp_10=v_tmp_10_11, es_box=v_es_box_16, tmp_9=v_tmp_9_12}  AuxVars[]  AssignedVars[tmp_9] 14389#L713_T0_init [1976] L713_T0_init-->L714_T0_init: Formula: (= v_hdr.tcp.ackseq_79 (+ v_hdr.tcp.ackseq_80 (* (- 1) (mod v_hdr.tcp.ackseq_80 65536)) (mod v_hdr.tcp.ackseq_80 256) (* 256 v_tmp_9_11)))  InVars {hdr.tcp.ackseq=v_hdr.tcp.ackseq_80, tmp_9=v_tmp_9_11}  OutVars{hdr.tcp.ackseq=v_hdr.tcp.ackseq_79, tmp_9=v_tmp_9_11}  AuxVars[]  AssignedVars[hdr.tcp.ackseq] 14388#L714_T0_init [1777] L714_T0_init-->L716_T0_init: Formula: (= (mod (div (+ v_hdr.tcp.ackseq_72 (* (- 1) (mod v_hdr.tcp.ackseq_72 65536))) 65536) 256) v_tmp_12_11)  InVars {hdr.tcp.ackseq=v_hdr.tcp.ackseq_72}  OutVars{hdr.tcp.ackseq=v_hdr.tcp.ackseq_72, tmp_12=v_tmp_12_11}  AuxVars[]  AssignedVars[tmp_12] 14387#L716_T0_init [2050] L716_T0_init-->L717_T0_init: Formula: (= (select v_es_box_17 v_tmp_12_14) v_tmp_11_13)  InVars {es_box=v_es_box_17, tmp_12=v_tmp_12_14}  OutVars{tmp_11=v_tmp_11_13, tmp_12=v_tmp_12_14, es_box=v_es_box_17}  AuxVars[]  AssignedVars[tmp_11] 14386#L717_T0_init [1879] L717_T0_init-->L718_T0_init: Formula: (= v_hdr.tcp.ackseq_90 (+ v_hdr.tcp.ackseq_91 (* 65536 v_tmp_11_14) (* (- 1) (mod v_hdr.tcp.ackseq_91 16777216)) (mod v_hdr.tcp.ackseq_91 65536)))  InVars {tmp_11=v_tmp_11_14, hdr.tcp.ackseq=v_hdr.tcp.ackseq_91}  OutVars{tmp_11=v_tmp_11_14, hdr.tcp.ackseq=v_hdr.tcp.ackseq_90}  AuxVars[]  AssignedVars[hdr.tcp.ackseq] 14383#L718_T0_init [2266] L718_T0_init-->L720_T0_init: Formula: (= (mod (div (+ v_hdr.tcp.ackseq_89 (* (- 1) (mod v_hdr.tcp.ackseq_89 16777216))) 16777216) 256) v_tmp_14_14)  InVars {hdr.tcp.ackseq=v_hdr.tcp.ackseq_89}  OutVars{hdr.tcp.ackseq=v_hdr.tcp.ackseq_89, tmp_14=v_tmp_14_14}  AuxVars[]  AssignedVars[tmp_14] 14382#L720_T0_init [2275] L720_T0_init-->L721_T0_init: Formula: (= (select v_es_box_15 v_tmp_14_12) v_tmp_13_13)  InVars {es_box=v_es_box_15, tmp_14=v_tmp_14_12}  OutVars{es_box=v_es_box_15, tmp_13=v_tmp_13_13, tmp_14=v_tmp_14_12}  AuxVars[]  AssignedVars[tmp_13] 14381#L721_T0_init [2186] L721_T0_init-->read_esboxFINAL_T0_init: Formula: (= v_hdr.tcp.ackseq_77 (+ (mod v_hdr.tcp.ackseq_78 16777216) v_hdr.tcp.ackseq_78 (* 16777216 v_tmp_13_12) (* (mod v_hdr.tcp.ackseq_78 4294967296) (- 1))))  InVars {hdr.tcp.ackseq=v_hdr.tcp.ackseq_78, tmp_13=v_tmp_13_12}  OutVars{hdr.tcp.ackseq=v_hdr.tcp.ackseq_77, tmp_13=v_tmp_13_12}  AuxVars[]  AssignedVars[hdr.tcp.ackseq] 14380#read_esboxFINAL_T0_init [2014] read_esboxFINAL_T0_init-->read_esboxEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14352#read_esboxEXIT_T0_init >[2355] read_esboxEXIT_T0_init-->L268-D82: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14351#L268-D82 [1968] L268-D82-->L268_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14349#L268_T0_init [2261] L268_T0_init-->L268_T0_init-D28: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 14350#L268_T0_init-D28 [2002] L268_T0_init-D28-->do_read_countENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14357#do_read_countENTRY_T0_init [1854] do_read_countENTRY_T0_init-->do_read_countFINAL_T0_init: Formula: (= v_temp_0_29 (select v_count_17 0))  InVars {count=v_count_17}  OutVars{count=v_count_17, temp_0=v_temp_0_29}  AuxVars[]  AssignedVars[temp_0] 14355#do_read_countFINAL_T0_init [1750] do_read_countFINAL_T0_init-->do_read_countEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14348#do_read_countEXIT_T0_init >[2388] do_read_countEXIT_T0_init-->L269-D84: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14347#L269-D84 [2044] L269-D84-->L269_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14346#L269_T0_init [2205] L269_T0_init-->L271_T0_init: Formula: (= v_temp_0_24 0)  InVars {temp_0=v_temp_0_24}  OutVars{temp_0=v_temp_0_24}  AuxVars[]  AssignedVars[] 13590#L271_T0_init [2185] L271_T0_init-->L271_T0_init-D10: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 13924#L271_T0_init-D10 [1843] L271_T0_init-D10-->creatipv6_1ENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13925#creatipv6_1ENTRY_T0_init [2055] creatipv6_1ENTRY_T0_init-->L346_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14165#L346_T0_init [2103] L346_T0_init-->L348_T0_init: Formula: (= 6 v_hdr.ipv6.version_21)  InVars {}  OutVars{hdr.ipv6.version=v_hdr.ipv6.version_21}  AuxVars[]  AssignedVars[hdr.ipv6.version] 14082#L348_T0_init [1981] L348_T0_init-->L349_T0_init: Formula: (= v_hdr.ipv6.payloadlen_22 v_hdr.ipv4.totalLen_22)  InVars {hdr.ipv4.totalLen=v_hdr.ipv4.totalLen_22}  OutVars{hdr.ipv4.totalLen=v_hdr.ipv4.totalLen_22, hdr.ipv6.payloadlen=v_hdr.ipv6.payloadlen_22}  AuxVars[]  AssignedVars[hdr.ipv6.payloadlen] 13811#L349_T0_init [1762] L349_T0_init-->L350_T0_init: Formula: (= v_hdr.ipv6.nextheader_28 65)  InVars {}  OutVars{hdr.ipv6.nextheader=v_hdr.ipv6.nextheader_28}  AuxVars[]  AssignedVars[hdr.ipv6.nextheader] 13812#L350_T0_init [2234] L350_T0_init-->L351_T0_init: Formula: (= 64 v_hdr.ipv6.hoplimit_22)  InVars {}  OutVars{hdr.ipv6.hoplimit=v_hdr.ipv6.hoplimit_22}  AuxVars[]  AssignedVars[hdr.ipv6.hoplimit] 14199#L351_T0_init [2098] L351_T0_init-->L352_T0_init: Formula: (= v_hdr.ethernet.etherType_28 34525)  InVars {}  OutVars{hdr.ethernet.etherType=v_hdr.ethernet.etherType_28}  AuxVars[]  AssignedVars[hdr.ethernet.etherType] 14200#L352_T0_init [2116] L352_T0_init-->L353_T0_init: Formula: (= v_hdr.ipv6.srcAddr_19 42545680458834377588178886921629466626)  InVars {}  OutVars{hdr.ipv6.srcAddr=v_hdr.ipv6.srcAddr_19}  AuxVars[]  AssignedVars[hdr.ipv6.srcAddr] 13673#L353_T0_init [1674] L353_T0_init-->L354_T0_init: Formula: (= v_hdr.ipv6.dstAddr_18 42540765144257160172006968799218772356)  InVars {}  OutVars{hdr.ipv6.dstAddr=v_hdr.ipv6.dstAddr_18}  AuxVars[]  AssignedVars[hdr.ipv6.dstAddr] 13674#L354_T0_init [1813] L354_T0_init-->L355_T0_init: Formula: (= v_hdr.ethernet.srcAddr_33 19799850608873)  InVars {}  OutVars{hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_33}  AuxVars[]  AssignedVars[hdr.ethernet.srcAddr] 13882#L355_T0_init [1935] L355_T0_init-->creatipv6_1FINAL_T0_init: Formula: (= 174219185552744 v_hdr.ethernet.dstAddr_41)  InVars {}  OutVars{hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_41}  AuxVars[]  AssignedVars[hdr.ethernet.dstAddr] 13589#creatipv6_1FINAL_T0_init [1624] creatipv6_1FINAL_T0_init-->creatipv6_1EXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13591#creatipv6_1EXIT_T0_init >[2290] creatipv6_1EXIT_T0_init-->L271-1-D62: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13865#L271-1-D62 [1800] L271-1-D62-->L271-1_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13348#L271-1_T0_init [1857] L271-1_T0_init-->L271-1_T0_init-D32: Formula: (and (= v_count.write_indexInParam_1 0) (= v_count.write_valueInParam_1 1))  InVars {}  OutVars{count.write_index=v_count.write_indexInParam_1, count.write_value=v_count.write_valueInParam_1}  AuxVars[]  AssignedVars[count.write_index, count.write_value]< 13347#L271-1_T0_init-D32 [1499] L271-1_T0_init-D32-->count.writeENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13349#count.writeENTRY_T0_init [2149] count.writeENTRY_T0_init-->count.writeFINAL_T0_init: Formula: (= v_count_20 (store v_count_21 v_count.write_index_3 v_count.write_value_3))  InVars {count=v_count_21, count.write_index=v_count.write_index_3, count.write_value=v_count.write_value_3}  OutVars{count=v_count_20, count.write_index=v_count.write_index_3, count.write_value=v_count.write_value_3}  AuxVars[]  AssignedVars[count] 14489#count.writeFINAL_T0_init [1713] count.writeFINAL_T0_init-->count.writeEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14487#count.writeEXIT_T0_init >[2376] count.writeEXIT_T0_init-->L273-D98: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: (and (= v_count.write_indexInParam_1 0) (= v_count.write_valueInParam_1 1))  InVars {}  OutVars{count.write_index=v_count.write_indexInParam_1, count.write_value=v_count.write_valueInParam_1}  AuxVars[]  AssignedVars[count.write_index, count.write_value] 14283#L273-D98 [2199] L273-D98-->L273_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14018#L273_T0_init [1920] L273_T0_init-->L275_T0_init: Formula: (= v_standard_metadata.egress_spec_24 1)  InVars {}  OutVars{standard_metadata.egress_spec=v_standard_metadata.egress_spec_24}  AuxVars[]  AssignedVars[standard_metadata.egress_spec] 13455#L275_T0_init [1551] L275_T0_init-->L276_T0_init: Formula: (= 1 v_standard_metadata.egress_port_25)  InVars {}  OutVars{standard_metadata.egress_port=v_standard_metadata.egress_port_25}  AuxVars[]  AssignedVars[standard_metadata.egress_port] 13456#L276_T0_init [1801] L276_T0_init-->L270-1_T0_init: Formula: v_forward_24  InVars {}  OutVars{forward=v_forward_24}  AuxVars[]  AssignedVars[forward] 13866#L270-1_T0_init [1990] L270-1_T0_init-->L278-1_T0_init: Formula: (not (= v_temp_0_27 1))  InVars {temp_0=v_temp_0_27}  OutVars{temp_0=v_temp_0_27}  AuxVars[]  AssignedVars[] 14658#L278-1_T0_init [1644] L278-1_T0_init-->L258_T0_init: Formula: (not (= v_temp_0_23 2))  InVars {temp_0=v_temp_0_23}  OutVars{temp_0=v_temp_0_23}  AuxVars[]  AssignedVars[] 14657#L258_T0_init [2245] L258_T0_init-->MyIngressEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14656#MyIngressEXIT_T0_init >[2333] MyIngressEXIT_T0_init-->L571-D108: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14653#L571-D108 [2089] L571-D108-->L571_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14650#L571_T0_init [1962] L571_T0_init-->L571_T0_init-D8: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 14651#L571_T0_init-D8 [2016] L571_T0_init-D8-->MyEgressENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14654#MyEgressENTRY_T0_init [1650] MyEgressENTRY_T0_init-->L249_T0_init: Formula: (or (not v_hdr.tcp.valid_34) (not (= 0 v_standard_metadata.egress_port_34)))  InVars {standard_metadata.egress_port=v_standard_metadata.egress_port_34, hdr.tcp.valid=v_hdr.tcp.valid_34}  OutVars{standard_metadata.egress_port=v_standard_metadata.egress_port_34, hdr.tcp.valid=v_hdr.tcp.valid_34}  AuxVars[]  AssignedVars[] 14652#L249_T0_init [1652] L249_T0_init-->MyEgressEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14649#MyEgressEXIT_T0_init >[2347] MyEgressEXIT_T0_init-->L572-D90: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14648#L572-D90 [1791] L572-D90-->L572_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14645#L572_T0_init [1466] L572_T0_init-->L572_T0_init-D22: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 14646#L572_T0_init-D22 [1889] L572_T0_init-D22-->MyComputeChecksumFINAL_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14647#MyComputeChecksumFINAL_T0_init [1980] MyComputeChecksumFINAL_T0_init-->MyComputeChecksumEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14644#MyComputeChecksumEXIT_T0_init >[2361] MyComputeChecksumEXIT_T0_init-->L573-D110: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14643#L573-D110 [1858] L573-D110-->L573_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14642#L573_T0_init [1734] L573_T0_init-->L574-1_T0_init: Formula: v_forward_30  InVars {forward=v_forward_30}  OutVars{forward=v_forward_30}  AuxVars[]  AssignedVars[] 14640#L574-1_T0_init [2112] L574-1_T0_init-->L578_T0_init: Formula: (let ((.cse0 (= v__old_hdr.ethernet.srcAddr_14 0))) (or (and v__p4ltl_0_6 (not .cse0)) (and (not v__p4ltl_0_6) .cse0)))  InVars {_old_hdr.ethernet.srcAddr=v__old_hdr.ethernet.srcAddr_14}  OutVars{_p4ltl_0=v__p4ltl_0_6, _old_hdr.ethernet.srcAddr=v__old_hdr.ethernet.srcAddr_14}  AuxVars[]  AssignedVars[_p4ltl_0] 14639#L578_T0_init [2269] L578_T0_init-->L579_T0_init: Formula: (let ((.cse0 (= 2071690107 v__old_hdr.ipv4.dstAddr_14))) (or (and v__p4ltl_1_6 (not .cse0)) (and .cse0 (not v__p4ltl_1_6))))  InVars {_old_hdr.ipv4.dstAddr=v__old_hdr.ipv4.dstAddr_14}  OutVars{_old_hdr.ipv4.dstAddr=v__old_hdr.ipv4.dstAddr_14, _p4ltl_1=v__p4ltl_1_6}  AuxVars[]  AssignedVars[_p4ltl_1] 14638#L579_T0_init [2198] L579_T0_init-->L580_T0_init: Formula: (let ((.cse0 (= 281474976710655 v__old_hdr.ethernet.dstAddr_14))) (or (and v__p4ltl_2_6 (not .cse0)) (and .cse0 (not v__p4ltl_2_6))))  InVars {_old_hdr.ethernet.dstAddr=v__old_hdr.ethernet.dstAddr_14}  OutVars{_p4ltl_2=v__p4ltl_2_6, _old_hdr.ethernet.dstAddr=v__old_hdr.ethernet.dstAddr_14}  AuxVars[]  AssignedVars[_p4ltl_2] 14637#L580_T0_init [2013] L580_T0_init-->mainFINAL_T0_init: Formula: (let ((.cse0 (= v_standard_metadata.ingress_port_23 0))) (or (and v__p4ltl_3_7 .cse0) (and (not .cse0) (not v__p4ltl_3_7))))  InVars {standard_metadata.ingress_port=v_standard_metadata.ingress_port_23}  OutVars{standard_metadata.ingress_port=v_standard_metadata.ingress_port_23, _p4ltl_3=v__p4ltl_3_7}  AuxVars[]  AssignedVars[_p4ltl_3] 14636#mainFINAL_T0_init [2061] mainFINAL_T0_init-->mainEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14635#mainEXIT_T0_init >[2285] mainEXIT_T0_init-->L586-1-D72: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14633#L586-1-D72 [1975] L586-1-D72-->L586-1_accept_S1: Formula: (and v__p4ltl_1_9 v__p4ltl_0_9 v__p4ltl_3_9 v__p4ltl_2_9 (or (not v__p4ltl_3_9) (not v__p4ltl_1_9) (= 1 v_standard_metadata.egress_port_30) (not v__p4ltl_2_9) (not v__p4ltl_0_9)))  InVars {_p4ltl_2=v__p4ltl_2_9, standard_metadata.egress_port=v_standard_metadata.egress_port_30, _p4ltl_3=v__p4ltl_3_9, _p4ltl_0=v__p4ltl_0_9, _p4ltl_1=v__p4ltl_1_9}  OutVars{_p4ltl_2=v__p4ltl_2_9, standard_metadata.egress_port=v_standard_metadata.egress_port_30, _p4ltl_3=v__p4ltl_3_9, _p4ltl_0=v__p4ltl_0_9, _p4ltl_1=v__p4ltl_1_9}  AuxVars[]  AssignedVars[] 13487#L586-1_accept_S1 
[2023-02-07 04:59:03,608 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2023-02-07 04:59:03,608 INFO  L85        PathProgramCache]: Analyzing trace with hash 1578930191, now seen corresponding path program 2 times
[2023-02-07 04:59:03,608 INFO  L118   FreeRefinementEngine]: Executing refinement strategy CAMEL
[2023-02-07 04:59:03,608 INFO  L333   FreeRefinementEngine]: Using trace check IpTcStrategyModuleSmtInterpolCraig [1783232285]
[2023-02-07 04:59:03,608 INFO  L95    rtionOrderModulation]: Keeping assertion order NOT_INCREMENTALLY
[2023-02-07 04:59:03,609 INFO  L127          SolverBuilder]: Constructing new instance of SMTInterpol with explicit timeout -1 ms and remaining time -1 ms
[2023-02-07 04:59:03,630 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is sat
[2023-02-07 04:59:03,631 INFO  L352             TraceCheck]: Trace is feasible, we will do another trace check, this time with branch encoders.
[2023-02-07 04:59:03,648 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is sat
[2023-02-07 04:59:03,754 INFO  L130   FreeRefinementEngine]: Strategy CAMEL found a feasible trace
[2023-02-07 04:59:03,754 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2023-02-07 04:59:03,755 INFO  L85        PathProgramCache]: Analyzing trace with hash 617617981, now seen corresponding path program 1 times
[2023-02-07 04:59:03,755 INFO  L118   FreeRefinementEngine]: Executing refinement strategy CAMEL
[2023-02-07 04:59:03,755 INFO  L333   FreeRefinementEngine]: Using trace check IpTcStrategyModuleSmtInterpolCraig [2087449036]
[2023-02-07 04:59:03,755 INFO  L95    rtionOrderModulation]: Keeping assertion order NOT_INCREMENTALLY
[2023-02-07 04:59:03,755 INFO  L127          SolverBuilder]: Constructing new instance of SMTInterpol with explicit timeout -1 ms and remaining time -1 ms
[2023-02-07 04:59:03,783 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-02-07 04:59:03,951 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 1
[2023-02-07 04:59:03,966 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-02-07 04:59:04,073 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 1
[2023-02-07 04:59:04,083 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-02-07 04:59:04,103 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 150
[2023-02-07 04:59:04,104 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-02-07 04:59:04,110 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 1
[2023-02-07 04:59:04,110 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-02-07 04:59:04,111 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 163
[2023-02-07 04:59:04,112 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-02-07 04:59:04,139 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 168
[2023-02-07 04:59:04,146 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-02-07 04:59:04,195 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 4
[2023-02-07 04:59:04,199 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-02-07 04:59:04,201 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 1
[2023-02-07 04:59:04,203 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-02-07 04:59:04,218 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 15
[2023-02-07 04:59:04,222 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-02-07 04:59:04,233 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 44
[2023-02-07 04:59:04,235 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-02-07 04:59:04,246 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 53
[2023-02-07 04:59:04,248 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-02-07 04:59:04,256 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 68
[2023-02-07 04:59:04,258 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-02-07 04:59:04,274 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 249
[2023-02-07 04:59:04,276 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-02-07 04:59:04,277 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 255
[2023-02-07 04:59:04,278 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-02-07 04:59:04,281 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 271
[2023-02-07 04:59:04,298 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-02-07 04:59:04,312 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 1
[2023-02-07 04:59:04,317 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-02-07 04:59:04,324 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 150
[2023-02-07 04:59:04,325 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-02-07 04:59:04,326 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 1
[2023-02-07 04:59:04,327 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-02-07 04:59:04,328 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 163
[2023-02-07 04:59:04,329 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-02-07 04:59:04,330 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 168
[2023-02-07 04:59:04,334 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-02-07 04:59:04,339 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 4
[2023-02-07 04:59:04,341 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-02-07 04:59:04,342 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 1
[2023-02-07 04:59:04,343 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-02-07 04:59:04,344 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 15
[2023-02-07 04:59:04,346 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-02-07 04:59:04,348 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 44
[2023-02-07 04:59:04,348 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-02-07 04:59:04,349 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 51
[2023-02-07 04:59:04,350 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-02-07 04:59:04,350 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 66
[2023-02-07 04:59:04,351 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-02-07 04:59:04,352 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 249
[2023-02-07 04:59:04,353 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-02-07 04:59:04,353 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 255
[2023-02-07 04:59:04,354 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-02-07 04:59:04,355 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2023-02-07 04:59:04,356 INFO  L136   FreeRefinementEngine]: Strategy CAMEL found an infeasible trace
[2023-02-07 04:59:04,356 INFO  L333   FreeRefinementEngine]: Using interpolant generator IpTcStrategyModuleSmtInterpolCraig [2087449036]
[2023-02-07 04:59:04,356 INFO  L157   FreeRefinementEngine]: IpTcStrategyModuleSmtInterpolCraig [2087449036] provided 1 perfect and 0 imperfect interpolant sequences
[2023-02-07 04:59:04,356 INFO  L184   FreeRefinementEngine]: Found 1 perfect and 0 imperfect interpolant sequences.
[2023-02-07 04:59:04,356 INFO  L197   FreeRefinementEngine]: Number of different interpolants: perfect sequences [26] imperfect sequences [] total 26
[2023-02-07 04:59:04,356 INFO  L121   tionRefinementEngine]: Using interpolant automaton builder IpAbStrategyModuleStraightlineAll [1151362622]
[2023-02-07 04:59:04,356 INFO  L85    oduleStraightlineAll]: Using 1 perfect interpolants to construct interpolant automaton
[2023-02-07 04:59:04,356 INFO  L769   eck$LassoCheckResult]: loop already infeasible
[2023-02-07 04:59:04,356 INFO  L100   FreeRefinementEngine]: Using predicate unifier PredicateUnifier provided by strategy CAMEL
[2023-02-07 04:59:04,357 INFO  L143   InterpolantAutomaton]: Constructing interpolant automaton starting with 26 interpolants.
[2023-02-07 04:59:04,357 INFO  L145   InterpolantAutomaton]: CoverageRelationStatistics Valid=78, Invalid=572, Unknown=0, NotChecked=0, Total=650
[2023-02-07 04:59:04,357 INFO  L87              Difference]: Start difference. First operand 2065 states and 2184 transitions. cyclomatic complexity: 120 Second operand  has 26 states, 26 states have (on average 18.615384615384617) internal successors, (484), 15 states have internal predecessors, (484), 5 states have call successors, (28), 12 states have call predecessors, (28), 4 states have return successors, (28), 6 states have call predecessors, (28), 5 states have call successors, (28)
[2023-02-07 04:59:08,783 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2023-02-07 04:59:08,783 INFO  L93              Difference]: Finished difference Result 2259 states and 2423 transitions.
[2023-02-07 04:59:08,783 INFO  L141   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 52 states. 
[2023-02-07 04:59:08,783 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2259 states and 2423 transitions.
[2023-02-07 04:59:08,789 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2023-02-07 04:59:08,789 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2259 states to 0 states and 0 transitions.
[2023-02-07 04:59:08,789 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2023-02-07 04:59:08,789 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2023-02-07 04:59:08,789 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2023-02-07 04:59:08,789 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2023-02-07 04:59:08,789 INFO  L369   hiAutomatonCegarLoop]: Abstraction has 0 states and 0 transitions.
[2023-02-07 04:59:08,789 INFO  L392   hiAutomatonCegarLoop]: Abstraction has 0 states and 0 transitions.
[2023-02-07 04:59:08,789 INFO  L399   stractBuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2023-02-07 04:59:08,789 INFO  L287   stractBuchiCegarLoop]: ======== Iteration 6 ============
[2023-02-07 04:59:08,789 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2023-02-07 04:59:08,790 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2023-02-07 04:59:08,790 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2023-02-07 04:59:08,794 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 07.02 04:59:08 BasicIcfg
[2023-02-07 04:59:08,795 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2023-02-07 04:59:08,795 INFO  L158              Benchmark]: Toolchain (without parser) took 22886.79ms. Allocated memory was 77.6MB in the beginning and 983.6MB in the end (delta: 906.0MB). Free memory was 59.1MB in the beginning and 729.2MB in the end (delta: -670.1MB). Peak memory consumption was 236.3MB. Max. memory is 4.3GB.
[2023-02-07 04:59:08,795 INFO  L158              Benchmark]: Boogie PL CUP Parser took 0.12ms. Allocated memory is still 77.6MB. Free memory is still 62.2MB. There was no memory consumed. Max. memory is 4.3GB.
[2023-02-07 04:59:08,796 INFO  L158              Benchmark]: Boogie Preprocessor took 40.07ms. Allocated memory is still 77.6MB. Free memory was 59.0MB in the beginning and 54.6MB in the end (delta: 4.4MB). Peak memory consumption was 5.2MB. Max. memory is 4.3GB.
[2023-02-07 04:59:08,796 INFO  L158              Benchmark]: ThufvSpecLang took 28.07ms. Allocated memory is still 77.6MB. Free memory was 54.6MB in the beginning and 52.4MB in the end (delta: 2.2MB). Peak memory consumption was 2.1MB. Max. memory is 4.3GB.
[2023-02-07 04:59:08,796 INFO  L158              Benchmark]: RCFGBuilder took 467.45ms. Allocated memory is still 77.6MB. Free memory was 52.4MB in the beginning and 56.5MB in the end (delta: -4.2MB). Peak memory consumption was 15.8MB. Max. memory is 4.3GB.
[2023-02-07 04:59:08,796 INFO  L158              Benchmark]: ThufvLTL2Aut took 40.23ms. Allocated memory is still 77.6MB. Free memory was 56.5MB in the beginning and 53.8MB in the end (delta: 2.8MB). Peak memory consumption was 2.1MB. Max. memory is 4.3GB.
[2023-02-07 04:59:08,797 INFO  L158              Benchmark]: BÃ¼chi Program Product took 316.90ms. Allocated memory was 77.6MB in the beginning and 163.6MB in the end (delta: 86.0MB). Free memory was 53.8MB in the beginning and 98.3MB in the end (delta: -44.5MB). Peak memory consumption was 44.0MB. Max. memory is 4.3GB.
[2023-02-07 04:59:08,797 INFO  L158              Benchmark]: BlockEncodingV2 took 56.94ms. Allocated memory is still 163.6MB. Free memory was 97.8MB in the beginning and 135.1MB in the end (delta: -37.3MB). Peak memory consumption was 9.4MB. Max. memory is 4.3GB.
[2023-02-07 04:59:08,797 INFO  L158              Benchmark]: BuchiAutomizer took 21933.56ms. Allocated memory was 163.6MB in the beginning and 983.6MB in the end (delta: 820.0MB). Free memory was 135.1MB in the beginning and 729.2MB in the end (delta: -594.1MB). Peak memory consumption was 226.4MB. Max. memory is 4.3GB.
[2023-02-07 04:59:08,798 INFO  L339   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    831 locations, 928 edges
  - StatisticsResult: Encoded RCFG
    823 locations, 917 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.12ms. Allocated memory is still 77.6MB. Free memory is still 62.2MB. There was no memory consumed. Max. memory is 4.3GB.
 * Boogie Preprocessor took 40.07ms. Allocated memory is still 77.6MB. Free memory was 59.0MB in the beginning and 54.6MB in the end (delta: 4.4MB). Peak memory consumption was 5.2MB. Max. memory is 4.3GB.
 * ThufvSpecLang took 28.07ms. Allocated memory is still 77.6MB. Free memory was 54.6MB in the beginning and 52.4MB in the end (delta: 2.2MB). Peak memory consumption was 2.1MB. Max. memory is 4.3GB.
 * RCFGBuilder took 467.45ms. Allocated memory is still 77.6MB. Free memory was 52.4MB in the beginning and 56.5MB in the end (delta: -4.2MB). Peak memory consumption was 15.8MB. Max. memory is 4.3GB.
 * ThufvLTL2Aut took 40.23ms. Allocated memory is still 77.6MB. Free memory was 56.5MB in the beginning and 53.8MB in the end (delta: 2.8MB). Peak memory consumption was 2.1MB. Max. memory is 4.3GB.
 * BÃ¼chi Program Product took 316.90ms. Allocated memory was 77.6MB in the beginning and 163.6MB in the end (delta: 86.0MB). Free memory was 53.8MB in the beginning and 98.3MB in the end (delta: -44.5MB). Peak memory consumption was 44.0MB. Max. memory is 4.3GB.
 * BlockEncodingV2 took 56.94ms. Allocated memory is still 163.6MB. Free memory was 97.8MB in the beginning and 135.1MB in the end (delta: -37.3MB). Peak memory consumption was 9.4MB. Max. memory is 4.3GB.
 * BuchiAutomizer took 21933.56ms. Allocated memory was 163.6MB in the beginning and 983.6MB in the end (delta: 820.0MB). Free memory was 135.1MB in the beginning and 729.2MB in the end (delta: -594.1MB). Peak memory consumption was 226.4MB. Max. memory is 4.3GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 4 edges
  - StatisticsResult: Initial RCFG
    362 locations, 409 edges
  - StatisticsResult: BuchiProgram size
    831 locations, 928 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 5 terminating modules (5 trivial, 0 deterministic, 0 nondeterministic). 5 modules have a trivial ranking function, the largest among these consists of 26 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 21.9s and 6 iterations.  TraceHistogramMax:1. Analysis of lassos took 3.1s. Construction of modules took 9.7s. BÃ¼chi inclusion checks took 8.7s. Highest rank in rank-based complementation 0. Minimization of det autom 5. Minimization of nondet autom 0. Automata minimization 0.1s AutomataMinimizationTime, 4 MinimizatonAttempts, 1142 StatesRemovedByMinimization, 4 NontrivialMinimizations. Non-live state removal took 0.0s Buchi closure took 0.0s. Biggest automaton had -1 states and ocurred in iteration -1.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 0 mSolverCounterUnknown, 19649 SdHoareTripleChecker+Valid, 11.0s IncrementalHoareTripleChecker+Time, 0 mSdLazyCounter, 19589 mSDsluCounter, 8047 SdHoareTripleChecker+Invalid, 9.7s Time, 0 mProtectedAction, 0 SdHoareTripleChecker+Unchecked, 0 IncrementalHoareTripleChecker+Unchecked, 3275 mSDsCounter, 4335 IncrementalHoareTripleChecker+Valid, 0 mProtectedPredicate, 32934 IncrementalHoareTripleChecker+Invalid, 37269 SdHoareTripleChecker+Unknown, 0 mSolverCounterNotChecked, 4335 mSolverCounterUnsat, 4772 mSDtfsCounter, 32934 mSolverCounterSat, 0.2s SdHoareTripleChecker+Time, 0 IncrementalHoareTripleChecker+Unknown	LassoAnalysisResults: nont0 unkn0 SFLI1 SFLT0 conc1 concLT0 SILN0 SILU3 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	InitialAbstractionConstructionTime: 0.0s
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property !(( [](( <>((((_p4ltl_3 == true && _p4ltl_2 == true) && _p4ltl_1 == true) && _p4ltl_0 == true)) )) )) || ( ( !(( []((((_p4ltl_3 == true && _p4ltl_2 == true) && _p4ltl_1 == true) && _p4ltl_0 == true ==> standard_metadata.egress_port == 1)) )) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
