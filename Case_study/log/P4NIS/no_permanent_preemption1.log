Total verification running time: 00:00:42
Result: Proved

[P4 + P4LTL->Boogie]:
P4LTL parsing result: (!(([](AP((((((standard_metadata.ingress_port == 0) && (old(hdr.ethernet.dstAddr) != 281474976710655)) && (old(hdr.ipv4.dstAddr) != 2071690107)) && (old(hdr.ethernet.srcAddr) != 0)) ==> fwd(1)))))))

P4LTL parsing result: ([]((<>(AP(((((standard_metadata.ingress_port == 0) && (old(hdr.ethernet.dstAddr) != 281474976710655)) && (old(hdr.ipv4.dstAddr) != 2071690107)) && (old(hdr.ethernet.srcAddr) != 0)))))))

//#LTLProperty:
 (!(([](AP((((((_p4ltl_3 == true) && (_p4ltl_2 == true)) && (_p4ltl_1 == true)) && (_p4ltl_0 == true)) ==> fwd(1)))))))
//#LTLFairness:
 ([]((<>(AP(((((_p4ltl_3 == true) && (_p4ltl_2 == true)) && (_p4ltl_1 == true)) && (_p4ltl_0 == true)))))))
backend cpu time 0.015934 s
program cpu time 0.609322 s

[Boogie Line Num]
747 /home/p4ltl/Desktop/UP4LTL-linux/p4ltl_boogie.bpl

[Boogie->Verified Result]:
This is Ultimate 0.2.2-P4LTL-348d754-m
[2023-01-16 05:55:24,866 INFO  L177        SettingsManager]: Resetting all preferences to default values...
[2023-01-16 05:55:24,868 INFO  L181        SettingsManager]: Resetting UltimateCore preferences to default values
[2023-01-16 05:55:24,908 INFO  L184        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2023-01-16 05:55:24,908 INFO  L181        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2023-01-16 05:55:24,909 INFO  L181        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2023-01-16 05:55:24,910 INFO  L181        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2023-01-16 05:55:24,913 INFO  L181        SettingsManager]: Resetting LassoRanker preferences to default values
[2023-01-16 05:55:24,914 INFO  L181        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2023-01-16 05:55:24,915 INFO  L181        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2023-01-16 05:55:24,917 INFO  L181        SettingsManager]: Resetting Sifa preferences to default values
[2023-01-16 05:55:24,919 INFO  L184        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2023-01-16 05:55:24,919 INFO  L181        SettingsManager]: Resetting LTL2Aut preferences to default values
[2023-01-16 05:55:24,920 INFO  L181        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2023-01-16 05:55:24,921 INFO  L181        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2023-01-16 05:55:24,923 INFO  L181        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2023-01-16 05:55:24,924 INFO  L181        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2023-01-16 05:55:24,925 INFO  L181        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2023-01-16 05:55:24,926 INFO  L181        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2023-01-16 05:55:24,928 INFO  L181        SettingsManager]: Resetting CodeCheck preferences to default values
[2023-01-16 05:55:24,929 INFO  L181        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2023-01-16 05:55:24,988 INFO  L181        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2023-01-16 05:55:24,989 INFO  L181        SettingsManager]: Resetting Referee preferences to default values
[2023-01-16 05:55:24,991 INFO  L181        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2023-01-16 05:55:24,994 INFO  L184        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2023-01-16 05:55:24,995 INFO  L184        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2023-01-16 05:55:24,995 INFO  L181        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2023-01-16 05:55:24,997 INFO  L181        SettingsManager]: Resetting IcfgToChc preferences to default values
[2023-01-16 05:55:24,997 INFO  L181        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2023-01-16 05:55:24,999 INFO  L184        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2023-01-16 05:55:24,999 INFO  L181        SettingsManager]: Resetting ThufvLTL2Aut preferences to default values
[2023-01-16 05:55:25,000 INFO  L181        SettingsManager]: Resetting ThufvSpecLang preferences to default values
[2023-01-16 05:55:25,001 INFO  L181        SettingsManager]: Resetting Boogie Printer preferences to default values
[2023-01-16 05:55:25,002 INFO  L181        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2023-01-16 05:55:25,002 INFO  L181        SettingsManager]: Resetting ReqPrinter preferences to default values
[2023-01-16 05:55:25,004 INFO  L181        SettingsManager]: Resetting Witness Printer preferences to default values
[2023-01-16 05:55:25,005 INFO  L184        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2023-01-16 05:55:25,005 INFO  L181        SettingsManager]: Resetting CDTParser preferences to default values
[2023-01-16 05:55:25,006 INFO  L184        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2023-01-16 05:55:25,006 INFO  L184        SettingsManager]: ReqParser provides no preferences, ignoring...
[2023-01-16 05:55:25,006 INFO  L181        SettingsManager]: Resetting SmtParser preferences to default values
[2023-01-16 05:55:25,008 INFO  L181        SettingsManager]: Resetting Witness Parser preferences to default values
[2023-01-16 05:55:25,009 INFO  L188        SettingsManager]: Finished resetting all preferences to default values...
[2023-01-16 05:55:25,011 INFO  L101        SettingsManager]: Beginning loading settings from /home/p4ltl/Desktop/UP4LTL-linux/config/P4LTL.epf
[2023-01-16 05:55:25,031 INFO  L113        SettingsManager]: Loading preferences was successful
[2023-01-16 05:55:25,031 INFO  L115        SettingsManager]: Preferences different from defaults after loading the file:
[2023-01-16 05:55:25,038 INFO  L136        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2023-01-16 05:55:25,038 INFO  L138        SettingsManager]:  * Read property from file=true
[2023-01-16 05:55:25,038 INFO  L136        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2023-01-16 05:55:25,038 INFO  L138        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2023-01-16 05:55:25,039 INFO  L136        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2023-01-16 05:55:25,039 INFO  L138        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2023-01-16 05:55:25,039 INFO  L138        SettingsManager]:  * Use old map elimination=false
[2023-01-16 05:55:25,039 INFO  L138        SettingsManager]:  * Try twofold refinement=false
[2023-01-16 05:55:25,039 INFO  L136        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2023-01-16 05:55:25,039 INFO  L138        SettingsManager]:  * Overapproximate operations on floating types=true
[2023-01-16 05:55:25,039 INFO  L138        SettingsManager]:  * Check division by zero=IGNORE
[2023-01-16 05:55:25,040 INFO  L138        SettingsManager]:  * Pointer to allocated memory at dereference=IGNORE
[2023-01-16 05:55:25,040 INFO  L138        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=IGNORE
[2023-01-16 05:55:25,040 INFO  L138        SettingsManager]:  * Check array bounds for arrays that are off heap=IGNORE
[2023-01-16 05:55:25,040 INFO  L138        SettingsManager]:  * Check if freed pointer was valid=false
[2023-01-16 05:55:25,040 INFO  L138        SettingsManager]:  * Pointer base address is valid at dereference=IGNORE
[2023-01-16 05:55:25,040 INFO  L136        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2023-01-16 05:55:25,040 INFO  L138        SettingsManager]:  * Size of a code block=SingleStatement
[2023-01-16 05:55:25,041 INFO  L138        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2023-01-16 05:55:25,041 INFO  L138        SettingsManager]:  * Remove assume true statements=false
[2023-01-16 05:55:25,041 INFO  L136        SettingsManager]: Preferences of TraceAbstraction differ from their defaults:
[2023-01-16 05:55:25,041 INFO  L138        SettingsManager]:  * Compute Interpolants along a Counterexample=FPandBP
[2023-01-16 05:55:25,041 INFO  L138        SettingsManager]:  * Trace refinement strategy=CAMEL
[2023-01-16 05:55:25,041 INFO  L138        SettingsManager]:  * Command for external solver=z3 SMTLIB2_COMPLIANT=true -memory:2024 -smt2 -in
[2023-01-16 05:55:25,041 INFO  L138        SettingsManager]:  * SMT solver=External_ModelsAndUnsatCoreMode
[2023-01-16 05:55:25,043 INFO  L136        SettingsManager]: Preferences of Boogie Printer differ from their defaults:
[2023-01-16 05:55:25,043 INFO  L138        SettingsManager]:  * Dump path:=C:\Users\Greenie\Desktop\Project\P4LTL\trunk\examples\P4LTL
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.sun.xml.bind.v2.runtime.reflect.opt.Injector$1 (file:/home/p4ltl/Desktop/UP4LTL-linux/plugins/com.sun.xml.bind_2.2.0.v201505121915.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
WARNING: Please consider reporting this to the maintainers of com.sun.xml.bind.v2.runtime.reflect.opt.Injector$1
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
[2023-01-16 05:55:25,450 INFO  L75    nceAwareModelManager]: Repository-Root is: /tmp
[2023-01-16 05:55:25,481 INFO  L261   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2023-01-16 05:55:25,483 INFO  L217   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2023-01-16 05:55:25,484 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2023-01-16 05:55:25,486 INFO  L275        PluginConnector]: Boogie PL CUP Parser initialized
[2023-01-16 05:55:25,487 INFO  L432   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /home/p4ltl/Desktop/UP4LTL-linux/p4ltl_boogie.bpl
[2023-01-16 05:55:25,487 INFO  L110           BoogieParser]: Parsing: '/home/p4ltl/Desktop/UP4LTL-linux/p4ltl_boogie.bpl'
[2023-01-16 05:55:25,535 INFO  L299   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2023-01-16 05:55:25,537 INFO  L131        ToolchainWalker]: Walking toolchain with 7 elements.
[2023-01-16 05:55:25,538 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2023-01-16 05:55:25,538 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2023-01-16 05:55:25,538 INFO  L275        PluginConnector]: Boogie Preprocessor initialized
[2023-01-16 05:55:25,555 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "p4ltl_boogie.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 16.01 05:55:25" (1/1) ...
[2023-01-16 05:55:25,557 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "p4ltl_boogie.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 16.01 05:55:25" (1/1) ...
[2023-01-16 05:55:25,570 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "p4ltl_boogie.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 16.01 05:55:25" (1/1) ...
[2023-01-16 05:55:25,570 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "p4ltl_boogie.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 16.01 05:55:25" (1/1) ...
[2023-01-16 05:55:25,592 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "p4ltl_boogie.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 16.01 05:55:25" (1/1) ...
[2023-01-16 05:55:25,596 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "p4ltl_boogie.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 16.01 05:55:25" (1/1) ...
[2023-01-16 05:55:25,603 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "p4ltl_boogie.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 16.01 05:55:25" (1/1) ...
[2023-01-16 05:55:25,607 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2023-01-16 05:55:25,609 INFO  L113        PluginConnector]: ------------------------ThufvSpecLang----------------------------
[2023-01-16 05:55:25,609 INFO  L271        PluginConnector]: Initializing ThufvSpecLang...
[2023-01-16 05:55:25,613 INFO  L275        PluginConnector]: ThufvSpecLang initialized
[2023-01-16 05:55:25,619 INFO  L185        PluginConnector]: Executing the observer ThufvSpecLangObserver from plugin ThufvSpecLang for "p4ltl_boogie.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 16.01 05:55:25" (1/1) ...
[2023-01-16 05:55:25,624 INFO  L184   hufvSpecLangObserver]: P4LTL Spec is: (!(([](AP((((((_p4ltl_3 == true) && (_p4ltl_2 == true)) && (_p4ltl_1 == true)) && (_p4ltl_0 == true)) ==> fwd(1)))))))
[2023-01-16 05:55:25,624 INFO  L312   hufvSpecLangObserver]: translating P4LTL formula: (!(([](AP((((((_p4ltl_3 == true) && (_p4ltl_2 == true)) && (_p4ltl_1 == true)) && (_p4ltl_0 == true)) ==> fwd(1)))))))
[2023-01-16 05:55:25,624 INFO  L331   hufvSpecLangObserver]: Starting to parse P4LTL Formula to AstNode: (!(([](AP((((((_p4ltl_3 == true) && (_p4ltl_2 == true)) && (_p4ltl_1 == true)) && (_p4ltl_0 == true)) ==> fwd(1)))))))
Token: (
Token: !
Token: (
Token: (
Token: []
Token: (
Token: AP
Token: (
Token: (
Token: (
Token: (
Token: (
Token: (
Token: _p4ltl_3
Token: ==
Token: true
Token: )
Token: &&
Token: (
Token: _p4ltl_2
Token: ==
Token: true
Token: )
Token: )
Token: &&
Token: (
Token: _p4ltl_1
Token: ==
Token: true
Token: )
Token: )
Token: &&
Token: (
Token: _p4ltl_0
Token: ==
Token: true
Token: )
Token: )
Token: ==>
Token: fwd
Token: (
Token: 1
Token: )
Token: )
Token: )
Token: )
Token: )
Token: )
Token: )
Token: 
Token: 
[2023-01-16 05:55:25,641 INFO  L336   hufvSpecLangObserver]: Successfully lexed and parsed: (!(([](AP((((((_p4ltl_3 == true) && (_p4ltl_2 == true)) && (_p4ltl_1 == true)) && (_p4ltl_0 == true)) ==> fwd(1)))))))
[2023-01-16 05:55:25,642 INFO  L316   hufvSpecLangObserver]: translated to regular LTL formula: ( !(( [](AP(( ( ( ( _p4ltl_3==true && _p4ltl_2==true ) && _p4ltl_1==true ) && _p4ltl_0==true ) ==> (standard_metadata.egress_port == 1) ))) )) )
==== class: class ast.UnaryTemporalOperator
==== class: class ast.UnaryTemporalOperator
==== class: class ast.P4LTLAtomicProposition
==== class: class de.uni_freiburg.informatik.ultimate.ltl2aut.ast.BinaryOperator
==== class: class de.uni_freiburg.informatik.ultimate.ltl2aut.ast.BinaryOperator
==== class: class de.uni_freiburg.informatik.ultimate.ltl2aut.ast.BinaryOperator
==== class: class de.uni_freiburg.informatik.ultimate.ltl2aut.ast.BinaryOperator
==== class: class ast.ExtendedComparativeOperator
==== class: class de.uni_freiburg.informatik.ultimate.ltl2aut.ast.Name
==== class: class de.uni_freiburg.informatik.ultimate.ltl2aut.ast.BoolLiteral
==== class: class ast.ExtendedComparativeOperator
==== class: class de.uni_freiburg.informatik.ultimate.ltl2aut.ast.Name
==== class: class de.uni_freiburg.informatik.ultimate.ltl2aut.ast.BoolLiteral
==== class: class ast.ExtendedComparativeOperator
==== class: class de.uni_freiburg.informatik.ultimate.ltl2aut.ast.Name
==== class: class de.uni_freiburg.informatik.ultimate.ltl2aut.ast.BoolLiteral
==== class: class ast.ExtendedComparativeOperator
==== class: class de.uni_freiburg.informatik.ultimate.ltl2aut.ast.Name
==== class: class de.uni_freiburg.informatik.ultimate.ltl2aut.ast.BoolLiteral
==== class: class ast.Forward
[2023-01-16 05:55:25,646 INFO  L218   hufvSpecLangObserver]: P4LTL Fairness Spec is: ([]((<>(AP(((((_p4ltl_3 == true) && (_p4ltl_2 == true)) && (_p4ltl_1 == true)) && (_p4ltl_0 == true)))))))
[2023-01-16 05:55:25,646 INFO  L312   hufvSpecLangObserver]: translating P4LTL formula: ([]((<>(AP(((((_p4ltl_3 == true) && (_p4ltl_2 == true)) && (_p4ltl_1 == true)) && (_p4ltl_0 == true)))))))
[2023-01-16 05:55:25,646 INFO  L331   hufvSpecLangObserver]: Starting to parse P4LTL Formula to AstNode: ([]((<>(AP(((((_p4ltl_3 == true) && (_p4ltl_2 == true)) && (_p4ltl_1 == true)) && (_p4ltl_0 == true)))))))
Token: (
Token: []
Token: (
Token: (
Token: <>
Token: (
Token: AP
Token: (
Token: (
Token: (
Token: (
Token: (
Token: _p4ltl_3
Token: ==
Token: true
Token: )
Token: &&
Token: (
Token: _p4ltl_2
Token: ==
Token: true
Token: )
Token: )
Token: &&
Token: (
Token: _p4ltl_1
Token: ==
Token: true
Token: )
Token: )
Token: &&
Token: (
Token: _p4ltl_0
Token: ==
Token: true
Token: )
Token: )
Token: )
Token: )
Token: )
Token: )
Token: )
Token: 
Token: 
[2023-01-16 05:55:25,648 INFO  L336   hufvSpecLangObserver]: Successfully lexed and parsed: ([]((<>(AP(((((_p4ltl_3 == true) && (_p4ltl_2 == true)) && (_p4ltl_1 == true)) && (_p4ltl_0 == true)))))))
[2023-01-16 05:55:25,648 INFO  L316   hufvSpecLangObserver]: translated to regular LTL formula: ( [](( <>(AP(( ( ( _p4ltl_3==true && _p4ltl_2==true ) && _p4ltl_1==true ) && _p4ltl_0==true ))) )) )
==== class: class ast.UnaryTemporalOperator
==== class: class ast.UnaryTemporalOperator
==== class: class ast.P4LTLAtomicProposition
==== class: class de.uni_freiburg.informatik.ultimate.ltl2aut.ast.BinaryOperator
==== class: class de.uni_freiburg.informatik.ultimate.ltl2aut.ast.BinaryOperator
==== class: class de.uni_freiburg.informatik.ultimate.ltl2aut.ast.BinaryOperator
==== class: class ast.ExtendedComparativeOperator
==== class: class de.uni_freiburg.informatik.ultimate.ltl2aut.ast.Name
==== class: class de.uni_freiburg.informatik.ultimate.ltl2aut.ast.BoolLiteral
==== class: class ast.ExtendedComparativeOperator
==== class: class de.uni_freiburg.informatik.ultimate.ltl2aut.ast.Name
==== class: class de.uni_freiburg.informatik.ultimate.ltl2aut.ast.BoolLiteral
==== class: class ast.ExtendedComparativeOperator
==== class: class de.uni_freiburg.informatik.ultimate.ltl2aut.ast.Name
==== class: class de.uni_freiburg.informatik.ultimate.ltl2aut.ast.BoolLiteral
==== class: class ast.ExtendedComparativeOperator
==== class: class de.uni_freiburg.informatik.ultimate.ltl2aut.ast.Name
==== class: class de.uni_freiburg.informatik.ultimate.ltl2aut.ast.BoolLiteral
[2023-01-16 05:55:25,652 INFO  L288   hufvSpecLangObserver]: File already exists and will be overwritten: /home/p4ltl/Desktop/UP4LTL-linux/__p4ltl_ast.json
[2023-01-16 05:55:25,653 INFO  L291   hufvSpecLangObserver]: Writing to file /home/p4ltl/Desktop/UP4LTL-linux/__p4ltl_ast.json
[2023-01-16 05:55:25,655 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.tsinghua.ss.thufv.specLang AST 16.01 05:55:25 PropertyContainer
[2023-01-16 05:55:25,655 INFO  L132        PluginConnector]: ------------------------ END ThufvSpecLang----------------------------
[2023-01-16 05:55:25,656 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2023-01-16 05:55:25,656 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2023-01-16 05:55:25,656 INFO  L275        PluginConnector]: RCFGBuilder initialized
[2023-01-16 05:55:25,659 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "p4ltl_boogie.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 16.01 05:55:25" (1/2) ...
[2023-01-16 05:55:25,665 INFO  L127          SolverBuilder]: Constructing new instance of SMTInterpol with explicit timeout -1 ms and remaining time -1 ms
[2023-01-16 05:55:25,776 INFO  L124     BoogieDeclarations]: Specification and implementation of procedure MyComputeChecksum given in one single declaration
[2023-01-16 05:55:25,777 INFO  L130     BoogieDeclarations]: Found specification of procedure MyComputeChecksum
[2023-01-16 05:55:25,777 INFO  L138     BoogieDeclarations]: Found implementation of procedure MyComputeChecksum
[2023-01-16 05:55:25,777 INFO  L124     BoogieDeclarations]: Specification and implementation of procedure MyEgress given in one single declaration
[2023-01-16 05:55:25,778 INFO  L130     BoogieDeclarations]: Found specification of procedure MyEgress
[2023-01-16 05:55:25,778 INFO  L138     BoogieDeclarations]: Found implementation of procedure MyEgress
[2023-01-16 05:55:25,778 INFO  L124     BoogieDeclarations]: Specification and implementation of procedure MyIngress given in one single declaration
[2023-01-16 05:55:25,778 INFO  L130     BoogieDeclarations]: Found specification of procedure MyIngress
[2023-01-16 05:55:25,778 INFO  L138     BoogieDeclarations]: Found implementation of procedure MyIngress
[2023-01-16 05:55:25,778 INFO  L124     BoogieDeclarations]: Specification and implementation of procedure MyVerifyChecksum given in one single declaration
[2023-01-16 05:55:25,778 INFO  L130     BoogieDeclarations]: Found specification of procedure MyVerifyChecksum
[2023-01-16 05:55:25,778 INFO  L138     BoogieDeclarations]: Found implementation of procedure MyVerifyChecksum
[2023-01-16 05:55:25,779 INFO  L124     BoogieDeclarations]: Specification and implementation of procedure ULTIMATE.start given in one single declaration
[2023-01-16 05:55:25,783 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2023-01-16 05:55:25,784 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2023-01-16 05:55:25,784 INFO  L124     BoogieDeclarations]: Specification and implementation of procedure _parser_MyParser given in one single declaration
[2023-01-16 05:55:25,784 INFO  L130     BoogieDeclarations]: Found specification of procedure _parser_MyParser
[2023-01-16 05:55:25,784 INFO  L138     BoogieDeclarations]: Found implementation of procedure _parser_MyParser
[2023-01-16 05:55:25,784 INFO  L124     BoogieDeclarations]: Specification and implementation of procedure accept given in one single declaration
[2023-01-16 05:55:25,784 INFO  L130     BoogieDeclarations]: Found specification of procedure accept
[2023-01-16 05:55:25,785 INFO  L138     BoogieDeclarations]: Found implementation of procedure accept
[2023-01-16 05:55:25,785 INFO  L124     BoogieDeclarations]: Specification and implementation of procedure count.write given in one single declaration
[2023-01-16 05:55:25,785 INFO  L130     BoogieDeclarations]: Found specification of procedure count.write
[2023-01-16 05:55:25,785 INFO  L138     BoogieDeclarations]: Found implementation of procedure count.write
[2023-01-16 05:55:25,785 INFO  L124     BoogieDeclarations]: Specification and implementation of procedure creatipv6_1 given in one single declaration
[2023-01-16 05:55:25,785 INFO  L130     BoogieDeclarations]: Found specification of procedure creatipv6_1
[2023-01-16 05:55:25,785 INFO  L138     BoogieDeclarations]: Found implementation of procedure creatipv6_1
[2023-01-16 05:55:25,785 INFO  L124     BoogieDeclarations]: Specification and implementation of procedure creatipv6_2 given in one single declaration
[2023-01-16 05:55:25,785 INFO  L130     BoogieDeclarations]: Found specification of procedure creatipv6_2
[2023-01-16 05:55:25,785 INFO  L138     BoogieDeclarations]: Found implementation of procedure creatipv6_2
[2023-01-16 05:55:25,786 INFO  L124     BoogieDeclarations]: Specification and implementation of procedure creatmytunnel given in one single declaration
[2023-01-16 05:55:25,786 INFO  L130     BoogieDeclarations]: Found specification of procedure creatmytunnel
[2023-01-16 05:55:25,786 INFO  L138     BoogieDeclarations]: Found implementation of procedure creatmytunnel
[2023-01-16 05:55:25,786 INFO  L124     BoogieDeclarations]: Specification and implementation of procedure do_read_count given in one single declaration
[2023-01-16 05:55:25,786 INFO  L130     BoogieDeclarations]: Found specification of procedure do_read_count
[2023-01-16 05:55:25,786 INFO  L138     BoogieDeclarations]: Found implementation of procedure do_read_count
[2023-01-16 05:55:25,786 INFO  L124     BoogieDeclarations]: Specification and implementation of procedure ds_box.write given in one single declaration
[2023-01-16 05:55:25,786 INFO  L130     BoogieDeclarations]: Found specification of procedure ds_box.write
[2023-01-16 05:55:25,786 INFO  L138     BoogieDeclarations]: Found implementation of procedure ds_box.write
[2023-01-16 05:55:25,787 INFO  L124     BoogieDeclarations]: Specification and implementation of procedure es_box.write given in one single declaration
[2023-01-16 05:55:25,787 INFO  L130     BoogieDeclarations]: Found specification of procedure es_box.write
[2023-01-16 05:55:25,787 INFO  L138     BoogieDeclarations]: Found implementation of procedure es_box.write
[2023-01-16 05:55:25,787 INFO  L124     BoogieDeclarations]: Specification and implementation of procedure havocProcedure given in one single declaration
[2023-01-16 05:55:25,787 INFO  L130     BoogieDeclarations]: Found specification of procedure havocProcedure
[2023-01-16 05:55:25,787 INFO  L138     BoogieDeclarations]: Found implementation of procedure havocProcedure
[2023-01-16 05:55:25,787 INFO  L124     BoogieDeclarations]: Specification and implementation of procedure main given in one single declaration
[2023-01-16 05:55:25,787 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2023-01-16 05:55:25,787 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2023-01-16 05:55:25,788 INFO  L124     BoogieDeclarations]: Specification and implementation of procedure mainProcedure given in one single declaration
[2023-01-16 05:55:25,788 INFO  L130     BoogieDeclarations]: Found specification of procedure mainProcedure
[2023-01-16 05:55:25,788 INFO  L138     BoogieDeclarations]: Found implementation of procedure mainProcedure
[2023-01-16 05:55:25,788 INFO  L130     BoogieDeclarations]: Found specification of procedure mark_to_drop
[2023-01-16 05:55:25,788 INFO  L124     BoogieDeclarations]: Specification and implementation of procedure parse_ipv4 given in one single declaration
[2023-01-16 05:55:25,788 INFO  L130     BoogieDeclarations]: Found specification of procedure parse_ipv4
[2023-01-16 05:55:25,788 INFO  L138     BoogieDeclarations]: Found implementation of procedure parse_ipv4
[2023-01-16 05:55:25,788 INFO  L124     BoogieDeclarations]: Specification and implementation of procedure parse_ipv6 given in one single declaration
[2023-01-16 05:55:25,788 INFO  L130     BoogieDeclarations]: Found specification of procedure parse_ipv6
[2023-01-16 05:55:25,788 INFO  L138     BoogieDeclarations]: Found implementation of procedure parse_ipv6
[2023-01-16 05:55:25,789 INFO  L124     BoogieDeclarations]: Specification and implementation of procedure parse_myTunnel given in one single declaration
[2023-01-16 05:55:25,789 INFO  L130     BoogieDeclarations]: Found specification of procedure parse_myTunnel
[2023-01-16 05:55:25,789 INFO  L138     BoogieDeclarations]: Found implementation of procedure parse_myTunnel
[2023-01-16 05:55:25,789 INFO  L124     BoogieDeclarations]: Specification and implementation of procedure parse_select given in one single declaration
[2023-01-16 05:55:25,789 INFO  L130     BoogieDeclarations]: Found specification of procedure parse_select
[2023-01-16 05:55:25,789 INFO  L138     BoogieDeclarations]: Found implementation of procedure parse_select
[2023-01-16 05:55:25,789 INFO  L124     BoogieDeclarations]: Specification and implementation of procedure parse_tcp given in one single declaration
[2023-01-16 05:55:25,789 INFO  L130     BoogieDeclarations]: Found specification of procedure parse_tcp
[2023-01-16 05:55:25,789 INFO  L138     BoogieDeclarations]: Found implementation of procedure parse_tcp
[2023-01-16 05:55:25,790 INFO  L124     BoogieDeclarations]: Specification and implementation of procedure parse_udp given in one single declaration
[2023-01-16 05:55:25,790 INFO  L130     BoogieDeclarations]: Found specification of procedure parse_udp
[2023-01-16 05:55:25,790 INFO  L138     BoogieDeclarations]: Found implementation of procedure parse_udp
[2023-01-16 05:55:25,790 INFO  L124     BoogieDeclarations]: Specification and implementation of procedure read_dsbox given in one single declaration
[2023-01-16 05:55:25,790 INFO  L130     BoogieDeclarations]: Found specification of procedure read_dsbox
[2023-01-16 05:55:25,790 INFO  L138     BoogieDeclarations]: Found implementation of procedure read_dsbox
[2023-01-16 05:55:25,790 INFO  L124     BoogieDeclarations]: Specification and implementation of procedure read_esbox given in one single declaration
[2023-01-16 05:55:25,790 INFO  L130     BoogieDeclarations]: Found specification of procedure read_esbox
[2023-01-16 05:55:25,791 INFO  L138     BoogieDeclarations]: Found implementation of procedure read_esbox
[2023-01-16 05:55:25,791 INFO  L130     BoogieDeclarations]: Found specification of procedure reject
[2023-01-16 05:55:25,791 INFO  L130     BoogieDeclarations]: Found specification of procedure setInvalid
[2023-01-16 05:55:25,791 INFO  L130     BoogieDeclarations]: Found specification of procedure setValid
[2023-01-16 05:55:25,791 INFO  L124     BoogieDeclarations]: Specification and implementation of procedure start given in one single declaration
[2023-01-16 05:55:25,791 INFO  L130     BoogieDeclarations]: Found specification of procedure start
[2023-01-16 05:55:25,792 INFO  L138     BoogieDeclarations]: Found implementation of procedure start
[2023-01-16 05:55:25,792 INFO  L124     BoogieDeclarations]: Specification and implementation of procedure store_user_mac given in one single declaration
[2023-01-16 05:55:25,792 INFO  L130     BoogieDeclarations]: Found specification of procedure store_user_mac
[2023-01-16 05:55:25,792 INFO  L138     BoogieDeclarations]: Found implementation of procedure store_user_mac
[2023-01-16 05:55:25,792 INFO  L124     BoogieDeclarations]: Specification and implementation of procedure user_mac.write given in one single declaration
[2023-01-16 05:55:25,792 INFO  L130     BoogieDeclarations]: Found specification of procedure user_mac.write
[2023-01-16 05:55:25,792 INFO  L138     BoogieDeclarations]: Found implementation of procedure user_mac.write
[2023-01-16 05:55:25,862 INFO  L234             CfgBuilder]: Building ICFG
[2023-01-16 05:55:25,864 INFO  L260             CfgBuilder]: Building CFG for each procedure with an implementation
[2023-01-16 05:55:26,250 INFO  L275             CfgBuilder]: Performing block encoding
[2023-01-16 05:55:26,265 INFO  L294             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2023-01-16 05:55:26,265 INFO  L299             CfgBuilder]: Removed 0 assume(true) statements.
[2023-01-16 05:55:26,269 INFO  L202        PluginConnector]: Adding new model p4ltl_boogie.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 16.01 05:55:26 BoogieIcfgContainer
[2023-01-16 05:55:26,269 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.tsinghua.ss.thufv.specLang AST 16.01 05:55:25" (2/2) ...
[2023-01-16 05:55:26,269 INFO  L82     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2023-01-16 05:55:26,270 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@2423dbb7 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 16.01 05:55:26, skipping insertion in model container
[2023-01-16 05:55:26,270 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2023-01-16 05:55:26,271 INFO  L113        PluginConnector]: ------------------------ThufvLTL2Aut----------------------------
[2023-01-16 05:55:26,271 INFO  L271        PluginConnector]: Initializing ThufvLTL2Aut...
[2023-01-16 05:55:26,272 INFO  L275        PluginConnector]: ThufvLTL2Aut initialized
[2023-01-16 05:55:26,273 INFO  L185        PluginConnector]: Executing the observer ThufvLTL2AutObserver from plugin ThufvLTL2Aut for "Hardcoded edu.tsinghua.ss.thufv.specLang AST 16.01 05:55:25" (2/3) ...
[2023-01-16 05:55:26,274 INFO  L119   ThufvLTL2AutObserver]: Checking fairness + property: !(( [](( <>(AP(( ( ( _p4ltl_3==true && _p4ltl_2==true ) && _p4ltl_1==true ) && _p4ltl_0==true ))) )) )) || ( ( !(( [](AP(( ( ( ( _p4ltl_3==true && _p4ltl_2==true ) && _p4ltl_1==true ) && _p4ltl_0==true ) ==> (standard_metadata.egress_port == 1) ))) )) ))
[2023-01-16 05:55:26,282 INFO  L189       MonitoredProcess]: No working directory specified, using /home/p4ltl/Desktop/UP4LTL-linux/ltl2ba
[2023-01-16 05:55:26,314 INFO  L229       MonitoredProcess]: Starting monitored process 1 with /home/p4ltl/Desktop/UP4LTL-linux/ltl2ba -f ! ( ! ( ( [] ( ( <> ( a ) ) ) ) ) || ( ( ! ( ( [] ( b ) ) ) ) ) )  (exit command is null, workingDir is null)
[2023-01-16 05:55:26,320 INFO  L552       MonitoredProcess]: [MP /home/p4ltl/Desktop/UP4LTL-linux/ltl2ba -f ! ( ! ( ( [] ( ( <> ( a ) ) ) ) ) || ( ( ! ( ( [] ( b ) ) ) ) ) )  (1)] Ended with exit code 0
[2023-01-16 05:55:26,345 INFO  L133   ThufvLTL2AutObserver]: LTL Property is: !(( [](( <>((((_p4ltl_3 == true && _p4ltl_2 == true) && _p4ltl_1 == true) && _p4ltl_0 == true)) )) )) || ( ( !(( []((((_p4ltl_3 == true && _p4ltl_2 == true) && _p4ltl_1 == true) && _p4ltl_0 == true ==> standard_metadata.egress_port == 1)) )) ))
[2023-01-16 05:55:26,347 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.tsinghua.ss.thufv.ltl2aut AST 16.01 05:55:26 NWAContainer
[2023-01-16 05:55:26,347 INFO  L132        PluginConnector]: ------------------------ END ThufvLTL2Aut----------------------------
[2023-01-16 05:55:26,348 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2023-01-16 05:55:26,348 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2023-01-16 05:55:26,349 INFO  L275        PluginConnector]: BÃ¼chi Program Product initialized
[2023-01-16 05:55:26,350 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "p4ltl_boogie.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 16.01 05:55:26" (3/4) ...
[2023-01-16 05:55:26,351 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@49fd6aac and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 16.01 05:55:26, skipping insertion in model container
[2023-01-16 05:55:26,351 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.tsinghua.ss.thufv.ltl2aut AST 16.01 05:55:26" (4/4) ...
[2023-01-16 05:55:26,358 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 4 edges
[2023-01-16 05:55:26,361 INFO  L110   BuchiProductObserver]: Initial RCFG 353 locations, 400 edges
[2023-01-16 05:55:26,361 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2023-01-16 05:55:26,365 INFO  L170       ProductGenerator]: ----- Annotating TransactionInfo ...
[2023-01-16 05:55:26,365 INFO  L189       ProductGenerator]: +++++ Call method name: mainProcedure
[2023-01-16 05:55:26,366 INFO  L189       ProductGenerator]: +++++ Call method name: MyIngress
[2023-01-16 05:55:26,366 INFO  L189       ProductGenerator]: +++++ Call method name: MyEgress
[2023-01-16 05:55:26,366 INFO  L189       ProductGenerator]: +++++ Call method name: MyVerifyChecksum
[2023-01-16 05:55:26,366 INFO  L189       ProductGenerator]: +++++ Call method name: main
[2023-01-16 05:55:26,367 INFO  L192       ProductGenerator]: ----- Handling transaction edge from mainEXIT to L577-1
[2023-01-16 05:55:26,367 INFO  L189       ProductGenerator]: +++++ Call method name: MyComputeChecksum
[2023-01-16 05:55:26,367 INFO  L189       ProductGenerator]: +++++ Call method name: parse_select
[2023-01-16 05:55:26,367 INFO  L189       ProductGenerator]: +++++ Call method name: parse_myTunnel
[2023-01-16 05:55:26,368 INFO  L189       ProductGenerator]: +++++ Call method name: do_read_count
[2023-01-16 05:55:26,368 INFO  L189       ProductGenerator]: +++++ Call method name: parse_tcp
[2023-01-16 05:55:26,368 INFO  L189       ProductGenerator]: +++++ Call method name: store_user_mac
[2023-01-16 05:55:26,368 INFO  L189       ProductGenerator]: +++++ Call method name: read_esbox
[2023-01-16 05:55:26,368 INFO  L189       ProductGenerator]: +++++ Call method name: count.write
[2023-01-16 05:55:26,368 INFO  L189       ProductGenerator]: +++++ Call method name: count.write
[2023-01-16 05:55:26,368 INFO  L189       ProductGenerator]: +++++ Call method name: count.write
[2023-01-16 05:55:26,368 INFO  L189       ProductGenerator]: +++++ Call method name: start
[2023-01-16 05:55:26,368 INFO  L189       ProductGenerator]: +++++ Call method name: user_mac.write
[2023-01-16 05:55:26,368 INFO  L189       ProductGenerator]: +++++ Call method name: _parser_MyParser
[2023-01-16 05:55:26,369 INFO  L189       ProductGenerator]: +++++ Call method name: accept
[2023-01-16 05:55:26,369 INFO  L189       ProductGenerator]: +++++ Call method name: creatipv6_2
[2023-01-16 05:55:26,369 INFO  L189       ProductGenerator]: +++++ Call method name: parse_ipv6
[2023-01-16 05:55:26,369 INFO  L189       ProductGenerator]: +++++ Call method name: creatipv6_1
[2023-01-16 05:55:26,369 INFO  L189       ProductGenerator]: +++++ Call method name: parse_ipv4
[2023-01-16 05:55:26,369 INFO  L189       ProductGenerator]: +++++ Call method name: parse_ipv4
[2023-01-16 05:55:26,369 INFO  L189       ProductGenerator]: +++++ Call method name: parse_udp
[2023-01-16 05:55:26,370 INFO  L189       ProductGenerator]: +++++ Call method name: read_dsbox
[2023-01-16 05:55:26,370 INFO  L189       ProductGenerator]: +++++ Call method name: creatmytunnel
[2023-01-16 05:55:26,370 INFO  L189       ProductGenerator]: +++++ Call method name: havocProcedure
[2023-01-16 05:55:26,376 INFO  L244       ProductGenerator]: Creating Product States...
[2023-01-16 05:55:26,376 INFO  L277       ProductGenerator]: ==== location: L532
[2023-01-16 05:55:26,377 INFO  L277       ProductGenerator]: ==== location: L691
[2023-01-16 05:55:26,377 INFO  L277       ProductGenerator]: ==== location: L390
[2023-01-16 05:55:26,377 INFO  L277       ProductGenerator]: ==== location: L391-1
[2023-01-16 05:55:26,377 INFO  L277       ProductGenerator]: ==== location: L517
[2023-01-16 05:55:26,377 INFO  L277       ProductGenerator]: ==== location: L528
[2023-01-16 05:55:26,377 INFO  L277       ProductGenerator]: ==== location: MyVerifyChecksumFINAL
[2023-01-16 05:55:26,377 INFO  L277       ProductGenerator]: ==== location: L386
[2023-01-16 05:55:26,377 INFO  L277       ProductGenerator]: ==== location: havocProcedureEXIT
[2023-01-16 05:55:26,377 INFO  L277       ProductGenerator]: ==== location: L599
[2023-01-16 05:55:26,377 INFO  L277       ProductGenerator]: ==== location: L590
[2023-01-16 05:55:26,377 INFO  L277       ProductGenerator]: ==== location: L306-1
[2023-01-16 05:55:26,377 INFO  L277       ProductGenerator]: ==== location: creatmytunnelEXIT
[2023-01-16 05:55:26,377 INFO  L277       ProductGenerator]: ==== location: L458
[2023-01-16 05:55:26,378 INFO  L277       ProductGenerator]: ==== location: creatipv6_1ENTRY
[2023-01-16 05:55:26,378 INFO  L277       ProductGenerator]: ==== location: L492
[2023-01-16 05:55:26,378 INFO  L277       ProductGenerator]: ==== location: L367
[2023-01-16 05:55:26,378 INFO  L277       ProductGenerator]: ==== location: ds_box.writeENTRY
[2023-01-16 05:55:26,378 INFO  L277       ProductGenerator]: ==== location: L501
[2023-01-16 05:55:26,378 INFO  L277       ProductGenerator]: ==== location: L260
[2023-01-16 05:55:26,378 INFO  L277       ProductGenerator]: ==== location: L468
[2023-01-16 05:55:26,378 INFO  L277       ProductGenerator]: ==== location: L267-1
[2023-01-16 05:55:26,378 INFO  L277       ProductGenerator]: ==== location: L511
[2023-01-16 05:55:26,378 INFO  L277       ProductGenerator]: ==== location: L561
[2023-01-16 05:55:26,378 INFO  L277       ProductGenerator]: ==== location: L571
[2023-01-16 05:55:26,378 INFO  L277       ProductGenerator]: ==== location: L688
[2023-01-16 05:55:26,378 INFO  L277       ProductGenerator]: ==== location: L271
[2023-01-16 05:55:26,379 INFO  L277       ProductGenerator]: ==== location: L287
[2023-01-16 05:55:26,379 INFO  L277       ProductGenerator]: ==== location: L499
[2023-01-16 05:55:26,379 INFO  L277       ProductGenerator]: ==== location: L730-1
[2023-01-16 05:55:26,379 INFO  L277       ProductGenerator]: ==== location: L423
[2023-01-16 05:55:26,379 INFO  L277       ProductGenerator]: ==== location: L506
[2023-01-16 05:55:26,379 INFO  L277       ProductGenerator]: ==== location: mainProcedureFINAL
[2023-01-16 05:55:26,379 INFO  L277       ProductGenerator]: ==== location: L368
[2023-01-16 05:55:26,379 INFO  L277       ProductGenerator]: ==== location: L497
[2023-01-16 05:55:26,379 INFO  L277       ProductGenerator]: ==== location: L542
[2023-01-16 05:55:26,379 INFO  L277       ProductGenerator]: ==== location: L298
[2023-01-16 05:55:26,379 INFO  L277       ProductGenerator]: ==== location: L535
[2023-01-16 05:55:26,379 INFO  L277       ProductGenerator]: ==== location: L570
[2023-01-16 05:55:26,379 INFO  L277       ProductGenerator]: ==== location: L712
[2023-01-16 05:55:26,379 INFO  L277       ProductGenerator]: ==== location: L502
[2023-01-16 05:55:26,379 INFO  L277       ProductGenerator]: ==== location: do_read_countENTRY
[2023-01-16 05:55:26,380 INFO  L277       ProductGenerator]: ==== location: mainProcedureEXIT
[2023-01-16 05:55:26,380 INFO  L277       ProductGenerator]: ==== location: user_mac.writeFINAL
[2023-01-16 05:55:26,380 INFO  L277       ProductGenerator]: ==== location: L489
[2023-01-16 05:55:26,380 INFO  L277       ProductGenerator]: ==== location: L348
[2023-01-16 05:55:26,380 INFO  L277       ProductGenerator]: ==== location: L312
[2023-01-16 05:55:26,380 INFO  L277       ProductGenerator]: ==== location: L507
[2023-01-16 05:55:26,380 INFO  L277       ProductGenerator]: ==== location: creatipv6_1EXIT
[2023-01-16 05:55:26,380 INFO  L277       ProductGenerator]: ==== location: user_mac.writeENTRY
[2023-01-16 05:55:26,380 INFO  L277       ProductGenerator]: ==== location: L636
[2023-01-16 05:55:26,380 INFO  L277       ProductGenerator]: ==== location: _parser_MyParserENTRY
[2023-01-16 05:55:26,380 INFO  L277       ProductGenerator]: ==== location: read_dsboxFINAL
[2023-01-16 05:55:26,380 INFO  L277       ProductGenerator]: ==== location: L371
[2023-01-16 05:55:26,380 INFO  L277       ProductGenerator]: ==== location: L430
[2023-01-16 05:55:26,380 INFO  L277       ProductGenerator]: ==== location: L711
[2023-01-16 05:55:26,381 INFO  L277       ProductGenerator]: ==== location: L730
[2023-01-16 05:55:26,381 INFO  L277       ProductGenerator]: ==== location: L349
[2023-01-16 05:55:26,381 INFO  L277       ProductGenerator]: ==== location: parse_udpENTRY
[2023-01-16 05:55:26,381 INFO  L277       ProductGenerator]: ==== location: L380
[2023-01-16 05:55:26,381 INFO  L277       ProductGenerator]: ==== location: L421
[2023-01-16 05:55:26,381 INFO  L277       ProductGenerator]: ==== location: L560
[2023-01-16 05:55:26,381 INFO  L277       ProductGenerator]: ==== location: L657
[2023-01-16 05:55:26,381 INFO  L277       ProductGenerator]: ==== location: L504
[2023-01-16 05:55:26,381 INFO  L277       ProductGenerator]: ==== location: L654
[2023-01-16 05:55:26,381 INFO  L277       ProductGenerator]: ==== location: L444
[2023-01-16 05:55:26,381 INFO  L277       ProductGenerator]: ==== location: L465
[2023-01-16 05:55:26,381 INFO  L277       ProductGenerator]: ==== location: L520
[2023-01-16 05:55:26,381 INFO  L277       ProductGenerator]: ==== location: L518
[2023-01-16 05:55:26,381 INFO  L277       ProductGenerator]: ==== location: L699
[2023-01-16 05:55:26,382 INFO  L277       ProductGenerator]: ==== location: L258
[2023-01-16 05:55:26,382 INFO  L277       ProductGenerator]: ==== location: L728
[2023-01-16 05:55:26,382 INFO  L277       ProductGenerator]: ==== location: L689
[2023-01-16 05:55:26,382 INFO  L277       ProductGenerator]: ==== location: user_mac.writeEXIT
[2023-01-16 05:55:26,382 INFO  L277       ProductGenerator]: ==== location: startEXIT
[2023-01-16 05:55:26,382 INFO  L277       ProductGenerator]: ==== location: L731
[2023-01-16 05:55:26,382 INFO  L277       ProductGenerator]: ==== location: L666
[2023-01-16 05:55:26,382 INFO  L277       ProductGenerator]: ==== location: L484
[2023-01-16 05:55:26,382 INFO  L277       ProductGenerator]: ==== location: L369
[2023-01-16 05:55:26,382 INFO  L277       ProductGenerator]: ==== location: L436
[2023-01-16 05:55:26,382 INFO  L277       ProductGenerator]: ==== location: L670
[2023-01-16 05:55:26,382 INFO  L277       ProductGenerator]: ==== location: L509
[2023-01-16 05:55:26,382 INFO  L277       ProductGenerator]: ==== location: L530
[2023-01-16 05:55:26,382 INFO  L277       ProductGenerator]: ==== location: L284
[2023-01-16 05:55:26,382 INFO  L277       ProductGenerator]: ==== location: L525
[2023-01-16 05:55:26,382 INFO  L277       ProductGenerator]: ==== location: L510
[2023-01-16 05:55:26,383 INFO  L277       ProductGenerator]: ==== location: es_box.writeENTRY
[2023-01-16 05:55:26,383 INFO  L277       ProductGenerator]: ==== location: L493
[2023-01-16 05:55:26,383 INFO  L277       ProductGenerator]: ==== location: L522
[2023-01-16 05:55:26,383 INFO  L277       ProductGenerator]: ==== location: L259
[2023-01-16 05:55:26,383 INFO  L277       ProductGenerator]: ==== location: read_esboxENTRY
[2023-01-16 05:55:26,383 INFO  L277       ProductGenerator]: ==== location: L472
[2023-01-16 05:55:26,383 INFO  L277       ProductGenerator]: ==== location: L278-1
[2023-01-16 05:55:26,383 INFO  L277       ProductGenerator]: ==== location: L306
[2023-01-16 05:55:26,383 INFO  L277       ProductGenerator]: ==== location: L466
[2023-01-16 05:55:26,383 INFO  L277       ProductGenerator]: ==== location: L540
[2023-01-16 05:55:26,383 INFO  L277       ProductGenerator]: ==== location: L479
[2023-01-16 05:55:26,383 INFO  L277       ProductGenerator]: ==== location: L378
[2023-01-16 05:55:26,383 INFO  L277       ProductGenerator]: ==== location: L346
[2023-01-16 05:55:26,383 INFO  L277       ProductGenerator]: ==== location: L559
[2023-01-16 05:55:26,383 INFO  L277       ProductGenerator]: ==== location: L475
[2023-01-16 05:55:26,384 INFO  L277       ProductGenerator]: ==== location: L275
[2023-01-16 05:55:26,384 INFO  L277       ProductGenerator]: ==== location: L389
[2023-01-16 05:55:26,384 INFO  L277       ProductGenerator]: ==== location: L440
[2023-01-16 05:55:26,384 INFO  L277       ProductGenerator]: ==== location: L488
[2023-01-16 05:55:26,384 INFO  L277       ProductGenerator]: ==== location: store_user_macEXIT
[2023-01-16 05:55:26,384 INFO  L277       ProductGenerator]: ==== location: L487
[2023-01-16 05:55:26,384 INFO  L277       ProductGenerator]: ==== location: L477
[2023-01-16 05:55:26,384 INFO  L277       ProductGenerator]: ==== location: L609-1
[2023-01-16 05:55:26,384 INFO  L277       ProductGenerator]: ==== location: parse_ipv4ENTRY
[2023-01-16 05:55:26,384 INFO  L277       ProductGenerator]: ==== location: havocProcedureFINAL
[2023-01-16 05:55:26,384 INFO  L277       ProductGenerator]: ==== location: MyIngressENTRY
[2023-01-16 05:55:26,384 INFO  L277       ProductGenerator]: ==== location: parse_selectEXIT
[2023-01-16 05:55:26,384 INFO  L277       ProductGenerator]: ==== location: creatipv6_2ENTRY
[2023-01-16 05:55:26,384 INFO  L277       ProductGenerator]: ==== location: L521
[2023-01-16 05:55:26,385 INFO  L277       ProductGenerator]: ==== location: L355
[2023-01-16 05:55:26,385 INFO  L277       ProductGenerator]: ==== location: count.writeFINAL
[2023-01-16 05:55:26,385 INFO  L277       ProductGenerator]: ==== location: L383
[2023-01-16 05:55:26,385 INFO  L277       ProductGenerator]: ==== location: startENTRY
[2023-01-16 05:55:26,385 INFO  L277       ProductGenerator]: ==== location: L287-1
[2023-01-16 05:55:26,385 INFO  L277       ProductGenerator]: ==== location: L553
[2023-01-16 05:55:26,385 INFO  L277       ProductGenerator]: ==== location: MyEgressENTRY
[2023-01-16 05:55:26,385 INFO  L277       ProductGenerator]: ==== location: L550
[2023-01-16 05:55:26,385 INFO  L277       ProductGenerator]: ==== location: L618
[2023-01-16 05:55:26,385 INFO  L277       ProductGenerator]: ==== location: L281
[2023-01-16 05:55:26,385 INFO  L277       ProductGenerator]: ==== location: L704
[2023-01-16 05:55:26,385 INFO  L277       ProductGenerator]: ==== location: L514
[2023-01-16 05:55:26,385 INFO  L277       ProductGenerator]: ==== location: mainEXIT
[2023-01-16 05:55:26,386 INFO  L310       ProductGenerator]: ####final State Node: L577-1
[2023-01-16 05:55:26,386 INFO  L310       ProductGenerator]: ####final State Node: L577
[2023-01-16 05:55:26,389 INFO  L263       ProductGenerator]: ------- Adding ACCEPTING State: L577-1_accept_S1
[2023-01-16 05:55:26,391 INFO  L263       ProductGenerator]: ------- Adding ACCEPTING State: L577_accept_S1
[2023-01-16 05:55:26,392 INFO  L479       ProductGenerator]: L532_accept_S1 --> L532_accept_S1
[2023-01-16 05:55:26,392 INFO  L479       ProductGenerator]: L532_T0_init --> L532_T0_init
[2023-01-16 05:55:26,392 INFO  L479       ProductGenerator]: L691_accept_S1 --> L691_accept_S1
[2023-01-16 05:55:26,392 INFO  L479       ProductGenerator]: L691_T0_init --> L691_T0_init
[2023-01-16 05:55:26,392 INFO  L479       ProductGenerator]: L390_accept_S1 --> L390_accept_S1
[2023-01-16 05:55:26,393 INFO  L479       ProductGenerator]: L390_T0_init --> L390_T0_init
[2023-01-16 05:55:26,393 INFO  L479       ProductGenerator]: L391-1_accept_S1 --> L391-1_accept_S1
[2023-01-16 05:55:26,393 INFO  L479       ProductGenerator]: L391-1_T0_init --> L391-1_T0_init
[2023-01-16 05:55:26,393 INFO  L479       ProductGenerator]: L517_accept_S1 --> L517_accept_S1
[2023-01-16 05:55:26,393 INFO  L479       ProductGenerator]: L517_T0_init --> L517_T0_init
[2023-01-16 05:55:26,393 INFO  L479       ProductGenerator]: L528_accept_S1 --> L528_accept_S1
[2023-01-16 05:55:26,393 INFO  L479       ProductGenerator]: L528_T0_init --> L528_T0_init
[2023-01-16 05:55:26,393 INFO  L479       ProductGenerator]: MyVerifyChecksumFINAL_accept_S1 --> MyVerifyChecksumFINAL_accept_S1
[2023-01-16 05:55:26,393 INFO  L479       ProductGenerator]: MyVerifyChecksumFINAL_T0_init --> MyVerifyChecksumFINAL_T0_init
[2023-01-16 05:55:26,393 INFO  L479       ProductGenerator]: L386_accept_S1 --> L386_accept_S1
[2023-01-16 05:55:26,393 INFO  L479       ProductGenerator]: L386_T0_init --> L386_T0_init
[2023-01-16 05:55:26,394 INFO  L479       ProductGenerator]: L599_accept_S1 --> L599_accept_S1
[2023-01-16 05:55:26,394 INFO  L479       ProductGenerator]: L599_T0_init --> L599_T0_init
[2023-01-16 05:55:26,394 INFO  L479       ProductGenerator]: L599_accept_S1 --> L599_accept_S1
[2023-01-16 05:55:26,394 INFO  L479       ProductGenerator]: L599_T0_init --> L599_T0_init
[2023-01-16 05:55:26,394 INFO  L483       ProductGenerator]: Handling product edge call: call parse_tcp();
[2023-01-16 05:55:26,394 INFO  L483       ProductGenerator]: Handling product edge call: call parse_tcp();
[2023-01-16 05:55:26,394 INFO  L479       ProductGenerator]: L306-1_accept_S1 --> L306-1_accept_S1
[2023-01-16 05:55:26,394 INFO  L479       ProductGenerator]: L306-1_T0_init --> L306-1_T0_init
[2023-01-16 05:55:26,395 INFO  L479       ProductGenerator]: L458_accept_S1 --> L458_accept_S1
[2023-01-16 05:55:26,395 INFO  L479       ProductGenerator]: L458_T0_init --> L458_T0_init
[2023-01-16 05:55:26,395 INFO  L486       ProductGenerator]: Handling product edge summary: SUMMARY for call setValid(hdr.ipv6); srcloc: creatipv6_1ENTRY
[2023-01-16 05:55:26,419 INFO  L486       ProductGenerator]: Handling product edge summary: SUMMARY for call setValid(hdr.ipv6); srcloc: creatipv6_1ENTRY
[2023-01-16 05:55:26,421 INFO  L479       ProductGenerator]: L492_accept_S1 --> L492_accept_S1
[2023-01-16 05:55:26,422 INFO  L479       ProductGenerator]: L492_T0_init --> L492_T0_init
[2023-01-16 05:55:26,422 INFO  L479       ProductGenerator]: L367_accept_S1 --> L367_accept_S1
[2023-01-16 05:55:26,422 INFO  L479       ProductGenerator]: L367_T0_init --> L367_T0_init
[2023-01-16 05:55:26,422 INFO  L479       ProductGenerator]: ds_box.writeENTRY_accept_S1 --> ds_box.writeENTRY_accept_S1
[2023-01-16 05:55:26,422 INFO  L479       ProductGenerator]: ds_box.writeENTRY_T0_init --> ds_box.writeENTRY_T0_init
[2023-01-16 05:55:26,422 INFO  L479       ProductGenerator]: L501_accept_S1 --> L501_accept_S1
[2023-01-16 05:55:26,422 INFO  L479       ProductGenerator]: L501_T0_init --> L501_T0_init
[2023-01-16 05:55:26,422 INFO  L479       ProductGenerator]: L260_accept_S1 --> L260_accept_S1
[2023-01-16 05:55:26,423 INFO  L479       ProductGenerator]: L260_T0_init --> L260_T0_init
[2023-01-16 05:55:26,423 INFO  L479       ProductGenerator]: L468_accept_S1 --> L468_accept_S1
[2023-01-16 05:55:26,423 INFO  L479       ProductGenerator]: L468_T0_init --> L468_T0_init
[2023-01-16 05:55:26,423 INFO  L483       ProductGenerator]: Handling product edge call: call read_esbox();
[2023-01-16 05:55:26,423 INFO  L483       ProductGenerator]: Handling product edge call: call read_esbox();
[2023-01-16 05:55:26,423 INFO  L479       ProductGenerator]: L511_accept_S1 --> L511_accept_S1
[2023-01-16 05:55:26,423 INFO  L479       ProductGenerator]: L511_T0_init --> L511_T0_init
[2023-01-16 05:55:26,423 INFO  L483       ProductGenerator]: Handling product edge call: call MyIngress();
[2023-01-16 05:55:26,424 INFO  L483       ProductGenerator]: Handling product edge call: call MyIngress();
[2023-01-16 05:55:26,424 INFO  L479       ProductGenerator]: L571_accept_S1 --> L571_accept_S1
[2023-01-16 05:55:26,424 INFO  L479       ProductGenerator]: L571_T0_init --> L571_T0_init
[2023-01-16 05:55:26,424 INFO  L479       ProductGenerator]: L688_accept_S1 --> L688_accept_S1
[2023-01-16 05:55:26,424 INFO  L479       ProductGenerator]: L688_T0_init --> L688_T0_init
[2023-01-16 05:55:26,424 INFO  L483       ProductGenerator]: Handling product edge call: call creatipv6_1();
[2023-01-16 05:55:26,424 INFO  L483       ProductGenerator]: Handling product edge call: call creatipv6_1();
[2023-01-16 05:55:26,425 INFO  L483       ProductGenerator]: Handling product edge call: call creatipv6_2();
[2023-01-16 05:55:26,425 INFO  L483       ProductGenerator]: Handling product edge call: call creatipv6_2();
[2023-01-16 05:55:26,425 INFO  L479       ProductGenerator]: L499_accept_S1 --> L499_accept_S1
[2023-01-16 05:55:26,425 INFO  L479       ProductGenerator]: L499_T0_init --> L499_T0_init
[2023-01-16 05:55:26,425 INFO  L479       ProductGenerator]: L730-1_accept_S1 --> L730-1_accept_S1
[2023-01-16 05:55:26,425 INFO  L479       ProductGenerator]: L730-1_T0_init --> L730-1_T0_init
[2023-01-16 05:55:26,425 INFO  L479       ProductGenerator]: L423_accept_S1 --> L423_accept_S1
[2023-01-16 05:55:26,425 INFO  L479       ProductGenerator]: L423_T0_init --> L423_T0_init
[2023-01-16 05:55:26,426 INFO  L479       ProductGenerator]: L506_accept_S1 --> L506_accept_S1
[2023-01-16 05:55:26,426 INFO  L479       ProductGenerator]: L506_T0_init --> L506_T0_init
[2023-01-16 05:55:26,426 INFO  L479       ProductGenerator]: mainProcedureFINAL_accept_S1 --> mainProcedureFINAL_accept_S1
[2023-01-16 05:55:26,426 INFO  L479       ProductGenerator]: mainProcedureFINAL_T0_init --> mainProcedureFINAL_T0_init
[2023-01-16 05:55:26,426 INFO  L479       ProductGenerator]: L368_accept_S1 --> L368_accept_S1
[2023-01-16 05:55:26,426 INFO  L479       ProductGenerator]: L368_T0_init --> L368_T0_init
[2023-01-16 05:55:26,426 INFO  L479       ProductGenerator]: L497_accept_S1 --> L497_accept_S1
[2023-01-16 05:55:26,426 INFO  L479       ProductGenerator]: L497_T0_init --> L497_T0_init
[2023-01-16 05:55:26,426 INFO  L479       ProductGenerator]: L542_accept_S1 --> L542_accept_S1
[2023-01-16 05:55:26,426 INFO  L479       ProductGenerator]: L542_T0_init --> L542_T0_init
[2023-01-16 05:55:26,426 INFO  L479       ProductGenerator]: L298_accept_S1 --> L298_accept_S1
[2023-01-16 05:55:26,426 INFO  L479       ProductGenerator]: L298_T0_init --> L298_T0_init
[2023-01-16 05:55:26,427 INFO  L479       ProductGenerator]: L535_accept_S1 --> L535_accept_S1
[2023-01-16 05:55:26,427 INFO  L479       ProductGenerator]: L535_T0_init --> L535_T0_init
[2023-01-16 05:55:26,427 INFO  L479       ProductGenerator]: L570_accept_S1 --> L570_accept_S1
[2023-01-16 05:55:26,427 INFO  L479       ProductGenerator]: L570_T0_init --> L570_T0_init
[2023-01-16 05:55:26,427 INFO  L479       ProductGenerator]: L712_accept_S1 --> L712_accept_S1
[2023-01-16 05:55:26,427 INFO  L479       ProductGenerator]: L712_T0_init --> L712_T0_init
[2023-01-16 05:55:26,427 INFO  L479       ProductGenerator]: L502_accept_S1 --> L502_accept_S1
[2023-01-16 05:55:26,427 INFO  L479       ProductGenerator]: L502_T0_init --> L502_T0_init
[2023-01-16 05:55:26,427 INFO  L479       ProductGenerator]: do_read_countENTRY_accept_S1 --> do_read_countENTRY_accept_S1
[2023-01-16 05:55:26,427 INFO  L479       ProductGenerator]: do_read_countENTRY_T0_init --> do_read_countENTRY_T0_init
[2023-01-16 05:55:26,427 INFO  L479       ProductGenerator]: mainProcedureEXIT_accept_S1 --> mainProcedureEXIT_accept_S1
[2023-01-16 05:55:26,427 INFO  L479       ProductGenerator]: mainProcedureEXIT_T0_init --> mainProcedureEXIT_T0_init
[2023-01-16 05:55:26,427 INFO  L479       ProductGenerator]: user_mac.writeFINAL_accept_S1 --> user_mac.writeFINAL_accept_S1
[2023-01-16 05:55:26,427 INFO  L479       ProductGenerator]: user_mac.writeFINAL_T0_init --> user_mac.writeFINAL_T0_init
[2023-01-16 05:55:26,428 INFO  L479       ProductGenerator]: L489_accept_S1 --> L489_accept_S1
[2023-01-16 05:55:26,428 INFO  L479       ProductGenerator]: L489_T0_init --> L489_T0_init
[2023-01-16 05:55:26,428 INFO  L479       ProductGenerator]: L348_accept_S1 --> L348_accept_S1
[2023-01-16 05:55:26,428 INFO  L479       ProductGenerator]: L348_T0_init --> L348_T0_init
[2023-01-16 05:55:26,428 INFO  L479       ProductGenerator]: L312_accept_S1 --> L312_accept_S1
[2023-01-16 05:55:26,428 INFO  L479       ProductGenerator]: L312_T0_init --> L312_T0_init
[2023-01-16 05:55:26,428 INFO  L479       ProductGenerator]: L507_accept_S1 --> L507_accept_S1
[2023-01-16 05:55:26,428 INFO  L479       ProductGenerator]: L507_T0_init --> L507_T0_init
[2023-01-16 05:55:26,428 INFO  L479       ProductGenerator]: user_mac.writeENTRY_accept_S1 --> user_mac.writeENTRY_accept_S1
[2023-01-16 05:55:26,428 INFO  L479       ProductGenerator]: user_mac.writeENTRY_T0_init --> user_mac.writeENTRY_T0_init
[2023-01-16 05:55:26,428 INFO  L483       ProductGenerator]: Handling product edge call: call parse_ipv4();
[2023-01-16 05:55:26,429 INFO  L483       ProductGenerator]: Handling product edge call: call parse_ipv4();
[2023-01-16 05:55:26,429 INFO  L483       ProductGenerator]: Handling product edge call: call start();
[2023-01-16 05:55:26,429 INFO  L483       ProductGenerator]: Handling product edge call: call start();
[2023-01-16 05:55:26,429 INFO  L479       ProductGenerator]: read_dsboxFINAL_accept_S1 --> read_dsboxFINAL_accept_S1
[2023-01-16 05:55:26,429 INFO  L479       ProductGenerator]: read_dsboxFINAL_T0_init --> read_dsboxFINAL_T0_init
[2023-01-16 05:55:26,429 INFO  L479       ProductGenerator]: L371_accept_S1 --> L371_accept_S1
[2023-01-16 05:55:26,429 INFO  L479       ProductGenerator]: L371_T0_init --> L371_T0_init
[2023-01-16 05:55:26,429 INFO  L479       ProductGenerator]: L430_accept_S1 --> L430_accept_S1
[2023-01-16 05:55:26,429 INFO  L479       ProductGenerator]: L430_T0_init --> L430_T0_init
[2023-01-16 05:55:26,429 INFO  L479       ProductGenerator]: L711_accept_S1 --> L711_accept_S1
[2023-01-16 05:55:26,430 INFO  L479       ProductGenerator]: L711_T0_init --> L711_T0_init
[2023-01-16 05:55:26,430 INFO  L479       ProductGenerator]: L730_accept_S1 --> L730_accept_S1
[2023-01-16 05:55:26,430 INFO  L479       ProductGenerator]: L730_T0_init --> L730_T0_init
[2023-01-16 05:55:26,430 INFO  L479       ProductGenerator]: L730_accept_S1 --> L730_accept_S1
[2023-01-16 05:55:26,430 INFO  L479       ProductGenerator]: L730_T0_init --> L730_T0_init
[2023-01-16 05:55:26,430 INFO  L479       ProductGenerator]: L349_accept_S1 --> L349_accept_S1
[2023-01-16 05:55:26,430 INFO  L479       ProductGenerator]: L349_T0_init --> L349_T0_init
[2023-01-16 05:55:26,430 INFO  L479       ProductGenerator]: parse_udpENTRY_accept_S1 --> parse_udpENTRY_accept_S1
[2023-01-16 05:55:26,430 INFO  L479       ProductGenerator]: parse_udpENTRY_T0_init --> parse_udpENTRY_T0_init
[2023-01-16 05:55:26,431 INFO  L479       ProductGenerator]: L380_accept_S1 --> L380_accept_S1
[2023-01-16 05:55:26,431 INFO  L479       ProductGenerator]: L380_T0_init --> L380_T0_init
[2023-01-16 05:55:26,431 INFO  L479       ProductGenerator]: L421_accept_S1 --> L421_accept_S1
[2023-01-16 05:55:26,431 INFO  L479       ProductGenerator]: L421_T0_init --> L421_T0_init
[2023-01-16 05:55:26,431 INFO  L483       ProductGenerator]: Handling product edge call: call MyVerifyChecksum();
[2023-01-16 05:55:26,431 INFO  L483       ProductGenerator]: Handling product edge call: call MyVerifyChecksum();
[2023-01-16 05:55:26,431 INFO  L479       ProductGenerator]: L657_accept_S1 --> L657_accept_S1
[2023-01-16 05:55:26,431 INFO  L479       ProductGenerator]: L657_T0_init --> L657_T0_init
[2023-01-16 05:55:26,431 INFO  L479       ProductGenerator]: L504_accept_S1 --> L504_accept_S1
[2023-01-16 05:55:26,431 INFO  L479       ProductGenerator]: L504_T0_init --> L504_T0_init
[2023-01-16 05:55:26,431 INFO  L479       ProductGenerator]: L654_accept_S1 --> L654_accept_S1
[2023-01-16 05:55:26,432 INFO  L479       ProductGenerator]: L654_T0_init --> L654_T0_init
[2023-01-16 05:55:26,432 INFO  L479       ProductGenerator]: L444_accept_S1 --> L444_accept_S1
[2023-01-16 05:55:26,432 INFO  L479       ProductGenerator]: L444_T0_init --> L444_T0_init
[2023-01-16 05:55:26,432 INFO  L479       ProductGenerator]: L465_accept_S1 --> L465_accept_S1
[2023-01-16 05:55:26,432 INFO  L479       ProductGenerator]: L465_T0_init --> L465_T0_init
[2023-01-16 05:55:26,432 INFO  L479       ProductGenerator]: L520_accept_S1 --> L520_accept_S1
[2023-01-16 05:55:26,432 INFO  L479       ProductGenerator]: L520_T0_init --> L520_T0_init
[2023-01-16 05:55:26,432 INFO  L479       ProductGenerator]: L518_accept_S1 --> L518_accept_S1
[2023-01-16 05:55:26,432 INFO  L479       ProductGenerator]: L518_T0_init --> L518_T0_init
[2023-01-16 05:55:26,432 INFO  L479       ProductGenerator]: L699_accept_S1 --> L699_accept_S1
[2023-01-16 05:55:26,432 INFO  L479       ProductGenerator]: L699_T0_init --> L699_T0_init
[2023-01-16 05:55:26,432 INFO  L479       ProductGenerator]: L258_accept_S1 --> L258_accept_S1
[2023-01-16 05:55:26,432 INFO  L479       ProductGenerator]: L258_T0_init --> L258_T0_init
[2023-01-16 05:55:26,433 INFO  L483       ProductGenerator]: Handling product edge call: call parse_ipv6();
[2023-01-16 05:55:26,433 INFO  L483       ProductGenerator]: Handling product edge call: call parse_ipv6();
[2023-01-16 05:55:26,433 INFO  L479       ProductGenerator]: L689_accept_S1 --> L689_accept_S1
[2023-01-16 05:55:26,433 INFO  L479       ProductGenerator]: L689_T0_init --> L689_T0_init
[2023-01-16 05:55:26,433 INFO  L483       ProductGenerator]: Handling product edge call: call parse_select();
[2023-01-16 05:55:26,433 INFO  L483       ProductGenerator]: Handling product edge call: call parse_select();
[2023-01-16 05:55:26,433 INFO  L479       ProductGenerator]: L666_accept_S1 --> L666_accept_S1
[2023-01-16 05:55:26,433 INFO  L479       ProductGenerator]: L666_T0_init --> L666_T0_init
[2023-01-16 05:55:26,433 INFO  L479       ProductGenerator]: L484_accept_S1 --> L484_accept_S1
[2023-01-16 05:55:26,434 INFO  L479       ProductGenerator]: L484_T0_init --> L484_T0_init
[2023-01-16 05:55:26,434 INFO  L479       ProductGenerator]: L369_accept_S1 --> L369_accept_S1
[2023-01-16 05:55:26,434 INFO  L479       ProductGenerator]: L369_T0_init --> L369_T0_init
[2023-01-16 05:55:26,434 INFO  L479       ProductGenerator]: L436_accept_S1 --> L436_accept_S1
[2023-01-16 05:55:26,434 INFO  L479       ProductGenerator]: L436_T0_init --> L436_T0_init
[2023-01-16 05:55:26,434 INFO  L479       ProductGenerator]: L670_accept_S1 --> L670_accept_S1
[2023-01-16 05:55:26,434 INFO  L479       ProductGenerator]: L670_T0_init --> L670_T0_init
[2023-01-16 05:55:26,434 INFO  L479       ProductGenerator]: L509_accept_S1 --> L509_accept_S1
[2023-01-16 05:55:26,434 INFO  L479       ProductGenerator]: L509_T0_init --> L509_T0_init
[2023-01-16 05:55:26,434 INFO  L479       ProductGenerator]: L530_accept_S1 --> L530_accept_S1
[2023-01-16 05:55:26,435 INFO  L479       ProductGenerator]: L530_T0_init --> L530_T0_init
[2023-01-16 05:55:26,435 INFO  L479       ProductGenerator]: L284_accept_S1 --> L284_accept_S1
[2023-01-16 05:55:26,435 INFO  L479       ProductGenerator]: L284_T0_init --> L284_T0_init
[2023-01-16 05:55:26,435 INFO  L479       ProductGenerator]: L525_accept_S1 --> L525_accept_S1
[2023-01-16 05:55:26,435 INFO  L479       ProductGenerator]: L525_T0_init --> L525_T0_init
[2023-01-16 05:55:26,435 INFO  L479       ProductGenerator]: L510_accept_S1 --> L510_accept_S1
[2023-01-16 05:55:26,435 INFO  L479       ProductGenerator]: L510_T0_init --> L510_T0_init
[2023-01-16 05:55:26,435 INFO  L479       ProductGenerator]: es_box.writeENTRY_accept_S1 --> es_box.writeENTRY_accept_S1
[2023-01-16 05:55:26,435 INFO  L479       ProductGenerator]: es_box.writeENTRY_T0_init --> es_box.writeENTRY_T0_init
[2023-01-16 05:55:26,435 INFO  L479       ProductGenerator]: L493_accept_S1 --> L493_accept_S1
[2023-01-16 05:55:26,435 INFO  L479       ProductGenerator]: L493_T0_init --> L493_T0_init
[2023-01-16 05:55:26,435 INFO  L479       ProductGenerator]: L522_accept_S1 --> L522_accept_S1
[2023-01-16 05:55:26,435 INFO  L479       ProductGenerator]: L522_T0_init --> L522_T0_init
[2023-01-16 05:55:26,436 INFO  L479       ProductGenerator]: L259_accept_S1 --> L259_accept_S1
[2023-01-16 05:55:26,436 INFO  L479       ProductGenerator]: L259_T0_init --> L259_T0_init
[2023-01-16 05:55:26,436 INFO  L479       ProductGenerator]: L259_accept_S1 --> L259_accept_S1
[2023-01-16 05:55:26,436 INFO  L479       ProductGenerator]: L259_T0_init --> L259_T0_init
[2023-01-16 05:55:26,436 INFO  L479       ProductGenerator]: read_esboxENTRY_accept_S1 --> read_esboxENTRY_accept_S1
[2023-01-16 05:55:26,436 INFO  L479       ProductGenerator]: read_esboxENTRY_T0_init --> read_esboxENTRY_T0_init
[2023-01-16 05:55:26,436 INFO  L479       ProductGenerator]: L472_accept_S1 --> L472_accept_S1
[2023-01-16 05:55:26,436 INFO  L479       ProductGenerator]: L472_T0_init --> L472_T0_init
[2023-01-16 05:55:26,436 INFO  L479       ProductGenerator]: L278-1_accept_S1 --> L278-1_accept_S1
[2023-01-16 05:55:26,436 INFO  L479       ProductGenerator]: L278-1_T0_init --> L278-1_T0_init
[2023-01-16 05:55:26,436 INFO  L479       ProductGenerator]: L278-1_accept_S1 --> L278-1_accept_S1
[2023-01-16 05:55:26,436 INFO  L479       ProductGenerator]: L278-1_T0_init --> L278-1_T0_init
[2023-01-16 05:55:26,436 INFO  L479       ProductGenerator]: L306_accept_S1 --> L306_accept_S1
[2023-01-16 05:55:26,437 INFO  L479       ProductGenerator]: L306_T0_init --> L306_T0_init
[2023-01-16 05:55:26,437 INFO  L479       ProductGenerator]: L306_accept_S1 --> L306_accept_S1
[2023-01-16 05:55:26,437 INFO  L479       ProductGenerator]: L306_T0_init --> L306_T0_init
[2023-01-16 05:55:26,437 INFO  L479       ProductGenerator]: L466_accept_S1 --> L466_accept_S1
[2023-01-16 05:55:26,437 INFO  L479       ProductGenerator]: L466_T0_init --> L466_T0_init
[2023-01-16 05:55:26,437 INFO  L479       ProductGenerator]: L540_accept_S1 --> L540_accept_S1
[2023-01-16 05:55:26,437 INFO  L479       ProductGenerator]: L540_T0_init --> L540_T0_init
[2023-01-16 05:55:26,437 INFO  L479       ProductGenerator]: L479_accept_S1 --> L479_accept_S1
[2023-01-16 05:55:26,437 INFO  L479       ProductGenerator]: L479_T0_init --> L479_T0_init
[2023-01-16 05:55:26,437 INFO  L479       ProductGenerator]: L378_accept_S1 --> L378_accept_S1
[2023-01-16 05:55:26,437 INFO  L479       ProductGenerator]: L378_T0_init --> L378_T0_init
[2023-01-16 05:55:26,437 INFO  L479       ProductGenerator]: L346_accept_S1 --> L346_accept_S1
[2023-01-16 05:55:26,437 INFO  L479       ProductGenerator]: L346_T0_init --> L346_T0_init
[2023-01-16 05:55:26,438 INFO  L483       ProductGenerator]: Handling product edge call: call _parser_MyParser();
[2023-01-16 05:55:26,438 INFO  L483       ProductGenerator]: Handling product edge call: call _parser_MyParser();
[2023-01-16 05:55:26,438 INFO  L479       ProductGenerator]: L475_accept_S1 --> L475_accept_S1
[2023-01-16 05:55:26,438 INFO  L479       ProductGenerator]: L475_T0_init --> L475_T0_init
[2023-01-16 05:55:26,438 INFO  L479       ProductGenerator]: L275_accept_S1 --> L275_accept_S1
[2023-01-16 05:55:26,438 INFO  L479       ProductGenerator]: L275_T0_init --> L275_T0_init
[2023-01-16 05:55:26,438 INFO  L479       ProductGenerator]: L389_accept_S1 --> L389_accept_S1
[2023-01-16 05:55:26,438 INFO  L479       ProductGenerator]: L389_T0_init --> L389_T0_init
[2023-01-16 05:55:26,438 INFO  L479       ProductGenerator]: L440_accept_S1 --> L440_accept_S1
[2023-01-16 05:55:26,438 INFO  L479       ProductGenerator]: L440_T0_init --> L440_T0_init
[2023-01-16 05:55:26,438 INFO  L479       ProductGenerator]: L488_accept_S1 --> L488_accept_S1
[2023-01-16 05:55:26,438 INFO  L479       ProductGenerator]: L488_T0_init --> L488_T0_init
[2023-01-16 05:55:26,438 INFO  L479       ProductGenerator]: L487_accept_S1 --> L487_accept_S1
[2023-01-16 05:55:26,438 INFO  L479       ProductGenerator]: L487_T0_init --> L487_T0_init
[2023-01-16 05:55:26,439 INFO  L479       ProductGenerator]: L477_accept_S1 --> L477_accept_S1
[2023-01-16 05:55:26,439 INFO  L479       ProductGenerator]: L477_T0_init --> L477_T0_init
[2023-01-16 05:55:26,439 INFO  L479       ProductGenerator]: L609-1_accept_S1 --> L609-1_accept_S1
[2023-01-16 05:55:26,439 INFO  L479       ProductGenerator]: L609-1_T0_init --> L609-1_T0_init
[2023-01-16 05:55:26,439 INFO  L479       ProductGenerator]: parse_ipv4ENTRY_accept_S1 --> parse_ipv4ENTRY_accept_S1
[2023-01-16 05:55:26,439 INFO  L479       ProductGenerator]: parse_ipv4ENTRY_T0_init --> parse_ipv4ENTRY_T0_init
[2023-01-16 05:55:26,439 INFO  L479       ProductGenerator]: havocProcedureFINAL_accept_S1 --> havocProcedureFINAL_accept_S1
[2023-01-16 05:55:26,439 INFO  L479       ProductGenerator]: havocProcedureFINAL_T0_init --> havocProcedureFINAL_T0_init
[2023-01-16 05:55:26,439 INFO  L479       ProductGenerator]: MyIngressENTRY_accept_S1 --> MyIngressENTRY_accept_S1
[2023-01-16 05:55:26,439 INFO  L479       ProductGenerator]: MyIngressENTRY_T0_init --> MyIngressENTRY_T0_init
[2023-01-16 05:55:26,439 INFO  L479       ProductGenerator]: MyIngressENTRY_accept_S1 --> MyIngressENTRY_accept_S1
[2023-01-16 05:55:26,439 INFO  L479       ProductGenerator]: MyIngressENTRY_T0_init --> MyIngressENTRY_T0_init
[2023-01-16 05:55:26,440 INFO  L486       ProductGenerator]: Handling product edge summary: SUMMARY for call setValid(hdr.ipv6); srcloc: creatipv6_2ENTRY
[2023-01-16 05:55:26,441 INFO  L486       ProductGenerator]: Handling product edge summary: SUMMARY for call setValid(hdr.ipv6); srcloc: creatipv6_2ENTRY
[2023-01-16 05:55:26,442 INFO  L479       ProductGenerator]: L521_accept_S1 --> L521_accept_S1
[2023-01-16 05:55:26,443 INFO  L479       ProductGenerator]: L521_T0_init --> L521_T0_init
[2023-01-16 05:55:26,443 INFO  L479       ProductGenerator]: L355_accept_S1 --> L355_accept_S1
[2023-01-16 05:55:26,443 INFO  L479       ProductGenerator]: L355_T0_init --> L355_T0_init
[2023-01-16 05:55:26,443 INFO  L479       ProductGenerator]: count.writeFINAL_accept_S1 --> count.writeFINAL_accept_S1
[2023-01-16 05:55:26,443 INFO  L479       ProductGenerator]: count.writeFINAL_T0_init --> count.writeFINAL_T0_init
[2023-01-16 05:55:26,443 INFO  L479       ProductGenerator]: L383_accept_S1 --> L383_accept_S1
[2023-01-16 05:55:26,443 INFO  L479       ProductGenerator]: L383_T0_init --> L383_T0_init
[2023-01-16 05:55:26,443 INFO  L479       ProductGenerator]: startENTRY_accept_S1 --> startENTRY_accept_S1
[2023-01-16 05:55:26,443 INFO  L479       ProductGenerator]: startENTRY_T0_init --> startENTRY_T0_init
[2023-01-16 05:55:26,451 INFO  L483       ProductGenerator]: Handling product edge call: call count.write(0, 0);
[2023-01-16 05:55:26,452 INFO  L483       ProductGenerator]: Handling product edge call: call count.write(0, 0);
[2023-01-16 05:55:26,452 INFO  L479       ProductGenerator]: L553_accept_S1 --> L553_accept_S1
[2023-01-16 05:55:26,452 INFO  L479       ProductGenerator]: L553_T0_init --> L553_T0_init
[2023-01-16 05:55:26,452 INFO  L479       ProductGenerator]: MyEgressENTRY_accept_S1 --> MyEgressENTRY_accept_S1
[2023-01-16 05:55:26,452 INFO  L479       ProductGenerator]: MyEgressENTRY_T0_init --> MyEgressENTRY_T0_init
[2023-01-16 05:55:26,453 INFO  L479       ProductGenerator]: MyEgressENTRY_accept_S1 --> MyEgressENTRY_accept_S1
[2023-01-16 05:55:26,453 INFO  L479       ProductGenerator]: MyEgressENTRY_T0_init --> MyEgressENTRY_T0_init
[2023-01-16 05:55:26,453 INFO  L479       ProductGenerator]: L550_accept_S1 --> L550_accept_S1
[2023-01-16 05:55:26,453 INFO  L479       ProductGenerator]: L550_T0_init --> L550_T0_init
[2023-01-16 05:55:26,453 INFO  L479       ProductGenerator]: L618_accept_S1 --> L618_accept_S1
[2023-01-16 05:55:26,453 INFO  L479       ProductGenerator]: L618_T0_init --> L618_T0_init
[2023-01-16 05:55:26,453 INFO  L479       ProductGenerator]: L281_accept_S1 --> L281_accept_S1
[2023-01-16 05:55:26,453 INFO  L479       ProductGenerator]: L281_T0_init --> L281_T0_init
[2023-01-16 05:55:26,454 INFO  L479       ProductGenerator]: L704_accept_S1 --> L704_accept_S1
[2023-01-16 05:55:26,455 INFO  L479       ProductGenerator]: L704_T0_init --> L704_T0_init
[2023-01-16 05:55:26,455 INFO  L479       ProductGenerator]: L514_accept_S1 --> L514_accept_S1
[2023-01-16 05:55:26,455 INFO  L479       ProductGenerator]: L514_T0_init --> L514_T0_init
[2023-01-16 05:55:26,455 INFO  L479       ProductGenerator]: L663_accept_S1 --> L663_accept_S1
[2023-01-16 05:55:26,455 INFO  L479       ProductGenerator]: L663_T0_init --> L663_T0_init
[2023-01-16 05:55:26,455 INFO  L479       ProductGenerator]: L543_accept_S1 --> L543_accept_S1
[2023-01-16 05:55:26,456 INFO  L479       ProductGenerator]: L543_T0_init --> L543_T0_init
[2023-01-16 05:55:26,456 INFO  L479       ProductGenerator]: L659_accept_S1 --> L659_accept_S1
[2023-01-16 05:55:26,456 INFO  L479       ProductGenerator]: L659_T0_init --> L659_T0_init
[2023-01-16 05:55:26,456 INFO  L479       ProductGenerator]: creatmytunnelFINAL_accept_S1 --> creatmytunnelFINAL_accept_S1
[2023-01-16 05:55:26,456 INFO  L479       ProductGenerator]: creatmytunnelFINAL_T0_init --> creatmytunnelFINAL_T0_init
[2023-01-16 05:55:26,456 INFO  L479       ProductGenerator]: L701_accept_S1 --> L701_accept_S1
[2023-01-16 05:55:26,456 INFO  L479       ProductGenerator]: L701_T0_init --> L701_T0_init
[2023-01-16 05:55:26,456 INFO  L479       ProductGenerator]: L273_accept_S1 --> L273_accept_S1
[2023-01-16 05:55:26,456 INFO  L479       ProductGenerator]: L273_T0_init --> L273_T0_init
[2023-01-16 05:55:26,457 INFO  L479       ProductGenerator]: L483_accept_S1 --> L483_accept_S1
[2023-01-16 05:55:26,457 INFO  L479       ProductGenerator]: L483_T0_init --> L483_T0_init
[2023-01-16 05:55:26,457 INFO  L479       ProductGenerator]: L433_accept_S1 --> L433_accept_S1
[2023-01-16 05:55:26,457 INFO  L479       ProductGenerator]: L433_T0_init --> L433_T0_init
[2023-01-16 05:55:26,457 INFO  L479       ProductGenerator]: L705_accept_S1 --> L705_accept_S1
[2023-01-16 05:55:26,457 INFO  L479       ProductGenerator]: L705_T0_init --> L705_T0_init
[2023-01-16 05:55:26,458 INFO  L483       ProductGenerator]: Handling product edge call: call creatmytunnel();
[2023-01-16 05:55:26,458 INFO  L483       ProductGenerator]: Handling product edge call: call creatmytunnel();
[2023-01-16 05:55:26,458 INFO  L479       ProductGenerator]: ds_box.writeEXIT_accept_S1 --> ds_box.writeEXIT_accept_S1
[2023-01-16 05:55:26,458 INFO  L479       ProductGenerator]: ds_box.writeEXIT_T0_init --> ds_box.writeEXIT_T0_init
[2023-01-16 05:55:26,458 INFO  L479       ProductGenerator]: L538_accept_S1 --> L538_accept_S1
[2023-01-16 05:55:26,458 INFO  L479       ProductGenerator]: L538_T0_init --> L538_T0_init
[2023-01-16 05:55:26,458 INFO  L479       ProductGenerator]: acceptFINAL_accept_S1 --> acceptFINAL_accept_S1
[2023-01-16 05:55:26,458 INFO  L479       ProductGenerator]: acceptFINAL_T0_init --> acceptFINAL_T0_init
[2023-01-16 05:55:26,458 INFO  L479       ProductGenerator]: L523_accept_S1 --> L523_accept_S1
[2023-01-16 05:55:26,459 INFO  L479       ProductGenerator]: L523_T0_init --> L523_T0_init
[2023-01-16 05:55:26,459 INFO  L479       ProductGenerator]: L366_accept_S1 --> L366_accept_S1
[2023-01-16 05:55:26,459 INFO  L479       ProductGenerator]: L366_T0_init --> L366_T0_init
[2023-01-16 05:55:26,459 INFO  L479       ProductGenerator]: L513_accept_S1 --> L513_accept_S1
[2023-01-16 05:55:26,460 INFO  L479       ProductGenerator]: L513_T0_init --> L513_T0_init
[2023-01-16 05:55:26,460 INFO  L479       ProductGenerator]: L450_accept_S1 --> L450_accept_S1
[2023-01-16 05:55:26,460 INFO  L479       ProductGenerator]: L450_T0_init --> L450_T0_init
[2023-01-16 05:55:26,460 INFO  L479       ProductGenerator]: L684_accept_S1 --> L684_accept_S1
[2023-01-16 05:55:26,460 INFO  L479       ProductGenerator]: L684_T0_init --> L684_T0_init
[2023-01-16 05:55:26,460 INFO  L479       ProductGenerator]: L667_accept_S1 --> L667_accept_S1
[2023-01-16 05:55:26,460 INFO  L479       ProductGenerator]: L667_T0_init --> L667_T0_init
[2023-01-16 05:55:26,460 INFO  L479       ProductGenerator]: L693_accept_S1 --> L693_accept_S1
[2023-01-16 05:55:26,460 INFO  L479       ProductGenerator]: L693_T0_init --> L693_T0_init
[2023-01-16 05:55:26,460 INFO  L479       ProductGenerator]: L537_accept_S1 --> L537_accept_S1
[2023-01-16 05:55:26,460 INFO  L479       ProductGenerator]: L537_T0_init --> L537_T0_init
[2023-01-16 05:55:26,460 INFO  L479       ProductGenerator]: havocProcedureENTRY_accept_S1 --> havocProcedureENTRY_accept_S1
[2023-01-16 05:55:26,460 INFO  L479       ProductGenerator]: havocProcedureENTRY_T0_init --> havocProcedureENTRY_T0_init
[2023-01-16 05:55:26,461 INFO  L479       ProductGenerator]: es_box.writeFINAL_accept_S1 --> es_box.writeFINAL_accept_S1
[2023-01-16 05:55:26,461 INFO  L479       ProductGenerator]: es_box.writeFINAL_T0_init --> es_box.writeFINAL_T0_init
[2023-01-16 05:55:26,461 INFO  L479       ProductGenerator]: L428_accept_S1 --> L428_accept_S1
[2023-01-16 05:55:26,461 INFO  L479       ProductGenerator]: L428_T0_init --> L428_T0_init
[2023-01-16 05:55:26,461 INFO  L479       ProductGenerator]: L649_accept_S1 --> L649_accept_S1
[2023-01-16 05:55:26,461 INFO  L479       ProductGenerator]: L649_T0_init --> L649_T0_init
[2023-01-16 05:55:26,461 INFO  L479       ProductGenerator]: L291_accept_S1 --> L291_accept_S1
[2023-01-16 05:55:26,461 INFO  L479       ProductGenerator]: L291_T0_init --> L291_T0_init
[2023-01-16 05:55:26,461 INFO  L483       ProductGenerator]: Handling product edge call: call do_read_count();
[2023-01-16 05:55:26,461 INFO  L483       ProductGenerator]: Handling product edge call: call do_read_count();
[2023-01-16 05:55:26,462 INFO  L479       ProductGenerator]: L671_accept_S1 --> L671_accept_S1
[2023-01-16 05:55:26,462 INFO  L479       ProductGenerator]: L671_T0_init --> L671_T0_init
[2023-01-16 05:55:26,462 INFO  L479       ProductGenerator]: L669_accept_S1 --> L669_accept_S1
[2023-01-16 05:55:26,462 INFO  L479       ProductGenerator]: L669_T0_init --> L669_T0_init
[2023-01-16 05:55:26,462 INFO  L479       ProductGenerator]: ds_box.writeFINAL_accept_S1 --> ds_box.writeFINAL_accept_S1
[2023-01-16 05:55:26,462 INFO  L479       ProductGenerator]: ds_box.writeFINAL_T0_init --> ds_box.writeFINAL_T0_init
[2023-01-16 05:55:26,462 INFO  L479       ProductGenerator]: L645_accept_S1 --> L645_accept_S1
[2023-01-16 05:55:26,462 INFO  L479       ProductGenerator]: L645_T0_init --> L645_T0_init
[2023-01-16 05:55:26,462 INFO  L479       ProductGenerator]: L474_accept_S1 --> L474_accept_S1
[2023-01-16 05:55:26,462 INFO  L479       ProductGenerator]: L474_T0_init --> L474_T0_init
[2023-01-16 05:55:26,462 INFO  L483       ProductGenerator]: Handling product edge call: call read_dsbox();
[2023-01-16 05:55:26,462 INFO  L483       ProductGenerator]: Handling product edge call: call read_dsbox();
[2023-01-16 05:55:26,462 INFO  L479       ProductGenerator]: L370_accept_S1 --> L370_accept_S1
[2023-01-16 05:55:26,463 INFO  L479       ProductGenerator]: L370_T0_init --> L370_T0_init
[2023-01-16 05:55:26,463 INFO  L479       ProductGenerator]: L425_accept_S1 --> L425_accept_S1
[2023-01-16 05:55:26,463 INFO  L479       ProductGenerator]: L425_T0_init --> L425_T0_init
[2023-01-16 05:55:26,463 INFO  L479       ProductGenerator]: L437_accept_S1 --> L437_accept_S1
[2023-01-16 05:55:26,463 INFO  L479       ProductGenerator]: L437_T0_init --> L437_T0_init
[2023-01-16 05:55:26,463 INFO  L483       ProductGenerator]: Handling product edge call: call MyComputeChecksum();
[2023-01-16 05:55:26,463 INFO  L483       ProductGenerator]: Handling product edge call: call MyComputeChecksum();
[2023-01-16 05:55:26,463 INFO  L479       ProductGenerator]: L491_accept_S1 --> L491_accept_S1
[2023-01-16 05:55:26,463 INFO  L479       ProductGenerator]: L491_T0_init --> L491_T0_init
[2023-01-16 05:55:26,463 INFO  L479       ProductGenerator]: L435_accept_S1 --> L435_accept_S1
[2023-01-16 05:55:26,463 INFO  L479       ProductGenerator]: L435_T0_init --> L435_T0_init
[2023-01-16 05:55:26,464 INFO  L479       ProductGenerator]: mainFINAL_accept_S1 --> mainFINAL_accept_S1
[2023-01-16 05:55:26,464 INFO  L479       ProductGenerator]: mainFINAL_T0_init --> mainFINAL_T0_init
[2023-01-16 05:55:26,464 INFO  L479       ProductGenerator]: L270-1_accept_S1 --> L270-1_accept_S1
[2023-01-16 05:55:26,467 INFO  L479       ProductGenerator]: L270-1_T0_init --> L270-1_T0_init
[2023-01-16 05:55:26,467 INFO  L479       ProductGenerator]: L270-1_accept_S1 --> L270-1_accept_S1
[2023-01-16 05:55:26,467 INFO  L479       ProductGenerator]: L270-1_T0_init --> L270-1_T0_init
[2023-01-16 05:55:26,467 INFO  L479       ProductGenerator]: L589-1_accept_S1 --> L589-1_accept_S1
[2023-01-16 05:55:26,467 INFO  L479       ProductGenerator]: L589-1_T0_init --> L589-1_T0_init
[2023-01-16 05:55:26,468 INFO  L479       ProductGenerator]: L439_accept_S1 --> L439_accept_S1
[2023-01-16 05:55:26,468 INFO  L479       ProductGenerator]: L439_T0_init --> L439_T0_init
[2023-01-16 05:55:26,468 INFO  L483       ProductGenerator]: Handling product edge call: call count.write(0, 1);
[2023-01-16 05:55:26,469 INFO  L483       ProductGenerator]: Handling product edge call: call count.write(0, 1);
[2023-01-16 05:55:26,470 INFO  L479       ProductGenerator]: L485_accept_S1 --> L485_accept_S1
[2023-01-16 05:55:26,470 INFO  L479       ProductGenerator]: L485_T0_init --> L485_T0_init
[2023-01-16 05:55:26,470 INFO  L479       ProductGenerator]: L364_accept_S1 --> L364_accept_S1
[2023-01-16 05:55:26,470 INFO  L479       ProductGenerator]: L364_T0_init --> L364_T0_init
[2023-01-16 05:55:26,470 INFO  L479       ProductGenerator]: parse_udpFINAL_accept_S1 --> parse_udpFINAL_accept_S1
[2023-01-16 05:55:26,470 INFO  L479       ProductGenerator]: parse_udpFINAL_T0_init --> parse_udpFINAL_T0_init
[2023-01-16 05:55:26,470 INFO  L479       ProductGenerator]: L646_accept_S1 --> L646_accept_S1
[2023-01-16 05:55:26,470 INFO  L479       ProductGenerator]: L646_T0_init --> L646_T0_init
[2023-01-16 05:55:26,470 INFO  L479       ProductGenerator]: L516_accept_S1 --> L516_accept_S1
[2023-01-16 05:55:26,470 INFO  L479       ProductGenerator]: L516_T0_init --> L516_T0_init
[2023-01-16 05:55:26,470 INFO  L479       ProductGenerator]: L351_accept_S1 --> L351_accept_S1
[2023-01-16 05:55:26,471 INFO  L479       ProductGenerator]: L351_T0_init --> L351_T0_init
[2023-01-16 05:55:26,471 INFO  L479       ProductGenerator]: L352_accept_S1 --> L352_accept_S1
[2023-01-16 05:55:26,471 INFO  L479       ProductGenerator]: L352_T0_init --> L352_T0_init
[2023-01-16 05:55:26,471 INFO  L479       ProductGenerator]: count.writeENTRY_accept_S1 --> count.writeENTRY_accept_S1
[2023-01-16 05:55:26,471 INFO  L479       ProductGenerator]: count.writeENTRY_T0_init --> count.writeENTRY_T0_init
[2023-01-16 05:55:26,471 INFO  L479       ProductGenerator]: store_user_macFINAL_accept_S1 --> store_user_macFINAL_accept_S1
[2023-01-16 05:55:26,471 INFO  L479       ProductGenerator]: store_user_macFINAL_T0_init --> store_user_macFINAL_T0_init
[2023-01-16 05:55:26,471 INFO  L479       ProductGenerator]: L431_accept_S1 --> L431_accept_S1
[2023-01-16 05:55:26,471 INFO  L479       ProductGenerator]: L431_T0_init --> L431_T0_init
[2023-01-16 05:55:26,472 INFO  L479       ProductGenerator]: L709_accept_S1 --> L709_accept_S1
[2023-01-16 05:55:26,472 INFO  L479       ProductGenerator]: L709_T0_init --> L709_T0_init
[2023-01-16 05:55:26,472 INFO  L479       ProductGenerator]: L442_accept_S1 --> L442_accept_S1
[2023-01-16 05:55:26,472 INFO  L479       ProductGenerator]: L442_T0_init --> L442_T0_init
[2023-01-16 05:55:26,472 INFO  L479       ProductGenerator]: L508_accept_S1 --> L508_accept_S1
[2023-01-16 05:55:26,472 INFO  L479       ProductGenerator]: L508_T0_init --> L508_T0_init
[2023-01-16 05:55:26,472 INFO  L479       ProductGenerator]: L536_accept_S1 --> L536_accept_S1
[2023-01-16 05:55:26,472 INFO  L479       ProductGenerator]: L536_T0_init --> L536_T0_init
[2023-01-16 05:55:26,472 INFO  L479       ProductGenerator]: L382_accept_S1 --> L382_accept_S1
[2023-01-16 05:55:26,472 INFO  L479       ProductGenerator]: L382_T0_init --> L382_T0_init
[2023-01-16 05:55:26,472 INFO  L479       ProductGenerator]: L473_accept_S1 --> L473_accept_S1
[2023-01-16 05:55:26,473 INFO  L479       ProductGenerator]: L473_T0_init --> L473_T0_init
[2023-01-16 05:55:26,473 INFO  L486       ProductGenerator]: Handling product edge summary: SUMMARY for call setInvalid(hdr.ipv6); srcloc: L307
[2023-01-16 05:55:26,490 INFO  L486       ProductGenerator]: Handling product edge summary: SUMMARY for call setInvalid(hdr.ipv6); srcloc: L307
[2023-01-16 05:55:26,499 INFO  L479       ProductGenerator]: L534_accept_S1 --> L534_accept_S1
[2023-01-16 05:55:26,499 INFO  L479       ProductGenerator]: L534_T0_init --> L534_T0_init
[2023-01-16 05:55:26,499 INFO  L479       ProductGenerator]: L311_accept_S1 --> L311_accept_S1
[2023-01-16 05:55:26,500 INFO  L479       ProductGenerator]: L311_T0_init --> L311_T0_init
[2023-01-16 05:55:26,500 INFO  L479       ProductGenerator]: parse_selectENTRY_accept_S1 --> parse_selectENTRY_accept_S1
[2023-01-16 05:55:26,500 INFO  L479       ProductGenerator]: parse_selectENTRY_T0_init --> parse_selectENTRY_T0_init
[2023-01-16 05:55:26,500 INFO  L479       ProductGenerator]: parse_selectENTRY_accept_S1 --> parse_selectENTRY_accept_S1
[2023-01-16 05:55:26,500 INFO  L479       ProductGenerator]: parse_selectENTRY_T0_init --> parse_selectENTRY_T0_init
[2023-01-16 05:55:26,500 INFO  L479       ProductGenerator]: L703_accept_S1 --> L703_accept_S1
[2023-01-16 05:55:26,500 INFO  L479       ProductGenerator]: L703_T0_init --> L703_T0_init
[2023-01-16 05:55:26,500 INFO  L479       ProductGenerator]: L451_accept_S1 --> L451_accept_S1
[2023-01-16 05:55:26,501 INFO  L479       ProductGenerator]: L451_T0_init --> L451_T0_init
[2023-01-16 05:55:26,501 INFO  L479       ProductGenerator]: L565-1_accept_S1 --> L565-1_accept_S1
[2023-01-16 05:55:26,501 INFO  L479       ProductGenerator]: L565-1_T0_init --> L565-1_T0_init
[2023-01-16 05:55:26,501 INFO  L479       ProductGenerator]: L653_accept_S1 --> L653_accept_S1
[2023-01-16 05:55:26,501 INFO  L479       ProductGenerator]: L653_T0_init --> L653_T0_init
[2023-01-16 05:55:26,501 INFO  L479       ProductGenerator]: L673_accept_S1 --> L673_accept_S1
[2023-01-16 05:55:26,501 INFO  L479       ProductGenerator]: L673_T0_init --> L673_T0_init
[2023-01-16 05:55:26,501 INFO  L483       ProductGenerator]: Handling product edge call: call store_user_mac();
[2023-01-16 05:55:26,502 INFO  L483       ProductGenerator]: Handling product edge call: call store_user_mac();
[2023-01-16 05:55:26,502 INFO  L479       ProductGenerator]: L426_accept_S1 --> L426_accept_S1
[2023-01-16 05:55:26,502 INFO  L479       ProductGenerator]: L426_T0_init --> L426_T0_init
[2023-01-16 05:55:26,502 INFO  L479       ProductGenerator]: L462_accept_S1 --> L462_accept_S1
[2023-01-16 05:55:26,502 INFO  L479       ProductGenerator]: L462_T0_init --> L462_T0_init
[2023-01-16 05:55:26,502 INFO  L483       ProductGenerator]: Handling product edge call: call parse_myTunnel();
[2023-01-16 05:55:26,502 INFO  L483       ProductGenerator]: Handling product edge call: call parse_myTunnel();
[2023-01-16 05:55:26,502 INFO  L479       ProductGenerator]: L395_accept_S1 --> L395_accept_S1
[2023-01-16 05:55:26,502 INFO  L479       ProductGenerator]: L395_T0_init --> L395_T0_init
[2023-01-16 05:55:26,502 INFO  L479       ProductGenerator]: L384_accept_S1 --> L384_accept_S1
[2023-01-16 05:55:26,503 INFO  L479       ProductGenerator]: L384_T0_init --> L384_T0_init
[2023-01-16 05:55:26,503 INFO  L479       ProductGenerator]: read_esboxFINAL_accept_S1 --> read_esboxFINAL_accept_S1
[2023-01-16 05:55:26,503 INFO  L479       ProductGenerator]: read_esboxFINAL_T0_init --> read_esboxFINAL_T0_init
[2023-01-16 05:55:26,503 INFO  L479       ProductGenerator]: L503_accept_S1 --> L503_accept_S1
[2023-01-16 05:55:26,503 INFO  L479       ProductGenerator]: L503_T0_init --> L503_T0_init
[2023-01-16 05:55:26,503 INFO  L479       ProductGenerator]: L662_accept_S1 --> L662_accept_S1
[2023-01-16 05:55:26,503 INFO  L479       ProductGenerator]: L662_T0_init --> L662_T0_init
[2023-01-16 05:55:26,503 INFO  L483       ProductGenerator]: Handling product edge call: call havocProcedure();
[2023-01-16 05:55:26,503 INFO  L483       ProductGenerator]: Handling product edge call: call havocProcedure();
[2023-01-16 05:55:26,503 INFO  L479       ProductGenerator]: L486_accept_S1 --> L486_accept_S1
[2023-01-16 05:55:26,503 INFO  L479       ProductGenerator]: L486_T0_init --> L486_T0_init
[2023-01-16 05:55:26,504 INFO  L479       ProductGenerator]: L498_accept_S1 --> L498_accept_S1
[2023-01-16 05:55:26,504 INFO  L479       ProductGenerator]: L498_T0_init --> L498_T0_init
[2023-01-16 05:55:26,504 INFO  L479       ProductGenerator]: L545_accept_S1 --> L545_accept_S1
[2023-01-16 05:55:26,504 INFO  L479       ProductGenerator]: L545_T0_init --> L545_T0_init
[2023-01-16 05:55:26,504 INFO  L479       ProductGenerator]: L599-1_accept_S1 --> L599-1_accept_S1
[2023-01-16 05:55:26,504 INFO  L479       ProductGenerator]: L599-1_T0_init --> L599-1_T0_init
[2023-01-16 05:55:26,504 INFO  L479       ProductGenerator]: L443_accept_S1 --> L443_accept_S1
[2023-01-16 05:55:26,504 INFO  L479       ProductGenerator]: L443_T0_init --> L443_T0_init
[2023-01-16 05:55:26,504 INFO  L486       ProductGenerator]: Handling product edge summary: SUMMARY for call setValid(hdr.udp_tunnel); srcloc: L391
[2023-01-16 05:55:26,506 INFO  L486       ProductGenerator]: Handling product edge summary: SUMMARY for call setValid(hdr.udp_tunnel); srcloc: L391
[2023-01-16 05:55:26,508 INFO  L479       ProductGenerator]: L519_accept_S1 --> L519_accept_S1
[2023-01-16 05:55:26,508 INFO  L479       ProductGenerator]: L519_T0_init --> L519_T0_init
[2023-01-16 05:55:26,508 INFO  L479       ProductGenerator]: L262_accept_S1 --> L262_accept_S1
[2023-01-16 05:55:26,508 INFO  L479       ProductGenerator]: L262_T0_init --> L262_T0_init
[2023-01-16 05:55:26,508 INFO  L479       ProductGenerator]: creatipv6_1FINAL_accept_S1 --> creatipv6_1FINAL_accept_S1
[2023-01-16 05:55:26,509 INFO  L479       ProductGenerator]: creatipv6_1FINAL_T0_init --> creatipv6_1FINAL_T0_init
[2023-01-16 05:55:26,509 INFO  L486       ProductGenerator]: Handling product edge summary: SUMMARY for call setInvalid(hdr.udp_tunnel); srcloc: L302-1
[2023-01-16 05:55:26,517 INFO  L486       ProductGenerator]: Handling product edge summary: SUMMARY for call setInvalid(hdr.udp_tunnel); srcloc: L302-1
[2023-01-16 05:55:26,524 INFO  L479       ProductGenerator]: L533_accept_S1 --> L533_accept_S1
[2023-01-16 05:55:26,525 INFO  L479       ProductGenerator]: L533_T0_init --> L533_T0_init
[2023-01-16 05:55:26,525 INFO  L479       ProductGenerator]: L266_accept_S1 --> L266_accept_S1
[2023-01-16 05:55:26,525 INFO  L479       ProductGenerator]: L266_T0_init --> L266_T0_init
[2023-01-16 05:55:26,525 INFO  L479       ProductGenerator]: L266_accept_S1 --> L266_accept_S1
[2023-01-16 05:55:26,525 INFO  L479       ProductGenerator]: L266_T0_init --> L266_T0_init
[2023-01-16 05:55:26,526 INFO  L479       ProductGenerator]: L661_accept_S1 --> L661_accept_S1
[2023-01-16 05:55:26,526 INFO  L479       ProductGenerator]: L661_T0_init --> L661_T0_init
[2023-01-16 05:55:26,526 INFO  L479       ProductGenerator]: L471_accept_S1 --> L471_accept_S1
[2023-01-16 05:55:26,526 INFO  L479       ProductGenerator]: L471_T0_init --> L471_T0_init
[2023-01-16 05:55:26,526 INFO  L479       ProductGenerator]: L655_accept_S1 --> L655_accept_S1
[2023-01-16 05:55:26,526 INFO  L479       ProductGenerator]: L655_T0_init --> L655_T0_init
[2023-01-16 05:55:26,526 INFO  L479       ProductGenerator]: L541_accept_S1 --> L541_accept_S1
[2023-01-16 05:55:26,526 INFO  L479       ProductGenerator]: L541_T0_init --> L541_T0_init
[2023-01-16 05:55:26,526 INFO  L486       ProductGenerator]: Handling product edge summary: SUMMARY for call setInvalid(hdr.ipv4_tunnel); srcloc: L302
[2023-01-16 05:55:26,534 INFO  L486       ProductGenerator]: Handling product edge summary: SUMMARY for call setInvalid(hdr.ipv4_tunnel); srcloc: L302
[2023-01-16 05:55:26,546 INFO  L479       ProductGenerator]: L512_accept_S1 --> L512_accept_S1
[2023-01-16 05:55:26,546 INFO  L479       ProductGenerator]: L512_T0_init --> L512_T0_init
[2023-01-16 05:55:26,546 INFO  L479       ProductGenerator]: L696_accept_S1 --> L696_accept_S1
[2023-01-16 05:55:26,547 INFO  L479       ProductGenerator]: L696_T0_init --> L696_T0_init
[2023-01-16 05:55:26,547 INFO  L479       ProductGenerator]: L427_accept_S1 --> L427_accept_S1
[2023-01-16 05:55:26,547 INFO  L479       ProductGenerator]: L427_T0_init --> L427_T0_init
[2023-01-16 05:55:26,547 INFO  L479       ProductGenerator]: L470_accept_S1 --> L470_accept_S1
[2023-01-16 05:55:26,547 INFO  L479       ProductGenerator]: L470_T0_init --> L470_T0_init
[2023-01-16 05:55:26,547 INFO  L479       ProductGenerator]: L708_accept_S1 --> L708_accept_S1
[2023-01-16 05:55:26,547 INFO  L479       ProductGenerator]: L708_T0_init --> L708_T0_init
[2023-01-16 05:55:26,547 INFO  L479       ProductGenerator]: L500_accept_S1 --> L500_accept_S1
[2023-01-16 05:55:26,548 INFO  L479       ProductGenerator]: L500_T0_init --> L500_T0_init
[2023-01-16 05:55:26,548 INFO  L479       ProductGenerator]: L476_accept_S1 --> L476_accept_S1
[2023-01-16 05:55:26,548 INFO  L479       ProductGenerator]: L476_T0_init --> L476_T0_init
[2023-01-16 05:55:26,548 INFO  L479       ProductGenerator]: L527_accept_S1 --> L527_accept_S1
[2023-01-16 05:55:26,548 INFO  L479       ProductGenerator]: L527_T0_init --> L527_T0_init
[2023-01-16 05:55:26,548 INFO  L479       ProductGenerator]: L548_accept_S1 --> L548_accept_S1
[2023-01-16 05:55:26,548 INFO  L479       ProductGenerator]: L548_T0_init --> L548_T0_init
[2023-01-16 05:55:26,548 INFO  L479       ProductGenerator]: L464_accept_S1 --> L464_accept_S1
[2023-01-16 05:55:26,548 INFO  L479       ProductGenerator]: L464_T0_init --> L464_T0_init
[2023-01-16 05:55:26,548 INFO  L479       ProductGenerator]: parse_myTunnelENTRY_accept_S1 --> parse_myTunnelENTRY_accept_S1
[2023-01-16 05:55:26,548 INFO  L479       ProductGenerator]: parse_myTunnelENTRY_T0_init --> parse_myTunnelENTRY_T0_init
[2023-01-16 05:55:26,549 INFO  L479       ProductGenerator]: L276_accept_S1 --> L276_accept_S1
[2023-01-16 05:55:26,549 INFO  L479       ProductGenerator]: L276_T0_init --> L276_T0_init
[2023-01-16 05:55:26,549 INFO  L479       ProductGenerator]: L494_accept_S1 --> L494_accept_S1
[2023-01-16 05:55:26,549 INFO  L479       ProductGenerator]: L494_T0_init --> L494_T0_init
[2023-01-16 05:55:26,549 INFO  L479       ProductGenerator]: L467_accept_S1 --> L467_accept_S1
[2023-01-16 05:55:26,549 INFO  L479       ProductGenerator]: L467_T0_init --> L467_T0_init
[2023-01-16 05:55:26,549 INFO  L483       ProductGenerator]: Handling product edge call: call user_mac.write(0, hdr.ethernet.srcAddr);
[2023-01-16 05:55:26,549 INFO  L483       ProductGenerator]: Handling product edge call: call user_mac.write(0, hdr.ethernet.srcAddr);
[2023-01-16 05:55:26,550 INFO  L479       ProductGenerator]: L692_accept_S1 --> L692_accept_S1
[2023-01-16 05:55:26,550 INFO  L479       ProductGenerator]: L692_T0_init --> L692_T0_init
[2023-01-16 05:55:26,550 INFO  L479       ProductGenerator]: L546_accept_S1 --> L546_accept_S1
[2023-01-16 05:55:26,550 INFO  L479       ProductGenerator]: L546_T0_init --> L546_T0_init
[2023-01-16 05:55:26,550 INFO  L479       ProductGenerator]: L577-1_accept_S1 --> L577-1_accept_S1
[2023-01-16 05:55:26,550 INFO  L479       ProductGenerator]: L577-1_T0_init --> L577-1_T0_init
[2023-01-16 05:55:26,550 INFO  L479       ProductGenerator]: L577-1_accept_S1 --> L577-1_accept_S1
[2023-01-16 05:55:26,550 INFO  L479       ProductGenerator]: L577-1_T0_init --> L577-1_T0_init
[2023-01-16 05:55:26,550 INFO  L479       ProductGenerator]: L647_accept_S1 --> L647_accept_S1
[2023-01-16 05:55:26,550 INFO  L479       ProductGenerator]: L647_T0_init --> L647_T0_init
[2023-01-16 05:55:26,550 INFO  L479       ProductGenerator]: L249_accept_S1 --> L249_accept_S1
[2023-01-16 05:55:26,551 INFO  L479       ProductGenerator]: L249_T0_init --> L249_T0_init
[2023-01-16 05:55:26,551 INFO  L479       ProductGenerator]: creatipv6_2FINAL_accept_S1 --> creatipv6_2FINAL_accept_S1
[2023-01-16 05:55:26,551 INFO  L479       ProductGenerator]: creatipv6_2FINAL_T0_init --> creatipv6_2FINAL_T0_init
[2023-01-16 05:55:26,551 INFO  L479       ProductGenerator]: L453_accept_S1 --> L453_accept_S1
[2023-01-16 05:55:26,551 INFO  L479       ProductGenerator]: L453_T0_init --> L453_T0_init
[2023-01-16 05:55:26,553 INFO  L479       ProductGenerator]: L459_accept_S1 --> L459_accept_S1
[2023-01-16 05:55:26,553 INFO  L479       ProductGenerator]: L459_T0_init --> L459_T0_init
[2023-01-16 05:55:26,553 INFO  L479       ProductGenerator]: L387_accept_S1 --> L387_accept_S1
[2023-01-16 05:55:26,553 INFO  L479       ProductGenerator]: L387_T0_init --> L387_T0_init
[2023-01-16 05:55:26,553 INFO  L479       ProductGenerator]: L685_accept_S1 --> L685_accept_S1
[2023-01-16 05:55:26,554 INFO  L479       ProductGenerator]: L685_T0_init --> L685_T0_init
[2023-01-16 05:55:26,554 INFO  L479       ProductGenerator]: L651_accept_S1 --> L651_accept_S1
[2023-01-16 05:55:26,555 INFO  L479       ProductGenerator]: L651_T0_init --> L651_T0_init
[2023-01-16 05:55:26,556 INFO  L479       ProductGenerator]: L441_accept_S1 --> L441_accept_S1
[2023-01-16 05:55:26,556 INFO  L479       ProductGenerator]: L441_T0_init --> L441_T0_init
[2023-01-16 05:55:26,556 INFO  L479       ProductGenerator]: L609_accept_S1 --> L609_accept_S1
[2023-01-16 05:55:26,556 INFO  L479       ProductGenerator]: L609_T0_init --> L609_T0_init
[2023-01-16 05:55:26,556 INFO  L479       ProductGenerator]: L609_accept_S1 --> L609_accept_S1
[2023-01-16 05:55:26,556 INFO  L479       ProductGenerator]: L609_T0_init --> L609_T0_init
[2023-01-16 05:55:26,557 INFO  L479       ProductGenerator]: L261_accept_S1 --> L261_accept_S1
[2023-01-16 05:55:26,557 INFO  L479       ProductGenerator]: L261_T0_init --> L261_T0_init
[2023-01-16 05:55:26,557 INFO  L479       ProductGenerator]: L424_accept_S1 --> L424_accept_S1
[2023-01-16 05:55:26,558 INFO  L479       ProductGenerator]: L424_T0_init --> L424_T0_init
[2023-01-16 05:55:26,558 INFO  L479       ProductGenerator]: L529_accept_S1 --> L529_accept_S1
[2023-01-16 05:55:26,558 INFO  L479       ProductGenerator]: L529_T0_init --> L529_T0_init
[2023-01-16 05:55:26,558 INFO  L479       ProductGenerator]: L687_accept_S1 --> L687_accept_S1
[2023-01-16 05:55:26,558 INFO  L479       ProductGenerator]: L687_T0_init --> L687_T0_init
[2023-01-16 05:55:26,558 INFO  L479       ProductGenerator]: L388_accept_S1 --> L388_accept_S1
[2023-01-16 05:55:26,558 INFO  L479       ProductGenerator]: L388_T0_init --> L388_T0_init
[2023-01-16 05:55:26,558 INFO  L479       ProductGenerator]: L438_accept_S1 --> L438_accept_S1
[2023-01-16 05:55:26,559 INFO  L479       ProductGenerator]: L438_T0_init --> L438_T0_init
[2023-01-16 05:55:26,559 INFO  L479       ProductGenerator]: L289_accept_S1 --> L289_accept_S1
[2023-01-16 05:55:26,559 INFO  L479       ProductGenerator]: L289_T0_init --> L289_T0_init
[2023-01-16 05:55:26,559 INFO  L479       ProductGenerator]: L393_accept_S1 --> L393_accept_S1
[2023-01-16 05:55:26,559 INFO  L479       ProductGenerator]: L393_T0_init --> L393_T0_init
[2023-01-16 05:55:26,559 INFO  L479       ProductGenerator]: read_dsboxENTRY_accept_S1 --> read_dsboxENTRY_accept_S1
[2023-01-16 05:55:26,560 INFO  L479       ProductGenerator]: read_dsboxENTRY_T0_init --> read_dsboxENTRY_T0_init
[2023-01-16 05:55:26,560 INFO  L479       ProductGenerator]: L683_accept_S1 --> L683_accept_S1
[2023-01-16 05:55:26,560 INFO  L479       ProductGenerator]: L683_T0_init --> L683_T0_init
[2023-01-16 05:55:26,560 INFO  L479       ProductGenerator]: L650_accept_S1 --> L650_accept_S1
[2023-01-16 05:55:26,560 INFO  L479       ProductGenerator]: L650_T0_init --> L650_T0_init
[2023-01-16 05:55:26,560 INFO  L479       ProductGenerator]: L448_accept_S1 --> L448_accept_S1
[2023-01-16 05:55:26,560 INFO  L479       ProductGenerator]: L448_T0_init --> L448_T0_init
[2023-01-16 05:55:26,560 INFO  L479       ProductGenerator]: L496_accept_S1 --> L496_accept_S1
[2023-01-16 05:55:26,560 INFO  L479       ProductGenerator]: L496_T0_init --> L496_T0_init
[2023-01-16 05:55:26,560 INFO  L479       ProductGenerator]: L353_accept_S1 --> L353_accept_S1
[2023-01-16 05:55:26,560 INFO  L479       ProductGenerator]: L353_T0_init --> L353_T0_init
[2023-01-16 05:55:26,560 INFO  L479       ProductGenerator]: L394_accept_S1 --> L394_accept_S1
[2023-01-16 05:55:26,561 INFO  L479       ProductGenerator]: L394_T0_init --> L394_T0_init
[2023-01-16 05:55:26,561 INFO  L479       ProductGenerator]: L422_accept_S1 --> L422_accept_S1
[2023-01-16 05:55:26,561 INFO  L479       ProductGenerator]: L422_T0_init --> L422_T0_init
[2023-01-16 05:55:26,561 INFO  L479       ProductGenerator]: L447_accept_S1 --> L447_accept_S1
[2023-01-16 05:55:26,561 INFO  L479       ProductGenerator]: L447_T0_init --> L447_T0_init
[2023-01-16 05:55:26,561 INFO  L479       ProductGenerator]: L482_accept_S1 --> L482_accept_S1
[2023-01-16 05:55:26,562 INFO  L479       ProductGenerator]: L482_T0_init --> L482_T0_init
[2023-01-16 05:55:26,562 INFO  L479       ProductGenerator]: L469_accept_S1 --> L469_accept_S1
[2023-01-16 05:55:26,562 INFO  L479       ProductGenerator]: L469_T0_init --> L469_T0_init
[2023-01-16 05:55:26,562 INFO  L479       ProductGenerator]: parse_tcpFINAL_accept_S1 --> parse_tcpFINAL_accept_S1
[2023-01-16 05:55:26,562 INFO  L479       ProductGenerator]: parse_tcpFINAL_T0_init --> parse_tcpFINAL_T0_init
[2023-01-16 05:55:26,562 INFO  L479       ProductGenerator]: L354_accept_S1 --> L354_accept_S1
[2023-01-16 05:55:26,562 INFO  L479       ProductGenerator]: L354_T0_init --> L354_T0_init
[2023-01-16 05:55:26,562 INFO  L479       ProductGenerator]: L552_accept_S1 --> L552_accept_S1
[2023-01-16 05:55:26,562 INFO  L479       ProductGenerator]: L552_T0_init --> L552_T0_init
[2023-01-16 05:55:26,562 INFO  L479       ProductGenerator]: parse_tcpENTRY_accept_S1 --> parse_tcpENTRY_accept_S1
[2023-01-16 05:55:26,563 INFO  L479       ProductGenerator]: parse_tcpENTRY_T0_init --> parse_tcpENTRY_T0_init
[2023-01-16 05:55:26,563 INFO  L479       ProductGenerator]: L564_accept_S1 --> L564_accept_S1
[2023-01-16 05:55:26,563 INFO  L479       ProductGenerator]: L564_T0_init --> L564_T0_init
[2023-01-16 05:55:26,564 INFO  L479       ProductGenerator]: L564_accept_S1 --> L564_accept_S1
[2023-01-16 05:55:26,565 INFO  L479       ProductGenerator]: L564_T0_init --> L564_T0_init
[2023-01-16 05:55:26,566 INFO  L479       ProductGenerator]: L665_accept_S1 --> L665_accept_S1
[2023-01-16 05:55:26,566 INFO  L479       ProductGenerator]: L665_T0_init --> L665_T0_init
[2023-01-16 05:55:26,567 INFO  L486       ProductGenerator]: Handling product edge summary: SUMMARY for call setValid(hdr.ipv4_tunnel); srcloc: creatmytunnelENTRY
[2023-01-16 05:55:26,569 INFO  L486       ProductGenerator]: Handling product edge summary: SUMMARY for call setValid(hdr.ipv4_tunnel); srcloc: creatmytunnelENTRY
[2023-01-16 05:55:26,570 INFO  L479       ProductGenerator]: L707_accept_S1 --> L707_accept_S1
[2023-01-16 05:55:26,570 INFO  L479       ProductGenerator]: L707_T0_init --> L707_T0_init
[2023-01-16 05:55:26,570 INFO  L479       ProductGenerator]: L432_accept_S1 --> L432_accept_S1
[2023-01-16 05:55:26,570 INFO  L479       ProductGenerator]: L432_T0_init --> L432_T0_init
[2023-01-16 05:55:26,570 INFO  L479       ProductGenerator]: L549_accept_S1 --> L549_accept_S1
[2023-01-16 05:55:26,572 INFO  L479       ProductGenerator]: L549_T0_init --> L549_T0_init
[2023-01-16 05:55:26,572 INFO  L479       ProductGenerator]: L445_accept_S1 --> L445_accept_S1
[2023-01-16 05:55:26,572 INFO  L479       ProductGenerator]: L445_T0_init --> L445_T0_init
[2023-01-16 05:55:26,572 INFO  L479       ProductGenerator]: L727_accept_S1 --> L727_accept_S1
[2023-01-16 05:55:26,572 INFO  L479       ProductGenerator]: L727_T0_init --> L727_T0_init
[2023-01-16 05:55:26,572 INFO  L479       ProductGenerator]: L727_accept_S1 --> L727_accept_S1
[2023-01-16 05:55:26,573 INFO  L479       ProductGenerator]: L727_T0_init --> L727_T0_init
[2023-01-16 05:55:26,573 INFO  L479       ProductGenerator]: L566_accept_S1 --> L566_accept_S1
[2023-01-16 05:55:26,573 INFO  L479       ProductGenerator]: L566_T0_init --> L566_T0_init
[2023-01-16 05:55:26,573 INFO  L479       ProductGenerator]: L263_accept_S1 --> L263_accept_S1
[2023-01-16 05:55:26,573 INFO  L479       ProductGenerator]: L263_T0_init --> L263_T0_init
[2023-01-16 05:55:26,573 INFO  L479       ProductGenerator]: L362_accept_S1 --> L362_accept_S1
[2023-01-16 05:55:26,573 INFO  L479       ProductGenerator]: L362_T0_init --> L362_T0_init
[2023-01-16 05:55:26,574 INFO  L479       ProductGenerator]: L697_accept_S1 --> L697_accept_S1
[2023-01-16 05:55:26,575 INFO  L479       ProductGenerator]: L697_T0_init --> L697_T0_init
[2023-01-16 05:55:26,575 INFO  L479       ProductGenerator]: L429_accept_S1 --> L429_accept_S1
[2023-01-16 05:55:26,575 INFO  L479       ProductGenerator]: L429_T0_init --> L429_T0_init
[2023-01-16 05:55:26,575 INFO  L479       ProductGenerator]: L674_accept_S1 --> L674_accept_S1
[2023-01-16 05:55:26,575 INFO  L479       ProductGenerator]: L674_T0_init --> L674_T0_init
[2023-01-16 05:55:26,575 INFO  L479       ProductGenerator]: L478_accept_S1 --> L478_accept_S1
[2023-01-16 05:55:26,575 INFO  L479       ProductGenerator]: L478_T0_init --> L478_T0_init
[2023-01-16 05:55:26,575 INFO  L479       ProductGenerator]: L544_accept_S1 --> L544_accept_S1
[2023-01-16 05:55:26,575 INFO  L479       ProductGenerator]: L544_T0_init --> L544_T0_init
[2023-01-16 05:55:26,575 INFO  L479       ProductGenerator]: L449_accept_S1 --> L449_accept_S1
[2023-01-16 05:55:26,575 INFO  L479       ProductGenerator]: L449_T0_init --> L449_T0_init
[2023-01-16 05:55:26,576 INFO  L479       ProductGenerator]: L551_accept_S1 --> L551_accept_S1
[2023-01-16 05:55:26,576 INFO  L479       ProductGenerator]: L551_T0_init --> L551_T0_init
[2023-01-16 05:55:26,576 INFO  L479       ProductGenerator]: parse_ipv6ENTRY_accept_S1 --> parse_ipv6ENTRY_accept_S1
[2023-01-16 05:55:26,576 INFO  L479       ProductGenerator]: parse_ipv6ENTRY_T0_init --> parse_ipv6ENTRY_T0_init
[2023-01-16 05:55:26,576 INFO  L479       ProductGenerator]: MyComputeChecksumFINAL_accept_S1 --> MyComputeChecksumFINAL_accept_S1
[2023-01-16 05:55:26,576 INFO  L479       ProductGenerator]: MyComputeChecksumFINAL_T0_init --> MyComputeChecksumFINAL_T0_init
[2023-01-16 05:55:26,576 INFO  L483       ProductGenerator]: Handling product edge call: call parse_udp();
[2023-01-16 05:55:26,576 INFO  L483       ProductGenerator]: Handling product edge call: call parse_udp();
[2023-01-16 05:55:26,576 INFO  L479       ProductGenerator]: L350_accept_S1 --> L350_accept_S1
[2023-01-16 05:55:26,577 INFO  L479       ProductGenerator]: L350_T0_init --> L350_T0_init
[2023-01-16 05:55:26,577 INFO  L479       ProductGenerator]: L457_accept_S1 --> L457_accept_S1
[2023-01-16 05:55:26,577 INFO  L479       ProductGenerator]: L457_T0_init --> L457_T0_init
[2023-01-16 05:55:26,580 INFO  L479       ProductGenerator]: L526_accept_S1 --> L526_accept_S1
[2023-01-16 05:55:26,580 INFO  L479       ProductGenerator]: L526_T0_init --> L526_T0_init
[2023-01-16 05:55:26,582 INFO  L479       ProductGenerator]: _parser_MyParserFINAL_accept_S1 --> _parser_MyParserFINAL_accept_S1
[2023-01-16 05:55:26,583 INFO  L479       ProductGenerator]: _parser_MyParserFINAL_T0_init --> _parser_MyParserFINAL_T0_init
[2023-01-16 05:55:26,583 INFO  L483       ProductGenerator]: Handling product edge call: call parse_ipv4();
[2023-01-16 05:55:26,583 INFO  L483       ProductGenerator]: Handling product edge call: call parse_ipv4();
[2023-01-16 05:55:26,583 INFO  L479       ProductGenerator]: L292_accept_S1 --> L292_accept_S1
[2023-01-16 05:55:26,583 INFO  L479       ProductGenerator]: L292_T0_init --> L292_T0_init
[2023-01-16 05:55:26,583 INFO  L479       ProductGenerator]: L301_accept_S1 --> L301_accept_S1
[2023-01-16 05:55:26,584 INFO  L479       ProductGenerator]: L301_T0_init --> L301_T0_init
[2023-01-16 05:55:26,584 INFO  L479       ProductGenerator]: L301_accept_S1 --> L301_accept_S1
[2023-01-16 05:55:26,584 INFO  L479       ProductGenerator]: L301_T0_init --> L301_T0_init
[2023-01-16 05:55:26,584 INFO  L479       ProductGenerator]: L524_accept_S1 --> L524_accept_S1
[2023-01-16 05:55:26,584 INFO  L479       ProductGenerator]: L524_T0_init --> L524_T0_init
[2023-01-16 05:55:26,584 INFO  L479       ProductGenerator]: L695_accept_S1 --> L695_accept_S1
[2023-01-16 05:55:26,584 INFO  L479       ProductGenerator]: L695_T0_init --> L695_T0_init
[2023-01-16 05:55:26,584 INFO  L479       ProductGenerator]: L700_accept_S1 --> L700_accept_S1
[2023-01-16 05:55:26,584 INFO  L479       ProductGenerator]: L700_T0_init --> L700_T0_init
[2023-01-16 05:55:26,584 INFO  L479       ProductGenerator]: L454_accept_S1 --> L454_accept_S1
[2023-01-16 05:55:26,584 INFO  L479       ProductGenerator]: L454_T0_init --> L454_T0_init
[2023-01-16 05:55:26,585 INFO  L479       ProductGenerator]: L269_accept_S1 --> L269_accept_S1
[2023-01-16 05:55:26,585 INFO  L479       ProductGenerator]: L269_T0_init --> L269_T0_init
[2023-01-16 05:55:26,585 INFO  L479       ProductGenerator]: L269_accept_S1 --> L269_accept_S1
[2023-01-16 05:55:26,585 INFO  L479       ProductGenerator]: L269_T0_init --> L269_T0_init
[2023-01-16 05:55:26,585 INFO  L479       ProductGenerator]: L480_accept_S1 --> L480_accept_S1
[2023-01-16 05:55:26,585 INFO  L479       ProductGenerator]: L480_T0_init --> L480_T0_init
[2023-01-16 05:55:26,585 INFO  L483       ProductGenerator]: Handling product edge call: call accept();
[2023-01-16 05:55:26,585 INFO  L483       ProductGenerator]: Handling product edge call: call accept();
[2023-01-16 05:55:26,585 INFO  L479       ProductGenerator]: L505_accept_S1 --> L505_accept_S1
[2023-01-16 05:55:26,585 INFO  L479       ProductGenerator]: L505_T0_init --> L505_T0_init
[2023-01-16 05:55:26,585 INFO  L483       ProductGenerator]: Handling product edge call: call MyEgress();
[2023-01-16 05:55:26,585 INFO  L483       ProductGenerator]: Handling product edge call: call MyEgress();
[2023-01-16 05:55:26,585 INFO  L479       ProductGenerator]: L385_accept_S1 --> L385_accept_S1
[2023-01-16 05:55:26,585 INFO  L479       ProductGenerator]: L385_T0_init --> L385_T0_init
[2023-01-16 05:55:26,586 INFO  L479       ProductGenerator]: L554_accept_S1 --> L554_accept_S1
[2023-01-16 05:55:26,586 INFO  L479       ProductGenerator]: L554_T0_init --> L554_T0_init
[2023-01-16 05:55:26,586 INFO  L483       ProductGenerator]: Handling product edge call: call count.write(0, 2);
[2023-01-16 05:55:26,586 INFO  L483       ProductGenerator]: Handling product edge call: call count.write(0, 2);
[2023-01-16 05:55:26,586 INFO  L479       ProductGenerator]: L460_accept_S1 --> L460_accept_S1
[2023-01-16 05:55:26,586 INFO  L479       ProductGenerator]: L460_T0_init --> L460_T0_init
[2023-01-16 05:55:26,586 INFO  L479       ProductGenerator]: L452_accept_S1 --> L452_accept_S1
[2023-01-16 05:55:26,586 INFO  L479       ProductGenerator]: L452_T0_init --> L452_T0_init
[2023-01-16 05:55:26,586 INFO  L479       ProductGenerator]: L515_accept_S1 --> L515_accept_S1
[2023-01-16 05:55:26,586 INFO  L479       ProductGenerator]: L515_T0_init --> L515_T0_init
[2023-01-16 05:55:26,586 INFO  L479       ProductGenerator]: L446_accept_S1 --> L446_accept_S1
[2023-01-16 05:55:26,586 INFO  L479       ProductGenerator]: L446_T0_init --> L446_T0_init
[2023-01-16 05:55:26,586 INFO  L479       ProductGenerator]: L461_accept_S1 --> L461_accept_S1
[2023-01-16 05:55:26,586 INFO  L479       ProductGenerator]: L461_T0_init --> L461_T0_init
[2023-01-16 05:55:26,587 INFO  L479       ProductGenerator]: L531_accept_S1 --> L531_accept_S1
[2023-01-16 05:55:26,587 INFO  L479       ProductGenerator]: L531_T0_init --> L531_T0_init
[2023-01-16 05:55:26,587 INFO  L479       ProductGenerator]: L456_accept_S1 --> L456_accept_S1
[2023-01-16 05:55:26,587 INFO  L479       ProductGenerator]: L456_T0_init --> L456_T0_init
[2023-01-16 05:55:26,587 INFO  L479       ProductGenerator]: L539_accept_S1 --> L539_accept_S1
[2023-01-16 05:55:26,587 INFO  L479       ProductGenerator]: L539_T0_init --> L539_T0_init
[2023-01-16 05:55:26,587 INFO  L479       ProductGenerator]: do_read_countFINAL_accept_S1 --> do_read_countFINAL_accept_S1
[2023-01-16 05:55:26,587 INFO  L479       ProductGenerator]: do_read_countFINAL_T0_init --> do_read_countFINAL_T0_init
[2023-01-16 05:55:26,587 INFO  L479       ProductGenerator]: L547_accept_S1 --> L547_accept_S1
[2023-01-16 05:55:26,587 INFO  L479       ProductGenerator]: L547_T0_init --> L547_T0_init
[2023-01-16 05:55:26,587 INFO  L479       ProductGenerator]: L434_accept_S1 --> L434_accept_S1
[2023-01-16 05:55:26,587 INFO  L479       ProductGenerator]: L434_T0_init --> L434_T0_init
[2023-01-16 05:55:26,587 INFO  L479       ProductGenerator]: L365_accept_S1 --> L365_accept_S1
[2023-01-16 05:55:26,588 INFO  L479       ProductGenerator]: L365_T0_init --> L365_T0_init
[2023-01-16 05:55:26,588 INFO  L479       ProductGenerator]: L463_accept_S1 --> L463_accept_S1
[2023-01-16 05:55:26,588 INFO  L479       ProductGenerator]: L463_T0_init --> L463_T0_init
[2023-01-16 05:55:26,588 INFO  L479       ProductGenerator]: L589_accept_S1 --> L589_accept_S1
[2023-01-16 05:55:26,590 INFO  L479       ProductGenerator]: L589_T0_init --> L589_T0_init
[2023-01-16 05:55:26,590 INFO  L479       ProductGenerator]: L589_accept_S1 --> L589_accept_S1
[2023-01-16 05:55:26,591 INFO  L479       ProductGenerator]: L589_T0_init --> L589_T0_init
[2023-01-16 05:55:26,591 INFO  L479       ProductGenerator]: L481_accept_S1 --> L481_accept_S1
[2023-01-16 05:55:26,591 INFO  L479       ProductGenerator]: L481_T0_init --> L481_T0_init
[2023-01-16 05:55:26,591 INFO  L479       ProductGenerator]: L569_accept_S1 --> L569_accept_S1
[2023-01-16 05:55:26,591 INFO  L479       ProductGenerator]: L569_T0_init --> L569_T0_init
[2023-01-16 05:55:26,591 INFO  L479       ProductGenerator]: L283_accept_S1 --> L283_accept_S1
[2023-01-16 05:55:26,591 INFO  L479       ProductGenerator]: L283_T0_init --> L283_T0_init
[2023-01-16 05:55:26,591 INFO  L479       ProductGenerator]: es_box.writeEXIT_accept_S1 --> es_box.writeEXIT_accept_S1
[2023-01-16 05:55:26,592 INFO  L479       ProductGenerator]: es_box.writeEXIT_T0_init --> es_box.writeEXIT_T0_init
[2023-01-16 05:55:26,592 INFO  L479       ProductGenerator]: L490_accept_S1 --> L490_accept_S1
[2023-01-16 05:55:26,592 INFO  L479       ProductGenerator]: L490_T0_init --> L490_T0_init
[2023-01-16 05:55:26,592 INFO  L479       ProductGenerator]: L658_accept_S1 --> L658_accept_S1
[2023-01-16 05:55:26,592 INFO  L479       ProductGenerator]: L658_T0_init --> L658_T0_init
[2023-01-16 05:55:26,592 INFO  L479       ProductGenerator]: L455_accept_S1 --> L455_accept_S1
[2023-01-16 05:55:26,592 INFO  L479       ProductGenerator]: L455_T0_init --> L455_T0_init
[2023-01-16 05:55:26,592 INFO  L483       ProductGenerator]: Handling product edge call: call main();
[2023-01-16 05:55:26,592 INFO  L483       ProductGenerator]: Handling product edge call: call main();
[2023-01-16 05:55:26,592 INFO  L479       ProductGenerator]: L495_accept_S1 --> L495_accept_S1
[2023-01-16 05:55:26,593 INFO  L479       ProductGenerator]: L495_T0_init --> L495_T0_init
[2023-01-16 05:55:26,593 INFO  L479       ProductGenerator]: L300_accept_S1 --> L300_accept_S1
[2023-01-16 05:55:26,593 INFO  L479       ProductGenerator]: L300_T0_init --> L300_T0_init
[2023-01-16 05:55:26,593 INFO  L479       ProductGenerator]: L381_accept_S1 --> L381_accept_S1
[2023-01-16 05:55:26,593 INFO  L479       ProductGenerator]: L381_T0_init --> L381_T0_init
[2023-01-16 05:55:26,593 INFO  L375       ProductGenerator]: ---------- Handling double product return edge from havocProcedureEXIT to L559
[2023-01-16 05:55:26,593 INFO  L375       ProductGenerator]: ---------- Handling double product return edge from creatmytunnelEXIT to L279-1
[2023-01-16 05:55:26,593 INFO  L375       ProductGenerator]: ---------- Handling double product return edge from mainProcedureEXIT to ULTIMATE.startFINAL
[2023-01-16 05:55:26,594 INFO  L375       ProductGenerator]: ---------- Handling double product return edge from creatipv6_1EXIT to L271-1
[2023-01-16 05:55:26,594 INFO  L375       ProductGenerator]: ---------- Handling double product return edge from user_mac.writeEXIT to store_user_macFINAL
[2023-01-16 05:55:26,594 INFO  L375       ProductGenerator]: ---------- Handling double product return edge from startEXIT to _parser_MyParserFINAL
[2023-01-16 05:55:26,594 INFO  L375       ProductGenerator]: ---------- Handling double product return edge from store_user_macEXIT to L267-1
[2023-01-16 05:55:26,594 INFO  L375       ProductGenerator]: ---------- Handling double product return edge from parse_selectEXIT to L730-1
[2023-01-16 05:55:26,594 INFO  L375       ProductGenerator]: ---------- Handling double product return edge from mainEXIT to L577-1
[2023-01-16 05:55:26,594 INFO  L749       ProductGenerator]: ==== Handling return program step: #413#return;
[2023-01-16 05:55:26,595 INFO  L749       ProductGenerator]: ==== Handling return program step: #413#return;
[2023-01-16 05:55:26,595 INFO  L375       ProductGenerator]: ---------- Handling double product return edge from MyVerifyChecksumEXIT to L561
[2023-01-16 05:55:26,595 INFO  L375       ProductGenerator]: ---------- Handling double product return edge from parse_tcpEXIT to L589-1
[2023-01-16 05:55:26,595 INFO  L375       ProductGenerator]: ---------- Handling double product return edge from parse_ipv4EXIT to L599-1
[2023-01-16 05:55:26,595 INFO  L375       ProductGenerator]: ---------- Handling double product return edge from parse_ipv4EXIT to parse_udpFINAL
[2023-01-16 05:55:26,595 INFO  L375       ProductGenerator]: ---------- Handling double product return edge from read_esboxEXIT to L268
[2023-01-16 05:55:26,596 INFO  L375       ProductGenerator]: ---------- Handling double product return edge from do_read_countEXIT to L269
[2023-01-16 05:55:26,596 INFO  L375       ProductGenerator]: ---------- Handling double product return edge from parse_myTunnelEXIT to L618
[2023-01-16 05:55:26,597 INFO  L375       ProductGenerator]: ---------- Handling double product return edge from parse_udpEXIT to L609-1
[2023-01-16 05:55:26,597 INFO  L375       ProductGenerator]: ---------- Handling double product return edge from MyEgressEXIT to L563
[2023-01-16 05:55:26,597 INFO  L375       ProductGenerator]: ---------- Handling double product return edge from acceptEXIT to parse_tcpFINAL
[2023-01-16 05:55:26,597 INFO  L375       ProductGenerator]: ---------- Handling double product return edge from parse_ipv6EXIT to L730-1
[2023-01-16 05:55:26,597 INFO  L375       ProductGenerator]: ---------- Handling double product return edge from creatipv6_2EXIT to L287-1
[2023-01-16 05:55:26,598 INFO  L375       ProductGenerator]: ---------- Handling double product return edge from count.writeEXIT to L273
[2023-01-16 05:55:26,598 INFO  L375       ProductGenerator]: ---------- Handling double product return edge from count.writeEXIT to L281
[2023-01-16 05:55:26,598 INFO  L375       ProductGenerator]: ---------- Handling double product return edge from count.writeEXIT to L289
[2023-01-16 05:55:26,598 INFO  L375       ProductGenerator]: ---------- Handling double product return edge from _parser_MyParserEXIT to L560
[2023-01-16 05:55:26,598 INFO  L375       ProductGenerator]: ---------- Handling double product return edge from read_dsboxEXIT to L249
[2023-01-16 05:55:26,598 INFO  L375       ProductGenerator]: ---------- Handling double product return edge from MyIngressEXIT to L562
[2023-01-16 05:55:26,598 INFO  L375       ProductGenerator]: ---------- Handling double product return edge from MyComputeChecksumEXIT to L564
[2023-01-16 05:55:26,959 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2023-01-16 05:55:26,960 INFO  L110   BuchiProductObserver]: BuchiProgram size 813 locations, 910 edges
[2023-01-16 05:55:26,961 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 16.01 05:55:26 BoogieIcfgContainer
[2023-01-16 05:55:26,961 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2023-01-16 05:55:26,961 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2023-01-16 05:55:26,962 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2023-01-16 05:55:26,965 INFO  L275        PluginConnector]: BlockEncodingV2 initialized
[2023-01-16 05:55:26,966 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 16.01 05:55:26" (1/1) ...
[2023-01-16 05:55:27,014 INFO  L313           BlockEncoder]: Initial Icfg 813 locations, 910 edges
[2023-01-16 05:55:27,014 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2023-01-16 05:55:27,015 INFO  L263           BlockEncoder]: Using Maximize final states
[2023-01-16 05:55:27,015 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=false
[2023-01-16 05:55:27,016 INFO  L296           BlockEncoder]: Using Remove sink states
[2023-01-16 05:55:27,017 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2023-01-16 05:55:27,029 INFO  L70    emoveInfeasibleEdges]: Removed 4 edges and 2 locations because of local infeasibility
[2023-01-16 05:55:27,034 INFO  L71     MaximizeFinalStates]: 0 new accepting states
[2023-01-16 05:55:27,037 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2023-01-16 05:55:27,042 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2023-01-16 05:55:27,043 INFO  L71     MaximizeFinalStates]: 0 new accepting states
[2023-01-16 05:55:27,044 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2023-01-16 05:55:27,045 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2023-01-16 05:55:27,046 INFO  L68        ParallelComposer]: Creating parallel compositions
[2023-01-16 05:55:27,048 INFO  L313           BlockEncoder]: Encoded RCFG 805 locations, 899 edges
[2023-01-16 05:55:27,049 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 16.01 05:55:27 BasicIcfg
[2023-01-16 05:55:27,049 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2023-01-16 05:55:27,050 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2023-01-16 05:55:27,051 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2023-01-16 05:55:27,055 INFO  L275        PluginConnector]: BuchiAutomizer initialized
[2023-01-16 05:55:27,055 INFO  L99          BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2023-01-16 05:55:27,055 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "p4ltl_boogie.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 16.01 05:55:25" (1/6) ...
[2023-01-16 05:55:27,056 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@44cf1cf4 and model type p4ltl_boogie.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 16.01 05:55:27, skipping insertion in model container
[2023-01-16 05:55:27,056 INFO  L99          BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2023-01-16 05:55:27,057 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.tsinghua.ss.thufv.specLang AST 16.01 05:55:25" (2/6) ...
[2023-01-16 05:55:27,057 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@44cf1cf4 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 16.01 05:55:27, skipping insertion in model container
[2023-01-16 05:55:27,057 INFO  L99          BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2023-01-16 05:55:27,057 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "p4ltl_boogie.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 16.01 05:55:26" (3/6) ...
[2023-01-16 05:55:27,057 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@44cf1cf4 and model type p4ltl_boogie.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 16.01 05:55:27, skipping insertion in model container
[2023-01-16 05:55:27,057 INFO  L99          BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2023-01-16 05:55:27,057 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.tsinghua.ss.thufv.ltl2aut AST 16.01 05:55:26" (4/6) ...
[2023-01-16 05:55:27,058 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@44cf1cf4 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 16.01 05:55:27, skipping insertion in model container
[2023-01-16 05:55:27,058 INFO  L99          BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2023-01-16 05:55:27,058 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 16.01 05:55:26" (5/6) ...
[2023-01-16 05:55:27,058 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@44cf1cf4 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 16.01 05:55:27, skipping insertion in model container
[2023-01-16 05:55:27,058 INFO  L99          BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2023-01-16 05:55:27,058 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 16.01 05:55:27" (6/6) ...
[2023-01-16 05:55:27,060 INFO  L354   chiAutomizerObserver]: Analyzing ICFG p4ltl_boogie.bpl_BEv2
[2023-01-16 05:55:27,129 INFO  L255   stractBuchiCegarLoop]: Interprodecural is true
[2023-01-16 05:55:27,129 INFO  L256   stractBuchiCegarLoop]: Hoare is false
[2023-01-16 05:55:27,129 INFO  L257   stractBuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2023-01-16 05:55:27,129 INFO  L258   stractBuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2023-01-16 05:55:27,130 INFO  L259   stractBuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2023-01-16 05:55:27,130 INFO  L260   stractBuchiCegarLoop]: Difference is false
[2023-01-16 05:55:27,130 INFO  L261   stractBuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2023-01-16 05:55:27,130 INFO  L265   stractBuchiCegarLoop]: ======== Iteration 0 == of CEGAR loop == BuchiAutomatonCegarLoop ========
[2023-01-16 05:55:27,142 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand  has 805 states, 702 states have (on average 1.0484330484330484) internal successors, (736), 696 states have internal predecessors, (736), 55 states have call successors, (55), 55 states have call predecessors, (55), 48 states have return successors, (108), 54 states have call predecessors, (108), 54 states have call successors, (108)
[2023-01-16 05:55:27,195 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2023-01-16 05:55:27,196 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2023-01-16 05:55:27,196 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2023-01-16 05:55:27,242 INFO  L179   hiAutomatonCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2023-01-16 05:55:27,243 INFO  L180   hiAutomatonCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2023-01-16 05:55:27,243 INFO  L287   stractBuchiCegarLoop]: ======== Iteration 1 ============
[2023-01-16 05:55:27,244 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand  has 805 states, 702 states have (on average 1.0484330484330484) internal successors, (736), 696 states have internal predecessors, (736), 55 states have call successors, (55), 55 states have call predecessors, (55), 48 states have return successors, (108), 54 states have call predecessors, (108), 54 states have call successors, (108)
[2023-01-16 05:55:27,259 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2023-01-16 05:55:27,260 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2023-01-16 05:55:27,260 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2023-01-16 05:55:27,265 INFO  L179   hiAutomatonCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2023-01-16 05:55:27,266 INFO  L180   hiAutomatonCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2023-01-16 05:55:27,294 INFO  L752   eck$LassoCheckResult]: Stem: 70#ULTIMATE.startENTRY_NONWAtrue [1500] ULTIMATE.startENTRY_NONWA-->L577-1_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 38#L577-1_T0_inittrue [1466] L577-1_T0_init-->L577_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 640#L577_T0_inittrue [2074] L577_T0_init-->L577_T0_init-D54: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 529#L577_T0_init-D54true [1959] L577_T0_init-D54-->mainENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 390#mainENTRY_T0_inittrue [1819] mainENTRY_T0_init-->mainENTRY_T0_init-D40: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 218#mainENTRY_T0_init-D40true [1649] mainENTRY_T0_init-D40-->havocProcedureENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 209#havocProcedureENTRY_T0_inittrue [1641] havocProcedureENTRY_T0_init-->L421_T0_init: Formula: (not v_drop_12)  InVars {}  OutVars{drop=v_drop_12}  AuxVars[]  AssignedVars[drop] 729#L421_T0_inittrue [2158] L421_T0_init-->L422_T0_init: Formula: (not v_forward_17)  InVars {}  OutVars{forward=v_forward_17}  AuxVars[]  AssignedVars[forward] 676#L422_T0_inittrue [2104] L422_T0_init-->L423_T0_init: Formula: (= v_standard_metadata.ingress_port_14 0)  InVars {}  OutVars{standard_metadata.ingress_port=v_standard_metadata.ingress_port_14}  AuxVars[]  AssignedVars[standard_metadata.ingress_port] 471#L423_T0_inittrue [1901] L423_T0_init-->L424_T0_init: Formula: (= v_standard_metadata.egress_spec_15 0)  InVars {}  OutVars{standard_metadata.egress_spec=v_standard_metadata.egress_spec_15}  AuxVars[]  AssignedVars[standard_metadata.egress_spec] 531#L424_T0_inittrue [1962] L424_T0_init-->L425_T0_init: Formula: (= 0 v_standard_metadata.egress_port_18)  InVars {}  OutVars{standard_metadata.egress_port=v_standard_metadata.egress_port_18}  AuxVars[]  AssignedVars[standard_metadata.egress_port] 520#L425_T0_inittrue [1951] L425_T0_init-->L426_T0_init: Formula: (= v_standard_metadata.instance_type_9 0)  InVars {}  OutVars{standard_metadata.instance_type=v_standard_metadata.instance_type_9}  AuxVars[]  AssignedVars[standard_metadata.instance_type] 282#L426_T0_inittrue [1709] L426_T0_init-->L427_T0_init: Formula: (= v_standard_metadata.packet_length_8 0)  InVars {}  OutVars{standard_metadata.packet_length=v_standard_metadata.packet_length_8}  AuxVars[]  AssignedVars[standard_metadata.packet_length] 24#L427_T0_inittrue [1453] L427_T0_init-->L428_T0_init: Formula: (= v_standard_metadata.enq_timestamp_9 0)  InVars {}  OutVars{standard_metadata.enq_timestamp=v_standard_metadata.enq_timestamp_9}  AuxVars[]  AssignedVars[standard_metadata.enq_timestamp] 149#L428_T0_inittrue [1578] L428_T0_init-->L429_T0_init: Formula: (= v_standard_metadata.enq_qdepth_9 0)  InVars {}  OutVars{standard_metadata.enq_qdepth=v_standard_metadata.enq_qdepth_9}  AuxVars[]  AssignedVars[standard_metadata.enq_qdepth] 425#L429_T0_inittrue [1855] L429_T0_init-->L430_T0_init: Formula: (= v_standard_metadata.deq_timedelta_9 0)  InVars {}  OutVars{standard_metadata.deq_timedelta=v_standard_metadata.deq_timedelta_9}  AuxVars[]  AssignedVars[standard_metadata.deq_timedelta] 91#L430_T0_inittrue [1521] L430_T0_init-->L431_T0_init: Formula: (= v_standard_metadata.deq_qdepth_8 0)  InVars {}  OutVars{standard_metadata.deq_qdepth=v_standard_metadata.deq_qdepth_8}  AuxVars[]  AssignedVars[standard_metadata.deq_qdepth] 179#L431_T0_inittrue [1609] L431_T0_init-->L432_T0_init: Formula: (= v_standard_metadata.ingress_global_timestamp_8 0)  InVars {}  OutVars{standard_metadata.ingress_global_timestamp=v_standard_metadata.ingress_global_timestamp_8}  AuxVars[]  AssignedVars[standard_metadata.ingress_global_timestamp] 684#L432_T0_inittrue [2111] L432_T0_init-->L433_T0_init: Formula: (= v_standard_metadata.egress_global_timestamp_9 0)  InVars {}  OutVars{standard_metadata.egress_global_timestamp=v_standard_metadata.egress_global_timestamp_9}  AuxVars[]  AssignedVars[standard_metadata.egress_global_timestamp] 349#L433_T0_inittrue [1775] L433_T0_init-->L434_T0_init: Formula: (= 0 v_standard_metadata.mcast_grp_9)  InVars {}  OutVars{standard_metadata.mcast_grp=v_standard_metadata.mcast_grp_9}  AuxVars[]  AssignedVars[standard_metadata.mcast_grp] 577#L434_T0_inittrue [2007] L434_T0_init-->L435_T0_init: Formula: (= v_standard_metadata.egress_rid_9 0)  InVars {}  OutVars{standard_metadata.egress_rid=v_standard_metadata.egress_rid_9}  AuxVars[]  AssignedVars[standard_metadata.egress_rid] 80#L435_T0_inittrue [1510] L435_T0_init-->L436_T0_init: Formula: (= v_standard_metadata.checksum_error_8 0)  InVars {}  OutVars{standard_metadata.checksum_error=v_standard_metadata.checksum_error_8}  AuxVars[]  AssignedVars[standard_metadata.checksum_error] 581#L436_T0_inittrue [2011] L436_T0_init-->L437_T0_init: Formula: (= v_standard_metadata.priority_9 0)  InVars {}  OutVars{standard_metadata.priority=v_standard_metadata.priority_9}  AuxVars[]  AssignedVars[standard_metadata.priority] 197#L437_T0_inittrue [1628] L437_T0_init-->L438_T0_init: Formula: (not v_hdr.ethernet.valid_14)  InVars {}  OutVars{hdr.ethernet.valid=v_hdr.ethernet.valid_14}  AuxVars[]  AssignedVars[hdr.ethernet.valid] 164#L438_T0_inittrue [1593] L438_T0_init-->L439_T0_init: Formula: (= v_emit_41 (store v_emit_42 v_hdr.ethernet_3 false))  InVars {emit=v_emit_42, hdr.ethernet=v_hdr.ethernet_3}  OutVars{emit=v_emit_41, hdr.ethernet=v_hdr.ethernet_3}  AuxVars[]  AssignedVars[emit] 758#L439_T0_inittrue [2186] L439_T0_init-->L440_T0_init: Formula: true  InVars {}  OutVars{hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_28}  AuxVars[]  AssignedVars[hdr.ethernet.dstAddr] 36#L440_T0_inittrue [1464] L440_T0_init-->L441_T0_init: Formula: (= v_hdr.ethernet.dstAddr_29 v__old_hdr.ethernet.dstAddr_12)  InVars {hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_29}  OutVars{_old_hdr.ethernet.dstAddr=v__old_hdr.ethernet.dstAddr_12, hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_29}  AuxVars[]  AssignedVars[_old_hdr.ethernet.dstAddr] 45#L441_T0_inittrue [1474] L441_T0_init-->L442_T0_init: Formula: (= v_hdr.ethernet.dstAddr_26 v__old_hdr.ethernet.dstAddr_10)  InVars {hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_26}  OutVars{_old_hdr.ethernet.dstAddr=v__old_hdr.ethernet.dstAddr_10, hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_26}  AuxVars[]  AssignedVars[_old_hdr.ethernet.dstAddr] 320#L442_T0_inittrue [1747] L442_T0_init-->L443_T0_init: Formula: true  InVars {}  OutVars{hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_26}  AuxVars[]  AssignedVars[hdr.ethernet.srcAddr] 418#L443_T0_inittrue [1848] L443_T0_init-->L444_T0_init: Formula: (= v_hdr.ethernet.srcAddr_23 v__old_hdr.ethernet.srcAddr_10)  InVars {hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_23}  OutVars{hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_23, _old_hdr.ethernet.srcAddr=v__old_hdr.ethernet.srcAddr_10}  AuxVars[]  AssignedVars[_old_hdr.ethernet.srcAddr] 257#L444_T0_inittrue [1686] L444_T0_init-->L445_T0_init: Formula: (= v_hdr.ethernet.srcAddr_25 v__old_hdr.ethernet.srcAddr_12)  InVars {hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_25}  OutVars{hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_25, _old_hdr.ethernet.srcAddr=v__old_hdr.ethernet.srcAddr_12}  AuxVars[]  AssignedVars[_old_hdr.ethernet.srcAddr] 783#L445_T0_inittrue [2211] L445_T0_init-->L446_T0_init: Formula: true  InVars {}  OutVars{hdr.ethernet.etherType=v_hdr.ethernet.etherType_24}  AuxVars[]  AssignedVars[hdr.ethernet.etherType] 645#L446_T0_inittrue [2078] L446_T0_init-->L447_T0_init: Formula: (and (<= 0 v_hdr.ethernet.etherType_22) (<= v_hdr.ethernet.etherType_22 65536))  InVars {hdr.ethernet.etherType=v_hdr.ethernet.etherType_22}  OutVars{hdr.ethernet.etherType=v_hdr.ethernet.etherType_22}  AuxVars[]  AssignedVars[] 309#L447_T0_inittrue [1735] L447_T0_init-->L448_T0_init: Formula: (not v_hdr.ipv6.valid_18)  InVars {}  OutVars{hdr.ipv6.valid=v_hdr.ipv6.valid_18}  AuxVars[]  AssignedVars[hdr.ipv6.valid] 365#L448_T0_inittrue [1792] L448_T0_init-->L449_T0_init: Formula: (= v_emit_27 (store v_emit_28 v_hdr.ipv6_10 false))  InVars {emit=v_emit_28, hdr.ipv6=v_hdr.ipv6_10}  OutVars{emit=v_emit_27, hdr.ipv6=v_hdr.ipv6_10}  AuxVars[]  AssignedVars[emit] 744#L449_T0_inittrue [2175] L449_T0_init-->L450_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv6.version=v_hdr.ipv6.version_19}  AuxVars[]  AssignedVars[hdr.ipv6.version] 246#L450_T0_inittrue [1676] L450_T0_init-->L451_T0_init: Formula: (and (<= v_hdr.ipv6.version_20 16) (<= 0 v_hdr.ipv6.version_20))  InVars {hdr.ipv6.version=v_hdr.ipv6.version_20}  OutVars{hdr.ipv6.version=v_hdr.ipv6.version_20}  AuxVars[]  AssignedVars[] 681#L451_T0_inittrue [2109] L451_T0_init-->L452_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv6.trafclass=v_hdr.ipv6.trafclass_9}  AuxVars[]  AssignedVars[hdr.ipv6.trafclass] 482#L452_T0_inittrue [1912] L452_T0_init-->L453_T0_init: Formula: (and (<= v_hdr.ipv6.trafclass_12 256) (<= 0 v_hdr.ipv6.trafclass_12))  InVars {hdr.ipv6.trafclass=v_hdr.ipv6.trafclass_12}  OutVars{hdr.ipv6.trafclass=v_hdr.ipv6.trafclass_12}  AuxVars[]  AssignedVars[] 478#L453_T0_inittrue [1908] L453_T0_init-->L454_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv6.flowlabel=v_hdr.ipv6.flowlabel_11}  AuxVars[]  AssignedVars[hdr.ipv6.flowlabel] 308#L454_T0_inittrue [1734] L454_T0_init-->L455_T0_init: Formula: (and (<= 0 v_hdr.ipv6.flowlabel_12) (<= v_hdr.ipv6.flowlabel_12 1048576))  InVars {hdr.ipv6.flowlabel=v_hdr.ipv6.flowlabel_12}  OutVars{hdr.ipv6.flowlabel=v_hdr.ipv6.flowlabel_12}  AuxVars[]  AssignedVars[] 395#L455_T0_inittrue [1825] L455_T0_init-->L456_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv6.payloadlen=v_hdr.ipv6.payloadlen_20}  AuxVars[]  AssignedVars[hdr.ipv6.payloadlen] 646#L456_T0_inittrue [2079] L456_T0_init-->L457_T0_init: Formula: (and (<= v_hdr.ipv6.payloadlen_17 65536) (<= 0 v_hdr.ipv6.payloadlen_17))  InVars {hdr.ipv6.payloadlen=v_hdr.ipv6.payloadlen_17}  OutVars{hdr.ipv6.payloadlen=v_hdr.ipv6.payloadlen_17}  AuxVars[]  AssignedVars[] 419#L457_T0_inittrue [1849] L457_T0_init-->L458_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv6.nextheader=v_hdr.ipv6.nextheader_22}  AuxVars[]  AssignedVars[hdr.ipv6.nextheader] 337#L458_T0_inittrue [1763] L458_T0_init-->L459_T0_init: Formula: (and (<= v_hdr.ipv6.nextheader_20 256) (<= 0 v_hdr.ipv6.nextheader_20))  InVars {hdr.ipv6.nextheader=v_hdr.ipv6.nextheader_20}  OutVars{hdr.ipv6.nextheader=v_hdr.ipv6.nextheader_20}  AuxVars[]  AssignedVars[] 553#L459_T0_inittrue [1982] L459_T0_init-->L460_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv6.hoplimit=v_hdr.ipv6.hoplimit_17}  AuxVars[]  AssignedVars[hdr.ipv6.hoplimit] 135#L460_T0_inittrue [1564] L460_T0_init-->L461_T0_init: Formula: (and (<= v_hdr.ipv6.hoplimit_20 256) (<= 0 v_hdr.ipv6.hoplimit_20))  InVars {hdr.ipv6.hoplimit=v_hdr.ipv6.hoplimit_20}  OutVars{hdr.ipv6.hoplimit=v_hdr.ipv6.hoplimit_20}  AuxVars[]  AssignedVars[] 86#L461_T0_inittrue [1517] L461_T0_init-->L462_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv6.srcAddr=v_hdr.ipv6.srcAddr_17}  AuxVars[]  AssignedVars[hdr.ipv6.srcAddr] 190#L462_T0_inittrue [1621] L462_T0_init-->L463_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv6.dstAddr=v_hdr.ipv6.dstAddr_16}  AuxVars[]  AssignedVars[hdr.ipv6.dstAddr] 32#L463_T0_inittrue [1462] L463_T0_init-->L464_T0_init: Formula: (not v_hdr.ipv4_tunnel.valid_20)  InVars {}  OutVars{hdr.ipv4_tunnel.valid=v_hdr.ipv4_tunnel.valid_20}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.valid] 76#L464_T0_inittrue [1506] L464_T0_init-->L465_T0_init: Formula: (= v_emit_29 (store v_emit_30 v_hdr.ipv4_tunnel_8 false))  InVars {emit=v_emit_30, hdr.ipv4_tunnel=v_hdr.ipv4_tunnel_8}  OutVars{emit=v_emit_29, hdr.ipv4_tunnel=v_hdr.ipv4_tunnel_8}  AuxVars[]  AssignedVars[emit] 222#L465_T0_inittrue [1653] L465_T0_init-->L466_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.version=v_hdr.ipv4_tunnel.version_16}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.version] 297#L466_T0_inittrue [1724] L466_T0_init-->L467_T0_init: Formula: (and (<= v_hdr.ipv4_tunnel.version_17 16) (<= 0 v_hdr.ipv4_tunnel.version_17))  InVars {hdr.ipv4_tunnel.version=v_hdr.ipv4_tunnel.version_17}  OutVars{hdr.ipv4_tunnel.version=v_hdr.ipv4_tunnel.version_17}  AuxVars[]  AssignedVars[] 279#L467_T0_inittrue [1706] L467_T0_init-->L468_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.ihl=v_hdr.ipv4_tunnel.ihl_14}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.ihl] 372#L468_T0_inittrue [1799] L468_T0_init-->L469_T0_init: Formula: (and (<= 0 v_hdr.ipv4_tunnel.ihl_16) (<= v_hdr.ipv4_tunnel.ihl_16 16))  InVars {hdr.ipv4_tunnel.ihl=v_hdr.ipv4_tunnel.ihl_16}  OutVars{hdr.ipv4_tunnel.ihl=v_hdr.ipv4_tunnel.ihl_16}  AuxVars[]  AssignedVars[] 430#L469_T0_inittrue [1860] L469_T0_init-->L470_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.diffserv=v_hdr.ipv4_tunnel.diffserv_15}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.diffserv] 688#L470_T0_inittrue [2116] L470_T0_init-->L471_T0_init: Formula: (and (<= v_hdr.ipv4_tunnel.diffserv_14 256) (<= 0 v_hdr.ipv4_tunnel.diffserv_14))  InVars {hdr.ipv4_tunnel.diffserv=v_hdr.ipv4_tunnel.diffserv_14}  OutVars{hdr.ipv4_tunnel.diffserv=v_hdr.ipv4_tunnel.diffserv_14}  AuxVars[]  AssignedVars[] 8#L471_T0_inittrue [1436] L471_T0_init-->L472_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.totalLen=v_hdr.ipv4_tunnel.totalLen_14}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.totalLen] 268#L472_T0_inittrue [1696] L472_T0_init-->L473_T0_init: Formula: (and (<= v_hdr.ipv4_tunnel.totalLen_15 65536) (<= 0 v_hdr.ipv4_tunnel.totalLen_15))  InVars {hdr.ipv4_tunnel.totalLen=v_hdr.ipv4_tunnel.totalLen_15}  OutVars{hdr.ipv4_tunnel.totalLen=v_hdr.ipv4_tunnel.totalLen_15}  AuxVars[]  AssignedVars[] 119#L473_T0_inittrue [1549] L473_T0_init-->L474_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.identification=v_hdr.ipv4_tunnel.identification_17}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.identification] 107#L474_T0_inittrue [1537] L474_T0_init-->L475_T0_init: Formula: (and (<= v_hdr.ipv4_tunnel.identification_16 65536) (<= 0 v_hdr.ipv4_tunnel.identification_16))  InVars {hdr.ipv4_tunnel.identification=v_hdr.ipv4_tunnel.identification_16}  OutVars{hdr.ipv4_tunnel.identification=v_hdr.ipv4_tunnel.identification_16}  AuxVars[]  AssignedVars[] 350#L475_T0_inittrue [1776] L475_T0_init-->L476_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.flags=v_hdr.ipv4_tunnel.flags_17}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.flags] 407#L476_T0_inittrue [1837] L476_T0_init-->L477_T0_init: Formula: (and (<= v_hdr.ipv4_tunnel.flags_14 8) (<= 0 v_hdr.ipv4_tunnel.flags_14))  InVars {hdr.ipv4_tunnel.flags=v_hdr.ipv4_tunnel.flags_14}  OutVars{hdr.ipv4_tunnel.flags=v_hdr.ipv4_tunnel.flags_14}  AuxVars[]  AssignedVars[] 7#L477_T0_inittrue [1435] L477_T0_init-->L478_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.fragOffset=v_hdr.ipv4_tunnel.fragOffset_17}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.fragOffset] 283#L478_T0_inittrue [1711] L478_T0_init-->L479_T0_init: Formula: (and (<= 0 v_hdr.ipv4_tunnel.fragOffset_15) (<= v_hdr.ipv4_tunnel.fragOffset_15 8192))  InVars {hdr.ipv4_tunnel.fragOffset=v_hdr.ipv4_tunnel.fragOffset_15}  OutVars{hdr.ipv4_tunnel.fragOffset=v_hdr.ipv4_tunnel.fragOffset_15}  AuxVars[]  AssignedVars[] 202#L479_T0_inittrue [1633] L479_T0_init-->L480_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.ttl=v_hdr.ipv4_tunnel.ttl_15}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.ttl] 137#L480_T0_inittrue [1566] L480_T0_init-->L481_T0_init: Formula: (and (<= 0 v_hdr.ipv4_tunnel.ttl_14) (<= v_hdr.ipv4_tunnel.ttl_14 256))  InVars {hdr.ipv4_tunnel.ttl=v_hdr.ipv4_tunnel.ttl_14}  OutVars{hdr.ipv4_tunnel.ttl=v_hdr.ipv4_tunnel.ttl_14}  AuxVars[]  AssignedVars[] 795#L481_T0_inittrue [2223] L481_T0_init-->L482_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.protocol=v_hdr.ipv4_tunnel.protocol_19}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.protocol] 256#L482_T0_inittrue [1685] L482_T0_init-->L483_T0_init: Formula: (and (<= 0 v_hdr.ipv4_tunnel.protocol_17) (<= v_hdr.ipv4_tunnel.protocol_17 256))  InVars {hdr.ipv4_tunnel.protocol=v_hdr.ipv4_tunnel.protocol_17}  OutVars{hdr.ipv4_tunnel.protocol=v_hdr.ipv4_tunnel.protocol_17}  AuxVars[]  AssignedVars[] 356#L483_T0_inittrue [1783] L483_T0_init-->L484_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.hdrChecksum=v_hdr.ipv4_tunnel.hdrChecksum_11}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.hdrChecksum] 427#L484_T0_inittrue [1857] L484_T0_init-->L485_T0_init: Formula: (and (<= v_hdr.ipv4_tunnel.hdrChecksum_10 65536) (<= 0 v_hdr.ipv4_tunnel.hdrChecksum_10))  InVars {hdr.ipv4_tunnel.hdrChecksum=v_hdr.ipv4_tunnel.hdrChecksum_10}  OutVars{hdr.ipv4_tunnel.hdrChecksum=v_hdr.ipv4_tunnel.hdrChecksum_10}  AuxVars[]  AssignedVars[] 184#L485_T0_inittrue [1614] L485_T0_init-->L486_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.srcAddr=v_hdr.ipv4_tunnel.srcAddr_14}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.srcAddr] 421#L486_T0_inittrue [1851] L486_T0_init-->L487_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.dstAddr=v_hdr.ipv4_tunnel.dstAddr_14}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.dstAddr] 619#L487_T0_inittrue [2051] L487_T0_init-->L488_T0_init: Formula: (not v_hdr.ipv4.valid_26)  InVars {}  OutVars{hdr.ipv4.valid=v_hdr.ipv4.valid_26}  AuxVars[]  AssignedVars[hdr.ipv4.valid] 685#L488_T0_inittrue [2112] L488_T0_init-->L489_T0_init: Formula: (= (store v_emit_26 v_hdr.ipv4_2 false) v_emit_25)  InVars {hdr.ipv4=v_hdr.ipv4_2, emit=v_emit_26}  OutVars{hdr.ipv4=v_hdr.ipv4_2, emit=v_emit_25}  AuxVars[]  AssignedVars[emit] 608#L489_T0_inittrue [2038] L489_T0_init-->L490_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.version=v_hdr.ipv4.version_12}  AuxVars[]  AssignedVars[hdr.ipv4.version] 37#L490_T0_inittrue [1465] L490_T0_init-->L491_T0_init: Formula: (and (<= 0 v_hdr.ipv4.version_10) (<= v_hdr.ipv4.version_10 16))  InVars {hdr.ipv4.version=v_hdr.ipv4.version_10}  OutVars{hdr.ipv4.version=v_hdr.ipv4.version_10}  AuxVars[]  AssignedVars[] 749#L491_T0_inittrue [2181] L491_T0_init-->L492_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.ihl=v_hdr.ipv4.ihl_10}  AuxVars[]  AssignedVars[hdr.ipv4.ihl] 748#L492_T0_inittrue [2179] L492_T0_init-->L493_T0_init: Formula: (and (<= v_hdr.ipv4.ihl_11 16) (<= 0 v_hdr.ipv4.ihl_11))  InVars {hdr.ipv4.ihl=v_hdr.ipv4.ihl_11}  OutVars{hdr.ipv4.ihl=v_hdr.ipv4.ihl_11}  AuxVars[]  AssignedVars[] 805#L493_T0_inittrue [2233] L493_T0_init-->L494_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.diffserv=v_hdr.ipv4.diffserv_12}  AuxVars[]  AssignedVars[hdr.ipv4.diffserv] 650#L494_T0_inittrue [2082] L494_T0_init-->L495_T0_init: Formula: (and (<= v_hdr.ipv4.diffserv_11 256) (<= 0 v_hdr.ipv4.diffserv_11))  InVars {hdr.ipv4.diffserv=v_hdr.ipv4.diffserv_11}  OutVars{hdr.ipv4.diffserv=v_hdr.ipv4.diffserv_11}  AuxVars[]  AssignedVars[] 41#L495_T0_inittrue [1471] L495_T0_init-->L496_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.totalLen=v_hdr.ipv4.totalLen_13}  AuxVars[]  AssignedVars[hdr.ipv4.totalLen] 65#L496_T0_inittrue [1495] L496_T0_init-->L497_T0_init: Formula: (and (<= 0 v_hdr.ipv4.totalLen_15) (<= v_hdr.ipv4.totalLen_15 65536))  InVars {hdr.ipv4.totalLen=v_hdr.ipv4.totalLen_15}  OutVars{hdr.ipv4.totalLen=v_hdr.ipv4.totalLen_15}  AuxVars[]  AssignedVars[] 329#L497_T0_inittrue [1755] L497_T0_init-->L498_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.identification=v_hdr.ipv4.identification_11}  AuxVars[]  AssignedVars[hdr.ipv4.identification] 643#L498_T0_inittrue [2076] L498_T0_init-->L499_T0_init: Formula: (and (<= 0 v_hdr.ipv4.identification_13) (<= v_hdr.ipv4.identification_13 65536))  InVars {hdr.ipv4.identification=v_hdr.ipv4.identification_13}  OutVars{hdr.ipv4.identification=v_hdr.ipv4.identification_13}  AuxVars[]  AssignedVars[] 240#L499_T0_inittrue [1671] L499_T0_init-->L500_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.flags=v_hdr.ipv4.flags_11}  AuxVars[]  AssignedVars[hdr.ipv4.flags] 568#L500_T0_inittrue [1997] L500_T0_init-->L501_T0_init: Formula: (and (<= 0 v_hdr.ipv4.flags_10) (<= v_hdr.ipv4.flags_10 8))  InVars {hdr.ipv4.flags=v_hdr.ipv4.flags_10}  OutVars{hdr.ipv4.flags=v_hdr.ipv4.flags_10}  AuxVars[]  AssignedVars[] 666#L501_T0_inittrue [2095] L501_T0_init-->L502_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.fragOffset=v_hdr.ipv4.fragOffset_11}  AuxVars[]  AssignedVars[hdr.ipv4.fragOffset] 592#L502_T0_inittrue [2022] L502_T0_init-->L503_T0_init: Formula: (and (<= 0 v_hdr.ipv4.fragOffset_12) (<= v_hdr.ipv4.fragOffset_12 8192))  InVars {hdr.ipv4.fragOffset=v_hdr.ipv4.fragOffset_12}  OutVars{hdr.ipv4.fragOffset=v_hdr.ipv4.fragOffset_12}  AuxVars[]  AssignedVars[] 533#L503_T0_inittrue [1964] L503_T0_init-->L504_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.ttl=v_hdr.ipv4.ttl_12}  AuxVars[]  AssignedVars[hdr.ipv4.ttl] 398#L504_T0_inittrue [1828] L504_T0_init-->L505_T0_init: Formula: (and (<= v_hdr.ipv4.ttl_11 256) (<= 0 v_hdr.ipv4.ttl_11))  InVars {hdr.ipv4.ttl=v_hdr.ipv4.ttl_11}  OutVars{hdr.ipv4.ttl=v_hdr.ipv4.ttl_11}  AuxVars[]  AssignedVars[] 34#L505_T0_inittrue [1463] L505_T0_init-->L506_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.protocol=v_hdr.ipv4.protocol_13}  AuxVars[]  AssignedVars[hdr.ipv4.protocol] 647#L506_T0_inittrue [2080] L506_T0_init-->L507_T0_init: Formula: (and (<= 0 v_hdr.ipv4.protocol_12) (<= v_hdr.ipv4.protocol_12 256))  InVars {hdr.ipv4.protocol=v_hdr.ipv4.protocol_12}  OutVars{hdr.ipv4.protocol=v_hdr.ipv4.protocol_12}  AuxVars[]  AssignedVars[] 431#L507_T0_inittrue [1861] L507_T0_init-->L508_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.hdrChecksum=v_hdr.ipv4.hdrChecksum_11}  AuxVars[]  AssignedVars[hdr.ipv4.hdrChecksum] 578#L508_T0_inittrue [2008] L508_T0_init-->L509_T0_init: Formula: (and (<= 0 v_hdr.ipv4.hdrChecksum_9) (<= v_hdr.ipv4.hdrChecksum_9 65536))  InVars {hdr.ipv4.hdrChecksum=v_hdr.ipv4.hdrChecksum_9}  OutVars{hdr.ipv4.hdrChecksum=v_hdr.ipv4.hdrChecksum_9}  AuxVars[]  AssignedVars[] 777#L509_T0_inittrue [2205] L509_T0_init-->L510_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.srcAddr=v_hdr.ipv4.srcAddr_10}  AuxVars[]  AssignedVars[hdr.ipv4.srcAddr] 77#L510_T0_inittrue [1507] L510_T0_init-->L511_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_14}  AuxVars[]  AssignedVars[hdr.ipv4.dstAddr] 351#L511_T0_inittrue [1777] L511_T0_init-->L512_T0_init: Formula: (= v_hdr.ipv4.dstAddr_13 v__old_hdr.ipv4.dstAddr_11)  InVars {hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_13}  OutVars{_old_hdr.ipv4.dstAddr=v__old_hdr.ipv4.dstAddr_11, hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_13}  AuxVars[]  AssignedVars[_old_hdr.ipv4.dstAddr] 151#L512_T0_inittrue [1579] L512_T0_init-->L513_T0_init: Formula: (= v_hdr.ipv4.dstAddr_12 v__old_hdr.ipv4.dstAddr_10)  InVars {hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_12}  OutVars{_old_hdr.ipv4.dstAddr=v__old_hdr.ipv4.dstAddr_10, hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_12}  AuxVars[]  AssignedVars[_old_hdr.ipv4.dstAddr] 556#L513_T0_inittrue [1986] L513_T0_init-->L514_T0_init: Formula: (not v_hdr.tcp.valid_29)  InVars {}  OutVars{hdr.tcp.valid=v_hdr.tcp.valid_29}  AuxVars[]  AssignedVars[hdr.tcp.valid] 253#L514_T0_inittrue [1682] L514_T0_init-->L515_T0_init: Formula: (= v_emit_33 (store v_emit_34 v_hdr.tcp_2 false))  InVars {hdr.tcp=v_hdr.tcp_2, emit=v_emit_34}  OutVars{hdr.tcp=v_hdr.tcp_2, emit=v_emit_33}  AuxVars[]  AssignedVars[emit] 315#L515_T0_inittrue [1741] L515_T0_init-->L516_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.srcport=v_hdr.tcp.srcport_12}  AuxVars[]  AssignedVars[hdr.tcp.srcport] 631#L516_T0_inittrue [2063] L516_T0_init-->L517_T0_init: Formula: (and (<= v_hdr.tcp.srcport_9 65536) (<= 0 v_hdr.tcp.srcport_9))  InVars {hdr.tcp.srcport=v_hdr.tcp.srcport_9}  OutVars{hdr.tcp.srcport=v_hdr.tcp.srcport_9}  AuxVars[]  AssignedVars[] 374#L517_T0_inittrue [1801] L517_T0_init-->L518_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.dstport=v_hdr.tcp.dstport_9}  AuxVars[]  AssignedVars[hdr.tcp.dstport] 449#L518_T0_inittrue [1879] L518_T0_init-->L519_T0_init: Formula: (and (<= v_hdr.tcp.dstport_10 65536) (<= 0 v_hdr.tcp.dstport_10))  InVars {hdr.tcp.dstport=v_hdr.tcp.dstport_10}  OutVars{hdr.tcp.dstport=v_hdr.tcp.dstport_10}  AuxVars[]  AssignedVars[] 254#L519_T0_inittrue [1683] L519_T0_init-->L520_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.sequence=v_hdr.tcp.sequence_43}  AuxVars[]  AssignedVars[hdr.tcp.sequence] 111#L520_T0_inittrue [1541] L520_T0_init-->L521_T0_init: Formula: (and (<= v_hdr.tcp.sequence_44 4294967296) (<= 0 v_hdr.tcp.sequence_44))  InVars {hdr.tcp.sequence=v_hdr.tcp.sequence_44}  OutVars{hdr.tcp.sequence=v_hdr.tcp.sequence_44}  AuxVars[]  AssignedVars[] 266#L521_T0_inittrue [1694] L521_T0_init-->L522_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.ackseq=v_hdr.tcp.ackseq_43}  AuxVars[]  AssignedVars[hdr.tcp.ackseq] 591#L522_T0_inittrue [2020] L522_T0_init-->L523_T0_init: Formula: (and (<= v_hdr.tcp.ackseq_44 4294967296) (<= 0 v_hdr.tcp.ackseq_44))  InVars {hdr.tcp.ackseq=v_hdr.tcp.ackseq_44}  OutVars{hdr.tcp.ackseq=v_hdr.tcp.ackseq_44}  AuxVars[]  AssignedVars[] 160#L523_T0_inittrue [1588] L523_T0_init-->L524_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.headerlength=v_hdr.tcp.headerlength_11}  AuxVars[]  AssignedVars[hdr.tcp.headerlength] 6#L524_T0_inittrue [1434] L524_T0_init-->L525_T0_init: Formula: (and (<= v_hdr.tcp.headerlength_10 16) (<= 0 v_hdr.tcp.headerlength_10))  InVars {hdr.tcp.headerlength=v_hdr.tcp.headerlength_10}  OutVars{hdr.tcp.headerlength=v_hdr.tcp.headerlength_10}  AuxVars[]  AssignedVars[] 106#L525_T0_inittrue [1536] L525_T0_init-->L526_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.reservation=v_hdr.tcp.reservation_12}  AuxVars[]  AssignedVars[hdr.tcp.reservation] 402#L526_T0_inittrue [1832] L526_T0_init-->L527_T0_init: Formula: (and (<= v_hdr.tcp.reservation_9 64) (<= 0 v_hdr.tcp.reservation_9))  InVars {hdr.tcp.reservation=v_hdr.tcp.reservation_9}  OutVars{hdr.tcp.reservation=v_hdr.tcp.reservation_9}  AuxVars[]  AssignedVars[] 272#L527_T0_inittrue [1700] L527_T0_init-->L528_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.URG=v_hdr.tcp.URG_9}  AuxVars[]  AssignedVars[hdr.tcp.URG] 370#L528_T0_inittrue [1797] L528_T0_init-->L529_T0_init: Formula: (and (<= v_hdr.tcp.URG_12 2) (<= 0 v_hdr.tcp.URG_12))  InVars {hdr.tcp.URG=v_hdr.tcp.URG_12}  OutVars{hdr.tcp.URG=v_hdr.tcp.URG_12}  AuxVars[]  AssignedVars[] 463#L529_T0_inittrue [1892] L529_T0_init-->L530_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.ACK=v_hdr.tcp.ACK_11}  AuxVars[]  AssignedVars[hdr.tcp.ACK] 156#L530_T0_inittrue [1584] L530_T0_init-->L531_T0_init: Formula: (and (<= 0 v_hdr.tcp.ACK_9) (<= v_hdr.tcp.ACK_9 2))  InVars {hdr.tcp.ACK=v_hdr.tcp.ACK_9}  OutVars{hdr.tcp.ACK=v_hdr.tcp.ACK_9}  AuxVars[]  AssignedVars[] 29#L531_T0_inittrue [1458] L531_T0_init-->L532_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.PSH=v_hdr.tcp.PSH_11}  AuxVars[]  AssignedVars[hdr.tcp.PSH] 774#L532_T0_inittrue [2203] L532_T0_init-->L533_T0_init: Formula: (and (<= 0 v_hdr.tcp.PSH_9) (<= v_hdr.tcp.PSH_9 2))  InVars {hdr.tcp.PSH=v_hdr.tcp.PSH_9}  OutVars{hdr.tcp.PSH=v_hdr.tcp.PSH_9}  AuxVars[]  AssignedVars[] 712#L533_T0_inittrue [2141] L533_T0_init-->L534_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.RST=v_hdr.tcp.RST_9}  AuxVars[]  AssignedVars[hdr.tcp.RST] 159#L534_T0_inittrue [1587] L534_T0_init-->L535_T0_init: Formula: (and (<= 0 v_hdr.tcp.RST_11) (<= v_hdr.tcp.RST_11 2))  InVars {hdr.tcp.RST=v_hdr.tcp.RST_11}  OutVars{hdr.tcp.RST=v_hdr.tcp.RST_11}  AuxVars[]  AssignedVars[] 725#L535_T0_inittrue [2154] L535_T0_init-->L536_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.SYN=v_hdr.tcp.SYN_9}  AuxVars[]  AssignedVars[hdr.tcp.SYN] 189#L536_T0_inittrue [1620] L536_T0_init-->L537_T0_init: Formula: (and (<= 0 v_hdr.tcp.SYN_11) (<= v_hdr.tcp.SYN_11 2))  InVars {hdr.tcp.SYN=v_hdr.tcp.SYN_11}  OutVars{hdr.tcp.SYN=v_hdr.tcp.SYN_11}  AuxVars[]  AssignedVars[] 464#L537_T0_inittrue [1893] L537_T0_init-->L538_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.FIN=v_hdr.tcp.FIN_9}  AuxVars[]  AssignedVars[hdr.tcp.FIN] 466#L538_T0_inittrue [1895] L538_T0_init-->L539_T0_init: Formula: (and (<= 0 v_hdr.tcp.FIN_10) (<= v_hdr.tcp.FIN_10 2))  InVars {hdr.tcp.FIN=v_hdr.tcp.FIN_10}  OutVars{hdr.tcp.FIN=v_hdr.tcp.FIN_10}  AuxVars[]  AssignedVars[] 784#L539_T0_inittrue [2212] L539_T0_init-->L540_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.windowsize=v_hdr.tcp.windowsize_10}  AuxVars[]  AssignedVars[hdr.tcp.windowsize] 509#L540_T0_inittrue [1939] L540_T0_init-->L541_T0_init: Formula: (and (<= v_hdr.tcp.windowsize_12 65536) (<= 0 v_hdr.tcp.windowsize_12))  InVars {hdr.tcp.windowsize=v_hdr.tcp.windowsize_12}  OutVars{hdr.tcp.windowsize=v_hdr.tcp.windowsize_12}  AuxVars[]  AssignedVars[] 667#L541_T0_inittrue [2096] L541_T0_init-->L542_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.checksum=v_hdr.tcp.checksum_10}  AuxVars[]  AssignedVars[hdr.tcp.checksum] 651#L542_T0_inittrue [2083] L542_T0_init-->L543_T0_init: Formula: (and (<= 0 v_hdr.tcp.checksum_12) (<= v_hdr.tcp.checksum_12 65536))  InVars {hdr.tcp.checksum=v_hdr.tcp.checksum_12}  OutVars{hdr.tcp.checksum=v_hdr.tcp.checksum_12}  AuxVars[]  AssignedVars[] 656#L543_T0_inittrue [2088] L543_T0_init-->L544_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.pointer=v_hdr.tcp.pointer_11}  AuxVars[]  AssignedVars[hdr.tcp.pointer] 691#L544_T0_inittrue [2119] L544_T0_init-->L545_T0_init: Formula: (and (<= 0 v_hdr.tcp.pointer_10) (<= v_hdr.tcp.pointer_10 65536))  InVars {hdr.tcp.pointer=v_hdr.tcp.pointer_10}  OutVars{hdr.tcp.pointer=v_hdr.tcp.pointer_10}  AuxVars[]  AssignedVars[] 506#L545_T0_inittrue [1935] L545_T0_init-->L546_T0_init: Formula: (not v_hdr.udp_tunnel.valid_20)  InVars {}  OutVars{hdr.udp_tunnel.valid=v_hdr.udp_tunnel.valid_20}  AuxVars[]  AssignedVars[hdr.udp_tunnel.valid] 800#L546_T0_inittrue [2229] L546_T0_init-->L547_T0_init: Formula: (= v_emit_31 (store v_emit_32 v_hdr.udp_tunnel_9 false))  InVars {emit=v_emit_32, hdr.udp_tunnel=v_hdr.udp_tunnel_9}  OutVars{emit=v_emit_31, hdr.udp_tunnel=v_hdr.udp_tunnel_9}  AuxVars[]  AssignedVars[emit] 518#L547_T0_inittrue [1949] L547_T0_init-->L548_T0_init: Formula: true  InVars {}  OutVars{hdr.udp_tunnel.srcport=v_hdr.udp_tunnel.srcport_16}  AuxVars[]  AssignedVars[hdr.udp_tunnel.srcport] 363#L548_T0_inittrue [1790] L548_T0_init-->L549_T0_init: Formula: (and (<= 0 v_hdr.udp_tunnel.srcport_14) (<= v_hdr.udp_tunnel.srcport_14 65536))  InVars {hdr.udp_tunnel.srcport=v_hdr.udp_tunnel.srcport_14}  OutVars{hdr.udp_tunnel.srcport=v_hdr.udp_tunnel.srcport_14}  AuxVars[]  AssignedVars[] 736#L549_T0_inittrue [2166] L549_T0_init-->L550_T0_init: Formula: true  InVars {}  OutVars{hdr.udp_tunnel.dstport=v_hdr.udp_tunnel.dstport_14}  AuxVars[]  AssignedVars[hdr.udp_tunnel.dstport] 726#L550_T0_inittrue [2155] L550_T0_init-->L551_T0_init: Formula: (and (<= 0 v_hdr.udp_tunnel.dstport_15) (<= v_hdr.udp_tunnel.dstport_15 65536))  InVars {hdr.udp_tunnel.dstport=v_hdr.udp_tunnel.dstport_15}  OutVars{hdr.udp_tunnel.dstport=v_hdr.udp_tunnel.dstport_15}  AuxVars[]  AssignedVars[] 375#L551_T0_inittrue [1802] L551_T0_init-->L552_T0_init: Formula: true  InVars {}  OutVars{hdr.udp_tunnel.userlength=v_hdr.udp_tunnel.userlength_16}  AuxVars[]  AssignedVars[hdr.udp_tunnel.userlength] 64#L552_T0_inittrue [1494] L552_T0_init-->L553_T0_init: Formula: (and (<= 0 v_hdr.udp_tunnel.userlength_17) (<= v_hdr.udp_tunnel.userlength_17 65536))  InVars {hdr.udp_tunnel.userlength=v_hdr.udp_tunnel.userlength_17}  OutVars{hdr.udp_tunnel.userlength=v_hdr.udp_tunnel.userlength_17}  AuxVars[]  AssignedVars[] 176#L553_T0_inittrue [1607] L553_T0_init-->L554_T0_init: Formula: true  InVars {}  OutVars{hdr.udp_tunnel.checksum=v_hdr.udp_tunnel.checksum_15}  AuxVars[]  AssignedVars[hdr.udp_tunnel.checksum] 52#L554_T0_inittrue [1482] L554_T0_init-->havocProcedureFINAL_T0_init: Formula: (and (<= v_hdr.udp_tunnel.checksum_14 65536) (<= 0 v_hdr.udp_tunnel.checksum_14))  InVars {hdr.udp_tunnel.checksum=v_hdr.udp_tunnel.checksum_14}  OutVars{hdr.udp_tunnel.checksum=v_hdr.udp_tunnel.checksum_14}  AuxVars[]  AssignedVars[] 755#havocProcedureFINAL_T0_inittrue [2184] havocProcedureFINAL_T0_init-->havocProcedureEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 122#havocProcedureEXIT_T0_inittrue >[2294] havocProcedureEXIT_T0_init-->L559-D56: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 213#L559-D56true [1645] L559-D56-->L559_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 134#L559_T0_inittrue [1563] L559_T0_init-->L559_T0_init-D22: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 505#L559_T0_init-D22true [1934] L559_T0_init-D22-->_parser_MyParserENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 152#_parser_MyParserENTRY_T0_inittrue [1580] _parser_MyParserENTRY_T0_init-->_parser_MyParserENTRY_T0_init-D14: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 31#_parser_MyParserENTRY_T0_init-D14true [1461] _parser_MyParserENTRY_T0_init-D14-->startENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 554#startENTRY_T0_inittrue [1983] startENTRY_T0_init-->L727_T0_init: Formula: v_hdr.ethernet.valid_16  InVars {}  OutVars{hdr.ethernet.valid=v_hdr.ethernet.valid_16}  AuxVars[]  AssignedVars[hdr.ethernet.valid] 530#L727_T0_inittrue [1961] L727_T0_init-->L730_T0_init: Formula: (not (= v_hdr.ethernet.etherType_35 34525))  InVars {hdr.ethernet.etherType=v_hdr.ethernet.etherType_35}  OutVars{hdr.ethernet.etherType=v_hdr.ethernet.etherType_35}  AuxVars[]  AssignedVars[] 575#L730_T0_inittrue [2005] L730_T0_init-->L730-1_T0_init: Formula: (not (= v_hdr.ethernet.etherType_37 2048))  InVars {hdr.ethernet.etherType=v_hdr.ethernet.etherType_37}  OutVars{hdr.ethernet.etherType=v_hdr.ethernet.etherType_37}  AuxVars[]  AssignedVars[] 454#L730-1_T0_inittrue [1883] L730-1_T0_init-->startEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 150#startEXIT_T0_inittrue >[2245] startEXIT_T0_init-->_parser_MyParserFINAL-D66: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 207#_parser_MyParserFINAL-D66true [1638] _parser_MyParserFINAL-D66-->_parser_MyParserFINAL_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 532#_parser_MyParserFINAL_T0_inittrue [1963] _parser_MyParserFINAL_T0_init-->_parser_MyParserEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 649#_parser_MyParserEXIT_T0_inittrue >[2284] _parser_MyParserEXIT_T0_init-->L560-D104: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 791#L560-D104true [2220] L560-D104-->L560_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 100#L560_T0_inittrue [1530] L560_T0_init-->L560_T0_init-D16: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 541#L560_T0_init-D16true [1972] L560_T0_init-D16-->MyVerifyChecksumFINAL_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 456#MyVerifyChecksumFINAL_T0_inittrue [1885] MyVerifyChecksumFINAL_T0_init-->MyVerifyChecksumEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 441#MyVerifyChecksumEXIT_T0_inittrue >[2283] MyVerifyChecksumEXIT_T0_init-->L561-D74: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 403#L561-D74true [1833] L561-D74-->L561_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 345#L561_T0_inittrue [1771] L561_T0_init-->L561_T0_init-D6: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 250#L561_T0_init-D6true [1680] L561_T0_init-D6-->MyIngressENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 208#MyIngressENTRY_T0_inittrue [1639] MyIngressENTRY_T0_init-->L259_T0_init: Formula: (= v_standard_metadata.ingress_port_17 0)  InVars {standard_metadata.ingress_port=v_standard_metadata.ingress_port_17}  OutVars{standard_metadata.ingress_port=v_standard_metadata.ingress_port_17}  AuxVars[]  AssignedVars[] 366#L259_T0_inittrue [1794] L259_T0_init-->L266_T0_init: Formula: (not (= v_hdr.ipv4.dstAddr_19 2071690107))  InVars {hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_19}  OutVars{hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_19}  AuxVars[]  AssignedVars[] 617#L266_T0_inittrue [2049] L266_T0_init-->L258_T0_init: Formula: (or (= v_hdr.ethernet.srcAddr_31 0) (= 281474976710655 v_hdr.ethernet.dstAddr_40))  InVars {hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_31, hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_40}  OutVars{hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_31, hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_40}  AuxVars[]  AssignedVars[] 775#L258_T0_inittrue [2204] L258_T0_init-->MyIngressEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 241#MyIngressEXIT_T0_inittrue >[2287] MyIngressEXIT_T0_init-->L562-D108: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 269#L562-D108true [1699] L562-D108-->L562_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 560#L562_T0_inittrue [1989] L562_T0_init-->L562_T0_init-D50: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 173#L562_T0_init-D50true [1602] L562_T0_init-D50-->MyEgressENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 185#MyEgressENTRY_T0_inittrue [1617] MyEgressENTRY_T0_init-->L249_T0_init: Formula: (or (not (= 0 v_standard_metadata.egress_port_34)) (not v_hdr.tcp.valid_32))  InVars {standard_metadata.egress_port=v_standard_metadata.egress_port_34, hdr.tcp.valid=v_hdr.tcp.valid_32}  OutVars{standard_metadata.egress_port=v_standard_metadata.egress_port_34, hdr.tcp.valid=v_hdr.tcp.valid_32}  AuxVars[]  AssignedVars[] 188#L249_T0_inittrue [1619] L249_T0_init-->MyEgressEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 551#MyEgressEXIT_T0_inittrue >[2308] MyEgressEXIT_T0_init-->L563-D90: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 192#L563-D90true [1623] L563-D90-->L563_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 410#L563_T0_inittrue [1840] L563_T0_init-->L563_T0_init-D32: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 719#L563_T0_init-D32true [2149] L563_T0_init-D32-->MyComputeChecksumFINAL_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 497#MyComputeChecksumFINAL_T0_inittrue [1927] MyComputeChecksumFINAL_T0_init-->MyComputeChecksumEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 215#MyComputeChecksumEXIT_T0_inittrue >[2341] MyComputeChecksumEXIT_T0_init-->L564-D110: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 67#L564-D110true [1498] L564-D110-->L564_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 489#L564_T0_inittrue [1919] L564_T0_init-->L565-1_T0_init: Formula: v_forward_30  InVars {forward=v_forward_30}  OutVars{forward=v_forward_30}  AuxVars[]  AssignedVars[] 499#L565-1_T0_inittrue [1928] L565-1_T0_init-->L569_T0_init: Formula: (let ((.cse0 (= v__old_hdr.ethernet.srcAddr_14 0))) (or (and v__p4ltl_0_6 (not .cse0)) (and (not v__p4ltl_0_6) .cse0)))  InVars {_old_hdr.ethernet.srcAddr=v__old_hdr.ethernet.srcAddr_14}  OutVars{_p4ltl_0=v__p4ltl_0_6, _old_hdr.ethernet.srcAddr=v__old_hdr.ethernet.srcAddr_14}  AuxVars[]  AssignedVars[_p4ltl_0] 346#L569_T0_inittrue [1772] L569_T0_init-->L570_T0_init: Formula: (let ((.cse0 (= 2071690107 v__old_hdr.ipv4.dstAddr_14))) (or (and v__p4ltl_1_6 (not .cse0)) (and .cse0 (not v__p4ltl_1_6))))  InVars {_old_hdr.ipv4.dstAddr=v__old_hdr.ipv4.dstAddr_14}  OutVars{_old_hdr.ipv4.dstAddr=v__old_hdr.ipv4.dstAddr_14, _p4ltl_1=v__p4ltl_1_6}  AuxVars[]  AssignedVars[_p4ltl_1] 11#L570_T0_inittrue [1440] L570_T0_init-->L571_T0_init: Formula: (let ((.cse0 (= 281474976710655 v__old_hdr.ethernet.dstAddr_15))) (or (and v__p4ltl_2_7 (not .cse0)) (and (not v__p4ltl_2_7) .cse0)))  InVars {_old_hdr.ethernet.dstAddr=v__old_hdr.ethernet.dstAddr_15}  OutVars{_p4ltl_2=v__p4ltl_2_7, _old_hdr.ethernet.dstAddr=v__old_hdr.ethernet.dstAddr_15}  AuxVars[]  AssignedVars[_p4ltl_2] 480#L571_T0_inittrue [1910] L571_T0_init-->mainFINAL_T0_init: Formula: (let ((.cse0 (= v_standard_metadata.ingress_port_19 0))) (or (and v__p4ltl_3_6 .cse0) (and (not .cse0) (not v__p4ltl_3_6))))  InVars {standard_metadata.ingress_port=v_standard_metadata.ingress_port_19}  OutVars{standard_metadata.ingress_port=v_standard_metadata.ingress_port_19, _p4ltl_3=v__p4ltl_3_6}  AuxVars[]  AssignedVars[_p4ltl_3] 588#mainFINAL_T0_inittrue [2017] mainFINAL_T0_init-->mainEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 603#mainEXIT_T0_inittrue >[2277] mainEXIT_T0_init-->L577-1-D72: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 380#L577-1-D72true [1809] L577-1-D72-->L577-1_accept_S1: Formula: (and v__p4ltl_1_9 v__p4ltl_0_9 v__p4ltl_3_9 v__p4ltl_2_9 (or (not v__p4ltl_3_9) (not v__p4ltl_1_9) (= 1 v_standard_metadata.egress_port_30) (not v__p4ltl_2_9) (not v__p4ltl_0_9)))  InVars {_p4ltl_2=v__p4ltl_2_9, standard_metadata.egress_port=v_standard_metadata.egress_port_30, _p4ltl_3=v__p4ltl_3_9, _p4ltl_0=v__p4ltl_0_9, _p4ltl_1=v__p4ltl_1_9}  OutVars{_p4ltl_2=v__p4ltl_2_9, standard_metadata.egress_port=v_standard_metadata.egress_port_30, _p4ltl_3=v__p4ltl_3_9, _p4ltl_0=v__p4ltl_0_9, _p4ltl_1=v__p4ltl_1_9}  AuxVars[]  AssignedVars[] 58#L577-1_accept_S1true 
[2023-01-16 05:55:27,312 INFO  L754   eck$LassoCheckResult]: Loop: 58#L577-1_accept_S1true [1488] L577-1_accept_S1-->L577_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 310#L577_accept_S1true [1736] L577_accept_S1-->L577_accept_S1-D53: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 426#L577_accept_S1-D53true [1856] L577_accept_S1-D53-->mainENTRY_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 559#mainENTRY_accept_S1true [1988] mainENTRY_accept_S1-->mainENTRY_accept_S1-D39: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 522#mainENTRY_accept_S1-D39true [1953] mainENTRY_accept_S1-D39-->havocProcedureENTRY_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 672#havocProcedureENTRY_accept_S1true [2101] havocProcedureENTRY_accept_S1-->L421_accept_S1: Formula: (not v_drop_11)  InVars {}  OutVars{drop=v_drop_11}  AuxVars[]  AssignedVars[drop] 525#L421_accept_S1true [1955] L421_accept_S1-->L422_accept_S1: Formula: (not v_forward_18)  InVars {}  OutVars{forward=v_forward_18}  AuxVars[]  AssignedVars[forward] 535#L422_accept_S1true [1966] L422_accept_S1-->L423_accept_S1: Formula: (= v_standard_metadata.ingress_port_13 0)  InVars {}  OutVars{standard_metadata.ingress_port=v_standard_metadata.ingress_port_13}  AuxVars[]  AssignedVars[standard_metadata.ingress_port] 17#L423_accept_S1true [1445] L423_accept_S1-->L424_accept_S1: Formula: (= v_standard_metadata.egress_spec_16 0)  InVars {}  OutVars{standard_metadata.egress_spec=v_standard_metadata.egress_spec_16}  AuxVars[]  AssignedVars[standard_metadata.egress_spec] 274#L424_accept_S1true [1702] L424_accept_S1-->L425_accept_S1: Formula: (= 0 v_standard_metadata.egress_port_17)  InVars {}  OutVars{standard_metadata.egress_port=v_standard_metadata.egress_port_17}  AuxVars[]  AssignedVars[standard_metadata.egress_port] 216#L425_accept_S1true [1647] L425_accept_S1-->L426_accept_S1: Formula: (= v_standard_metadata.instance_type_8 0)  InVars {}  OutVars{standard_metadata.instance_type=v_standard_metadata.instance_type_8}  AuxVars[]  AssignedVars[standard_metadata.instance_type] 388#L426_accept_S1true [1817] L426_accept_S1-->L427_accept_S1: Formula: (= v_standard_metadata.packet_length_9 0)  InVars {}  OutVars{standard_metadata.packet_length=v_standard_metadata.packet_length_9}  AuxVars[]  AssignedVars[standard_metadata.packet_length] 285#L427_accept_S1true [1712] L427_accept_S1-->L428_accept_S1: Formula: (= v_standard_metadata.enq_timestamp_8 0)  InVars {}  OutVars{standard_metadata.enq_timestamp=v_standard_metadata.enq_timestamp_8}  AuxVars[]  AssignedVars[standard_metadata.enq_timestamp] 214#L428_accept_S1true [1646] L428_accept_S1-->L429_accept_S1: Formula: (= v_standard_metadata.enq_qdepth_8 0)  InVars {}  OutVars{standard_metadata.enq_qdepth=v_standard_metadata.enq_qdepth_8}  AuxVars[]  AssignedVars[standard_metadata.enq_qdepth] 678#L429_accept_S1true [2106] L429_accept_S1-->L430_accept_S1: Formula: (= v_standard_metadata.deq_timedelta_8 0)  InVars {}  OutVars{standard_metadata.deq_timedelta=v_standard_metadata.deq_timedelta_8}  AuxVars[]  AssignedVars[standard_metadata.deq_timedelta] 696#L430_accept_S1true [2124] L430_accept_S1-->L431_accept_S1: Formula: (= v_standard_metadata.deq_qdepth_9 0)  InVars {}  OutVars{standard_metadata.deq_qdepth=v_standard_metadata.deq_qdepth_9}  AuxVars[]  AssignedVars[standard_metadata.deq_qdepth] 145#L431_accept_S1true [1575] L431_accept_S1-->L432_accept_S1: Formula: (= v_standard_metadata.ingress_global_timestamp_9 0)  InVars {}  OutVars{standard_metadata.ingress_global_timestamp=v_standard_metadata.ingress_global_timestamp_9}  AuxVars[]  AssignedVars[standard_metadata.ingress_global_timestamp] 3#L432_accept_S1true [1430] L432_accept_S1-->L433_accept_S1: Formula: (= v_standard_metadata.egress_global_timestamp_8 0)  InVars {}  OutVars{standard_metadata.egress_global_timestamp=v_standard_metadata.egress_global_timestamp_8}  AuxVars[]  AssignedVars[standard_metadata.egress_global_timestamp] 731#L433_accept_S1true [2160] L433_accept_S1-->L434_accept_S1: Formula: (= 0 v_standard_metadata.mcast_grp_8)  InVars {}  OutVars{standard_metadata.mcast_grp=v_standard_metadata.mcast_grp_8}  AuxVars[]  AssignedVars[standard_metadata.mcast_grp] 607#L434_accept_S1true [2037] L434_accept_S1-->L435_accept_S1: Formula: (= v_standard_metadata.egress_rid_8 0)  InVars {}  OutVars{standard_metadata.egress_rid=v_standard_metadata.egress_rid_8}  AuxVars[]  AssignedVars[standard_metadata.egress_rid] 359#L435_accept_S1true [1784] L435_accept_S1-->L436_accept_S1: Formula: (= v_standard_metadata.checksum_error_9 0)  InVars {}  OutVars{standard_metadata.checksum_error=v_standard_metadata.checksum_error_9}  AuxVars[]  AssignedVars[standard_metadata.checksum_error] 423#L436_accept_S1true [1853] L436_accept_S1-->L437_accept_S1: Formula: (= v_standard_metadata.priority_8 0)  InVars {}  OutVars{standard_metadata.priority=v_standard_metadata.priority_8}  AuxVars[]  AssignedVars[standard_metadata.priority] 301#L437_accept_S1true [1728] L437_accept_S1-->L438_accept_S1: Formula: (not v_hdr.ethernet.valid_13)  InVars {}  OutVars{hdr.ethernet.valid=v_hdr.ethernet.valid_13}  AuxVars[]  AssignedVars[hdr.ethernet.valid] 394#L438_accept_S1true [1824] L438_accept_S1-->L439_accept_S1: Formula: (= v_emit_23 (store v_emit_24 v_hdr.ethernet_2 false))  InVars {emit=v_emit_24, hdr.ethernet=v_hdr.ethernet_2}  OutVars{emit=v_emit_23, hdr.ethernet=v_hdr.ethernet_2}  AuxVars[]  AssignedVars[emit] 447#L439_accept_S1true [1875] L439_accept_S1-->L440_accept_S1: Formula: true  InVars {}  OutVars{hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_25}  AuxVars[]  AssignedVars[hdr.ethernet.dstAddr] 142#L440_accept_S1true [1571] L440_accept_S1-->L441_accept_S1: Formula: (= v_hdr.ethernet.dstAddr_27 v__old_hdr.ethernet.dstAddr_11)  InVars {hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_27}  OutVars{_old_hdr.ethernet.dstAddr=v__old_hdr.ethernet.dstAddr_11, hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_27}  AuxVars[]  AssignedVars[_old_hdr.ethernet.dstAddr] 594#L441_accept_S1true [2023] L441_accept_S1-->L442_accept_S1: Formula: (= v_hdr.ethernet.dstAddr_30 v__old_hdr.ethernet.dstAddr_13)  InVars {hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_30}  OutVars{_old_hdr.ethernet.dstAddr=v__old_hdr.ethernet.dstAddr_13, hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_30}  AuxVars[]  AssignedVars[_old_hdr.ethernet.dstAddr] 244#L442_accept_S1true [1674] L442_accept_S1-->L443_accept_S1: Formula: true  InVars {}  OutVars{hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_22}  AuxVars[]  AssignedVars[hdr.ethernet.srcAddr] 738#L443_accept_S1true [2168] L443_accept_S1-->L444_accept_S1: Formula: (= v_hdr.ethernet.srcAddr_27 v__old_hdr.ethernet.srcAddr_13)  InVars {hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_27}  OutVars{hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_27, _old_hdr.ethernet.srcAddr=v__old_hdr.ethernet.srcAddr_13}  AuxVars[]  AssignedVars[_old_hdr.ethernet.srcAddr] 139#L444_accept_S1true [1568] L444_accept_S1-->L445_accept_S1: Formula: (= v_hdr.ethernet.srcAddr_24 v__old_hdr.ethernet.srcAddr_11)  InVars {hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_24}  OutVars{hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_24, _old_hdr.ethernet.srcAddr=v__old_hdr.ethernet.srcAddr_11}  AuxVars[]  AssignedVars[_old_hdr.ethernet.srcAddr] 740#L445_accept_S1true [2169] L445_accept_S1-->L446_accept_S1: Formula: true  InVars {}  OutVars{hdr.ethernet.etherType=v_hdr.ethernet.etherType_23}  AuxVars[]  AssignedVars[hdr.ethernet.etherType] 217#L446_accept_S1true [1648] L446_accept_S1-->L447_accept_S1: Formula: (and (<= 0 v_hdr.ethernet.etherType_25) (<= v_hdr.ethernet.etherType_25 65536))  InVars {hdr.ethernet.etherType=v_hdr.ethernet.etherType_25}  OutVars{hdr.ethernet.etherType=v_hdr.ethernet.etherType_25}  AuxVars[]  AssignedVars[] 693#L447_accept_S1true [2121] L447_accept_S1-->L448_accept_S1: Formula: (not v_hdr.ipv6.valid_17)  InVars {}  OutVars{hdr.ipv6.valid=v_hdr.ipv6.valid_17}  AuxVars[]  AssignedVars[hdr.ipv6.valid] 443#L448_accept_S1true [1871] L448_accept_S1-->L449_accept_S1: Formula: (= (store v_emit_20 v_hdr.ipv6_9 false) v_emit_19)  InVars {emit=v_emit_20, hdr.ipv6=v_hdr.ipv6_9}  OutVars{emit=v_emit_19, hdr.ipv6=v_hdr.ipv6_9}  AuxVars[]  AssignedVars[emit] 436#L449_accept_S1true [1865] L449_accept_S1-->L450_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv6.version=v_hdr.ipv6.version_18}  AuxVars[]  AssignedVars[hdr.ipv6.version] 638#L450_accept_S1true [2071] L450_accept_S1-->L451_accept_S1: Formula: (and (<= v_hdr.ipv6.version_17 16) (<= 0 v_hdr.ipv6.version_17))  InVars {hdr.ipv6.version=v_hdr.ipv6.version_17}  OutVars{hdr.ipv6.version=v_hdr.ipv6.version_17}  AuxVars[]  AssignedVars[] 15#L451_accept_S1true [1443] L451_accept_S1-->L452_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv6.trafclass=v_hdr.ipv6.trafclass_11}  AuxVars[]  AssignedVars[hdr.ipv6.trafclass] 193#L452_accept_S1true [1624] L452_accept_S1-->L453_accept_S1: Formula: (and (<= 0 v_hdr.ipv6.trafclass_10) (<= v_hdr.ipv6.trafclass_10 256))  InVars {hdr.ipv6.trafclass=v_hdr.ipv6.trafclass_10}  OutVars{hdr.ipv6.trafclass=v_hdr.ipv6.trafclass_10}  AuxVars[]  AssignedVars[] 702#L453_accept_S1true [2130] L453_accept_S1-->L454_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv6.flowlabel=v_hdr.ipv6.flowlabel_9}  AuxVars[]  AssignedVars[hdr.ipv6.flowlabel] 763#L454_accept_S1true [2191] L454_accept_S1-->L455_accept_S1: Formula: (and (<= 0 v_hdr.ipv6.flowlabel_10) (<= v_hdr.ipv6.flowlabel_10 1048576))  InVars {hdr.ipv6.flowlabel=v_hdr.ipv6.flowlabel_10}  OutVars{hdr.ipv6.flowlabel=v_hdr.ipv6.flowlabel_10}  AuxVars[]  AssignedVars[] 786#L455_accept_S1true [2213] L455_accept_S1-->L456_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv6.payloadlen=v_hdr.ipv6.payloadlen_19}  AuxVars[]  AssignedVars[hdr.ipv6.payloadlen] 286#L456_accept_S1true [1713] L456_accept_S1-->L457_accept_S1: Formula: (and (<= v_hdr.ipv6.payloadlen_18 65536) (<= 0 v_hdr.ipv6.payloadlen_18))  InVars {hdr.ipv6.payloadlen=v_hdr.ipv6.payloadlen_18}  OutVars{hdr.ipv6.payloadlen=v_hdr.ipv6.payloadlen_18}  AuxVars[]  AssignedVars[] 230#L457_accept_S1true [1659] L457_accept_S1-->L458_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv6.nextheader=v_hdr.ipv6.nextheader_19}  AuxVars[]  AssignedVars[hdr.ipv6.nextheader] 546#L458_accept_S1true [1976] L458_accept_S1-->L459_accept_S1: Formula: (and (<= 0 v_hdr.ipv6.nextheader_21) (<= v_hdr.ipv6.nextheader_21 256))  InVars {hdr.ipv6.nextheader=v_hdr.ipv6.nextheader_21}  OutVars{hdr.ipv6.nextheader=v_hdr.ipv6.nextheader_21}  AuxVars[]  AssignedVars[] 630#L459_accept_S1true [2062] L459_accept_S1-->L460_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv6.hoplimit=v_hdr.ipv6.hoplimit_19}  AuxVars[]  AssignedVars[hdr.ipv6.hoplimit] 465#L460_accept_S1true [1894] L460_accept_S1-->L461_accept_S1: Formula: (and (<= 0 v_hdr.ipv6.hoplimit_18) (<= v_hdr.ipv6.hoplimit_18 256))  InVars {hdr.ipv6.hoplimit=v_hdr.ipv6.hoplimit_18}  OutVars{hdr.ipv6.hoplimit=v_hdr.ipv6.hoplimit_18}  AuxVars[]  AssignedVars[] 51#L461_accept_S1true [1480] L461_accept_S1-->L462_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv6.srcAddr=v_hdr.ipv6.srcAddr_16}  AuxVars[]  AssignedVars[hdr.ipv6.srcAddr] 616#L462_accept_S1true [2047] L462_accept_S1-->L463_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv6.dstAddr=v_hdr.ipv6.dstAddr_17}  AuxVars[]  AssignedVars[hdr.ipv6.dstAddr] 28#L463_accept_S1true [1457] L463_accept_S1-->L464_accept_S1: Formula: (not v_hdr.ipv4_tunnel.valid_19)  InVars {}  OutVars{hdr.ipv4_tunnel.valid=v_hdr.ipv4_tunnel.valid_19}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.valid] 116#L464_accept_S1true [1546] L464_accept_S1-->L465_accept_S1: Formula: (= v_emit_37 (store v_emit_38 v_hdr.ipv4_tunnel_9 false))  InVars {emit=v_emit_38, hdr.ipv4_tunnel=v_hdr.ipv4_tunnel_9}  OutVars{emit=v_emit_37, hdr.ipv4_tunnel=v_hdr.ipv4_tunnel_9}  AuxVars[]  AssignedVars[emit] 620#L465_accept_S1true [2053] L465_accept_S1-->L466_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.version=v_hdr.ipv4_tunnel.version_14}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.version] 417#L466_accept_S1true [1847] L466_accept_S1-->L467_accept_S1: Formula: (and (<= v_hdr.ipv4_tunnel.version_15 16) (<= 0 v_hdr.ipv4_tunnel.version_15))  InVars {hdr.ipv4_tunnel.version=v_hdr.ipv4_tunnel.version_15}  OutVars{hdr.ipv4_tunnel.version=v_hdr.ipv4_tunnel.version_15}  AuxVars[]  AssignedVars[] 50#L467_accept_S1true [1479] L467_accept_S1-->L468_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.ihl=v_hdr.ipv4_tunnel.ihl_17}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.ihl] 751#L468_accept_S1true [2182] L468_accept_S1-->L469_accept_S1: Formula: (and (<= 0 v_hdr.ipv4_tunnel.ihl_15) (<= v_hdr.ipv4_tunnel.ihl_15 16))  InVars {hdr.ipv4_tunnel.ihl=v_hdr.ipv4_tunnel.ihl_15}  OutVars{hdr.ipv4_tunnel.ihl=v_hdr.ipv4_tunnel.ihl_15}  AuxVars[]  AssignedVars[] 236#L469_accept_S1true [1666] L469_accept_S1-->L470_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.diffserv=v_hdr.ipv4_tunnel.diffserv_17}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.diffserv] 238#L470_accept_S1true [1669] L470_accept_S1-->L471_accept_S1: Formula: (and (<= v_hdr.ipv4_tunnel.diffserv_16 256) (<= 0 v_hdr.ipv4_tunnel.diffserv_16))  InVars {hdr.ipv4_tunnel.diffserv=v_hdr.ipv4_tunnel.diffserv_16}  OutVars{hdr.ipv4_tunnel.diffserv=v_hdr.ipv4_tunnel.diffserv_16}  AuxVars[]  AssignedVars[] 391#L471_accept_S1true [1820] L471_accept_S1-->L472_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.totalLen=v_hdr.ipv4_tunnel.totalLen_17}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.totalLen] 771#L472_accept_S1true [2199] L472_accept_S1-->L473_accept_S1: Formula: (and (<= v_hdr.ipv4_tunnel.totalLen_16 65536) (<= 0 v_hdr.ipv4_tunnel.totalLen_16))  InVars {hdr.ipv4_tunnel.totalLen=v_hdr.ipv4_tunnel.totalLen_16}  OutVars{hdr.ipv4_tunnel.totalLen=v_hdr.ipv4_tunnel.totalLen_16}  AuxVars[]  AssignedVars[] 195#L473_accept_S1true [1626] L473_accept_S1-->L474_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.identification=v_hdr.ipv4_tunnel.identification_15}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.identification] 332#L474_accept_S1true [1757] L474_accept_S1-->L475_accept_S1: Formula: (and (<= v_hdr.ipv4_tunnel.identification_14 65536) (<= 0 v_hdr.ipv4_tunnel.identification_14))  InVars {hdr.ipv4_tunnel.identification=v_hdr.ipv4_tunnel.identification_14}  OutVars{hdr.ipv4_tunnel.identification=v_hdr.ipv4_tunnel.identification_14}  AuxVars[]  AssignedVars[] 614#L475_accept_S1true [2044] L475_accept_S1-->L476_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.flags=v_hdr.ipv4_tunnel.flags_15}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.flags] 114#L476_accept_S1true [1544] L476_accept_S1-->L477_accept_S1: Formula: (and (<= v_hdr.ipv4_tunnel.flags_16 8) (<= 0 v_hdr.ipv4_tunnel.flags_16))  InVars {hdr.ipv4_tunnel.flags=v_hdr.ipv4_tunnel.flags_16}  OutVars{hdr.ipv4_tunnel.flags=v_hdr.ipv4_tunnel.flags_16}  AuxVars[]  AssignedVars[] 225#L477_accept_S1true [1657] L477_accept_S1-->L478_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.fragOffset=v_hdr.ipv4_tunnel.fragOffset_14}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.fragOffset] 113#L478_accept_S1true [1543] L478_accept_S1-->L479_accept_S1: Formula: (and (<= 0 v_hdr.ipv4_tunnel.fragOffset_16) (<= v_hdr.ipv4_tunnel.fragOffset_16 8192))  InVars {hdr.ipv4_tunnel.fragOffset=v_hdr.ipv4_tunnel.fragOffset_16}  OutVars{hdr.ipv4_tunnel.fragOffset=v_hdr.ipv4_tunnel.fragOffset_16}  AuxVars[]  AssignedVars[] 16#L479_accept_S1true [1444] L479_accept_S1-->L480_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.ttl=v_hdr.ipv4_tunnel.ttl_17}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.ttl] 660#L480_accept_S1true [2092] L480_accept_S1-->L481_accept_S1: Formula: (and (<= 0 v_hdr.ipv4_tunnel.ttl_16) (<= v_hdr.ipv4_tunnel.ttl_16 256))  InVars {hdr.ipv4_tunnel.ttl=v_hdr.ipv4_tunnel.ttl_16}  OutVars{hdr.ipv4_tunnel.ttl=v_hdr.ipv4_tunnel.ttl_16}  AuxVars[]  AssignedVars[] 94#L481_accept_S1true [1524] L481_accept_S1-->L482_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.protocol=v_hdr.ipv4_tunnel.protocol_18}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.protocol] 73#L482_accept_S1true [1503] L482_accept_S1-->L483_accept_S1: Formula: (and (<= v_hdr.ipv4_tunnel.protocol_16 256) (<= 0 v_hdr.ipv4_tunnel.protocol_16))  InVars {hdr.ipv4_tunnel.protocol=v_hdr.ipv4_tunnel.protocol_16}  OutVars{hdr.ipv4_tunnel.protocol=v_hdr.ipv4_tunnel.protocol_16}  AuxVars[]  AssignedVars[] 657#L483_accept_S1true [2089] L483_accept_S1-->L484_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.hdrChecksum=v_hdr.ipv4_tunnel.hdrChecksum_9}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.hdrChecksum] 708#L484_accept_S1true [2138] L484_accept_S1-->L485_accept_S1: Formula: (and (<= 0 v_hdr.ipv4_tunnel.hdrChecksum_12) (<= v_hdr.ipv4_tunnel.hdrChecksum_12 65536))  InVars {hdr.ipv4_tunnel.hdrChecksum=v_hdr.ipv4_tunnel.hdrChecksum_12}  OutVars{hdr.ipv4_tunnel.hdrChecksum=v_hdr.ipv4_tunnel.hdrChecksum_12}  AuxVars[]  AssignedVars[] 412#L485_accept_S1true [1842] L485_accept_S1-->L486_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.srcAddr=v_hdr.ipv4_tunnel.srcAddr_13}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.srcAddr] 263#L486_accept_S1true [1691] L486_accept_S1-->L487_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.dstAddr=v_hdr.ipv4_tunnel.dstAddr_13}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.dstAddr] 171#L487_accept_S1true [1600] L487_accept_S1-->L488_accept_S1: Formula: (not v_hdr.ipv4.valid_25)  InVars {}  OutVars{hdr.ipv4.valid=v_hdr.ipv4.valid_25}  AuxVars[]  AssignedVars[hdr.ipv4.valid] 303#L488_accept_S1true [1730] L488_accept_S1-->L489_accept_S1: Formula: (= v_emit_39 (store v_emit_40 v_hdr.ipv4_3 false))  InVars {hdr.ipv4=v_hdr.ipv4_3, emit=v_emit_40}  OutVars{hdr.ipv4=v_hdr.ipv4_3, emit=v_emit_39}  AuxVars[]  AssignedVars[emit] 697#L489_accept_S1true [2125] L489_accept_S1-->L490_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.version=v_hdr.ipv4.version_11}  AuxVars[]  AssignedVars[hdr.ipv4.version] 733#L490_accept_S1true [2162] L490_accept_S1-->L491_accept_S1: Formula: (and (<= 0 v_hdr.ipv4.version_13) (<= v_hdr.ipv4.version_13 16))  InVars {hdr.ipv4.version=v_hdr.ipv4.version_13}  OutVars{hdr.ipv4.version=v_hdr.ipv4.version_13}  AuxVars[]  AssignedVars[] 108#L491_accept_S1true [1538] L491_accept_S1-->L492_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.ihl=v_hdr.ipv4.ihl_12}  AuxVars[]  AssignedVars[hdr.ipv4.ihl] 521#L492_accept_S1true [1952] L492_accept_S1-->L493_accept_S1: Formula: (and (<= 0 v_hdr.ipv4.ihl_9) (<= v_hdr.ipv4.ihl_9 16))  InVars {hdr.ipv4.ihl=v_hdr.ipv4.ihl_9}  OutVars{hdr.ipv4.ihl=v_hdr.ipv4.ihl_9}  AuxVars[]  AssignedVars[] 435#L493_accept_S1true [1864] L493_accept_S1-->L494_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.diffserv=v_hdr.ipv4.diffserv_10}  AuxVars[]  AssignedVars[hdr.ipv4.diffserv] 220#L494_accept_S1true [1650] L494_accept_S1-->L495_accept_S1: Formula: (and (<= v_hdr.ipv4.diffserv_13 256) (<= 0 v_hdr.ipv4.diffserv_13))  InVars {hdr.ipv4.diffserv=v_hdr.ipv4.diffserv_13}  OutVars{hdr.ipv4.diffserv=v_hdr.ipv4.diffserv_13}  AuxVars[]  AssignedVars[] 126#L495_accept_S1true [1555] L495_accept_S1-->L496_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.totalLen=v_hdr.ipv4.totalLen_14}  AuxVars[]  AssignedVars[hdr.ipv4.totalLen] 293#L496_accept_S1true [1721] L496_accept_S1-->L497_accept_S1: Formula: (and (<= 0 v_hdr.ipv4.totalLen_16) (<= v_hdr.ipv4.totalLen_16 65536))  InVars {hdr.ipv4.totalLen=v_hdr.ipv4.totalLen_16}  OutVars{hdr.ipv4.totalLen=v_hdr.ipv4.totalLen_16}  AuxVars[]  AssignedVars[] 789#L497_accept_S1true [2216] L497_accept_S1-->L498_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.identification=v_hdr.ipv4.identification_12}  AuxVars[]  AssignedVars[hdr.ipv4.identification] 550#L498_accept_S1true [1980] L498_accept_S1-->L499_accept_S1: Formula: (and (<= 0 v_hdr.ipv4.identification_10) (<= v_hdr.ipv4.identification_10 65536))  InVars {hdr.ipv4.identification=v_hdr.ipv4.identification_10}  OutVars{hdr.ipv4.identification=v_hdr.ipv4.identification_10}  AuxVars[]  AssignedVars[] 342#L499_accept_S1true [1767] L499_accept_S1-->L500_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.flags=v_hdr.ipv4.flags_12}  AuxVars[]  AssignedVars[hdr.ipv4.flags] 299#L500_accept_S1true [1725] L500_accept_S1-->L501_accept_S1: Formula: (and (<= v_hdr.ipv4.flags_13 8) (<= 0 v_hdr.ipv4.flags_13))  InVars {hdr.ipv4.flags=v_hdr.ipv4.flags_13}  OutVars{hdr.ipv4.flags=v_hdr.ipv4.flags_13}  AuxVars[]  AssignedVars[] 167#L501_accept_S1true [1595] L501_accept_S1-->L502_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.fragOffset=v_hdr.ipv4.fragOffset_13}  AuxVars[]  AssignedVars[hdr.ipv4.fragOffset] 690#L502_accept_S1true [2118] L502_accept_S1-->L503_accept_S1: Formula: (and (<= v_hdr.ipv4.fragOffset_10 8192) (<= 0 v_hdr.ipv4.fragOffset_10))  InVars {hdr.ipv4.fragOffset=v_hdr.ipv4.fragOffset_10}  OutVars{hdr.ipv4.fragOffset=v_hdr.ipv4.fragOffset_10}  AuxVars[]  AssignedVars[] 716#L503_accept_S1true [2145] L503_accept_S1-->L504_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.ttl=v_hdr.ipv4.ttl_10}  AuxVars[]  AssignedVars[hdr.ipv4.ttl] 55#L504_accept_S1true [1483] L504_accept_S1-->L505_accept_S1: Formula: (and (<= v_hdr.ipv4.ttl_13 256) (<= 0 v_hdr.ipv4.ttl_13))  InVars {hdr.ipv4.ttl=v_hdr.ipv4.ttl_13}  OutVars{hdr.ipv4.ttl=v_hdr.ipv4.ttl_13}  AuxVars[]  AssignedVars[] 625#L505_accept_S1true [2057] L505_accept_S1-->L506_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.protocol=v_hdr.ipv4.protocol_11}  AuxVars[]  AssignedVars[hdr.ipv4.protocol] 444#L506_accept_S1true [1872] L506_accept_S1-->L507_accept_S1: Formula: (and (<= 0 v_hdr.ipv4.protocol_14) (<= v_hdr.ipv4.protocol_14 256))  InVars {hdr.ipv4.protocol=v_hdr.ipv4.protocol_14}  OutVars{hdr.ipv4.protocol=v_hdr.ipv4.protocol_14}  AuxVars[]  AssignedVars[] 706#L507_accept_S1true [2135] L507_accept_S1-->L508_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.hdrChecksum=v_hdr.ipv4.hdrChecksum_10}  AuxVars[]  AssignedVars[hdr.ipv4.hdrChecksum] 595#L508_accept_S1true [2024] L508_accept_S1-->L509_accept_S1: Formula: (and (<= v_hdr.ipv4.hdrChecksum_12 65536) (<= 0 v_hdr.ipv4.hdrChecksum_12))  InVars {hdr.ipv4.hdrChecksum=v_hdr.ipv4.hdrChecksum_12}  OutVars{hdr.ipv4.hdrChecksum=v_hdr.ipv4.hdrChecksum_12}  AuxVars[]  AssignedVars[] 491#L509_accept_S1true [1921] L509_accept_S1-->L510_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.srcAddr=v_hdr.ipv4.srcAddr_9}  AuxVars[]  AssignedVars[hdr.ipv4.srcAddr] 796#L510_accept_S1true [2224] L510_accept_S1-->L511_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_15}  AuxVars[]  AssignedVars[hdr.ipv4.dstAddr] 228#L511_accept_S1true [1658] L511_accept_S1-->L512_accept_S1: Formula: (= v_hdr.ipv4.dstAddr_17 v__old_hdr.ipv4.dstAddr_13)  InVars {hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_17}  OutVars{_old_hdr.ipv4.dstAddr=v__old_hdr.ipv4.dstAddr_13, hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_17}  AuxVars[]  AssignedVars[_old_hdr.ipv4.dstAddr] 49#L512_accept_S1true [1478] L512_accept_S1-->L513_accept_S1: Formula: (= v_hdr.ipv4.dstAddr_16 v__old_hdr.ipv4.dstAddr_12)  InVars {hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_16}  OutVars{_old_hdr.ipv4.dstAddr=v__old_hdr.ipv4.dstAddr_12, hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_16}  AuxVars[]  AssignedVars[_old_hdr.ipv4.dstAddr] 12#L513_accept_S1true [1439] L513_accept_S1-->L514_accept_S1: Formula: (not v_hdr.tcp.valid_30)  InVars {}  OutVars{hdr.tcp.valid=v_hdr.tcp.valid_30}  AuxVars[]  AssignedVars[hdr.tcp.valid] 754#L514_accept_S1true [2183] L514_accept_S1-->L515_accept_S1: Formula: (= v_emit_35 (store v_emit_36 v_hdr.tcp_3 false))  InVars {hdr.tcp=v_hdr.tcp_3, emit=v_emit_36}  OutVars{hdr.tcp=v_hdr.tcp_3, emit=v_emit_35}  AuxVars[]  AssignedVars[emit] 88#L515_accept_S1true [1518] L515_accept_S1-->L516_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.srcport=v_hdr.tcp.srcport_10}  AuxVars[]  AssignedVars[hdr.tcp.srcport] 437#L516_accept_S1true [1866] L516_accept_S1-->L517_accept_S1: Formula: (and (<= 0 v_hdr.tcp.srcport_11) (<= v_hdr.tcp.srcport_11 65536))  InVars {hdr.tcp.srcport=v_hdr.tcp.srcport_11}  OutVars{hdr.tcp.srcport=v_hdr.tcp.srcport_11}  AuxVars[]  AssignedVars[] 270#L517_accept_S1true [1698] L517_accept_S1-->L518_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.dstport=v_hdr.tcp.dstport_11}  AuxVars[]  AssignedVars[hdr.tcp.dstport] 110#L518_accept_S1true [1540] L518_accept_S1-->L519_accept_S1: Formula: (and (<= v_hdr.tcp.dstport_12 65536) (<= 0 v_hdr.tcp.dstport_12))  InVars {hdr.tcp.dstport=v_hdr.tcp.dstport_12}  OutVars{hdr.tcp.dstport=v_hdr.tcp.dstport_12}  AuxVars[]  AssignedVars[] 759#L519_accept_S1true [2187] L519_accept_S1-->L520_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.sequence=v_hdr.tcp.sequence_41}  AuxVars[]  AssignedVars[hdr.tcp.sequence] 596#L520_accept_S1true [2025] L520_accept_S1-->L521_accept_S1: Formula: (and (<= 0 v_hdr.tcp.sequence_42) (<= v_hdr.tcp.sequence_42 4294967296))  InVars {hdr.tcp.sequence=v_hdr.tcp.sequence_42}  OutVars{hdr.tcp.sequence=v_hdr.tcp.sequence_42}  AuxVars[]  AssignedVars[] 339#L521_accept_S1true [1765] L521_accept_S1-->L522_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.ackseq=v_hdr.tcp.ackseq_42}  AuxVars[]  AssignedVars[hdr.tcp.ackseq] 658#L522_accept_S1true [2090] L522_accept_S1-->L523_accept_S1: Formula: (and (<= v_hdr.tcp.ackseq_41 4294967296) (<= 0 v_hdr.tcp.ackseq_41))  InVars {hdr.tcp.ackseq=v_hdr.tcp.ackseq_41}  OutVars{hdr.tcp.ackseq=v_hdr.tcp.ackseq_41}  AuxVars[]  AssignedVars[] 379#L523_accept_S1true [1807] L523_accept_S1-->L524_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.headerlength=v_hdr.tcp.headerlength_9}  AuxVars[]  AssignedVars[hdr.tcp.headerlength] 428#L524_accept_S1true [1858] L524_accept_S1-->L525_accept_S1: Formula: (and (<= v_hdr.tcp.headerlength_12 16) (<= 0 v_hdr.tcp.headerlength_12))  InVars {hdr.tcp.headerlength=v_hdr.tcp.headerlength_12}  OutVars{hdr.tcp.headerlength=v_hdr.tcp.headerlength_12}  AuxVars[]  AssignedVars[] 115#L525_accept_S1true [1545] L525_accept_S1-->L526_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.reservation=v_hdr.tcp.reservation_10}  AuxVars[]  AssignedVars[hdr.tcp.reservation] 60#L526_accept_S1true [1491] L526_accept_S1-->L527_accept_S1: Formula: (and (<= v_hdr.tcp.reservation_11 64) (<= 0 v_hdr.tcp.reservation_11))  InVars {hdr.tcp.reservation=v_hdr.tcp.reservation_11}  OutVars{hdr.tcp.reservation=v_hdr.tcp.reservation_11}  AuxVars[]  AssignedVars[] 627#L527_accept_S1true [2059] L527_accept_S1-->L528_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.URG=v_hdr.tcp.URG_11}  AuxVars[]  AssignedVars[hdr.tcp.URG] 498#L528_accept_S1true [1926] L528_accept_S1-->L529_accept_S1: Formula: (and (<= v_hdr.tcp.URG_10 2) (<= 0 v_hdr.tcp.URG_10))  InVars {hdr.tcp.URG=v_hdr.tcp.URG_10}  OutVars{hdr.tcp.URG=v_hdr.tcp.URG_10}  AuxVars[]  AssignedVars[] 364#L529_accept_S1true [1791] L529_accept_S1-->L530_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.ACK=v_hdr.tcp.ACK_10}  AuxVars[]  AssignedVars[hdr.tcp.ACK] 611#L530_accept_S1true [2041] L530_accept_S1-->L531_accept_S1: Formula: (and (<= 0 v_hdr.tcp.ACK_12) (<= v_hdr.tcp.ACK_12 2))  InVars {hdr.tcp.ACK=v_hdr.tcp.ACK_12}  OutVars{hdr.tcp.ACK=v_hdr.tcp.ACK_12}  AuxVars[]  AssignedVars[] 571#L531_accept_S1true [2000] L531_accept_S1-->L532_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.PSH=v_hdr.tcp.PSH_10}  AuxVars[]  AssignedVars[hdr.tcp.PSH] 612#L532_accept_S1true [2042] L532_accept_S1-->L533_accept_S1: Formula: (and (<= v_hdr.tcp.PSH_12 2) (<= 0 v_hdr.tcp.PSH_12))  InVars {hdr.tcp.PSH=v_hdr.tcp.PSH_12}  OutVars{hdr.tcp.PSH=v_hdr.tcp.PSH_12}  AuxVars[]  AssignedVars[] 429#L533_accept_S1true [1859] L533_accept_S1-->L534_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.RST=v_hdr.tcp.RST_12}  AuxVars[]  AssignedVars[hdr.tcp.RST] 251#L534_accept_S1true [1679] L534_accept_S1-->L535_accept_S1: Formula: (and (<= v_hdr.tcp.RST_10 2) (<= 0 v_hdr.tcp.RST_10))  InVars {hdr.tcp.RST=v_hdr.tcp.RST_10}  OutVars{hdr.tcp.RST=v_hdr.tcp.RST_10}  AuxVars[]  AssignedVars[] 563#L535_accept_S1true [1993] L535_accept_S1-->L536_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.SYN=v_hdr.tcp.SYN_12}  AuxVars[]  AssignedVars[hdr.tcp.SYN] 133#L536_accept_S1true [1562] L536_accept_S1-->L537_accept_S1: Formula: (and (<= 0 v_hdr.tcp.SYN_10) (<= v_hdr.tcp.SYN_10 2))  InVars {hdr.tcp.SYN=v_hdr.tcp.SYN_10}  OutVars{hdr.tcp.SYN=v_hdr.tcp.SYN_10}  AuxVars[]  AssignedVars[] 540#L537_accept_S1true [1970] L537_accept_S1-->L538_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.FIN=v_hdr.tcp.FIN_12}  AuxVars[]  AssignedVars[hdr.tcp.FIN] 462#L538_accept_S1true [1891] L538_accept_S1-->L539_accept_S1: Formula: (and (<= 0 v_hdr.tcp.FIN_11) (<= v_hdr.tcp.FIN_11 2))  InVars {hdr.tcp.FIN=v_hdr.tcp.FIN_11}  OutVars{hdr.tcp.FIN=v_hdr.tcp.FIN_11}  AuxVars[]  AssignedVars[] 604#L539_accept_S1true [2032] L539_accept_S1-->L540_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.windowsize=v_hdr.tcp.windowsize_11}  AuxVars[]  AssignedVars[hdr.tcp.windowsize] 166#L540_accept_S1true [1594] L540_accept_S1-->L541_accept_S1: Formula: (and (<= 0 v_hdr.tcp.windowsize_9) (<= v_hdr.tcp.windowsize_9 65536))  InVars {hdr.tcp.windowsize=v_hdr.tcp.windowsize_9}  OutVars{hdr.tcp.windowsize=v_hdr.tcp.windowsize_9}  AuxVars[]  AssignedVars[] 232#L541_accept_S1true [1660] L541_accept_S1-->L542_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.checksum=v_hdr.tcp.checksum_11}  AuxVars[]  AssignedVars[hdr.tcp.checksum] 552#L542_accept_S1true [1981] L542_accept_S1-->L543_accept_S1: Formula: (and (<= v_hdr.tcp.checksum_9 65536) (<= 0 v_hdr.tcp.checksum_9))  InVars {hdr.tcp.checksum=v_hdr.tcp.checksum_9}  OutVars{hdr.tcp.checksum=v_hdr.tcp.checksum_9}  AuxVars[]  AssignedVars[] 40#L543_accept_S1true [1468] L543_accept_S1-->L544_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.pointer=v_hdr.tcp.pointer_12}  AuxVars[]  AssignedVars[hdr.tcp.pointer] 44#L544_accept_S1true [1473] L544_accept_S1-->L545_accept_S1: Formula: (and (<= 0 v_hdr.tcp.pointer_9) (<= v_hdr.tcp.pointer_9 65536))  InVars {hdr.tcp.pointer=v_hdr.tcp.pointer_9}  OutVars{hdr.tcp.pointer=v_hdr.tcp.pointer_9}  AuxVars[]  AssignedVars[] 589#L545_accept_S1true [2018] L545_accept_S1-->L546_accept_S1: Formula: (not v_hdr.udp_tunnel.valid_19)  InVars {}  OutVars{hdr.udp_tunnel.valid=v_hdr.udp_tunnel.valid_19}  AuxVars[]  AssignedVars[hdr.udp_tunnel.valid] 186#L546_accept_S1true [1615] L546_accept_S1-->L547_accept_S1: Formula: (= v_emit_21 (store v_emit_22 v_hdr.udp_tunnel_8 false))  InVars {emit=v_emit_22, hdr.udp_tunnel=v_hdr.udp_tunnel_8}  OutVars{emit=v_emit_21, hdr.udp_tunnel=v_hdr.udp_tunnel_8}  AuxVars[]  AssignedVars[emit] 670#L547_accept_S1true [2099] L547_accept_S1-->L548_accept_S1: Formula: true  InVars {}  OutVars{hdr.udp_tunnel.srcport=v_hdr.udp_tunnel.srcport_15}  AuxVars[]  AssignedVars[hdr.udp_tunnel.srcport] 204#L548_accept_S1true [1635] L548_accept_S1-->L549_accept_S1: Formula: (and (<= v_hdr.udp_tunnel.srcport_17 65536) (<= 0 v_hdr.udp_tunnel.srcport_17))  InVars {hdr.udp_tunnel.srcport=v_hdr.udp_tunnel.srcport_17}  OutVars{hdr.udp_tunnel.srcport=v_hdr.udp_tunnel.srcport_17}  AuxVars[]  AssignedVars[] 797#L549_accept_S1true [2225] L549_accept_S1-->L550_accept_S1: Formula: true  InVars {}  OutVars{hdr.udp_tunnel.dstport=v_hdr.udp_tunnel.dstport_17}  AuxVars[]  AssignedVars[hdr.udp_tunnel.dstport] 338#L550_accept_S1true [1764] L550_accept_S1-->L551_accept_S1: Formula: (and (<= v_hdr.udp_tunnel.dstport_16 65536) (<= 0 v_hdr.udp_tunnel.dstport_16))  InVars {hdr.udp_tunnel.dstport=v_hdr.udp_tunnel.dstport_16}  OutVars{hdr.udp_tunnel.dstport=v_hdr.udp_tunnel.dstport_16}  AuxVars[]  AssignedVars[] 673#L551_accept_S1true [2102] L551_accept_S1-->L552_accept_S1: Formula: true  InVars {}  OutVars{hdr.udp_tunnel.userlength=v_hdr.udp_tunnel.userlength_14}  AuxVars[]  AssignedVars[hdr.udp_tunnel.userlength] 542#L552_accept_S1true [1971] L552_accept_S1-->L553_accept_S1: Formula: (and (<= 0 v_hdr.udp_tunnel.userlength_15) (<= v_hdr.udp_tunnel.userlength_15 65536))  InVars {hdr.udp_tunnel.userlength=v_hdr.udp_tunnel.userlength_15}  OutVars{hdr.udp_tunnel.userlength=v_hdr.udp_tunnel.userlength_15}  AuxVars[]  AssignedVars[] 569#L553_accept_S1true [1998] L553_accept_S1-->L554_accept_S1: Formula: true  InVars {}  OutVars{hdr.udp_tunnel.checksum=v_hdr.udp_tunnel.checksum_17}  AuxVars[]  AssignedVars[hdr.udp_tunnel.checksum] 102#L554_accept_S1true [1532] L554_accept_S1-->havocProcedureFINAL_accept_S1: Formula: (and (<= v_hdr.udp_tunnel.checksum_16 65536) (<= 0 v_hdr.udp_tunnel.checksum_16))  InVars {hdr.udp_tunnel.checksum=v_hdr.udp_tunnel.checksum_16}  OutVars{hdr.udp_tunnel.checksum=v_hdr.udp_tunnel.checksum_16}  AuxVars[]  AssignedVars[] 330#havocProcedureFINAL_accept_S1true [1756] havocProcedureFINAL_accept_S1-->havocProcedureEXIT_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 132#havocProcedureEXIT_accept_S1true >[2239] havocProcedureEXIT_accept_S1-->L559-D55: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 635#L559-D55true [2068] L559-D55-->L559_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 30#L559_accept_S1true [1459] L559_accept_S1-->L559_accept_S1-D21: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 703#L559_accept_S1-D21true [2131] L559_accept_S1-D21-->_parser_MyParserENTRY_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 109#_parser_MyParserENTRY_accept_S1true [1539] _parser_MyParserENTRY_accept_S1-->_parser_MyParserENTRY_accept_S1-D13: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 713#_parser_MyParserENTRY_accept_S1-D13true [2142] _parser_MyParserENTRY_accept_S1-D13-->startENTRY_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 333#startENTRY_accept_S1true [1759] startENTRY_accept_S1-->L727_accept_S1: Formula: v_hdr.ethernet.valid_15  InVars {}  OutVars{hdr.ethernet.valid=v_hdr.ethernet.valid_15}  AuxVars[]  AssignedVars[hdr.ethernet.valid] 177#L727_accept_S1true [1606] L727_accept_S1-->L730_accept_S1: Formula: (not (= v_hdr.ethernet.etherType_33 34525))  InVars {hdr.ethernet.etherType=v_hdr.ethernet.etherType_33}  OutVars{hdr.ethernet.etherType=v_hdr.ethernet.etherType_33}  AuxVars[]  AssignedVars[] 450#L730_accept_S1true [1878] L730_accept_S1-->L730-1_accept_S1: Formula: (not (= v_hdr.ethernet.etherType_39 2048))  InVars {hdr.ethernet.etherType=v_hdr.ethernet.etherType_39}  OutVars{hdr.ethernet.etherType=v_hdr.ethernet.etherType_39}  AuxVars[]  AssignedVars[] 112#L730-1_accept_S1true [1542] L730-1_accept_S1-->startEXIT_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 557#startEXIT_accept_S1true >[2261] startEXIT_accept_S1-->_parser_MyParserFINAL-D65: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 127#_parser_MyParserFINAL-D65true [1556] _parser_MyParserFINAL-D65-->_parser_MyParserFINAL_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 128#_parser_MyParserFINAL_accept_S1true [1557] _parser_MyParserFINAL_accept_S1-->_parser_MyParserEXIT_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 487#_parser_MyParserEXIT_accept_S1true >[2247] _parser_MyParserEXIT_accept_S1-->L560-D103: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 528#L560-D103true [1958] L560-D103-->L560_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 599#L560_accept_S1true [2028] L560_accept_S1-->L560_accept_S1-D15: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 750#L560_accept_S1-D15true [2180] L560_accept_S1-D15-->MyVerifyChecksumFINAL_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 271#MyVerifyChecksumFINAL_accept_S1true [1697] MyVerifyChecksumFINAL_accept_S1-->MyVerifyChecksumEXIT_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 752#MyVerifyChecksumEXIT_accept_S1true >[2310] MyVerifyChecksumEXIT_accept_S1-->L561-D73: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 161#L561-D73true [1589] L561-D73-->L561_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 459#L561_accept_S1true [1888] L561_accept_S1-->L561_accept_S1-D5: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 307#L561_accept_S1-D5true [1733] L561_accept_S1-D5-->MyIngressENTRY_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 470#MyIngressENTRY_accept_S1true [1899] MyIngressENTRY_accept_S1-->L259_accept_S1: Formula: (= v_standard_metadata.ingress_port_15 0)  InVars {standard_metadata.ingress_port=v_standard_metadata.ingress_port_15}  OutVars{standard_metadata.ingress_port=v_standard_metadata.ingress_port_15}  AuxVars[]  AssignedVars[] 705#L259_accept_S1true [2134] L259_accept_S1-->L266_accept_S1: Formula: (not (= v_hdr.ipv4.dstAddr_21 2071690107))  InVars {hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_21}  OutVars{hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_21}  AuxVars[]  AssignedVars[] 56#L266_accept_S1true [1486] L266_accept_S1-->L258_accept_S1: Formula: (or (= 281474976710655 v_hdr.ethernet.dstAddr_38) (= v_hdr.ethernet.srcAddr_29 0))  InVars {hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_29, hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_38}  OutVars{hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_29, hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_38}  AuxVars[]  AssignedVars[] 440#L258_accept_S1true [1869] L258_accept_S1-->MyIngressEXIT_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 665#MyIngressEXIT_accept_S1true >[2343] MyIngressEXIT_accept_S1-->L562-D107: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 564#L562-D107true [1992] L562-D107-->L562_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 724#L562_accept_S1true [2153] L562_accept_S1-->L562_accept_S1-D49: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 772#L562_accept_S1-D49true [2198] L562_accept_S1-D49-->MyEgressENTRY_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 75#MyEgressENTRY_accept_S1true [1505] MyEgressENTRY_accept_S1-->L249_accept_S1: Formula: (or (not v_hdr.tcp.valid_34) (not (= 0 v_standard_metadata.egress_port_36)))  InVars {standard_metadata.egress_port=v_standard_metadata.egress_port_36, hdr.tcp.valid=v_hdr.tcp.valid_34}  OutVars{standard_metadata.egress_port=v_standard_metadata.egress_port_36, hdr.tcp.valid=v_hdr.tcp.valid_34}  AuxVars[]  AssignedVars[] 124#L249_accept_S1true [1553] L249_accept_S1-->MyEgressEXIT_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 323#MyEgressEXIT_accept_S1true >[2276] MyEgressEXIT_accept_S1-->L563-D89: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 348#L563-D89true [1774] L563-D89-->L563_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 732#L563_accept_S1true [2161] L563_accept_S1-->L563_accept_S1-D31: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 561#L563_accept_S1-D31true [1990] L563_accept_S1-D31-->MyComputeChecksumFINAL_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 382#MyComputeChecksumFINAL_accept_S1true [1810] MyComputeChecksumFINAL_accept_S1-->MyComputeChecksumEXIT_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 226#MyComputeChecksumEXIT_accept_S1true >[2305] MyComputeChecksumEXIT_accept_S1-->L564-D109: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 485#L564-D109true [1915] L564-D109-->L564_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 555#L564_accept_S1true [1985] L564_accept_S1-->L565-1_accept_S1: Formula: v_forward_32  InVars {forward=v_forward_32}  OutVars{forward=v_forward_32}  AuxVars[]  AssignedVars[] 626#L565-1_accept_S1true [2058] L565-1_accept_S1-->L569_accept_S1: Formula: (let ((.cse0 (= v__old_hdr.ethernet.srcAddr_15 0))) (or (and .cse0 (not v__p4ltl_0_7)) (and v__p4ltl_0_7 (not .cse0))))  InVars {_old_hdr.ethernet.srcAddr=v__old_hdr.ethernet.srcAddr_15}  OutVars{_p4ltl_0=v__p4ltl_0_7, _old_hdr.ethernet.srcAddr=v__old_hdr.ethernet.srcAddr_15}  AuxVars[]  AssignedVars[_p4ltl_0] 196#L569_accept_S1true [1627] L569_accept_S1-->L570_accept_S1: Formula: (let ((.cse0 (= 2071690107 v__old_hdr.ipv4.dstAddr_15))) (or (and v__p4ltl_1_7 (not .cse0)) (and .cse0 (not v__p4ltl_1_7))))  InVars {_old_hdr.ipv4.dstAddr=v__old_hdr.ipv4.dstAddr_15}  OutVars{_old_hdr.ipv4.dstAddr=v__old_hdr.ipv4.dstAddr_15, _p4ltl_1=v__p4ltl_1_7}  AuxVars[]  AssignedVars[_p4ltl_1] 580#L570_accept_S1true [2010] L570_accept_S1-->L571_accept_S1: Formula: (let ((.cse0 (= 281474976710655 v__old_hdr.ethernet.dstAddr_14))) (or (and v__p4ltl_2_6 (not .cse0)) (and .cse0 (not v__p4ltl_2_6))))  InVars {_old_hdr.ethernet.dstAddr=v__old_hdr.ethernet.dstAddr_14}  OutVars{_p4ltl_2=v__p4ltl_2_6, _old_hdr.ethernet.dstAddr=v__old_hdr.ethernet.dstAddr_14}  AuxVars[]  AssignedVars[_p4ltl_2] 615#L571_accept_S1true [2046] L571_accept_S1-->mainFINAL_accept_S1: Formula: (let ((.cse0 (= v_standard_metadata.ingress_port_20 0))) (or (and (not v__p4ltl_3_7) (not .cse0)) (and v__p4ltl_3_7 .cse0)))  InVars {standard_metadata.ingress_port=v_standard_metadata.ingress_port_20}  OutVars{standard_metadata.ingress_port=v_standard_metadata.ingress_port_20, _p4ltl_3=v__p4ltl_3_7}  AuxVars[]  AssignedVars[_p4ltl_3] 373#mainFINAL_accept_S1true [1800] mainFINAL_accept_S1-->mainEXIT_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 661#mainEXIT_accept_S1true >[2336] mainEXIT_accept_S1-->L577-1-D71: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5#L577-1-D71true [1433] L577-1-D71-->L577-1_accept_S1: Formula: (and v__p4ltl_3_11 v__p4ltl_2_11 v__p4ltl_1_11 v__p4ltl_0_11 (or (not v__p4ltl_2_11) (not v__p4ltl_0_11) (not v__p4ltl_3_11) (not v__p4ltl_1_11) (= 1 v_standard_metadata.egress_port_32)))  InVars {_p4ltl_2=v__p4ltl_2_11, standard_metadata.egress_port=v_standard_metadata.egress_port_32, _p4ltl_3=v__p4ltl_3_11, _p4ltl_0=v__p4ltl_0_11, _p4ltl_1=v__p4ltl_1_11}  OutVars{_p4ltl_2=v__p4ltl_2_11, standard_metadata.egress_port=v_standard_metadata.egress_port_32, _p4ltl_3=v__p4ltl_3_11, _p4ltl_0=v__p4ltl_0_11, _p4ltl_1=v__p4ltl_1_11}  AuxVars[]  AssignedVars[] 58#L577-1_accept_S1true 
[2023-01-16 05:55:27,324 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2023-01-16 05:55:27,325 INFO  L85        PathProgramCache]: Analyzing trace with hash -708016358, now seen corresponding path program 1 times
[2023-01-16 05:55:27,341 INFO  L118   FreeRefinementEngine]: Executing refinement strategy CAMEL
[2023-01-16 05:55:27,341 INFO  L333   FreeRefinementEngine]: Using trace check IpTcStrategyModuleSmtInterpolCraig [460804880]
[2023-01-16 05:55:27,342 INFO  L95    rtionOrderModulation]: Keeping assertion order NOT_INCREMENTALLY
[2023-01-16 05:55:27,343 INFO  L127          SolverBuilder]: Constructing new instance of SMTInterpol with explicit timeout -1 ms and remaining time -1 ms
[2023-01-16 05:55:27,481 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-01-16 05:55:27,854 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 2
[2023-01-16 05:55:27,901 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-01-16 05:55:28,360 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 1
[2023-01-16 05:55:28,395 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-01-16 05:55:28,459 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 141
[2023-01-16 05:55:28,463 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-01-16 05:55:28,475 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 1
[2023-01-16 05:55:28,478 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-01-16 05:55:28,482 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 154
[2023-01-16 05:55:28,485 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-01-16 05:55:28,542 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 159
[2023-01-16 05:55:28,549 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-01-16 05:55:28,598 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 167
[2023-01-16 05:55:28,601 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-01-16 05:55:28,605 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 173
[2023-01-16 05:55:28,607 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-01-16 05:55:28,612 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2023-01-16 05:55:28,614 INFO  L136   FreeRefinementEngine]: Strategy CAMEL found an infeasible trace
[2023-01-16 05:55:28,614 INFO  L333   FreeRefinementEngine]: Using interpolant generator IpTcStrategyModuleSmtInterpolCraig [460804880]
[2023-01-16 05:55:28,616 INFO  L157   FreeRefinementEngine]: IpTcStrategyModuleSmtInterpolCraig [460804880] provided 1 perfect and 0 imperfect interpolant sequences
[2023-01-16 05:55:28,617 INFO  L184   FreeRefinementEngine]: Found 1 perfect and 0 imperfect interpolant sequences.
[2023-01-16 05:55:28,617 INFO  L197   FreeRefinementEngine]: Number of different interpolants: perfect sequences [10] imperfect sequences [] total 10
[2023-01-16 05:55:28,621 INFO  L121   tionRefinementEngine]: Using interpolant automaton builder IpAbStrategyModuleStraightlineAll [1272012157]
[2023-01-16 05:55:28,623 INFO  L85    oduleStraightlineAll]: Using 1 perfect interpolants to construct interpolant automaton
[2023-01-16 05:55:28,634 INFO  L757   eck$LassoCheckResult]: stem already infeasible
[2023-01-16 05:55:28,636 INFO  L100   FreeRefinementEngine]: Using predicate unifier PredicateUnifier provided by strategy CAMEL
[2023-01-16 05:55:28,693 INFO  L143   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2023-01-16 05:55:28,695 INFO  L145   InterpolantAutomaton]: CoverageRelationStatistics Valid=29, Invalid=61, Unknown=0, NotChecked=0, Total=90
[2023-01-16 05:55:28,700 INFO  L87              Difference]: Start difference. First operand  has 805 states, 702 states have (on average 1.0484330484330484) internal successors, (736), 696 states have internal predecessors, (736), 55 states have call successors, (55), 55 states have call predecessors, (55), 48 states have return successors, (108), 54 states have call predecessors, (108), 54 states have call successors, (108) Second operand  has 10 states, 10 states have (on average 17.2) internal successors, (172), 4 states have internal predecessors, (172), 2 states have call successors, (9), 7 states have call predecessors, (9), 4 states have return successors, (8), 3 states have call predecessors, (8), 2 states have call successors, (8)
[2023-01-16 05:55:33,562 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2023-01-16 05:55:33,563 INFO  L93              Difference]: Finished difference Result 1057 states and 1115 transitions.
[2023-01-16 05:55:33,566 INFO  L141   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 20 states. 
[2023-01-16 05:55:33,574 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1057 states and 1115 transitions.
[2023-01-16 05:55:33,582 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 12
[2023-01-16 05:55:33,599 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1057 states to 1057 states and 1115 transitions.
[2023-01-16 05:55:33,601 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2023-01-16 05:55:33,601 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 4
[2023-01-16 05:55:33,601 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1057 states and 1115 transitions.
[2023-01-16 05:55:33,607 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2023-01-16 05:55:33,607 INFO  L369   hiAutomatonCegarLoop]: Abstraction has 1057 states and 1115 transitions.
[2023-01-16 05:55:33,635 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1057 states and 1115 transitions.
[2023-01-16 05:55:33,668 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1057 to 987.
[2023-01-16 05:55:33,670 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand  has 987 states, 856 states have (on average 1.0467289719626167) internal successors, (896), 852 states have internal predecessors, (896), 69 states have call successors, (69), 69 states have call predecessors, (69), 62 states have return successors, (70), 66 states have call predecessors, (70), 68 states have call successors, (70)
[2023-01-16 05:55:33,672 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 987 states to 987 states and 1035 transitions.
[2023-01-16 05:55:33,674 INFO  L392   hiAutomatonCegarLoop]: Abstraction has 987 states and 1035 transitions.
[2023-01-16 05:55:33,674 INFO  L399   stractBuchiCegarLoop]: Abstraction has 987 states and 1035 transitions.
[2023-01-16 05:55:33,675 INFO  L287   stractBuchiCegarLoop]: ======== Iteration 2 ============
[2023-01-16 05:55:33,675 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 987 states and 1035 transitions.
[2023-01-16 05:55:33,678 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2023-01-16 05:55:33,678 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2023-01-16 05:55:33,678 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2023-01-16 05:55:33,681 INFO  L179   hiAutomatonCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2023-01-16 05:55:33,681 INFO  L180   hiAutomatonCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2023-01-16 05:55:33,684 INFO  L752   eck$LassoCheckResult]: Stem: 2278#ULTIMATE.startENTRY_NONWA [1500] ULTIMATE.startENTRY_NONWA-->L577-1_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 2279#L577-1_T0_init [1466] L577-1_T0_init-->L577_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2269#L577_T0_init [2074] L577_T0_init-->L577_T0_init-D54: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 3004#L577_T0_init-D54 [1959] L577_T0_init-D54-->mainENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2282#mainENTRY_T0_init [1819] mainENTRY_T0_init-->mainENTRY_T0_init-D40: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 2671#mainENTRY_T0_init-D40 [1649] mainENTRY_T0_init-D40-->havocProcedureENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2656#havocProcedureENTRY_T0_init [1641] havocProcedureENTRY_T0_init-->L421_T0_init: Formula: (not v_drop_12)  InVars {}  OutVars{drop=v_drop_12}  AuxVars[]  AssignedVars[drop] 2657#L421_T0_init [2158] L421_T0_init-->L422_T0_init: Formula: (not v_forward_17)  InVars {}  OutVars{forward=v_forward_17}  AuxVars[]  AssignedVars[forward] 3070#L422_T0_init [2104] L422_T0_init-->L423_T0_init: Formula: (= v_standard_metadata.ingress_port_14 0)  InVars {}  OutVars{standard_metadata.ingress_port=v_standard_metadata.ingress_port_14}  AuxVars[]  AssignedVars[standard_metadata.ingress_port] 2958#L423_T0_init [1901] L423_T0_init-->L424_T0_init: Formula: (= v_standard_metadata.egress_spec_15 0)  InVars {}  OutVars{standard_metadata.egress_spec=v_standard_metadata.egress_spec_15}  AuxVars[]  AssignedVars[standard_metadata.egress_spec] 2959#L424_T0_init [1962] L424_T0_init-->L425_T0_init: Formula: (= 0 v_standard_metadata.egress_port_18)  InVars {}  OutVars{standard_metadata.egress_port=v_standard_metadata.egress_port_18}  AuxVars[]  AssignedVars[standard_metadata.egress_port] 2997#L425_T0_init [1951] L425_T0_init-->L426_T0_init: Formula: (= v_standard_metadata.instance_type_9 0)  InVars {}  OutVars{standard_metadata.instance_type=v_standard_metadata.instance_type_9}  AuxVars[]  AssignedVars[standard_metadata.instance_type] 2761#L426_T0_init [1709] L426_T0_init-->L427_T0_init: Formula: (= v_standard_metadata.packet_length_8 0)  InVars {}  OutVars{standard_metadata.packet_length=v_standard_metadata.packet_length_8}  AuxVars[]  AssignedVars[standard_metadata.packet_length] 2324#L427_T0_init [1453] L427_T0_init-->L428_T0_init: Formula: (= v_standard_metadata.enq_timestamp_9 0)  InVars {}  OutVars{standard_metadata.enq_timestamp=v_standard_metadata.enq_timestamp_9}  AuxVars[]  AssignedVars[standard_metadata.enq_timestamp] 2325#L428_T0_init [1578] L428_T0_init-->L429_T0_init: Formula: (= v_standard_metadata.enq_qdepth_9 0)  InVars {}  OutVars{standard_metadata.enq_qdepth=v_standard_metadata.enq_qdepth_9}  AuxVars[]  AssignedVars[standard_metadata.enq_qdepth] 2558#L429_T0_init [1855] L429_T0_init-->L430_T0_init: Formula: (= v_standard_metadata.deq_timedelta_9 0)  InVars {}  OutVars{standard_metadata.deq_timedelta=v_standard_metadata.deq_timedelta_9}  AuxVars[]  AssignedVars[standard_metadata.deq_timedelta] 2462#L430_T0_init [1521] L430_T0_init-->L431_T0_init: Formula: (= v_standard_metadata.deq_qdepth_8 0)  InVars {}  OutVars{standard_metadata.deq_qdepth=v_standard_metadata.deq_qdepth_8}  AuxVars[]  AssignedVars[standard_metadata.deq_qdepth] 2463#L431_T0_init [1609] L431_T0_init-->L432_T0_init: Formula: (= v_standard_metadata.ingress_global_timestamp_8 0)  InVars {}  OutVars{standard_metadata.ingress_global_timestamp=v_standard_metadata.ingress_global_timestamp_8}  AuxVars[]  AssignedVars[standard_metadata.ingress_global_timestamp] 2606#L432_T0_init [2111] L432_T0_init-->L433_T0_init: Formula: (= v_standard_metadata.egress_global_timestamp_9 0)  InVars {}  OutVars{standard_metadata.egress_global_timestamp=v_standard_metadata.egress_global_timestamp_9}  AuxVars[]  AssignedVars[standard_metadata.egress_global_timestamp] 2841#L433_T0_init [1775] L433_T0_init-->L434_T0_init: Formula: (= 0 v_standard_metadata.mcast_grp_9)  InVars {}  OutVars{standard_metadata.mcast_grp=v_standard_metadata.mcast_grp_9}  AuxVars[]  AssignedVars[standard_metadata.mcast_grp] 2842#L434_T0_init [2007] L434_T0_init-->L435_T0_init: Formula: (= v_standard_metadata.egress_rid_9 0)  InVars {}  OutVars{standard_metadata.egress_rid=v_standard_metadata.egress_rid_9}  AuxVars[]  AssignedVars[standard_metadata.egress_rid] 2435#L435_T0_init [1510] L435_T0_init-->L436_T0_init: Formula: (= v_standard_metadata.checksum_error_8 0)  InVars {}  OutVars{standard_metadata.checksum_error=v_standard_metadata.checksum_error_8}  AuxVars[]  AssignedVars[standard_metadata.checksum_error] 2436#L436_T0_init [2011] L436_T0_init-->L437_T0_init: Formula: (= v_standard_metadata.priority_9 0)  InVars {}  OutVars{standard_metadata.priority=v_standard_metadata.priority_9}  AuxVars[]  AssignedVars[standard_metadata.priority] 2633#L437_T0_init [1628] L437_T0_init-->L438_T0_init: Formula: (not v_hdr.ethernet.valid_14)  InVars {}  OutVars{hdr.ethernet.valid=v_hdr.ethernet.valid_14}  AuxVars[]  AssignedVars[hdr.ethernet.valid] 2582#L438_T0_init [1593] L438_T0_init-->L439_T0_init: Formula: (= v_emit_41 (store v_emit_42 v_hdr.ethernet_3 false))  InVars {emit=v_emit_42, hdr.ethernet=v_hdr.ethernet_3}  OutVars{emit=v_emit_41, hdr.ethernet=v_hdr.ethernet_3}  AuxVars[]  AssignedVars[emit] 2583#L439_T0_init [2186] L439_T0_init-->L440_T0_init: Formula: true  InVars {}  OutVars{hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_28}  AuxVars[]  AssignedVars[hdr.ethernet.dstAddr] 2356#L440_T0_init [1464] L440_T0_init-->L441_T0_init: Formula: (= v_hdr.ethernet.dstAddr_29 v__old_hdr.ethernet.dstAddr_12)  InVars {hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_29}  OutVars{_old_hdr.ethernet.dstAddr=v__old_hdr.ethernet.dstAddr_12, hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_29}  AuxVars[]  AssignedVars[_old_hdr.ethernet.dstAddr] 2357#L441_T0_init [1474] L441_T0_init-->L442_T0_init: Formula: (= v_hdr.ethernet.dstAddr_26 v__old_hdr.ethernet.dstAddr_10)  InVars {hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_26}  OutVars{_old_hdr.ethernet.dstAddr=v__old_hdr.ethernet.dstAddr_10, hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_26}  AuxVars[]  AssignedVars[_old_hdr.ethernet.dstAddr] 2373#L442_T0_init [1747] L442_T0_init-->L443_T0_init: Formula: true  InVars {}  OutVars{hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_26}  AuxVars[]  AssignedVars[hdr.ethernet.srcAddr] 2809#L443_T0_init [1848] L443_T0_init-->L444_T0_init: Formula: (= v_hdr.ethernet.srcAddr_23 v__old_hdr.ethernet.srcAddr_10)  InVars {hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_23}  OutVars{hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_23, _old_hdr.ethernet.srcAddr=v__old_hdr.ethernet.srcAddr_10}  AuxVars[]  AssignedVars[_old_hdr.ethernet.srcAddr] 2728#L444_T0_init [1686] L444_T0_init-->L445_T0_init: Formula: (= v_hdr.ethernet.srcAddr_25 v__old_hdr.ethernet.srcAddr_12)  InVars {hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_25}  OutVars{hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_25, _old_hdr.ethernet.srcAddr=v__old_hdr.ethernet.srcAddr_12}  AuxVars[]  AssignedVars[_old_hdr.ethernet.srcAddr] 2729#L445_T0_init [2211] L445_T0_init-->L446_T0_init: Formula: true  InVars {}  OutVars{hdr.ethernet.etherType=v_hdr.ethernet.etherType_24}  AuxVars[]  AssignedVars[hdr.ethernet.etherType] 3058#L446_T0_init [2078] L446_T0_init-->L447_T0_init: Formula: (and (<= 0 v_hdr.ethernet.etherType_22) (<= v_hdr.ethernet.etherType_22 65536))  InVars {hdr.ethernet.etherType=v_hdr.ethernet.etherType_22}  OutVars{hdr.ethernet.etherType=v_hdr.ethernet.etherType_22}  AuxVars[]  AssignedVars[] 2795#L447_T0_init [1735] L447_T0_init-->L448_T0_init: Formula: (not v_hdr.ipv6.valid_18)  InVars {}  OutVars{hdr.ipv6.valid=v_hdr.ipv6.valid_18}  AuxVars[]  AssignedVars[hdr.ipv6.valid] 2796#L448_T0_init [1792] L448_T0_init-->L449_T0_init: Formula: (= v_emit_27 (store v_emit_28 v_hdr.ipv6_10 false))  InVars {emit=v_emit_28, hdr.ipv6=v_hdr.ipv6_10}  OutVars{emit=v_emit_27, hdr.ipv6=v_hdr.ipv6_10}  AuxVars[]  AssignedVars[emit] 2861#L449_T0_init [2175] L449_T0_init-->L450_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv6.version=v_hdr.ipv6.version_19}  AuxVars[]  AssignedVars[hdr.ipv6.version] 2712#L450_T0_init [1676] L450_T0_init-->L451_T0_init: Formula: (and (<= v_hdr.ipv6.version_20 16) (<= 0 v_hdr.ipv6.version_20))  InVars {hdr.ipv6.version=v_hdr.ipv6.version_20}  OutVars{hdr.ipv6.version=v_hdr.ipv6.version_20}  AuxVars[]  AssignedVars[] 2713#L451_T0_init [2109] L451_T0_init-->L452_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv6.trafclass=v_hdr.ipv6.trafclass_9}  AuxVars[]  AssignedVars[hdr.ipv6.trafclass] 2967#L452_T0_init [1912] L452_T0_init-->L453_T0_init: Formula: (and (<= v_hdr.ipv6.trafclass_12 256) (<= 0 v_hdr.ipv6.trafclass_12))  InVars {hdr.ipv6.trafclass=v_hdr.ipv6.trafclass_12}  OutVars{hdr.ipv6.trafclass=v_hdr.ipv6.trafclass_12}  AuxVars[]  AssignedVars[] 2964#L453_T0_init [1908] L453_T0_init-->L454_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv6.flowlabel=v_hdr.ipv6.flowlabel_11}  AuxVars[]  AssignedVars[hdr.ipv6.flowlabel] 2793#L454_T0_init [1734] L454_T0_init-->L455_T0_init: Formula: (and (<= 0 v_hdr.ipv6.flowlabel_12) (<= v_hdr.ipv6.flowlabel_12 1048576))  InVars {hdr.ipv6.flowlabel=v_hdr.ipv6.flowlabel_12}  OutVars{hdr.ipv6.flowlabel=v_hdr.ipv6.flowlabel_12}  AuxVars[]  AssignedVars[] 2794#L455_T0_init [1825] L455_T0_init-->L456_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv6.payloadlen=v_hdr.ipv6.payloadlen_20}  AuxVars[]  AssignedVars[hdr.ipv6.payloadlen] 2890#L456_T0_init [2079] L456_T0_init-->L457_T0_init: Formula: (and (<= v_hdr.ipv6.payloadlen_17 65536) (<= 0 v_hdr.ipv6.payloadlen_17))  InVars {hdr.ipv6.payloadlen=v_hdr.ipv6.payloadlen_17}  OutVars{hdr.ipv6.payloadlen=v_hdr.ipv6.payloadlen_17}  AuxVars[]  AssignedVars[] 2913#L457_T0_init [1849] L457_T0_init-->L458_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv6.nextheader=v_hdr.ipv6.nextheader_22}  AuxVars[]  AssignedVars[hdr.ipv6.nextheader] 2827#L458_T0_init [1763] L458_T0_init-->L459_T0_init: Formula: (and (<= v_hdr.ipv6.nextheader_20 256) (<= 0 v_hdr.ipv6.nextheader_20))  InVars {hdr.ipv6.nextheader=v_hdr.ipv6.nextheader_20}  OutVars{hdr.ipv6.nextheader=v_hdr.ipv6.nextheader_20}  AuxVars[]  AssignedVars[] 2828#L459_T0_init [1982] L459_T0_init-->L460_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv6.hoplimit=v_hdr.ipv6.hoplimit_17}  AuxVars[]  AssignedVars[hdr.ipv6.hoplimit] 2536#L460_T0_init [1564] L460_T0_init-->L461_T0_init: Formula: (and (<= v_hdr.ipv6.hoplimit_20 256) (<= 0 v_hdr.ipv6.hoplimit_20))  InVars {hdr.ipv6.hoplimit=v_hdr.ipv6.hoplimit_20}  OutVars{hdr.ipv6.hoplimit=v_hdr.ipv6.hoplimit_20}  AuxVars[]  AssignedVars[] 2450#L461_T0_init [1517] L461_T0_init-->L462_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv6.srcAddr=v_hdr.ipv6.srcAddr_17}  AuxVars[]  AssignedVars[hdr.ipv6.srcAddr] 2451#L462_T0_init [1621] L462_T0_init-->L463_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv6.dstAddr=v_hdr.ipv6.dstAddr_16}  AuxVars[]  AssignedVars[hdr.ipv6.dstAddr] 2344#L463_T0_init [1462] L463_T0_init-->L464_T0_init: Formula: (not v_hdr.ipv4_tunnel.valid_20)  InVars {}  OutVars{hdr.ipv4_tunnel.valid=v_hdr.ipv4_tunnel.valid_20}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.valid] 2345#L464_T0_init [1506] L464_T0_init-->L465_T0_init: Formula: (= v_emit_29 (store v_emit_30 v_hdr.ipv4_tunnel_8 false))  InVars {emit=v_emit_30, hdr.ipv4_tunnel=v_hdr.ipv4_tunnel_8}  OutVars{emit=v_emit_29, hdr.ipv4_tunnel=v_hdr.ipv4_tunnel_8}  AuxVars[]  AssignedVars[emit] 2430#L465_T0_init [1653] L465_T0_init-->L466_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.version=v_hdr.ipv4_tunnel.version_16}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.version] 2675#L466_T0_init [1724] L466_T0_init-->L467_T0_init: Formula: (and (<= v_hdr.ipv4_tunnel.version_17 16) (<= 0 v_hdr.ipv4_tunnel.version_17))  InVars {hdr.ipv4_tunnel.version=v_hdr.ipv4_tunnel.version_17}  OutVars{hdr.ipv4_tunnel.version=v_hdr.ipv4_tunnel.version_17}  AuxVars[]  AssignedVars[] 2757#L467_T0_init [1706] L467_T0_init-->L468_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.ihl=v_hdr.ipv4_tunnel.ihl_14}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.ihl] 2758#L468_T0_init [1799] L468_T0_init-->L469_T0_init: Formula: (and (<= 0 v_hdr.ipv4_tunnel.ihl_16) (<= v_hdr.ipv4_tunnel.ihl_16 16))  InVars {hdr.ipv4_tunnel.ihl=v_hdr.ipv4_tunnel.ihl_16}  OutVars{hdr.ipv4_tunnel.ihl=v_hdr.ipv4_tunnel.ihl_16}  AuxVars[]  AssignedVars[] 2867#L469_T0_init [1860] L469_T0_init-->L470_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.diffserv=v_hdr.ipv4_tunnel.diffserv_15}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.diffserv] 2918#L470_T0_init [2116] L470_T0_init-->L471_T0_init: Formula: (and (<= v_hdr.ipv4_tunnel.diffserv_14 256) (<= 0 v_hdr.ipv4_tunnel.diffserv_14))  InVars {hdr.ipv4_tunnel.diffserv=v_hdr.ipv4_tunnel.diffserv_14}  OutVars{hdr.ipv4_tunnel.diffserv=v_hdr.ipv4_tunnel.diffserv_14}  AuxVars[]  AssignedVars[] 2286#L471_T0_init [1436] L471_T0_init-->L472_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.totalLen=v_hdr.ipv4_tunnel.totalLen_14}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.totalLen] 2287#L472_T0_init [1696] L472_T0_init-->L473_T0_init: Formula: (and (<= v_hdr.ipv4_tunnel.totalLen_15 65536) (<= 0 v_hdr.ipv4_tunnel.totalLen_15))  InVars {hdr.ipv4_tunnel.totalLen=v_hdr.ipv4_tunnel.totalLen_15}  OutVars{hdr.ipv4_tunnel.totalLen=v_hdr.ipv4_tunnel.totalLen_15}  AuxVars[]  AssignedVars[] 2509#L473_T0_init [1549] L473_T0_init-->L474_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.identification=v_hdr.ipv4_tunnel.identification_17}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.identification] 2488#L474_T0_init [1537] L474_T0_init-->L475_T0_init: Formula: (and (<= v_hdr.ipv4_tunnel.identification_16 65536) (<= 0 v_hdr.ipv4_tunnel.identification_16))  InVars {hdr.ipv4_tunnel.identification=v_hdr.ipv4_tunnel.identification_16}  OutVars{hdr.ipv4_tunnel.identification=v_hdr.ipv4_tunnel.identification_16}  AuxVars[]  AssignedVars[] 2489#L475_T0_init [1776] L475_T0_init-->L476_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.flags=v_hdr.ipv4_tunnel.flags_17}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.flags] 2843#L476_T0_init [1837] L476_T0_init-->L477_T0_init: Formula: (and (<= v_hdr.ipv4_tunnel.flags_14 8) (<= 0 v_hdr.ipv4_tunnel.flags_14))  InVars {hdr.ipv4_tunnel.flags=v_hdr.ipv4_tunnel.flags_14}  OutVars{hdr.ipv4_tunnel.flags=v_hdr.ipv4_tunnel.flags_14}  AuxVars[]  AssignedVars[] 2284#L477_T0_init [1435] L477_T0_init-->L478_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.fragOffset=v_hdr.ipv4_tunnel.fragOffset_17}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.fragOffset] 2285#L478_T0_init [1711] L478_T0_init-->L479_T0_init: Formula: (and (<= 0 v_hdr.ipv4_tunnel.fragOffset_15) (<= v_hdr.ipv4_tunnel.fragOffset_15 8192))  InVars {hdr.ipv4_tunnel.fragOffset=v_hdr.ipv4_tunnel.fragOffset_15}  OutVars{hdr.ipv4_tunnel.fragOffset=v_hdr.ipv4_tunnel.fragOffset_15}  AuxVars[]  AssignedVars[] 2643#L479_T0_init [1633] L479_T0_init-->L480_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.ttl=v_hdr.ipv4_tunnel.ttl_15}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.ttl] 2539#L480_T0_init [1566] L480_T0_init-->L481_T0_init: Formula: (and (<= 0 v_hdr.ipv4_tunnel.ttl_14) (<= v_hdr.ipv4_tunnel.ttl_14 256))  InVars {hdr.ipv4_tunnel.ttl=v_hdr.ipv4_tunnel.ttl_14}  OutVars{hdr.ipv4_tunnel.ttl=v_hdr.ipv4_tunnel.ttl_14}  AuxVars[]  AssignedVars[] 2540#L481_T0_init [2223] L481_T0_init-->L482_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.protocol=v_hdr.ipv4_tunnel.protocol_19}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.protocol] 2726#L482_T0_init [1685] L482_T0_init-->L483_T0_init: Formula: (and (<= 0 v_hdr.ipv4_tunnel.protocol_17) (<= v_hdr.ipv4_tunnel.protocol_17 256))  InVars {hdr.ipv4_tunnel.protocol=v_hdr.ipv4_tunnel.protocol_17}  OutVars{hdr.ipv4_tunnel.protocol=v_hdr.ipv4_tunnel.protocol_17}  AuxVars[]  AssignedVars[] 2727#L483_T0_init [1783] L483_T0_init-->L484_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.hdrChecksum=v_hdr.ipv4_tunnel.hdrChecksum_11}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.hdrChecksum] 2850#L484_T0_init [1857] L484_T0_init-->L485_T0_init: Formula: (and (<= v_hdr.ipv4_tunnel.hdrChecksum_10 65536) (<= 0 v_hdr.ipv4_tunnel.hdrChecksum_10))  InVars {hdr.ipv4_tunnel.hdrChecksum=v_hdr.ipv4_tunnel.hdrChecksum_10}  OutVars{hdr.ipv4_tunnel.hdrChecksum=v_hdr.ipv4_tunnel.hdrChecksum_10}  AuxVars[]  AssignedVars[] 2615#L485_T0_init [1614] L485_T0_init-->L486_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.srcAddr=v_hdr.ipv4_tunnel.srcAddr_14}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.srcAddr] 2616#L486_T0_init [1851] L486_T0_init-->L487_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.dstAddr=v_hdr.ipv4_tunnel.dstAddr_14}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.dstAddr] 2915#L487_T0_init [2051] L487_T0_init-->L488_T0_init: Formula: (not v_hdr.ipv4.valid_26)  InVars {}  OutVars{hdr.ipv4.valid=v_hdr.ipv4.valid_26}  AuxVars[]  AssignedVars[hdr.ipv4.valid] 3052#L488_T0_init [2112] L488_T0_init-->L489_T0_init: Formula: (= (store v_emit_26 v_hdr.ipv4_2 false) v_emit_25)  InVars {hdr.ipv4=v_hdr.ipv4_2, emit=v_emit_26}  OutVars{hdr.ipv4=v_hdr.ipv4_2, emit=v_emit_25}  AuxVars[]  AssignedVars[emit] 3048#L489_T0_init [2038] L489_T0_init-->L490_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.version=v_hdr.ipv4.version_12}  AuxVars[]  AssignedVars[hdr.ipv4.version] 2358#L490_T0_init [1465] L490_T0_init-->L491_T0_init: Formula: (and (<= 0 v_hdr.ipv4.version_10) (<= v_hdr.ipv4.version_10 16))  InVars {hdr.ipv4.version=v_hdr.ipv4.version_10}  OutVars{hdr.ipv4.version=v_hdr.ipv4.version_10}  AuxVars[]  AssignedVars[] 2359#L491_T0_init [2181] L491_T0_init-->L492_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.ihl=v_hdr.ipv4.ihl_10}  AuxVars[]  AssignedVars[hdr.ipv4.ihl] 3095#L492_T0_init [2179] L492_T0_init-->L493_T0_init: Formula: (and (<= v_hdr.ipv4.ihl_11 16) (<= 0 v_hdr.ipv4.ihl_11))  InVars {hdr.ipv4.ihl=v_hdr.ipv4.ihl_11}  OutVars{hdr.ipv4.ihl=v_hdr.ipv4.ihl_11}  AuxVars[]  AssignedVars[] 3096#L493_T0_init [2233] L493_T0_init-->L494_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.diffserv=v_hdr.ipv4.diffserv_12}  AuxVars[]  AssignedVars[hdr.ipv4.diffserv] 3060#L494_T0_init [2082] L494_T0_init-->L495_T0_init: Formula: (and (<= v_hdr.ipv4.diffserv_11 256) (<= 0 v_hdr.ipv4.diffserv_11))  InVars {hdr.ipv4.diffserv=v_hdr.ipv4.diffserv_11}  OutVars{hdr.ipv4.diffserv=v_hdr.ipv4.diffserv_11}  AuxVars[]  AssignedVars[] 2367#L495_T0_init [1471] L495_T0_init-->L496_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.totalLen=v_hdr.ipv4.totalLen_13}  AuxVars[]  AssignedVars[hdr.ipv4.totalLen] 2368#L496_T0_init [1495] L496_T0_init-->L497_T0_init: Formula: (and (<= 0 v_hdr.ipv4.totalLen_15) (<= v_hdr.ipv4.totalLen_15 65536))  InVars {hdr.ipv4.totalLen=v_hdr.ipv4.totalLen_15}  OutVars{hdr.ipv4.totalLen=v_hdr.ipv4.totalLen_15}  AuxVars[]  AssignedVars[] 2409#L497_T0_init [1755] L497_T0_init-->L498_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.identification=v_hdr.ipv4.identification_11}  AuxVars[]  AssignedVars[hdr.ipv4.identification] 2819#L498_T0_init [2076] L498_T0_init-->L499_T0_init: Formula: (and (<= 0 v_hdr.ipv4.identification_13) (<= v_hdr.ipv4.identification_13 65536))  InVars {hdr.ipv4.identification=v_hdr.ipv4.identification_13}  OutVars{hdr.ipv4.identification=v_hdr.ipv4.identification_13}  AuxVars[]  AssignedVars[] 2701#L499_T0_init [1671] L499_T0_init-->L500_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.flags=v_hdr.ipv4.flags_11}  AuxVars[]  AssignedVars[hdr.ipv4.flags] 2702#L500_T0_init [1997] L500_T0_init-->L501_T0_init: Formula: (and (<= 0 v_hdr.ipv4.flags_10) (<= v_hdr.ipv4.flags_10 8))  InVars {hdr.ipv4.flags=v_hdr.ipv4.flags_10}  OutVars{hdr.ipv4.flags=v_hdr.ipv4.flags_10}  AuxVars[]  AssignedVars[] 3028#L501_T0_init [2095] L501_T0_init-->L502_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.fragOffset=v_hdr.ipv4.fragOffset_11}  AuxVars[]  AssignedVars[hdr.ipv4.fragOffset] 3042#L502_T0_init [2022] L502_T0_init-->L503_T0_init: Formula: (and (<= 0 v_hdr.ipv4.fragOffset_12) (<= v_hdr.ipv4.fragOffset_12 8192))  InVars {hdr.ipv4.fragOffset=v_hdr.ipv4.fragOffset_12}  OutVars{hdr.ipv4.fragOffset=v_hdr.ipv4.fragOffset_12}  AuxVars[]  AssignedVars[] 3008#L503_T0_init [1964] L503_T0_init-->L504_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.ttl=v_hdr.ipv4.ttl_12}  AuxVars[]  AssignedVars[hdr.ipv4.ttl] 2895#L504_T0_init [1828] L504_T0_init-->L505_T0_init: Formula: (and (<= v_hdr.ipv4.ttl_11 256) (<= 0 v_hdr.ipv4.ttl_11))  InVars {hdr.ipv4.ttl=v_hdr.ipv4.ttl_11}  OutVars{hdr.ipv4.ttl=v_hdr.ipv4.ttl_11}  AuxVars[]  AssignedVars[] 2349#L505_T0_init [1463] L505_T0_init-->L506_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.protocol=v_hdr.ipv4.protocol_13}  AuxVars[]  AssignedVars[hdr.ipv4.protocol] 2350#L506_T0_init [2080] L506_T0_init-->L507_T0_init: Formula: (and (<= 0 v_hdr.ipv4.protocol_12) (<= v_hdr.ipv4.protocol_12 256))  InVars {hdr.ipv4.protocol=v_hdr.ipv4.protocol_12}  OutVars{hdr.ipv4.protocol=v_hdr.ipv4.protocol_12}  AuxVars[]  AssignedVars[] 2919#L507_T0_init [1861] L507_T0_init-->L508_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.hdrChecksum=v_hdr.ipv4.hdrChecksum_11}  AuxVars[]  AssignedVars[hdr.ipv4.hdrChecksum] 2920#L508_T0_init [2008] L508_T0_init-->L509_T0_init: Formula: (and (<= 0 v_hdr.ipv4.hdrChecksum_9) (<= v_hdr.ipv4.hdrChecksum_9 65536))  InVars {hdr.ipv4.hdrChecksum=v_hdr.ipv4.hdrChecksum_9}  OutVars{hdr.ipv4.hdrChecksum=v_hdr.ipv4.hdrChecksum_9}  AuxVars[]  AssignedVars[] 3034#L509_T0_init [2205] L509_T0_init-->L510_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.srcAddr=v_hdr.ipv4.srcAddr_10}  AuxVars[]  AssignedVars[hdr.ipv4.srcAddr] 2431#L510_T0_init [1507] L510_T0_init-->L511_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_14}  AuxVars[]  AssignedVars[hdr.ipv4.dstAddr] 2432#L511_T0_init [1777] L511_T0_init-->L512_T0_init: Formula: (= v_hdr.ipv4.dstAddr_13 v__old_hdr.ipv4.dstAddr_11)  InVars {hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_13}  OutVars{_old_hdr.ipv4.dstAddr=v__old_hdr.ipv4.dstAddr_11, hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_13}  AuxVars[]  AssignedVars[_old_hdr.ipv4.dstAddr] 2561#L512_T0_init [1579] L512_T0_init-->L513_T0_init: Formula: (= v_hdr.ipv4.dstAddr_12 v__old_hdr.ipv4.dstAddr_10)  InVars {hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_12}  OutVars{_old_hdr.ipv4.dstAddr=v__old_hdr.ipv4.dstAddr_10, hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_12}  AuxVars[]  AssignedVars[_old_hdr.ipv4.dstAddr] 2562#L513_T0_init [1986] L513_T0_init-->L514_T0_init: Formula: (not v_hdr.tcp.valid_29)  InVars {}  OutVars{hdr.tcp.valid=v_hdr.tcp.valid_29}  AuxVars[]  AssignedVars[hdr.tcp.valid] 2721#L514_T0_init [1682] L514_T0_init-->L515_T0_init: Formula: (= v_emit_33 (store v_emit_34 v_hdr.tcp_2 false))  InVars {hdr.tcp=v_hdr.tcp_2, emit=v_emit_34}  OutVars{hdr.tcp=v_hdr.tcp_2, emit=v_emit_33}  AuxVars[]  AssignedVars[emit] 2722#L515_T0_init [1741] L515_T0_init-->L516_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.srcport=v_hdr.tcp.srcport_12}  AuxVars[]  AssignedVars[hdr.tcp.srcport] 2803#L516_T0_init [2063] L516_T0_init-->L517_T0_init: Formula: (and (<= v_hdr.tcp.srcport_9 65536) (<= 0 v_hdr.tcp.srcport_9))  InVars {hdr.tcp.srcport=v_hdr.tcp.srcport_9}  OutVars{hdr.tcp.srcport=v_hdr.tcp.srcport_9}  AuxVars[]  AssignedVars[] 2870#L517_T0_init [1801] L517_T0_init-->L518_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.dstport=v_hdr.tcp.dstport_9}  AuxVars[]  AssignedVars[hdr.tcp.dstport] 2871#L518_T0_init [1879] L518_T0_init-->L519_T0_init: Formula: (and (<= v_hdr.tcp.dstport_10 65536) (<= 0 v_hdr.tcp.dstport_10))  InVars {hdr.tcp.dstport=v_hdr.tcp.dstport_10}  OutVars{hdr.tcp.dstport=v_hdr.tcp.dstport_10}  AuxVars[]  AssignedVars[] 2723#L519_T0_init [1683] L519_T0_init-->L520_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.sequence=v_hdr.tcp.sequence_43}  AuxVars[]  AssignedVars[hdr.tcp.sequence] 2496#L520_T0_init [1541] L520_T0_init-->L521_T0_init: Formula: (and (<= v_hdr.tcp.sequence_44 4294967296) (<= 0 v_hdr.tcp.sequence_44))  InVars {hdr.tcp.sequence=v_hdr.tcp.sequence_44}  OutVars{hdr.tcp.sequence=v_hdr.tcp.sequence_44}  AuxVars[]  AssignedVars[] 2497#L521_T0_init [1694] L521_T0_init-->L522_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.ackseq=v_hdr.tcp.ackseq_43}  AuxVars[]  AssignedVars[hdr.tcp.ackseq] 2741#L522_T0_init [2020] L522_T0_init-->L523_T0_init: Formula: (and (<= v_hdr.tcp.ackseq_44 4294967296) (<= 0 v_hdr.tcp.ackseq_44))  InVars {hdr.tcp.ackseq=v_hdr.tcp.ackseq_44}  OutVars{hdr.tcp.ackseq=v_hdr.tcp.ackseq_44}  AuxVars[]  AssignedVars[] 2572#L523_T0_init [1588] L523_T0_init-->L524_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.headerlength=v_hdr.tcp.headerlength_11}  AuxVars[]  AssignedVars[hdr.tcp.headerlength] 2281#L524_T0_init [1434] L524_T0_init-->L525_T0_init: Formula: (and (<= v_hdr.tcp.headerlength_10 16) (<= 0 v_hdr.tcp.headerlength_10))  InVars {hdr.tcp.headerlength=v_hdr.tcp.headerlength_10}  OutVars{hdr.tcp.headerlength=v_hdr.tcp.headerlength_10}  AuxVars[]  AssignedVars[] 2283#L525_T0_init [1536] L525_T0_init-->L526_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.reservation=v_hdr.tcp.reservation_12}  AuxVars[]  AssignedVars[hdr.tcp.reservation] 2487#L526_T0_init [1832] L526_T0_init-->L527_T0_init: Formula: (and (<= v_hdr.tcp.reservation_9 64) (<= 0 v_hdr.tcp.reservation_9))  InVars {hdr.tcp.reservation=v_hdr.tcp.reservation_9}  OutVars{hdr.tcp.reservation=v_hdr.tcp.reservation_9}  AuxVars[]  AssignedVars[] 2748#L527_T0_init [1700] L527_T0_init-->L528_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.URG=v_hdr.tcp.URG_9}  AuxVars[]  AssignedVars[hdr.tcp.URG] 2749#L528_T0_init [1797] L528_T0_init-->L529_T0_init: Formula: (and (<= v_hdr.tcp.URG_12 2) (<= 0 v_hdr.tcp.URG_12))  InVars {hdr.tcp.URG=v_hdr.tcp.URG_12}  OutVars{hdr.tcp.URG=v_hdr.tcp.URG_12}  AuxVars[]  AssignedVars[] 2865#L529_T0_init [1892] L529_T0_init-->L530_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.ACK=v_hdr.tcp.ACK_11}  AuxVars[]  AssignedVars[hdr.tcp.ACK] 2567#L530_T0_init [1584] L530_T0_init-->L531_T0_init: Formula: (and (<= 0 v_hdr.tcp.ACK_9) (<= v_hdr.tcp.ACK_9 2))  InVars {hdr.tcp.ACK=v_hdr.tcp.ACK_9}  OutVars{hdr.tcp.ACK=v_hdr.tcp.ACK_9}  AuxVars[]  AssignedVars[] 2336#L531_T0_init [1458] L531_T0_init-->L532_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.PSH=v_hdr.tcp.PSH_11}  AuxVars[]  AssignedVars[hdr.tcp.PSH] 2337#L532_T0_init [2203] L532_T0_init-->L533_T0_init: Formula: (and (<= 0 v_hdr.tcp.PSH_9) (<= v_hdr.tcp.PSH_9 2))  InVars {hdr.tcp.PSH=v_hdr.tcp.PSH_9}  OutVars{hdr.tcp.PSH=v_hdr.tcp.PSH_9}  AuxVars[]  AssignedVars[] 3081#L533_T0_init [2141] L533_T0_init-->L534_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.RST=v_hdr.tcp.RST_9}  AuxVars[]  AssignedVars[hdr.tcp.RST] 2570#L534_T0_init [1587] L534_T0_init-->L535_T0_init: Formula: (and (<= 0 v_hdr.tcp.RST_11) (<= v_hdr.tcp.RST_11 2))  InVars {hdr.tcp.RST=v_hdr.tcp.RST_11}  OutVars{hdr.tcp.RST=v_hdr.tcp.RST_11}  AuxVars[]  AssignedVars[] 2571#L535_T0_init [2154] L535_T0_init-->L536_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.SYN=v_hdr.tcp.SYN_9}  AuxVars[]  AssignedVars[hdr.tcp.SYN] 2623#L536_T0_init [1620] L536_T0_init-->L537_T0_init: Formula: (and (<= 0 v_hdr.tcp.SYN_11) (<= v_hdr.tcp.SYN_11 2))  InVars {hdr.tcp.SYN=v_hdr.tcp.SYN_11}  OutVars{hdr.tcp.SYN=v_hdr.tcp.SYN_11}  AuxVars[]  AssignedVars[] 2624#L537_T0_init [1893] L537_T0_init-->L538_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.FIN=v_hdr.tcp.FIN_9}  AuxVars[]  AssignedVars[hdr.tcp.FIN] 2949#L538_T0_init [1895] L538_T0_init-->L539_T0_init: Formula: (and (<= 0 v_hdr.tcp.FIN_10) (<= v_hdr.tcp.FIN_10 2))  InVars {hdr.tcp.FIN=v_hdr.tcp.FIN_10}  OutVars{hdr.tcp.FIN=v_hdr.tcp.FIN_10}  AuxVars[]  AssignedVars[] 2951#L539_T0_init [2212] L539_T0_init-->L540_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.windowsize=v_hdr.tcp.windowsize_10}  AuxVars[]  AssignedVars[hdr.tcp.windowsize] 2988#L540_T0_init [1939] L540_T0_init-->L541_T0_init: Formula: (and (<= v_hdr.tcp.windowsize_12 65536) (<= 0 v_hdr.tcp.windowsize_12))  InVars {hdr.tcp.windowsize=v_hdr.tcp.windowsize_12}  OutVars{hdr.tcp.windowsize=v_hdr.tcp.windowsize_12}  AuxVars[]  AssignedVars[] 2989#L541_T0_init [2096] L541_T0_init-->L542_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.checksum=v_hdr.tcp.checksum_10}  AuxVars[]  AssignedVars[hdr.tcp.checksum] 3061#L542_T0_init [2083] L542_T0_init-->L543_T0_init: Formula: (and (<= 0 v_hdr.tcp.checksum_12) (<= v_hdr.tcp.checksum_12 65536))  InVars {hdr.tcp.checksum=v_hdr.tcp.checksum_12}  OutVars{hdr.tcp.checksum=v_hdr.tcp.checksum_12}  AuxVars[]  AssignedVars[] 3062#L543_T0_init [2088] L543_T0_init-->L544_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.pointer=v_hdr.tcp.pointer_11}  AuxVars[]  AssignedVars[hdr.tcp.pointer] 3063#L544_T0_init [2119] L544_T0_init-->L545_T0_init: Formula: (and (<= 0 v_hdr.tcp.pointer_10) (<= v_hdr.tcp.pointer_10 65536))  InVars {hdr.tcp.pointer=v_hdr.tcp.pointer_10}  OutVars{hdr.tcp.pointer=v_hdr.tcp.pointer_10}  AuxVars[]  AssignedVars[] 2985#L545_T0_init [1935] L545_T0_init-->L546_T0_init: Formula: (not v_hdr.udp_tunnel.valid_20)  InVars {}  OutVars{hdr.udp_tunnel.valid=v_hdr.udp_tunnel.valid_20}  AuxVars[]  AssignedVars[hdr.udp_tunnel.valid] 2986#L546_T0_init [2229] L546_T0_init-->L547_T0_init: Formula: (= v_emit_31 (store v_emit_32 v_hdr.udp_tunnel_9 false))  InVars {emit=v_emit_32, hdr.udp_tunnel=v_hdr.udp_tunnel_9}  OutVars{emit=v_emit_31, hdr.udp_tunnel=v_hdr.udp_tunnel_9}  AuxVars[]  AssignedVars[emit] 2996#L547_T0_init [1949] L547_T0_init-->L548_T0_init: Formula: true  InVars {}  OutVars{hdr.udp_tunnel.srcport=v_hdr.udp_tunnel.srcport_16}  AuxVars[]  AssignedVars[hdr.udp_tunnel.srcport] 2857#L548_T0_init [1790] L548_T0_init-->L549_T0_init: Formula: (and (<= 0 v_hdr.udp_tunnel.srcport_14) (<= v_hdr.udp_tunnel.srcport_14 65536))  InVars {hdr.udp_tunnel.srcport=v_hdr.udp_tunnel.srcport_14}  OutVars{hdr.udp_tunnel.srcport=v_hdr.udp_tunnel.srcport_14}  AuxVars[]  AssignedVars[] 2858#L549_T0_init [2166] L549_T0_init-->L550_T0_init: Formula: true  InVars {}  OutVars{hdr.udp_tunnel.dstport=v_hdr.udp_tunnel.dstport_14}  AuxVars[]  AssignedVars[hdr.udp_tunnel.dstport] 3088#L550_T0_init [2155] L550_T0_init-->L551_T0_init: Formula: (and (<= 0 v_hdr.udp_tunnel.dstport_15) (<= v_hdr.udp_tunnel.dstport_15 65536))  InVars {hdr.udp_tunnel.dstport=v_hdr.udp_tunnel.dstport_15}  OutVars{hdr.udp_tunnel.dstport=v_hdr.udp_tunnel.dstport_15}  AuxVars[]  AssignedVars[] 2872#L551_T0_init [1802] L551_T0_init-->L552_T0_init: Formula: true  InVars {}  OutVars{hdr.udp_tunnel.userlength=v_hdr.udp_tunnel.userlength_16}  AuxVars[]  AssignedVars[hdr.udp_tunnel.userlength] 2407#L552_T0_init [1494] L552_T0_init-->L553_T0_init: Formula: (and (<= 0 v_hdr.udp_tunnel.userlength_17) (<= v_hdr.udp_tunnel.userlength_17 65536))  InVars {hdr.udp_tunnel.userlength=v_hdr.udp_tunnel.userlength_17}  OutVars{hdr.udp_tunnel.userlength=v_hdr.udp_tunnel.userlength_17}  AuxVars[]  AssignedVars[] 2408#L553_T0_init [1607] L553_T0_init-->L554_T0_init: Formula: true  InVars {}  OutVars{hdr.udp_tunnel.checksum=v_hdr.udp_tunnel.checksum_15}  AuxVars[]  AssignedVars[hdr.udp_tunnel.checksum] 2383#L554_T0_init [1482] L554_T0_init-->havocProcedureFINAL_T0_init: Formula: (and (<= v_hdr.udp_tunnel.checksum_14 65536) (<= 0 v_hdr.udp_tunnel.checksum_14))  InVars {hdr.udp_tunnel.checksum=v_hdr.udp_tunnel.checksum_14}  OutVars{hdr.udp_tunnel.checksum=v_hdr.udp_tunnel.checksum_14}  AuxVars[]  AssignedVars[] 2384#havocProcedureFINAL_T0_init [2184] havocProcedureFINAL_T0_init-->havocProcedureEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2514#havocProcedureEXIT_T0_init >[2294] havocProcedureEXIT_T0_init-->L559-D56: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2515#L559-D56 [1645] L559-D56-->L559_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2534#L559_T0_init [1563] L559_T0_init-->L559_T0_init-D22: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 2535#L559_T0_init-D22 [1934] L559_T0_init-D22-->_parser_MyParserENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2342#_parser_MyParserENTRY_T0_init [1580] _parser_MyParserENTRY_T0_init-->_parser_MyParserENTRY_T0_init-D14: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 2341#_parser_MyParserENTRY_T0_init-D14 [1461] _parser_MyParserENTRY_T0_init-D14-->startENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2343#startENTRY_T0_init [1983] startENTRY_T0_init-->L727_T0_init: Formula: v_hdr.ethernet.valid_16  InVars {}  OutVars{hdr.ethernet.valid=v_hdr.ethernet.valid_16}  AuxVars[]  AssignedVars[hdr.ethernet.valid] 3005#L727_T0_init [1961] L727_T0_init-->L730_T0_init: Formula: (not (= v_hdr.ethernet.etherType_35 34525))  InVars {hdr.ethernet.etherType=v_hdr.ethernet.etherType_35}  OutVars{hdr.ethernet.etherType=v_hdr.ethernet.etherType_35}  AuxVars[]  AssignedVars[] 3006#L730_T0_init [2005] L730_T0_init-->L730-1_T0_init: Formula: (not (= v_hdr.ethernet.etherType_37 2048))  InVars {hdr.ethernet.etherType=v_hdr.ethernet.etherType_37}  OutVars{hdr.ethernet.etherType=v_hdr.ethernet.etherType_37}  AuxVars[]  AssignedVars[] 2568#L730-1_T0_init [1883] L730-1_T0_init-->startEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2559#startEXIT_T0_init >[2245] startEXIT_T0_init-->_parser_MyParserFINAL-D66: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2560#_parser_MyParserFINAL-D66 [1638] _parser_MyParserFINAL-D66-->_parser_MyParserFINAL_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2652#_parser_MyParserFINAL_T0_init [1963] _parser_MyParserFINAL_T0_init-->_parser_MyParserEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 3007#_parser_MyParserEXIT_T0_init >[2284] _parser_MyParserEXIT_T0_init-->L560-D104: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 3059#L560-D104 [2220] L560-D104-->L560_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2476#L560_T0_init [1530] L560_T0_init-->L560_T0_init-D16: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 2477#L560_T0_init-D16 [1972] L560_T0_init-D16-->MyVerifyChecksumFINAL_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2940#MyVerifyChecksumFINAL_T0_init [1885] MyVerifyChecksumFINAL_T0_init-->MyVerifyChecksumEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2929#MyVerifyChecksumEXIT_T0_init >[2283] MyVerifyChecksumEXIT_T0_init-->L561-D74: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2899#L561-D74 [1833] L561-D74-->L561_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2416#L561_T0_init [1771] L561_T0_init-->L561_T0_init-D6: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 2716#L561_T0_init-D6 [1680] L561_T0_init-D6-->MyIngressENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2653#MyIngressENTRY_T0_init [1639] MyIngressENTRY_T0_init-->L259_T0_init: Formula: (= v_standard_metadata.ingress_port_17 0)  InVars {standard_metadata.ingress_port=v_standard_metadata.ingress_port_17}  OutVars{standard_metadata.ingress_port=v_standard_metadata.ingress_port_17}  AuxVars[]  AssignedVars[] 2654#L259_T0_init [1794] L259_T0_init-->L266_T0_init: Formula: (not (= v_hdr.ipv4.dstAddr_19 2071690107))  InVars {hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_19}  OutVars{hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_19}  AuxVars[]  AssignedVars[] 2862#L266_T0_init [2049] L266_T0_init-->L258_T0_init: Formula: (or (= v_hdr.ethernet.srcAddr_31 0) (= 281474976710655 v_hdr.ethernet.dstAddr_40))  InVars {hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_31, hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_40}  OutVars{hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_31, hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_40}  AuxVars[]  AssignedVars[] 3051#L258_T0_init [2204] L258_T0_init-->MyIngressEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 3100#MyIngressEXIT_T0_init >[2287] MyIngressEXIT_T0_init-->L562-D108: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2743#L562-D108 [1699] L562-D108-->L562_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2545#L562_T0_init [1989] L562_T0_init-->L562_T0_init-D50: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 3229#L562_T0_init-D50 [1602] L562_T0_init-D50-->MyEgressENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2617#MyEgressENTRY_T0_init [1617] MyEgressENTRY_T0_init-->L249_T0_init: Formula: (or (not (= 0 v_standard_metadata.egress_port_34)) (not v_hdr.tcp.valid_32))  InVars {standard_metadata.egress_port=v_standard_metadata.egress_port_34, hdr.tcp.valid=v_hdr.tcp.valid_32}  OutVars{standard_metadata.egress_port=v_standard_metadata.egress_port_34, hdr.tcp.valid=v_hdr.tcp.valid_32}  AuxVars[]  AssignedVars[] 2618#L249_T0_init [1619] L249_T0_init-->MyEgressEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2622#MyEgressEXIT_T0_init >[2308] MyEgressEXIT_T0_init-->L563-D90: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2625#L563-D90 [1623] L563-D90-->L563_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2626#L563_T0_init [1840] L563_T0_init-->L563_T0_init-D32: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 2904#L563_T0_init-D32 [2149] L563_T0_init-D32-->MyComputeChecksumFINAL_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 3085#MyComputeChecksumFINAL_T0_init [1927] MyComputeChecksumFINAL_T0_init-->MyComputeChecksumEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2665#MyComputeChecksumEXIT_T0_init >[2341] MyComputeChecksumEXIT_T0_init-->L564-D110: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2666#L564-D110 [1498] L564-D110-->L564_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2971#L564_T0_init [1918] L564_T0_init-->L566_T0_init: Formula: (not v_forward_29)  InVars {forward=v_forward_29}  OutVars{forward=v_forward_29}  AuxVars[]  AssignedVars[] 2268#L566_T0_init [1429] L566_T0_init-->L565-1_T0_init: Formula: v_drop_14  InVars {}  OutVars{drop=v_drop_14}  AuxVars[]  AssignedVars[drop] 2270#L565-1_T0_init [1928] L565-1_T0_init-->L569_T0_init: Formula: (let ((.cse0 (= v__old_hdr.ethernet.srcAddr_14 0))) (or (and v__p4ltl_0_6 (not .cse0)) (and (not v__p4ltl_0_6) .cse0)))  InVars {_old_hdr.ethernet.srcAddr=v__old_hdr.ethernet.srcAddr_14}  OutVars{_p4ltl_0=v__p4ltl_0_6, _old_hdr.ethernet.srcAddr=v__old_hdr.ethernet.srcAddr_14}  AuxVars[]  AssignedVars[_p4ltl_0] 2839#L569_T0_init [1772] L569_T0_init-->L570_T0_init: Formula: (let ((.cse0 (= 2071690107 v__old_hdr.ipv4.dstAddr_14))) (or (and v__p4ltl_1_6 (not .cse0)) (and .cse0 (not v__p4ltl_1_6))))  InVars {_old_hdr.ipv4.dstAddr=v__old_hdr.ipv4.dstAddr_14}  OutVars{_old_hdr.ipv4.dstAddr=v__old_hdr.ipv4.dstAddr_14, _p4ltl_1=v__p4ltl_1_6}  AuxVars[]  AssignedVars[_p4ltl_1] 2294#L570_T0_init [1440] L570_T0_init-->L571_T0_init: Formula: (let ((.cse0 (= 281474976710655 v__old_hdr.ethernet.dstAddr_15))) (or (and v__p4ltl_2_7 (not .cse0)) (and (not v__p4ltl_2_7) .cse0)))  InVars {_old_hdr.ethernet.dstAddr=v__old_hdr.ethernet.dstAddr_15}  OutVars{_p4ltl_2=v__p4ltl_2_7, _old_hdr.ethernet.dstAddr=v__old_hdr.ethernet.dstAddr_15}  AuxVars[]  AssignedVars[_p4ltl_2] 2295#L571_T0_init [1910] L571_T0_init-->mainFINAL_T0_init: Formula: (let ((.cse0 (= v_standard_metadata.ingress_port_19 0))) (or (and v__p4ltl_3_6 .cse0) (and (not .cse0) (not v__p4ltl_3_6))))  InVars {standard_metadata.ingress_port=v_standard_metadata.ingress_port_19}  OutVars{standard_metadata.ingress_port=v_standard_metadata.ingress_port_19, _p4ltl_3=v__p4ltl_3_6}  AuxVars[]  AssignedVars[_p4ltl_3] 2965#mainFINAL_T0_init [2017] mainFINAL_T0_init-->mainEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 3040#mainEXIT_T0_init >[2277] mainEXIT_T0_init-->L577-1-D72: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2877#L577-1-D72 [1809] L577-1-D72-->L577-1_accept_S1: Formula: (and v__p4ltl_1_9 v__p4ltl_0_9 v__p4ltl_3_9 v__p4ltl_2_9 (or (not v__p4ltl_3_9) (not v__p4ltl_1_9) (= 1 v_standard_metadata.egress_port_30) (not v__p4ltl_2_9) (not v__p4ltl_0_9)))  InVars {_p4ltl_2=v__p4ltl_2_9, standard_metadata.egress_port=v_standard_metadata.egress_port_30, _p4ltl_3=v__p4ltl_3_9, _p4ltl_0=v__p4ltl_0_9, _p4ltl_1=v__p4ltl_1_9}  OutVars{_p4ltl_2=v__p4ltl_2_9, standard_metadata.egress_port=v_standard_metadata.egress_port_30, _p4ltl_3=v__p4ltl_3_9, _p4ltl_0=v__p4ltl_0_9, _p4ltl_1=v__p4ltl_1_9}  AuxVars[]  AssignedVars[] 2280#L577-1_accept_S1 
[2023-01-16 05:55:33,688 INFO  L754   eck$LassoCheckResult]: Loop: 2280#L577-1_accept_S1 [1488] L577-1_accept_S1-->L577_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2339#L577_accept_S1 [1736] L577_accept_S1-->L577_accept_S1-D53: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 2797#L577_accept_S1-D53 [1856] L577_accept_S1-D53-->mainENTRY_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2272#mainENTRY_accept_S1 [1988] mainENTRY_accept_S1-->mainENTRY_accept_S1-D39: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 2998#mainENTRY_accept_S1-D39 [1953] mainENTRY_accept_S1-D39-->havocProcedureENTRY_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2999#havocProcedureENTRY_accept_S1 [2101] havocProcedureENTRY_accept_S1-->L421_accept_S1: Formula: (not v_drop_11)  InVars {}  OutVars{drop=v_drop_11}  AuxVars[]  AssignedVars[drop] 3001#L421_accept_S1 [1955] L421_accept_S1-->L422_accept_S1: Formula: (not v_forward_18)  InVars {}  OutVars{forward=v_forward_18}  AuxVars[]  AssignedVars[forward] 3002#L422_accept_S1 [1966] L422_accept_S1-->L423_accept_S1: Formula: (= v_standard_metadata.ingress_port_13 0)  InVars {}  OutVars{standard_metadata.ingress_port=v_standard_metadata.ingress_port_13}  AuxVars[]  AssignedVars[standard_metadata.ingress_port] 2307#L423_accept_S1 [1445] L423_accept_S1-->L424_accept_S1: Formula: (= v_standard_metadata.egress_spec_16 0)  InVars {}  OutVars{standard_metadata.egress_spec=v_standard_metadata.egress_spec_16}  AuxVars[]  AssignedVars[standard_metadata.egress_spec] 2308#L424_accept_S1 [1702] L424_accept_S1-->L425_accept_S1: Formula: (= 0 v_standard_metadata.egress_port_17)  InVars {}  OutVars{standard_metadata.egress_port=v_standard_metadata.egress_port_17}  AuxVars[]  AssignedVars[standard_metadata.egress_port] 2667#L425_accept_S1 [1647] L425_accept_S1-->L426_accept_S1: Formula: (= v_standard_metadata.instance_type_8 0)  InVars {}  OutVars{standard_metadata.instance_type=v_standard_metadata.instance_type_8}  AuxVars[]  AssignedVars[standard_metadata.instance_type] 2668#L426_accept_S1 [1817] L426_accept_S1-->L427_accept_S1: Formula: (= v_standard_metadata.packet_length_9 0)  InVars {}  OutVars{standard_metadata.packet_length=v_standard_metadata.packet_length_9}  AuxVars[]  AssignedVars[standard_metadata.packet_length] 2764#L427_accept_S1 [1712] L427_accept_S1-->L428_accept_S1: Formula: (= v_standard_metadata.enq_timestamp_8 0)  InVars {}  OutVars{standard_metadata.enq_timestamp=v_standard_metadata.enq_timestamp_8}  AuxVars[]  AssignedVars[standard_metadata.enq_timestamp] 2663#L428_accept_S1 [1646] L428_accept_S1-->L429_accept_S1: Formula: (= v_standard_metadata.enq_qdepth_8 0)  InVars {}  OutVars{standard_metadata.enq_qdepth=v_standard_metadata.enq_qdepth_8}  AuxVars[]  AssignedVars[standard_metadata.enq_qdepth] 2664#L429_accept_S1 [2106] L429_accept_S1-->L430_accept_S1: Formula: (= v_standard_metadata.deq_timedelta_8 0)  InVars {}  OutVars{standard_metadata.deq_timedelta=v_standard_metadata.deq_timedelta_8}  AuxVars[]  AssignedVars[standard_metadata.deq_timedelta] 3071#L430_accept_S1 [2124] L430_accept_S1-->L431_accept_S1: Formula: (= v_standard_metadata.deq_qdepth_9 0)  InVars {}  OutVars{standard_metadata.deq_qdepth=v_standard_metadata.deq_qdepth_9}  AuxVars[]  AssignedVars[standard_metadata.deq_qdepth] 2552#L431_accept_S1 [1575] L431_accept_S1-->L432_accept_S1: Formula: (= v_standard_metadata.ingress_global_timestamp_9 0)  InVars {}  OutVars{standard_metadata.ingress_global_timestamp=v_standard_metadata.ingress_global_timestamp_9}  AuxVars[]  AssignedVars[standard_metadata.ingress_global_timestamp] 2271#L432_accept_S1 [1430] L432_accept_S1-->L433_accept_S1: Formula: (= v_standard_metadata.egress_global_timestamp_8 0)  InVars {}  OutVars{standard_metadata.egress_global_timestamp=v_standard_metadata.egress_global_timestamp_8}  AuxVars[]  AssignedVars[standard_metadata.egress_global_timestamp] 2273#L433_accept_S1 [2160] L433_accept_S1-->L434_accept_S1: Formula: (= 0 v_standard_metadata.mcast_grp_8)  InVars {}  OutVars{standard_metadata.mcast_grp=v_standard_metadata.mcast_grp_8}  AuxVars[]  AssignedVars[standard_metadata.mcast_grp] 3047#L434_accept_S1 [2037] L434_accept_S1-->L435_accept_S1: Formula: (= v_standard_metadata.egress_rid_8 0)  InVars {}  OutVars{standard_metadata.egress_rid=v_standard_metadata.egress_rid_8}  AuxVars[]  AssignedVars[standard_metadata.egress_rid] 2852#L435_accept_S1 [1784] L435_accept_S1-->L436_accept_S1: Formula: (= v_standard_metadata.checksum_error_9 0)  InVars {}  OutVars{standard_metadata.checksum_error=v_standard_metadata.checksum_error_9}  AuxVars[]  AssignedVars[standard_metadata.checksum_error] 2853#L436_accept_S1 [1853] L436_accept_S1-->L437_accept_S1: Formula: (= v_standard_metadata.priority_8 0)  InVars {}  OutVars{standard_metadata.priority=v_standard_metadata.priority_8}  AuxVars[]  AssignedVars[standard_metadata.priority] 2784#L437_accept_S1 [1728] L437_accept_S1-->L438_accept_S1: Formula: (not v_hdr.ethernet.valid_13)  InVars {}  OutVars{hdr.ethernet.valid=v_hdr.ethernet.valid_13}  AuxVars[]  AssignedVars[hdr.ethernet.valid] 2785#L438_accept_S1 [1824] L438_accept_S1-->L439_accept_S1: Formula: (= v_emit_23 (store v_emit_24 v_hdr.ethernet_2 false))  InVars {emit=v_emit_24, hdr.ethernet=v_hdr.ethernet_2}  OutVars{emit=v_emit_23, hdr.ethernet=v_hdr.ethernet_2}  AuxVars[]  AssignedVars[emit] 2889#L439_accept_S1 [1875] L439_accept_S1-->L440_accept_S1: Formula: true  InVars {}  OutVars{hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_25}  AuxVars[]  AssignedVars[hdr.ethernet.dstAddr] 2547#L440_accept_S1 [1571] L440_accept_S1-->L441_accept_S1: Formula: (= v_hdr.ethernet.dstAddr_27 v__old_hdr.ethernet.dstAddr_11)  InVars {hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_27}  OutVars{_old_hdr.ethernet.dstAddr=v__old_hdr.ethernet.dstAddr_11, hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_27}  AuxVars[]  AssignedVars[_old_hdr.ethernet.dstAddr] 2548#L441_accept_S1 [2023] L441_accept_S1-->L442_accept_S1: Formula: (= v_hdr.ethernet.dstAddr_30 v__old_hdr.ethernet.dstAddr_13)  InVars {hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_30}  OutVars{_old_hdr.ethernet.dstAddr=v__old_hdr.ethernet.dstAddr_13, hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_30}  AuxVars[]  AssignedVars[_old_hdr.ethernet.dstAddr] 2708#L442_accept_S1 [1674] L442_accept_S1-->L443_accept_S1: Formula: true  InVars {}  OutVars{hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_22}  AuxVars[]  AssignedVars[hdr.ethernet.srcAddr] 2709#L443_accept_S1 [2168] L443_accept_S1-->L444_accept_S1: Formula: (= v_hdr.ethernet.srcAddr_27 v__old_hdr.ethernet.srcAddr_13)  InVars {hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_27}  OutVars{hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_27, _old_hdr.ethernet.srcAddr=v__old_hdr.ethernet.srcAddr_13}  AuxVars[]  AssignedVars[_old_hdr.ethernet.srcAddr] 2543#L444_accept_S1 [1568] L444_accept_S1-->L445_accept_S1: Formula: (= v_hdr.ethernet.srcAddr_24 v__old_hdr.ethernet.srcAddr_11)  InVars {hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_24}  OutVars{hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_24, _old_hdr.ethernet.srcAddr=v__old_hdr.ethernet.srcAddr_11}  AuxVars[]  AssignedVars[_old_hdr.ethernet.srcAddr] 2544#L445_accept_S1 [2169] L445_accept_S1-->L446_accept_S1: Formula: true  InVars {}  OutVars{hdr.ethernet.etherType=v_hdr.ethernet.etherType_23}  AuxVars[]  AssignedVars[hdr.ethernet.etherType] 2669#L446_accept_S1 [1648] L446_accept_S1-->L447_accept_S1: Formula: (and (<= 0 v_hdr.ethernet.etherType_25) (<= v_hdr.ethernet.etherType_25 65536))  InVars {hdr.ethernet.etherType=v_hdr.ethernet.etherType_25}  OutVars{hdr.ethernet.etherType=v_hdr.ethernet.etherType_25}  AuxVars[]  AssignedVars[] 2670#L447_accept_S1 [2121] L447_accept_S1-->L448_accept_S1: Formula: (not v_hdr.ipv6.valid_17)  InVars {}  OutVars{hdr.ipv6.valid=v_hdr.ipv6.valid_17}  AuxVars[]  AssignedVars[hdr.ipv6.valid] 2931#L448_accept_S1 [1871] L448_accept_S1-->L449_accept_S1: Formula: (= (store v_emit_20 v_hdr.ipv6_9 false) v_emit_19)  InVars {emit=v_emit_20, hdr.ipv6=v_hdr.ipv6_9}  OutVars{emit=v_emit_19, hdr.ipv6=v_hdr.ipv6_9}  AuxVars[]  AssignedVars[emit] 2924#L449_accept_S1 [1865] L449_accept_S1-->L450_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv6.version=v_hdr.ipv6.version_18}  AuxVars[]  AssignedVars[hdr.ipv6.version] 2925#L450_accept_S1 [2071] L450_accept_S1-->L451_accept_S1: Formula: (and (<= v_hdr.ipv6.version_17 16) (<= 0 v_hdr.ipv6.version_17))  InVars {hdr.ipv6.version=v_hdr.ipv6.version_17}  OutVars{hdr.ipv6.version=v_hdr.ipv6.version_17}  AuxVars[]  AssignedVars[] 2303#L451_accept_S1 [1443] L451_accept_S1-->L452_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv6.trafclass=v_hdr.ipv6.trafclass_11}  AuxVars[]  AssignedVars[hdr.ipv6.trafclass] 2304#L452_accept_S1 [1624] L452_accept_S1-->L453_accept_S1: Formula: (and (<= 0 v_hdr.ipv6.trafclass_10) (<= v_hdr.ipv6.trafclass_10 256))  InVars {hdr.ipv6.trafclass=v_hdr.ipv6.trafclass_10}  OutVars{hdr.ipv6.trafclass=v_hdr.ipv6.trafclass_10}  AuxVars[]  AssignedVars[] 2627#L453_accept_S1 [2130] L453_accept_S1-->L454_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv6.flowlabel=v_hdr.ipv6.flowlabel_9}  AuxVars[]  AssignedVars[hdr.ipv6.flowlabel] 3079#L454_accept_S1 [2191] L454_accept_S1-->L455_accept_S1: Formula: (and (<= 0 v_hdr.ipv6.flowlabel_10) (<= v_hdr.ipv6.flowlabel_10 1048576))  InVars {hdr.ipv6.flowlabel=v_hdr.ipv6.flowlabel_10}  OutVars{hdr.ipv6.flowlabel=v_hdr.ipv6.flowlabel_10}  AuxVars[]  AssignedVars[] 3098#L455_accept_S1 [2213] L455_accept_S1-->L456_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv6.payloadlen=v_hdr.ipv6.payloadlen_19}  AuxVars[]  AssignedVars[hdr.ipv6.payloadlen] 2765#L456_accept_S1 [1713] L456_accept_S1-->L457_accept_S1: Formula: (and (<= v_hdr.ipv6.payloadlen_18 65536) (<= 0 v_hdr.ipv6.payloadlen_18))  InVars {hdr.ipv6.payloadlen=v_hdr.ipv6.payloadlen_18}  OutVars{hdr.ipv6.payloadlen=v_hdr.ipv6.payloadlen_18}  AuxVars[]  AssignedVars[] 2687#L457_accept_S1 [1659] L457_accept_S1-->L458_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv6.nextheader=v_hdr.ipv6.nextheader_19}  AuxVars[]  AssignedVars[hdr.ipv6.nextheader] 2688#L458_accept_S1 [1976] L458_accept_S1-->L459_accept_S1: Formula: (and (<= 0 v_hdr.ipv6.nextheader_21) (<= v_hdr.ipv6.nextheader_21 256))  InVars {hdr.ipv6.nextheader=v_hdr.ipv6.nextheader_21}  OutVars{hdr.ipv6.nextheader=v_hdr.ipv6.nextheader_21}  AuxVars[]  AssignedVars[] 3019#L459_accept_S1 [2062] L459_accept_S1-->L460_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv6.hoplimit=v_hdr.ipv6.hoplimit_19}  AuxVars[]  AssignedVars[hdr.ipv6.hoplimit] 2950#L460_accept_S1 [1894] L460_accept_S1-->L461_accept_S1: Formula: (and (<= 0 v_hdr.ipv6.hoplimit_18) (<= v_hdr.ipv6.hoplimit_18 256))  InVars {hdr.ipv6.hoplimit=v_hdr.ipv6.hoplimit_18}  OutVars{hdr.ipv6.hoplimit=v_hdr.ipv6.hoplimit_18}  AuxVars[]  AssignedVars[] 2381#L461_accept_S1 [1480] L461_accept_S1-->L462_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv6.srcAddr=v_hdr.ipv6.srcAddr_16}  AuxVars[]  AssignedVars[hdr.ipv6.srcAddr] 2382#L462_accept_S1 [2047] L462_accept_S1-->L463_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv6.dstAddr=v_hdr.ipv6.dstAddr_17}  AuxVars[]  AssignedVars[hdr.ipv6.dstAddr] 2334#L463_accept_S1 [1457] L463_accept_S1-->L464_accept_S1: Formula: (not v_hdr.ipv4_tunnel.valid_19)  InVars {}  OutVars{hdr.ipv4_tunnel.valid=v_hdr.ipv4_tunnel.valid_19}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.valid] 2335#L464_accept_S1 [1546] L464_accept_S1-->L465_accept_S1: Formula: (= v_emit_37 (store v_emit_38 v_hdr.ipv4_tunnel_9 false))  InVars {emit=v_emit_38, hdr.ipv4_tunnel=v_hdr.ipv4_tunnel_9}  OutVars{emit=v_emit_37, hdr.ipv4_tunnel=v_hdr.ipv4_tunnel_9}  AuxVars[]  AssignedVars[emit] 2504#L465_accept_S1 [2053] L465_accept_S1-->L466_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.version=v_hdr.ipv4_tunnel.version_14}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.version] 2912#L466_accept_S1 [1847] L466_accept_S1-->L467_accept_S1: Formula: (and (<= v_hdr.ipv4_tunnel.version_15 16) (<= 0 v_hdr.ipv4_tunnel.version_15))  InVars {hdr.ipv4_tunnel.version=v_hdr.ipv4_tunnel.version_15}  OutVars{hdr.ipv4_tunnel.version=v_hdr.ipv4_tunnel.version_15}  AuxVars[]  AssignedVars[] 2379#L467_accept_S1 [1479] L467_accept_S1-->L468_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.ihl=v_hdr.ipv4_tunnel.ihl_17}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.ihl] 2380#L468_accept_S1 [2182] L468_accept_S1-->L469_accept_S1: Formula: (and (<= 0 v_hdr.ipv4_tunnel.ihl_15) (<= v_hdr.ipv4_tunnel.ihl_15 16))  InVars {hdr.ipv4_tunnel.ihl=v_hdr.ipv4_tunnel.ihl_15}  OutVars{hdr.ipv4_tunnel.ihl=v_hdr.ipv4_tunnel.ihl_15}  AuxVars[]  AssignedVars[] 2695#L469_accept_S1 [1666] L469_accept_S1-->L470_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.diffserv=v_hdr.ipv4_tunnel.diffserv_17}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.diffserv] 2696#L470_accept_S1 [1669] L470_accept_S1-->L471_accept_S1: Formula: (and (<= v_hdr.ipv4_tunnel.diffserv_16 256) (<= 0 v_hdr.ipv4_tunnel.diffserv_16))  InVars {hdr.ipv4_tunnel.diffserv=v_hdr.ipv4_tunnel.diffserv_16}  OutVars{hdr.ipv4_tunnel.diffserv=v_hdr.ipv4_tunnel.diffserv_16}  AuxVars[]  AssignedVars[] 2700#L471_accept_S1 [1820] L471_accept_S1-->L472_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.totalLen=v_hdr.ipv4_tunnel.totalLen_17}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.totalLen] 2885#L472_accept_S1 [2199] L472_accept_S1-->L473_accept_S1: Formula: (and (<= v_hdr.ipv4_tunnel.totalLen_16 65536) (<= 0 v_hdr.ipv4_tunnel.totalLen_16))  InVars {hdr.ipv4_tunnel.totalLen=v_hdr.ipv4_tunnel.totalLen_16}  OutVars{hdr.ipv4_tunnel.totalLen=v_hdr.ipv4_tunnel.totalLen_16}  AuxVars[]  AssignedVars[] 2629#L473_accept_S1 [1626] L473_accept_S1-->L474_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.identification=v_hdr.ipv4_tunnel.identification_15}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.identification] 2630#L474_accept_S1 [1757] L474_accept_S1-->L475_accept_S1: Formula: (and (<= v_hdr.ipv4_tunnel.identification_14 65536) (<= 0 v_hdr.ipv4_tunnel.identification_14))  InVars {hdr.ipv4_tunnel.identification=v_hdr.ipv4_tunnel.identification_14}  OutVars{hdr.ipv4_tunnel.identification=v_hdr.ipv4_tunnel.identification_14}  AuxVars[]  AssignedVars[] 2821#L475_accept_S1 [2044] L475_accept_S1-->L476_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.flags=v_hdr.ipv4_tunnel.flags_15}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.flags] 2501#L476_accept_S1 [1544] L476_accept_S1-->L477_accept_S1: Formula: (and (<= v_hdr.ipv4_tunnel.flags_16 8) (<= 0 v_hdr.ipv4_tunnel.flags_16))  InVars {hdr.ipv4_tunnel.flags=v_hdr.ipv4_tunnel.flags_16}  OutVars{hdr.ipv4_tunnel.flags=v_hdr.ipv4_tunnel.flags_16}  AuxVars[]  AssignedVars[] 2502#L477_accept_S1 [1657] L477_accept_S1-->L478_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.fragOffset=v_hdr.ipv4_tunnel.fragOffset_14}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.fragOffset] 2500#L478_accept_S1 [1543] L478_accept_S1-->L479_accept_S1: Formula: (and (<= 0 v_hdr.ipv4_tunnel.fragOffset_16) (<= v_hdr.ipv4_tunnel.fragOffset_16 8192))  InVars {hdr.ipv4_tunnel.fragOffset=v_hdr.ipv4_tunnel.fragOffset_16}  OutVars{hdr.ipv4_tunnel.fragOffset=v_hdr.ipv4_tunnel.fragOffset_16}  AuxVars[]  AssignedVars[] 2305#L479_accept_S1 [1444] L479_accept_S1-->L480_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.ttl=v_hdr.ipv4_tunnel.ttl_17}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.ttl] 2306#L480_accept_S1 [2092] L480_accept_S1-->L481_accept_S1: Formula: (and (<= 0 v_hdr.ipv4_tunnel.ttl_16) (<= v_hdr.ipv4_tunnel.ttl_16 256))  InVars {hdr.ipv4_tunnel.ttl=v_hdr.ipv4_tunnel.ttl_16}  OutVars{hdr.ipv4_tunnel.ttl=v_hdr.ipv4_tunnel.ttl_16}  AuxVars[]  AssignedVars[] 2467#L481_accept_S1 [1524] L481_accept_S1-->L482_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.protocol=v_hdr.ipv4_tunnel.protocol_18}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.protocol] 2427#L482_accept_S1 [1503] L482_accept_S1-->L483_accept_S1: Formula: (and (<= v_hdr.ipv4_tunnel.protocol_16 256) (<= 0 v_hdr.ipv4_tunnel.protocol_16))  InVars {hdr.ipv4_tunnel.protocol=v_hdr.ipv4_tunnel.protocol_16}  OutVars{hdr.ipv4_tunnel.protocol=v_hdr.ipv4_tunnel.protocol_16}  AuxVars[]  AssignedVars[] 2428#L483_accept_S1 [2089] L483_accept_S1-->L484_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.hdrChecksum=v_hdr.ipv4_tunnel.hdrChecksum_9}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.hdrChecksum] 3064#L484_accept_S1 [2138] L484_accept_S1-->L485_accept_S1: Formula: (and (<= 0 v_hdr.ipv4_tunnel.hdrChecksum_12) (<= v_hdr.ipv4_tunnel.hdrChecksum_12 65536))  InVars {hdr.ipv4_tunnel.hdrChecksum=v_hdr.ipv4_tunnel.hdrChecksum_12}  OutVars{hdr.ipv4_tunnel.hdrChecksum=v_hdr.ipv4_tunnel.hdrChecksum_12}  AuxVars[]  AssignedVars[] 2906#L485_accept_S1 [1842] L485_accept_S1-->L486_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.srcAddr=v_hdr.ipv4_tunnel.srcAddr_13}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.srcAddr] 2737#L486_accept_S1 [1691] L486_accept_S1-->L487_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.dstAddr=v_hdr.ipv4_tunnel.dstAddr_13}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.dstAddr] 2591#L487_accept_S1 [1600] L487_accept_S1-->L488_accept_S1: Formula: (not v_hdr.ipv4.valid_25)  InVars {}  OutVars{hdr.ipv4.valid=v_hdr.ipv4.valid_25}  AuxVars[]  AssignedVars[hdr.ipv4.valid] 2592#L488_accept_S1 [1730] L488_accept_S1-->L489_accept_S1: Formula: (= v_emit_39 (store v_emit_40 v_hdr.ipv4_3 false))  InVars {hdr.ipv4=v_hdr.ipv4_3, emit=v_emit_40}  OutVars{hdr.ipv4=v_hdr.ipv4_3, emit=v_emit_39}  AuxVars[]  AssignedVars[emit] 2787#L489_accept_S1 [2125] L489_accept_S1-->L490_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.version=v_hdr.ipv4.version_11}  AuxVars[]  AssignedVars[hdr.ipv4.version] 3076#L490_accept_S1 [2162] L490_accept_S1-->L491_accept_S1: Formula: (and (<= 0 v_hdr.ipv4.version_13) (<= v_hdr.ipv4.version_13 16))  InVars {hdr.ipv4.version=v_hdr.ipv4.version_13}  OutVars{hdr.ipv4.version=v_hdr.ipv4.version_13}  AuxVars[]  AssignedVars[] 2490#L491_accept_S1 [1538] L491_accept_S1-->L492_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.ihl=v_hdr.ipv4.ihl_12}  AuxVars[]  AssignedVars[hdr.ipv4.ihl] 2491#L492_accept_S1 [1952] L492_accept_S1-->L493_accept_S1: Formula: (and (<= 0 v_hdr.ipv4.ihl_9) (<= v_hdr.ipv4.ihl_9 16))  InVars {hdr.ipv4.ihl=v_hdr.ipv4.ihl_9}  OutVars{hdr.ipv4.ihl=v_hdr.ipv4.ihl_9}  AuxVars[]  AssignedVars[] 2923#L493_accept_S1 [1864] L493_accept_S1-->L494_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.diffserv=v_hdr.ipv4.diffserv_10}  AuxVars[]  AssignedVars[hdr.ipv4.diffserv] 2673#L494_accept_S1 [1650] L494_accept_S1-->L495_accept_S1: Formula: (and (<= v_hdr.ipv4.diffserv_13 256) (<= 0 v_hdr.ipv4.diffserv_13))  InVars {hdr.ipv4.diffserv=v_hdr.ipv4.diffserv_13}  OutVars{hdr.ipv4.diffserv=v_hdr.ipv4.diffserv_13}  AuxVars[]  AssignedVars[] 2519#L495_accept_S1 [1555] L495_accept_S1-->L496_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.totalLen=v_hdr.ipv4.totalLen_14}  AuxVars[]  AssignedVars[hdr.ipv4.totalLen] 2520#L496_accept_S1 [1721] L496_accept_S1-->L497_accept_S1: Formula: (and (<= 0 v_hdr.ipv4.totalLen_16) (<= v_hdr.ipv4.totalLen_16 65536))  InVars {hdr.ipv4.totalLen=v_hdr.ipv4.totalLen_16}  OutVars{hdr.ipv4.totalLen=v_hdr.ipv4.totalLen_16}  AuxVars[]  AssignedVars[] 2776#L497_accept_S1 [2216] L497_accept_S1-->L498_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.identification=v_hdr.ipv4.identification_12}  AuxVars[]  AssignedVars[hdr.ipv4.identification] 3020#L498_accept_S1 [1980] L498_accept_S1-->L499_accept_S1: Formula: (and (<= 0 v_hdr.ipv4.identification_10) (<= v_hdr.ipv4.identification_10 65536))  InVars {hdr.ipv4.identification=v_hdr.ipv4.identification_10}  OutVars{hdr.ipv4.identification=v_hdr.ipv4.identification_10}  AuxVars[]  AssignedVars[] 2836#L499_accept_S1 [1767] L499_accept_S1-->L500_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.flags=v_hdr.ipv4.flags_12}  AuxVars[]  AssignedVars[hdr.ipv4.flags] 2782#L500_accept_S1 [1725] L500_accept_S1-->L501_accept_S1: Formula: (and (<= v_hdr.ipv4.flags_13 8) (<= 0 v_hdr.ipv4.flags_13))  InVars {hdr.ipv4.flags=v_hdr.ipv4.flags_13}  OutVars{hdr.ipv4.flags=v_hdr.ipv4.flags_13}  AuxVars[]  AssignedVars[] 2586#L501_accept_S1 [1595] L501_accept_S1-->L502_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.fragOffset=v_hdr.ipv4.fragOffset_13}  AuxVars[]  AssignedVars[hdr.ipv4.fragOffset] 2587#L502_accept_S1 [2118] L502_accept_S1-->L503_accept_S1: Formula: (and (<= v_hdr.ipv4.fragOffset_10 8192) (<= 0 v_hdr.ipv4.fragOffset_10))  InVars {hdr.ipv4.fragOffset=v_hdr.ipv4.fragOffset_10}  OutVars{hdr.ipv4.fragOffset=v_hdr.ipv4.fragOffset_10}  AuxVars[]  AssignedVars[] 3075#L503_accept_S1 [2145] L503_accept_S1-->L504_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.ttl=v_hdr.ipv4.ttl_10}  AuxVars[]  AssignedVars[hdr.ipv4.ttl] 2390#L504_accept_S1 [1483] L504_accept_S1-->L505_accept_S1: Formula: (and (<= v_hdr.ipv4.ttl_13 256) (<= 0 v_hdr.ipv4.ttl_13))  InVars {hdr.ipv4.ttl=v_hdr.ipv4.ttl_13}  OutVars{hdr.ipv4.ttl=v_hdr.ipv4.ttl_13}  AuxVars[]  AssignedVars[] 2391#L505_accept_S1 [2057] L505_accept_S1-->L506_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.protocol=v_hdr.ipv4.protocol_11}  AuxVars[]  AssignedVars[hdr.ipv4.protocol] 2932#L506_accept_S1 [1872] L506_accept_S1-->L507_accept_S1: Formula: (and (<= 0 v_hdr.ipv4.protocol_14) (<= v_hdr.ipv4.protocol_14 256))  InVars {hdr.ipv4.protocol=v_hdr.ipv4.protocol_14}  OutVars{hdr.ipv4.protocol=v_hdr.ipv4.protocol_14}  AuxVars[]  AssignedVars[] 2933#L507_accept_S1 [2135] L507_accept_S1-->L508_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.hdrChecksum=v_hdr.ipv4.hdrChecksum_10}  AuxVars[]  AssignedVars[hdr.ipv4.hdrChecksum] 3043#L508_accept_S1 [2024] L508_accept_S1-->L509_accept_S1: Formula: (and (<= v_hdr.ipv4.hdrChecksum_12 65536) (<= 0 v_hdr.ipv4.hdrChecksum_12))  InVars {hdr.ipv4.hdrChecksum=v_hdr.ipv4.hdrChecksum_12}  OutVars{hdr.ipv4.hdrChecksum=v_hdr.ipv4.hdrChecksum_12}  AuxVars[]  AssignedVars[] 2973#L509_accept_S1 [1921] L509_accept_S1-->L510_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.srcAddr=v_hdr.ipv4.srcAddr_9}  AuxVars[]  AssignedVars[hdr.ipv4.srcAddr] 2974#L510_accept_S1 [2224] L510_accept_S1-->L511_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_15}  AuxVars[]  AssignedVars[hdr.ipv4.dstAddr] 2684#L511_accept_S1 [1658] L511_accept_S1-->L512_accept_S1: Formula: (= v_hdr.ipv4.dstAddr_17 v__old_hdr.ipv4.dstAddr_13)  InVars {hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_17}  OutVars{_old_hdr.ipv4.dstAddr=v__old_hdr.ipv4.dstAddr_13, hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_17}  AuxVars[]  AssignedVars[_old_hdr.ipv4.dstAddr] 2378#L512_accept_S1 [1478] L512_accept_S1-->L513_accept_S1: Formula: (= v_hdr.ipv4.dstAddr_16 v__old_hdr.ipv4.dstAddr_12)  InVars {hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_16}  OutVars{_old_hdr.ipv4.dstAddr=v__old_hdr.ipv4.dstAddr_12, hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_16}  AuxVars[]  AssignedVars[_old_hdr.ipv4.dstAddr] 2296#L513_accept_S1 [1439] L513_accept_S1-->L514_accept_S1: Formula: (not v_hdr.tcp.valid_30)  InVars {}  OutVars{hdr.tcp.valid=v_hdr.tcp.valid_30}  AuxVars[]  AssignedVars[hdr.tcp.valid] 2297#L514_accept_S1 [2183] L514_accept_S1-->L515_accept_S1: Formula: (= v_emit_35 (store v_emit_36 v_hdr.tcp_3 false))  InVars {hdr.tcp=v_hdr.tcp_3, emit=v_emit_36}  OutVars{hdr.tcp=v_hdr.tcp_3, emit=v_emit_35}  AuxVars[]  AssignedVars[emit] 2454#L515_accept_S1 [1518] L515_accept_S1-->L516_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.srcport=v_hdr.tcp.srcport_10}  AuxVars[]  AssignedVars[hdr.tcp.srcport] 2455#L516_accept_S1 [1866] L516_accept_S1-->L517_accept_S1: Formula: (and (<= 0 v_hdr.tcp.srcport_11) (<= v_hdr.tcp.srcport_11 65536))  InVars {hdr.tcp.srcport=v_hdr.tcp.srcport_11}  OutVars{hdr.tcp.srcport=v_hdr.tcp.srcport_11}  AuxVars[]  AssignedVars[] 2744#L517_accept_S1 [1698] L517_accept_S1-->L518_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.dstport=v_hdr.tcp.dstport_11}  AuxVars[]  AssignedVars[hdr.tcp.dstport] 2494#L518_accept_S1 [1540] L518_accept_S1-->L519_accept_S1: Formula: (and (<= v_hdr.tcp.dstport_12 65536) (<= 0 v_hdr.tcp.dstport_12))  InVars {hdr.tcp.dstport=v_hdr.tcp.dstport_12}  OutVars{hdr.tcp.dstport=v_hdr.tcp.dstport_12}  AuxVars[]  AssignedVars[] 2495#L519_accept_S1 [2187] L519_accept_S1-->L520_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.sequence=v_hdr.tcp.sequence_41}  AuxVars[]  AssignedVars[hdr.tcp.sequence] 3044#L520_accept_S1 [2025] L520_accept_S1-->L521_accept_S1: Formula: (and (<= 0 v_hdr.tcp.sequence_42) (<= v_hdr.tcp.sequence_42 4294967296))  InVars {hdr.tcp.sequence=v_hdr.tcp.sequence_42}  OutVars{hdr.tcp.sequence=v_hdr.tcp.sequence_42}  AuxVars[]  AssignedVars[] 2831#L521_accept_S1 [1765] L521_accept_S1-->L522_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.ackseq=v_hdr.tcp.ackseq_42}  AuxVars[]  AssignedVars[hdr.tcp.ackseq] 2832#L522_accept_S1 [2090] L522_accept_S1-->L523_accept_S1: Formula: (and (<= v_hdr.tcp.ackseq_41 4294967296) (<= 0 v_hdr.tcp.ackseq_41))  InVars {hdr.tcp.ackseq=v_hdr.tcp.ackseq_41}  OutVars{hdr.tcp.ackseq=v_hdr.tcp.ackseq_41}  AuxVars[]  AssignedVars[] 2875#L523_accept_S1 [1807] L523_accept_S1-->L524_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.headerlength=v_hdr.tcp.headerlength_9}  AuxVars[]  AssignedVars[hdr.tcp.headerlength] 2876#L524_accept_S1 [1858] L524_accept_S1-->L525_accept_S1: Formula: (and (<= v_hdr.tcp.headerlength_12 16) (<= 0 v_hdr.tcp.headerlength_12))  InVars {hdr.tcp.headerlength=v_hdr.tcp.headerlength_12}  OutVars{hdr.tcp.headerlength=v_hdr.tcp.headerlength_12}  AuxVars[]  AssignedVars[] 2503#L525_accept_S1 [1545] L525_accept_S1-->L526_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.reservation=v_hdr.tcp.reservation_10}  AuxVars[]  AssignedVars[hdr.tcp.reservation] 2401#L526_accept_S1 [1491] L526_accept_S1-->L527_accept_S1: Formula: (and (<= v_hdr.tcp.reservation_11 64) (<= 0 v_hdr.tcp.reservation_11))  InVars {hdr.tcp.reservation=v_hdr.tcp.reservation_11}  OutVars{hdr.tcp.reservation=v_hdr.tcp.reservation_11}  AuxVars[]  AssignedVars[] 2402#L527_accept_S1 [2059] L527_accept_S1-->L528_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.URG=v_hdr.tcp.URG_11}  AuxVars[]  AssignedVars[hdr.tcp.URG] 2981#L528_accept_S1 [1926] L528_accept_S1-->L529_accept_S1: Formula: (and (<= v_hdr.tcp.URG_10 2) (<= 0 v_hdr.tcp.URG_10))  InVars {hdr.tcp.URG=v_hdr.tcp.URG_10}  OutVars{hdr.tcp.URG=v_hdr.tcp.URG_10}  AuxVars[]  AssignedVars[] 2859#L529_accept_S1 [1791] L529_accept_S1-->L530_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.ACK=v_hdr.tcp.ACK_10}  AuxVars[]  AssignedVars[hdr.tcp.ACK] 2860#L530_accept_S1 [2041] L530_accept_S1-->L531_accept_S1: Formula: (and (<= 0 v_hdr.tcp.ACK_12) (<= v_hdr.tcp.ACK_12 2))  InVars {hdr.tcp.ACK=v_hdr.tcp.ACK_12}  OutVars{hdr.tcp.ACK=v_hdr.tcp.ACK_12}  AuxVars[]  AssignedVars[] 3030#L531_accept_S1 [2000] L531_accept_S1-->L532_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.PSH=v_hdr.tcp.PSH_10}  AuxVars[]  AssignedVars[hdr.tcp.PSH] 3031#L532_accept_S1 [2042] L532_accept_S1-->L533_accept_S1: Formula: (and (<= v_hdr.tcp.PSH_12 2) (<= 0 v_hdr.tcp.PSH_12))  InVars {hdr.tcp.PSH=v_hdr.tcp.PSH_12}  OutVars{hdr.tcp.PSH=v_hdr.tcp.PSH_12}  AuxVars[]  AssignedVars[] 2917#L533_accept_S1 [1859] L533_accept_S1-->L534_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.RST=v_hdr.tcp.RST_12}  AuxVars[]  AssignedVars[hdr.tcp.RST] 2717#L534_accept_S1 [1679] L534_accept_S1-->L535_accept_S1: Formula: (and (<= v_hdr.tcp.RST_10 2) (<= 0 v_hdr.tcp.RST_10))  InVars {hdr.tcp.RST=v_hdr.tcp.RST_10}  OutVars{hdr.tcp.RST=v_hdr.tcp.RST_10}  AuxVars[]  AssignedVars[] 2718#L535_accept_S1 [1993] L535_accept_S1-->L536_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.SYN=v_hdr.tcp.SYN_12}  AuxVars[]  AssignedVars[hdr.tcp.SYN] 2532#L536_accept_S1 [1562] L536_accept_S1-->L537_accept_S1: Formula: (and (<= 0 v_hdr.tcp.SYN_10) (<= v_hdr.tcp.SYN_10 2))  InVars {hdr.tcp.SYN=v_hdr.tcp.SYN_10}  OutVars{hdr.tcp.SYN=v_hdr.tcp.SYN_10}  AuxVars[]  AssignedVars[] 2533#L537_accept_S1 [1970] L537_accept_S1-->L538_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.FIN=v_hdr.tcp.FIN_12}  AuxVars[]  AssignedVars[hdr.tcp.FIN] 2947#L538_accept_S1 [1891] L538_accept_S1-->L539_accept_S1: Formula: (and (<= 0 v_hdr.tcp.FIN_11) (<= v_hdr.tcp.FIN_11 2))  InVars {hdr.tcp.FIN=v_hdr.tcp.FIN_11}  OutVars{hdr.tcp.FIN=v_hdr.tcp.FIN_11}  AuxVars[]  AssignedVars[] 2948#L539_accept_S1 [2032] L539_accept_S1-->L540_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.windowsize=v_hdr.tcp.windowsize_11}  AuxVars[]  AssignedVars[hdr.tcp.windowsize] 2584#L540_accept_S1 [1594] L540_accept_S1-->L541_accept_S1: Formula: (and (<= 0 v_hdr.tcp.windowsize_9) (<= v_hdr.tcp.windowsize_9 65536))  InVars {hdr.tcp.windowsize=v_hdr.tcp.windowsize_9}  OutVars{hdr.tcp.windowsize=v_hdr.tcp.windowsize_9}  AuxVars[]  AssignedVars[] 2585#L541_accept_S1 [1660] L541_accept_S1-->L542_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.checksum=v_hdr.tcp.checksum_11}  AuxVars[]  AssignedVars[hdr.tcp.checksum] 2689#L542_accept_S1 [1981] L542_accept_S1-->L543_accept_S1: Formula: (and (<= v_hdr.tcp.checksum_9 65536) (<= 0 v_hdr.tcp.checksum_9))  InVars {hdr.tcp.checksum=v_hdr.tcp.checksum_9}  OutVars{hdr.tcp.checksum=v_hdr.tcp.checksum_9}  AuxVars[]  AssignedVars[] 2362#L543_accept_S1 [1468] L543_accept_S1-->L544_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.pointer=v_hdr.tcp.pointer_12}  AuxVars[]  AssignedVars[hdr.tcp.pointer] 2363#L544_accept_S1 [1473] L544_accept_S1-->L545_accept_S1: Formula: (and (<= 0 v_hdr.tcp.pointer_9) (<= v_hdr.tcp.pointer_9 65536))  InVars {hdr.tcp.pointer=v_hdr.tcp.pointer_9}  OutVars{hdr.tcp.pointer=v_hdr.tcp.pointer_9}  AuxVars[]  AssignedVars[] 2372#L545_accept_S1 [2018] L545_accept_S1-->L546_accept_S1: Formula: (not v_hdr.udp_tunnel.valid_19)  InVars {}  OutVars{hdr.udp_tunnel.valid=v_hdr.udp_tunnel.valid_19}  AuxVars[]  AssignedVars[hdr.udp_tunnel.valid] 2619#L546_accept_S1 [1615] L546_accept_S1-->L547_accept_S1: Formula: (= v_emit_21 (store v_emit_22 v_hdr.udp_tunnel_8 false))  InVars {emit=v_emit_22, hdr.udp_tunnel=v_hdr.udp_tunnel_8}  OutVars{emit=v_emit_21, hdr.udp_tunnel=v_hdr.udp_tunnel_8}  AuxVars[]  AssignedVars[emit] 2620#L547_accept_S1 [2099] L547_accept_S1-->L548_accept_S1: Formula: true  InVars {}  OutVars{hdr.udp_tunnel.srcport=v_hdr.udp_tunnel.srcport_15}  AuxVars[]  AssignedVars[hdr.udp_tunnel.srcport] 2645#L548_accept_S1 [1635] L548_accept_S1-->L549_accept_S1: Formula: (and (<= v_hdr.udp_tunnel.srcport_17 65536) (<= 0 v_hdr.udp_tunnel.srcport_17))  InVars {hdr.udp_tunnel.srcport=v_hdr.udp_tunnel.srcport_17}  OutVars{hdr.udp_tunnel.srcport=v_hdr.udp_tunnel.srcport_17}  AuxVars[]  AssignedVars[] 2646#L549_accept_S1 [2225] L549_accept_S1-->L550_accept_S1: Formula: true  InVars {}  OutVars{hdr.udp_tunnel.dstport=v_hdr.udp_tunnel.dstport_17}  AuxVars[]  AssignedVars[hdr.udp_tunnel.dstport] 2829#L550_accept_S1 [1764] L550_accept_S1-->L551_accept_S1: Formula: (and (<= v_hdr.udp_tunnel.dstport_16 65536) (<= 0 v_hdr.udp_tunnel.dstport_16))  InVars {hdr.udp_tunnel.dstport=v_hdr.udp_tunnel.dstport_16}  OutVars{hdr.udp_tunnel.dstport=v_hdr.udp_tunnel.dstport_16}  AuxVars[]  AssignedVars[] 2830#L551_accept_S1 [2102] L551_accept_S1-->L552_accept_S1: Formula: true  InVars {}  OutVars{hdr.udp_tunnel.userlength=v_hdr.udp_tunnel.userlength_14}  AuxVars[]  AssignedVars[hdr.udp_tunnel.userlength] 3015#L552_accept_S1 [1971] L552_accept_S1-->L553_accept_S1: Formula: (and (<= 0 v_hdr.udp_tunnel.userlength_15) (<= v_hdr.udp_tunnel.userlength_15 65536))  InVars {hdr.udp_tunnel.userlength=v_hdr.udp_tunnel.userlength_15}  OutVars{hdr.udp_tunnel.userlength=v_hdr.udp_tunnel.userlength_15}  AuxVars[]  AssignedVars[] 3016#L553_accept_S1 [1998] L553_accept_S1-->L554_accept_S1: Formula: true  InVars {}  OutVars{hdr.udp_tunnel.checksum=v_hdr.udp_tunnel.checksum_17}  AuxVars[]  AssignedVars[hdr.udp_tunnel.checksum] 2479#L554_accept_S1 [1532] L554_accept_S1-->havocProcedureFINAL_accept_S1: Formula: (and (<= v_hdr.udp_tunnel.checksum_16 65536) (<= 0 v_hdr.udp_tunnel.checksum_16))  InVars {hdr.udp_tunnel.checksum=v_hdr.udp_tunnel.checksum_16}  OutVars{hdr.udp_tunnel.checksum=v_hdr.udp_tunnel.checksum_16}  AuxVars[]  AssignedVars[] 2480#havocProcedureFINAL_accept_S1 [1756] havocProcedureFINAL_accept_S1-->havocProcedureEXIT_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2530#havocProcedureEXIT_accept_S1 >[2239] havocProcedureEXIT_accept_S1-->L559-D55: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2531#L559-D55 [2068] L559-D55-->L559_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2338#L559_accept_S1 [1459] L559_accept_S1-->L559_accept_S1-D21: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 2340#L559_accept_S1-D21 [2131] L559_accept_S1-D21-->_parser_MyParserENTRY_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2492#_parser_MyParserENTRY_accept_S1 [1539] _parser_MyParserENTRY_accept_S1-->_parser_MyParserENTRY_accept_S1-D13: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 2493#_parser_MyParserENTRY_accept_S1-D13 [2142] _parser_MyParserENTRY_accept_S1-D13-->startENTRY_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2822#startENTRY_accept_S1 [1759] startENTRY_accept_S1-->L727_accept_S1: Formula: v_hdr.ethernet.valid_15  InVars {}  OutVars{hdr.ethernet.valid=v_hdr.ethernet.valid_15}  AuxVars[]  AssignedVars[hdr.ethernet.valid] 2602#L727_accept_S1 [1606] L727_accept_S1-->L730_accept_S1: Formula: (not (= v_hdr.ethernet.etherType_33 34525))  InVars {hdr.ethernet.etherType=v_hdr.ethernet.etherType_33}  OutVars{hdr.ethernet.etherType=v_hdr.ethernet.etherType_33}  AuxVars[]  AssignedVars[] 2603#L730_accept_S1 [1878] L730_accept_S1-->L730-1_accept_S1: Formula: (not (= v_hdr.ethernet.etherType_39 2048))  InVars {hdr.ethernet.etherType=v_hdr.ethernet.etherType_39}  OutVars{hdr.ethernet.etherType=v_hdr.ethernet.etherType_39}  AuxVars[]  AssignedVars[] 2498#L730-1_accept_S1 [1542] L730-1_accept_S1-->startEXIT_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2499#startEXIT_accept_S1 >[2261] startEXIT_accept_S1-->_parser_MyParserFINAL-D65: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2521#_parser_MyParserFINAL-D65 [1556] _parser_MyParserFINAL-D65-->_parser_MyParserFINAL_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2522#_parser_MyParserFINAL_accept_S1 [1557] _parser_MyParserFINAL_accept_S1-->_parser_MyParserEXIT_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2523#_parser_MyParserEXIT_accept_S1 >[2247] _parser_MyParserEXIT_accept_S1-->L560-D103: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2969#L560-D103 [1958] L560-D103-->L560_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2746#L560_accept_S1 [2028] L560_accept_S1-->L560_accept_S1-D15: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 3045#L560_accept_S1-D15 [2180] L560_accept_S1-D15-->MyVerifyChecksumFINAL_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2745#MyVerifyChecksumFINAL_accept_S1 [1697] MyVerifyChecksumFINAL_accept_S1-->MyVerifyChecksumEXIT_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2747#MyVerifyChecksumEXIT_accept_S1 >[2310] MyVerifyChecksumEXIT_accept_S1-->L561-D73: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2573#L561-D73 [1589] L561-D73-->L561_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2292#L561_accept_S1 [1888] L561_accept_S1-->L561_accept_S1-D5: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 2791#L561_accept_S1-D5 [1733] L561_accept_S1-D5-->MyIngressENTRY_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2792#MyIngressENTRY_accept_S1 [1899] MyIngressENTRY_accept_S1-->L259_accept_S1: Formula: (= v_standard_metadata.ingress_port_15 0)  InVars {standard_metadata.ingress_port=v_standard_metadata.ingress_port_15}  OutVars{standard_metadata.ingress_port=v_standard_metadata.ingress_port_15}  AuxVars[]  AssignedVars[] 2956#L259_accept_S1 [2134] L259_accept_S1-->L266_accept_S1: Formula: (not (= v_hdr.ipv4.dstAddr_21 2071690107))  InVars {hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_21}  OutVars{hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_21}  AuxVars[]  AssignedVars[] 2392#L266_accept_S1 [1486] L266_accept_S1-->L258_accept_S1: Formula: (or (= 281474976710655 v_hdr.ethernet.dstAddr_38) (= v_hdr.ethernet.srcAddr_29 0))  InVars {hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_29, hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_38}  OutVars{hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_29, hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_38}  AuxVars[]  AssignedVars[] 2393#L258_accept_S1 [1869] L258_accept_S1-->MyIngressEXIT_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2928#MyIngressEXIT_accept_S1 >[2343] MyIngressEXIT_accept_S1-->L562-D107: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 3025#L562-D107 [1992] L562-D107-->L562_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2329#L562_accept_S1 [2153] L562_accept_S1-->L562_accept_S1-D49: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 3087#L562_accept_S1-D49 [2198] L562_accept_S1-D49-->MyEgressENTRY_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2429#MyEgressENTRY_accept_S1 [1505] MyEgressENTRY_accept_S1-->L249_accept_S1: Formula: (or (not v_hdr.tcp.valid_34) (not (= 0 v_standard_metadata.egress_port_36)))  InVars {standard_metadata.egress_port=v_standard_metadata.egress_port_36, hdr.tcp.valid=v_hdr.tcp.valid_34}  OutVars{standard_metadata.egress_port=v_standard_metadata.egress_port_36, hdr.tcp.valid=v_hdr.tcp.valid_34}  AuxVars[]  AssignedVars[] 2330#L249_accept_S1 [1553] L249_accept_S1-->MyEgressEXIT_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2517#MyEgressEXIT_accept_S1 >[2276] MyEgressEXIT_accept_S1-->L563-D89: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2811#L563-D89 [1774] L563-D89-->L563_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2680#L563_accept_S1 [2161] L563_accept_S1-->L563_accept_S1-D31: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 3024#L563_accept_S1-D31 [1990] L563_accept_S1-D31-->MyComputeChecksumFINAL_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2878#MyComputeChecksumFINAL_accept_S1 [1810] MyComputeChecksumFINAL_accept_S1-->MyComputeChecksumEXIT_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2679#MyComputeChecksumEXIT_accept_S1 >[2305] MyComputeChecksumEXIT_accept_S1-->L564-D109: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2681#L564-D109 [1915] L564-D109-->L564_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2968#L564_accept_S1 [1984] L564_accept_S1-->L566_accept_S1: Formula: (not v_forward_31)  InVars {forward=v_forward_31}  OutVars{forward=v_forward_31}  AuxVars[]  AssignedVars[] 2676#L566_accept_S1 [1654] L566_accept_S1-->L565-1_accept_S1: Formula: v_drop_13  InVars {}  OutVars{drop=v_drop_13}  AuxVars[]  AssignedVars[drop] 2677#L565-1_accept_S1 [2058] L565-1_accept_S1-->L569_accept_S1: Formula: (let ((.cse0 (= v__old_hdr.ethernet.srcAddr_15 0))) (or (and .cse0 (not v__p4ltl_0_7)) (and v__p4ltl_0_7 (not .cse0))))  InVars {_old_hdr.ethernet.srcAddr=v__old_hdr.ethernet.srcAddr_15}  OutVars{_p4ltl_0=v__p4ltl_0_7, _old_hdr.ethernet.srcAddr=v__old_hdr.ethernet.srcAddr_15}  AuxVars[]  AssignedVars[_p4ltl_0] 2631#L569_accept_S1 [1627] L569_accept_S1-->L570_accept_S1: Formula: (let ((.cse0 (= 2071690107 v__old_hdr.ipv4.dstAddr_15))) (or (and v__p4ltl_1_7 (not .cse0)) (and .cse0 (not v__p4ltl_1_7))))  InVars {_old_hdr.ipv4.dstAddr=v__old_hdr.ipv4.dstAddr_15}  OutVars{_old_hdr.ipv4.dstAddr=v__old_hdr.ipv4.dstAddr_15, _p4ltl_1=v__p4ltl_1_7}  AuxVars[]  AssignedVars[_p4ltl_1] 2632#L570_accept_S1 [2010] L570_accept_S1-->L571_accept_S1: Formula: (let ((.cse0 (= 281474976710655 v__old_hdr.ethernet.dstAddr_14))) (or (and v__p4ltl_2_6 (not .cse0)) (and .cse0 (not v__p4ltl_2_6))))  InVars {_old_hdr.ethernet.dstAddr=v__old_hdr.ethernet.dstAddr_14}  OutVars{_p4ltl_2=v__p4ltl_2_6, _old_hdr.ethernet.dstAddr=v__old_hdr.ethernet.dstAddr_14}  AuxVars[]  AssignedVars[_p4ltl_2] 3037#L571_accept_S1 [2046] L571_accept_S1-->mainFINAL_accept_S1: Formula: (let ((.cse0 (= v_standard_metadata.ingress_port_20 0))) (or (and (not v__p4ltl_3_7) (not .cse0)) (and v__p4ltl_3_7 .cse0)))  InVars {standard_metadata.ingress_port=v_standard_metadata.ingress_port_20}  OutVars{standard_metadata.ingress_port=v_standard_metadata.ingress_port_20, _p4ltl_3=v__p4ltl_3_7}  AuxVars[]  AssignedVars[_p4ltl_3] 2868#mainFINAL_accept_S1 [1800] mainFINAL_accept_S1-->mainEXIT_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2869#mainEXIT_accept_S1 >[2336] mainEXIT_accept_S1-->L577-1-D71: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 2277#L577-1-D71 [1433] L577-1-D71-->L577-1_accept_S1: Formula: (and v__p4ltl_3_11 v__p4ltl_2_11 v__p4ltl_1_11 v__p4ltl_0_11 (or (not v__p4ltl_2_11) (not v__p4ltl_0_11) (not v__p4ltl_3_11) (not v__p4ltl_1_11) (= 1 v_standard_metadata.egress_port_32)))  InVars {_p4ltl_2=v__p4ltl_2_11, standard_metadata.egress_port=v_standard_metadata.egress_port_32, _p4ltl_3=v__p4ltl_3_11, _p4ltl_0=v__p4ltl_0_11, _p4ltl_1=v__p4ltl_1_11}  OutVars{_p4ltl_2=v__p4ltl_2_11, standard_metadata.egress_port=v_standard_metadata.egress_port_32, _p4ltl_3=v__p4ltl_3_11, _p4ltl_0=v__p4ltl_0_11, _p4ltl_1=v__p4ltl_1_11}  AuxVars[]  AssignedVars[] 2280#L577-1_accept_S1 
[2023-01-16 05:55:33,689 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2023-01-16 05:55:33,689 INFO  L85        PathProgramCache]: Analyzing trace with hash 743908726, now seen corresponding path program 1 times
[2023-01-16 05:55:33,689 INFO  L118   FreeRefinementEngine]: Executing refinement strategy CAMEL
[2023-01-16 05:55:33,690 INFO  L333   FreeRefinementEngine]: Using trace check IpTcStrategyModuleSmtInterpolCraig [1471744583]
[2023-01-16 05:55:33,690 INFO  L95    rtionOrderModulation]: Keeping assertion order NOT_INCREMENTALLY
[2023-01-16 05:55:33,690 INFO  L127          SolverBuilder]: Constructing new instance of SMTInterpol with explicit timeout -1 ms and remaining time -1 ms
[2023-01-16 05:55:33,731 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-01-16 05:55:33,954 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 2
[2023-01-16 05:55:33,980 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-01-16 05:55:34,134 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 1
[2023-01-16 05:55:34,160 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-01-16 05:55:34,233 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 141
[2023-01-16 05:55:34,238 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-01-16 05:55:34,258 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 1
[2023-01-16 05:55:34,260 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-01-16 05:55:34,262 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 154
[2023-01-16 05:55:34,264 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-01-16 05:55:34,346 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 159
[2023-01-16 05:55:34,351 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-01-16 05:55:34,405 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 167
[2023-01-16 05:55:34,409 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-01-16 05:55:34,412 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 173
[2023-01-16 05:55:34,415 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-01-16 05:55:34,419 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2023-01-16 05:55:34,420 INFO  L136   FreeRefinementEngine]: Strategy CAMEL found an infeasible trace
[2023-01-16 05:55:34,420 INFO  L333   FreeRefinementEngine]: Using interpolant generator IpTcStrategyModuleSmtInterpolCraig [1471744583]
[2023-01-16 05:55:34,420 INFO  L157   FreeRefinementEngine]: IpTcStrategyModuleSmtInterpolCraig [1471744583] provided 1 perfect and 0 imperfect interpolant sequences
[2023-01-16 05:55:34,420 INFO  L184   FreeRefinementEngine]: Found 1 perfect and 0 imperfect interpolant sequences.
[2023-01-16 05:55:34,420 INFO  L197   FreeRefinementEngine]: Number of different interpolants: perfect sequences [10] imperfect sequences [] total 10
[2023-01-16 05:55:34,420 INFO  L121   tionRefinementEngine]: Using interpolant automaton builder IpAbStrategyModuleStraightlineAll [1040163409]
[2023-01-16 05:55:34,421 INFO  L85    oduleStraightlineAll]: Using 1 perfect interpolants to construct interpolant automaton
[2023-01-16 05:55:34,424 INFO  L757   eck$LassoCheckResult]: stem already infeasible
[2023-01-16 05:55:34,424 INFO  L100   FreeRefinementEngine]: Using predicate unifier PredicateUnifier provided by strategy CAMEL
[2023-01-16 05:55:34,425 INFO  L143   InterpolantAutomaton]: Constructing interpolant automaton starting with 11 interpolants.
[2023-01-16 05:55:34,425 INFO  L145   InterpolantAutomaton]: CoverageRelationStatistics Valid=31, Invalid=79, Unknown=0, NotChecked=0, Total=110
[2023-01-16 05:55:34,426 INFO  L87              Difference]: Start difference. First operand 987 states and 1035 transitions. cyclomatic complexity: 49 Second operand  has 11 states, 10 states have (on average 17.3) internal successors, (173), 4 states have internal predecessors, (173), 2 states have call successors, (9), 7 states have call predecessors, (9), 3 states have return successors, (8), 3 states have call predecessors, (8), 2 states have call successors, (8)
[2023-01-16 05:55:38,263 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2023-01-16 05:55:38,263 INFO  L93              Difference]: Finished difference Result 1181 states and 1254 transitions.
[2023-01-16 05:55:38,264 INFO  L141   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 28 states. 
[2023-01-16 05:55:38,264 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1181 states and 1254 transitions.
[2023-01-16 05:55:38,269 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 14
[2023-01-16 05:55:38,275 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1181 states to 1181 states and 1254 transitions.
[2023-01-16 05:55:38,275 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2
[2023-01-16 05:55:38,275 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2
[2023-01-16 05:55:38,275 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1181 states and 1254 transitions.
[2023-01-16 05:55:38,277 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2023-01-16 05:55:38,277 INFO  L369   hiAutomatonCegarLoop]: Abstraction has 1181 states and 1254 transitions.
[2023-01-16 05:55:38,278 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1181 states and 1254 transitions.
[2023-01-16 05:55:38,292 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1181 to 1079.
[2023-01-16 05:55:38,293 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand  has 1079 states, 926 states have (on average 1.0496760259179265) internal successors, (972), 926 states have internal predecessors, (972), 77 states have call successors, (77), 77 states have call predecessors, (77), 76 states have return successors, (86), 76 states have call predecessors, (86), 76 states have call successors, (86)
[2023-01-16 05:55:38,295 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1079 states to 1079 states and 1135 transitions.
[2023-01-16 05:55:38,295 INFO  L392   hiAutomatonCegarLoop]: Abstraction has 1079 states and 1135 transitions.
[2023-01-16 05:55:38,296 INFO  L399   stractBuchiCegarLoop]: Abstraction has 1079 states and 1135 transitions.
[2023-01-16 05:55:38,296 INFO  L287   stractBuchiCegarLoop]: ======== Iteration 3 ============
[2023-01-16 05:55:38,296 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1079 states and 1135 transitions.
[2023-01-16 05:55:38,299 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2023-01-16 05:55:38,299 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2023-01-16 05:55:38,299 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2023-01-16 05:55:38,301 INFO  L179   hiAutomatonCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2023-01-16 05:55:38,301 INFO  L180   hiAutomatonCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2023-01-16 05:55:38,303 INFO  L752   eck$LassoCheckResult]: Stem: 4865#ULTIMATE.startENTRY_NONWA [1500] ULTIMATE.startENTRY_NONWA-->L577-1_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 4866#L577-1_T0_init [1466] L577-1_T0_init-->L577_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 4856#L577_T0_init [2074] L577_T0_init-->L577_T0_init-D54: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 5610#L577_T0_init-D54 [1959] L577_T0_init-D54-->mainENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 4868#mainENTRY_T0_init [1819] mainENTRY_T0_init-->mainENTRY_T0_init-D40: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 5268#mainENTRY_T0_init-D40 [1649] mainENTRY_T0_init-D40-->havocProcedureENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5252#havocProcedureENTRY_T0_init [1641] havocProcedureENTRY_T0_init-->L421_T0_init: Formula: (not v_drop_12)  InVars {}  OutVars{drop=v_drop_12}  AuxVars[]  AssignedVars[drop] 5253#L421_T0_init [2158] L421_T0_init-->L422_T0_init: Formula: (not v_forward_17)  InVars {}  OutVars{forward=v_forward_17}  AuxVars[]  AssignedVars[forward] 5688#L422_T0_init [2104] L422_T0_init-->L423_T0_init: Formula: (= v_standard_metadata.ingress_port_14 0)  InVars {}  OutVars{standard_metadata.ingress_port=v_standard_metadata.ingress_port_14}  AuxVars[]  AssignedVars[standard_metadata.ingress_port] 5562#L423_T0_init [1901] L423_T0_init-->L424_T0_init: Formula: (= v_standard_metadata.egress_spec_15 0)  InVars {}  OutVars{standard_metadata.egress_spec=v_standard_metadata.egress_spec_15}  AuxVars[]  AssignedVars[standard_metadata.egress_spec] 5563#L424_T0_init [1962] L424_T0_init-->L425_T0_init: Formula: (= 0 v_standard_metadata.egress_port_18)  InVars {}  OutVars{standard_metadata.egress_port=v_standard_metadata.egress_port_18}  AuxVars[]  AssignedVars[standard_metadata.egress_port] 5602#L425_T0_init [1951] L425_T0_init-->L426_T0_init: Formula: (= v_standard_metadata.instance_type_9 0)  InVars {}  OutVars{standard_metadata.instance_type=v_standard_metadata.instance_type_9}  AuxVars[]  AssignedVars[standard_metadata.instance_type] 5360#L426_T0_init [1709] L426_T0_init-->L427_T0_init: Formula: (= v_standard_metadata.packet_length_8 0)  InVars {}  OutVars{standard_metadata.packet_length=v_standard_metadata.packet_length_8}  AuxVars[]  AssignedVars[standard_metadata.packet_length] 4911#L427_T0_init [1453] L427_T0_init-->L428_T0_init: Formula: (= v_standard_metadata.enq_timestamp_9 0)  InVars {}  OutVars{standard_metadata.enq_timestamp=v_standard_metadata.enq_timestamp_9}  AuxVars[]  AssignedVars[standard_metadata.enq_timestamp] 4912#L428_T0_init [1578] L428_T0_init-->L429_T0_init: Formula: (= v_standard_metadata.enq_qdepth_9 0)  InVars {}  OutVars{standard_metadata.enq_qdepth=v_standard_metadata.enq_qdepth_9}  AuxVars[]  AssignedVars[standard_metadata.enq_qdepth] 5152#L429_T0_init [1855] L429_T0_init-->L430_T0_init: Formula: (= v_standard_metadata.deq_timedelta_9 0)  InVars {}  OutVars{standard_metadata.deq_timedelta=v_standard_metadata.deq_timedelta_9}  AuxVars[]  AssignedVars[standard_metadata.deq_timedelta] 5052#L430_T0_init [1521] L430_T0_init-->L431_T0_init: Formula: (= v_standard_metadata.deq_qdepth_8 0)  InVars {}  OutVars{standard_metadata.deq_qdepth=v_standard_metadata.deq_qdepth_8}  AuxVars[]  AssignedVars[standard_metadata.deq_qdepth] 5053#L431_T0_init [1609] L431_T0_init-->L432_T0_init: Formula: (= v_standard_metadata.ingress_global_timestamp_8 0)  InVars {}  OutVars{standard_metadata.ingress_global_timestamp=v_standard_metadata.ingress_global_timestamp_8}  AuxVars[]  AssignedVars[standard_metadata.ingress_global_timestamp] 5203#L432_T0_init [2111] L432_T0_init-->L433_T0_init: Formula: (= v_standard_metadata.egress_global_timestamp_9 0)  InVars {}  OutVars{standard_metadata.egress_global_timestamp=v_standard_metadata.egress_global_timestamp_9}  AuxVars[]  AssignedVars[standard_metadata.egress_global_timestamp] 5444#L433_T0_init [1775] L433_T0_init-->L434_T0_init: Formula: (= 0 v_standard_metadata.mcast_grp_9)  InVars {}  OutVars{standard_metadata.mcast_grp=v_standard_metadata.mcast_grp_9}  AuxVars[]  AssignedVars[standard_metadata.mcast_grp] 5445#L434_T0_init [2007] L434_T0_init-->L435_T0_init: Formula: (= v_standard_metadata.egress_rid_9 0)  InVars {}  OutVars{standard_metadata.egress_rid=v_standard_metadata.egress_rid_9}  AuxVars[]  AssignedVars[standard_metadata.egress_rid] 5025#L435_T0_init [1510] L435_T0_init-->L436_T0_init: Formula: (= v_standard_metadata.checksum_error_8 0)  InVars {}  OutVars{standard_metadata.checksum_error=v_standard_metadata.checksum_error_8}  AuxVars[]  AssignedVars[standard_metadata.checksum_error] 5026#L436_T0_init [2011] L436_T0_init-->L437_T0_init: Formula: (= v_standard_metadata.priority_9 0)  InVars {}  OutVars{standard_metadata.priority=v_standard_metadata.priority_9}  AuxVars[]  AssignedVars[standard_metadata.priority] 5228#L437_T0_init [1628] L437_T0_init-->L438_T0_init: Formula: (not v_hdr.ethernet.valid_14)  InVars {}  OutVars{hdr.ethernet.valid=v_hdr.ethernet.valid_14}  AuxVars[]  AssignedVars[hdr.ethernet.valid] 5177#L438_T0_init [1593] L438_T0_init-->L439_T0_init: Formula: (= v_emit_41 (store v_emit_42 v_hdr.ethernet_3 false))  InVars {emit=v_emit_42, hdr.ethernet=v_hdr.ethernet_3}  OutVars{emit=v_emit_41, hdr.ethernet=v_hdr.ethernet_3}  AuxVars[]  AssignedVars[emit] 5178#L439_T0_init [2186] L439_T0_init-->L440_T0_init: Formula: true  InVars {}  OutVars{hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_28}  AuxVars[]  AssignedVars[hdr.ethernet.dstAddr] 4942#L440_T0_init [1464] L440_T0_init-->L441_T0_init: Formula: (= v_hdr.ethernet.dstAddr_29 v__old_hdr.ethernet.dstAddr_12)  InVars {hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_29}  OutVars{_old_hdr.ethernet.dstAddr=v__old_hdr.ethernet.dstAddr_12, hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_29}  AuxVars[]  AssignedVars[_old_hdr.ethernet.dstAddr] 4943#L441_T0_init [1474] L441_T0_init-->L442_T0_init: Formula: (= v_hdr.ethernet.dstAddr_26 v__old_hdr.ethernet.dstAddr_10)  InVars {hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_26}  OutVars{_old_hdr.ethernet.dstAddr=v__old_hdr.ethernet.dstAddr_10, hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_26}  AuxVars[]  AssignedVars[_old_hdr.ethernet.dstAddr] 4961#L442_T0_init [1747] L442_T0_init-->L443_T0_init: Formula: true  InVars {}  OutVars{hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_26}  AuxVars[]  AssignedVars[hdr.ethernet.srcAddr] 5411#L443_T0_init [1848] L443_T0_init-->L444_T0_init: Formula: (= v_hdr.ethernet.srcAddr_23 v__old_hdr.ethernet.srcAddr_10)  InVars {hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_23}  OutVars{hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_23, _old_hdr.ethernet.srcAddr=v__old_hdr.ethernet.srcAddr_10}  AuxVars[]  AssignedVars[_old_hdr.ethernet.srcAddr] 5327#L444_T0_init [1686] L444_T0_init-->L445_T0_init: Formula: (= v_hdr.ethernet.srcAddr_25 v__old_hdr.ethernet.srcAddr_12)  InVars {hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_25}  OutVars{hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_25, _old_hdr.ethernet.srcAddr=v__old_hdr.ethernet.srcAddr_12}  AuxVars[]  AssignedVars[_old_hdr.ethernet.srcAddr] 5328#L445_T0_init [2211] L445_T0_init-->L446_T0_init: Formula: true  InVars {}  OutVars{hdr.ethernet.etherType=v_hdr.ethernet.etherType_24}  AuxVars[]  AssignedVars[hdr.ethernet.etherType] 5673#L446_T0_init [2078] L446_T0_init-->L447_T0_init: Formula: (and (<= 0 v_hdr.ethernet.etherType_22) (<= v_hdr.ethernet.etherType_22 65536))  InVars {hdr.ethernet.etherType=v_hdr.ethernet.etherType_22}  OutVars{hdr.ethernet.etherType=v_hdr.ethernet.etherType_22}  AuxVars[]  AssignedVars[] 5396#L447_T0_init [1735] L447_T0_init-->L448_T0_init: Formula: (not v_hdr.ipv6.valid_18)  InVars {}  OutVars{hdr.ipv6.valid=v_hdr.ipv6.valid_18}  AuxVars[]  AssignedVars[hdr.ipv6.valid] 5397#L448_T0_init [1792] L448_T0_init-->L449_T0_init: Formula: (= v_emit_27 (store v_emit_28 v_hdr.ipv6_10 false))  InVars {emit=v_emit_28, hdr.ipv6=v_hdr.ipv6_10}  OutVars{emit=v_emit_27, hdr.ipv6=v_hdr.ipv6_10}  AuxVars[]  AssignedVars[emit] 5463#L449_T0_init [2175] L449_T0_init-->L450_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv6.version=v_hdr.ipv6.version_19}  AuxVars[]  AssignedVars[hdr.ipv6.version] 5309#L450_T0_init [1676] L450_T0_init-->L451_T0_init: Formula: (and (<= v_hdr.ipv6.version_20 16) (<= 0 v_hdr.ipv6.version_20))  InVars {hdr.ipv6.version=v_hdr.ipv6.version_20}  OutVars{hdr.ipv6.version=v_hdr.ipv6.version_20}  AuxVars[]  AssignedVars[] 5310#L451_T0_init [2109] L451_T0_init-->L452_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv6.trafclass=v_hdr.ipv6.trafclass_9}  AuxVars[]  AssignedVars[hdr.ipv6.trafclass] 5571#L452_T0_init [1912] L452_T0_init-->L453_T0_init: Formula: (and (<= v_hdr.ipv6.trafclass_12 256) (<= 0 v_hdr.ipv6.trafclass_12))  InVars {hdr.ipv6.trafclass=v_hdr.ipv6.trafclass_12}  OutVars{hdr.ipv6.trafclass=v_hdr.ipv6.trafclass_12}  AuxVars[]  AssignedVars[] 5568#L453_T0_init [1908] L453_T0_init-->L454_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv6.flowlabel=v_hdr.ipv6.flowlabel_11}  AuxVars[]  AssignedVars[hdr.ipv6.flowlabel] 5394#L454_T0_init [1734] L454_T0_init-->L455_T0_init: Formula: (and (<= 0 v_hdr.ipv6.flowlabel_12) (<= v_hdr.ipv6.flowlabel_12 1048576))  InVars {hdr.ipv6.flowlabel=v_hdr.ipv6.flowlabel_12}  OutVars{hdr.ipv6.flowlabel=v_hdr.ipv6.flowlabel_12}  AuxVars[]  AssignedVars[] 5395#L455_T0_init [1825] L455_T0_init-->L456_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv6.payloadlen=v_hdr.ipv6.payloadlen_20}  AuxVars[]  AssignedVars[hdr.ipv6.payloadlen] 5494#L456_T0_init [2079] L456_T0_init-->L457_T0_init: Formula: (and (<= v_hdr.ipv6.payloadlen_17 65536) (<= 0 v_hdr.ipv6.payloadlen_17))  InVars {hdr.ipv6.payloadlen=v_hdr.ipv6.payloadlen_17}  OutVars{hdr.ipv6.payloadlen=v_hdr.ipv6.payloadlen_17}  AuxVars[]  AssignedVars[] 5518#L457_T0_init [1849] L457_T0_init-->L458_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv6.nextheader=v_hdr.ipv6.nextheader_22}  AuxVars[]  AssignedVars[hdr.ipv6.nextheader] 5429#L458_T0_init [1763] L458_T0_init-->L459_T0_init: Formula: (and (<= v_hdr.ipv6.nextheader_20 256) (<= 0 v_hdr.ipv6.nextheader_20))  InVars {hdr.ipv6.nextheader=v_hdr.ipv6.nextheader_20}  OutVars{hdr.ipv6.nextheader=v_hdr.ipv6.nextheader_20}  AuxVars[]  AssignedVars[] 5430#L459_T0_init [1982] L459_T0_init-->L460_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv6.hoplimit=v_hdr.ipv6.hoplimit_17}  AuxVars[]  AssignedVars[hdr.ipv6.hoplimit] 5129#L460_T0_init [1564] L460_T0_init-->L461_T0_init: Formula: (and (<= v_hdr.ipv6.hoplimit_20 256) (<= 0 v_hdr.ipv6.hoplimit_20))  InVars {hdr.ipv6.hoplimit=v_hdr.ipv6.hoplimit_20}  OutVars{hdr.ipv6.hoplimit=v_hdr.ipv6.hoplimit_20}  AuxVars[]  AssignedVars[] 5040#L461_T0_init [1517] L461_T0_init-->L462_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv6.srcAddr=v_hdr.ipv6.srcAddr_17}  AuxVars[]  AssignedVars[hdr.ipv6.srcAddr] 5041#L462_T0_init [1621] L462_T0_init-->L463_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv6.dstAddr=v_hdr.ipv6.dstAddr_16}  AuxVars[]  AssignedVars[hdr.ipv6.dstAddr] 4932#L463_T0_init [1462] L463_T0_init-->L464_T0_init: Formula: (not v_hdr.ipv4_tunnel.valid_20)  InVars {}  OutVars{hdr.ipv4_tunnel.valid=v_hdr.ipv4_tunnel.valid_20}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.valid] 4933#L464_T0_init [1506] L464_T0_init-->L465_T0_init: Formula: (= v_emit_29 (store v_emit_30 v_hdr.ipv4_tunnel_8 false))  InVars {emit=v_emit_30, hdr.ipv4_tunnel=v_hdr.ipv4_tunnel_8}  OutVars{emit=v_emit_29, hdr.ipv4_tunnel=v_hdr.ipv4_tunnel_8}  AuxVars[]  AssignedVars[emit] 5019#L465_T0_init [1653] L465_T0_init-->L466_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.version=v_hdr.ipv4_tunnel.version_16}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.version] 5270#L466_T0_init [1724] L466_T0_init-->L467_T0_init: Formula: (and (<= v_hdr.ipv4_tunnel.version_17 16) (<= 0 v_hdr.ipv4_tunnel.version_17))  InVars {hdr.ipv4_tunnel.version=v_hdr.ipv4_tunnel.version_17}  OutVars{hdr.ipv4_tunnel.version=v_hdr.ipv4_tunnel.version_17}  AuxVars[]  AssignedVars[] 5356#L467_T0_init [1706] L467_T0_init-->L468_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.ihl=v_hdr.ipv4_tunnel.ihl_14}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.ihl] 5357#L468_T0_init [1799] L468_T0_init-->L469_T0_init: Formula: (and (<= 0 v_hdr.ipv4_tunnel.ihl_16) (<= v_hdr.ipv4_tunnel.ihl_16 16))  InVars {hdr.ipv4_tunnel.ihl=v_hdr.ipv4_tunnel.ihl_16}  OutVars{hdr.ipv4_tunnel.ihl=v_hdr.ipv4_tunnel.ihl_16}  AuxVars[]  AssignedVars[] 5470#L469_T0_init [1860] L469_T0_init-->L470_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.diffserv=v_hdr.ipv4_tunnel.diffserv_15}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.diffserv] 5522#L470_T0_init [2116] L470_T0_init-->L471_T0_init: Formula: (and (<= v_hdr.ipv4_tunnel.diffserv_14 256) (<= 0 v_hdr.ipv4_tunnel.diffserv_14))  InVars {hdr.ipv4_tunnel.diffserv=v_hdr.ipv4_tunnel.diffserv_14}  OutVars{hdr.ipv4_tunnel.diffserv=v_hdr.ipv4_tunnel.diffserv_14}  AuxVars[]  AssignedVars[] 4872#L471_T0_init [1436] L471_T0_init-->L472_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.totalLen=v_hdr.ipv4_tunnel.totalLen_14}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.totalLen] 4873#L472_T0_init [1696] L472_T0_init-->L473_T0_init: Formula: (and (<= v_hdr.ipv4_tunnel.totalLen_15 65536) (<= 0 v_hdr.ipv4_tunnel.totalLen_15))  InVars {hdr.ipv4_tunnel.totalLen=v_hdr.ipv4_tunnel.totalLen_15}  OutVars{hdr.ipv4_tunnel.totalLen=v_hdr.ipv4_tunnel.totalLen_15}  AuxVars[]  AssignedVars[] 5102#L473_T0_init [1549] L473_T0_init-->L474_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.identification=v_hdr.ipv4_tunnel.identification_17}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.identification] 5081#L474_T0_init [1537] L474_T0_init-->L475_T0_init: Formula: (and (<= v_hdr.ipv4_tunnel.identification_16 65536) (<= 0 v_hdr.ipv4_tunnel.identification_16))  InVars {hdr.ipv4_tunnel.identification=v_hdr.ipv4_tunnel.identification_16}  OutVars{hdr.ipv4_tunnel.identification=v_hdr.ipv4_tunnel.identification_16}  AuxVars[]  AssignedVars[] 5082#L475_T0_init [1776] L475_T0_init-->L476_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.flags=v_hdr.ipv4_tunnel.flags_17}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.flags] 5446#L476_T0_init [1837] L476_T0_init-->L477_T0_init: Formula: (and (<= v_hdr.ipv4_tunnel.flags_14 8) (<= 0 v_hdr.ipv4_tunnel.flags_14))  InVars {hdr.ipv4_tunnel.flags=v_hdr.ipv4_tunnel.flags_14}  OutVars{hdr.ipv4_tunnel.flags=v_hdr.ipv4_tunnel.flags_14}  AuxVars[]  AssignedVars[] 4870#L477_T0_init [1435] L477_T0_init-->L478_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.fragOffset=v_hdr.ipv4_tunnel.fragOffset_17}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.fragOffset] 4871#L478_T0_init [1711] L478_T0_init-->L479_T0_init: Formula: (and (<= 0 v_hdr.ipv4_tunnel.fragOffset_15) (<= v_hdr.ipv4_tunnel.fragOffset_15 8192))  InVars {hdr.ipv4_tunnel.fragOffset=v_hdr.ipv4_tunnel.fragOffset_15}  OutVars{hdr.ipv4_tunnel.fragOffset=v_hdr.ipv4_tunnel.fragOffset_15}  AuxVars[]  AssignedVars[] 5240#L479_T0_init [1633] L479_T0_init-->L480_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.ttl=v_hdr.ipv4_tunnel.ttl_15}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.ttl] 5132#L480_T0_init [1566] L480_T0_init-->L481_T0_init: Formula: (and (<= 0 v_hdr.ipv4_tunnel.ttl_14) (<= v_hdr.ipv4_tunnel.ttl_14 256))  InVars {hdr.ipv4_tunnel.ttl=v_hdr.ipv4_tunnel.ttl_14}  OutVars{hdr.ipv4_tunnel.ttl=v_hdr.ipv4_tunnel.ttl_14}  AuxVars[]  AssignedVars[] 5133#L481_T0_init [2223] L481_T0_init-->L482_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.protocol=v_hdr.ipv4_tunnel.protocol_19}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.protocol] 5325#L482_T0_init [1685] L482_T0_init-->L483_T0_init: Formula: (and (<= 0 v_hdr.ipv4_tunnel.protocol_17) (<= v_hdr.ipv4_tunnel.protocol_17 256))  InVars {hdr.ipv4_tunnel.protocol=v_hdr.ipv4_tunnel.protocol_17}  OutVars{hdr.ipv4_tunnel.protocol=v_hdr.ipv4_tunnel.protocol_17}  AuxVars[]  AssignedVars[] 5326#L483_T0_init [1783] L483_T0_init-->L484_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.hdrChecksum=v_hdr.ipv4_tunnel.hdrChecksum_11}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.hdrChecksum] 5454#L484_T0_init [1857] L484_T0_init-->L485_T0_init: Formula: (and (<= v_hdr.ipv4_tunnel.hdrChecksum_10 65536) (<= 0 v_hdr.ipv4_tunnel.hdrChecksum_10))  InVars {hdr.ipv4_tunnel.hdrChecksum=v_hdr.ipv4_tunnel.hdrChecksum_10}  OutVars{hdr.ipv4_tunnel.hdrChecksum=v_hdr.ipv4_tunnel.hdrChecksum_10}  AuxVars[]  AssignedVars[] 5211#L485_T0_init [1614] L485_T0_init-->L486_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.srcAddr=v_hdr.ipv4_tunnel.srcAddr_14}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.srcAddr] 5212#L486_T0_init [1851] L486_T0_init-->L487_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.dstAddr=v_hdr.ipv4_tunnel.dstAddr_14}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.dstAddr] 5519#L487_T0_init [2051] L487_T0_init-->L488_T0_init: Formula: (not v_hdr.ipv4.valid_26)  InVars {}  OutVars{hdr.ipv4.valid=v_hdr.ipv4.valid_26}  AuxVars[]  AssignedVars[hdr.ipv4.valid] 5661#L488_T0_init [2112] L488_T0_init-->L489_T0_init: Formula: (= (store v_emit_26 v_hdr.ipv4_2 false) v_emit_25)  InVars {hdr.ipv4=v_hdr.ipv4_2, emit=v_emit_26}  OutVars{hdr.ipv4=v_hdr.ipv4_2, emit=v_emit_25}  AuxVars[]  AssignedVars[emit] 5656#L489_T0_init [2038] L489_T0_init-->L490_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.version=v_hdr.ipv4.version_12}  AuxVars[]  AssignedVars[hdr.ipv4.version] 4944#L490_T0_init [1465] L490_T0_init-->L491_T0_init: Formula: (and (<= 0 v_hdr.ipv4.version_10) (<= v_hdr.ipv4.version_10 16))  InVars {hdr.ipv4.version=v_hdr.ipv4.version_10}  OutVars{hdr.ipv4.version=v_hdr.ipv4.version_10}  AuxVars[]  AssignedVars[] 4945#L491_T0_init [2181] L491_T0_init-->L492_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.ihl=v_hdr.ipv4.ihl_10}  AuxVars[]  AssignedVars[hdr.ipv4.ihl] 5724#L492_T0_init [2179] L492_T0_init-->L493_T0_init: Formula: (and (<= v_hdr.ipv4.ihl_11 16) (<= 0 v_hdr.ipv4.ihl_11))  InVars {hdr.ipv4.ihl=v_hdr.ipv4.ihl_11}  OutVars{hdr.ipv4.ihl=v_hdr.ipv4.ihl_11}  AuxVars[]  AssignedVars[] 5725#L493_T0_init [2233] L493_T0_init-->L494_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.diffserv=v_hdr.ipv4.diffserv_12}  AuxVars[]  AssignedVars[hdr.ipv4.diffserv] 5675#L494_T0_init [2082] L494_T0_init-->L495_T0_init: Formula: (and (<= v_hdr.ipv4.diffserv_11 256) (<= 0 v_hdr.ipv4.diffserv_11))  InVars {hdr.ipv4.diffserv=v_hdr.ipv4.diffserv_11}  OutVars{hdr.ipv4.diffserv=v_hdr.ipv4.diffserv_11}  AuxVars[]  AssignedVars[] 4953#L495_T0_init [1471] L495_T0_init-->L496_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.totalLen=v_hdr.ipv4.totalLen_13}  AuxVars[]  AssignedVars[hdr.ipv4.totalLen] 4954#L496_T0_init [1495] L496_T0_init-->L497_T0_init: Formula: (and (<= 0 v_hdr.ipv4.totalLen_15) (<= v_hdr.ipv4.totalLen_15 65536))  InVars {hdr.ipv4.totalLen=v_hdr.ipv4.totalLen_15}  OutVars{hdr.ipv4.totalLen=v_hdr.ipv4.totalLen_15}  AuxVars[]  AssignedVars[] 4996#L497_T0_init [1755] L497_T0_init-->L498_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.identification=v_hdr.ipv4.identification_11}  AuxVars[]  AssignedVars[hdr.ipv4.identification] 5421#L498_T0_init [2076] L498_T0_init-->L499_T0_init: Formula: (and (<= 0 v_hdr.ipv4.identification_13) (<= v_hdr.ipv4.identification_13 65536))  InVars {hdr.ipv4.identification=v_hdr.ipv4.identification_13}  OutVars{hdr.ipv4.identification=v_hdr.ipv4.identification_13}  AuxVars[]  AssignedVars[] 5298#L499_T0_init [1671] L499_T0_init-->L500_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.flags=v_hdr.ipv4.flags_11}  AuxVars[]  AssignedVars[hdr.ipv4.flags] 5299#L500_T0_init [1997] L500_T0_init-->L501_T0_init: Formula: (and (<= 0 v_hdr.ipv4.flags_10) (<= v_hdr.ipv4.flags_10 8))  InVars {hdr.ipv4.flags=v_hdr.ipv4.flags_10}  OutVars{hdr.ipv4.flags=v_hdr.ipv4.flags_10}  AuxVars[]  AssignedVars[] 5634#L501_T0_init [2095] L501_T0_init-->L502_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.fragOffset=v_hdr.ipv4.fragOffset_11}  AuxVars[]  AssignedVars[hdr.ipv4.fragOffset] 5650#L502_T0_init [2022] L502_T0_init-->L503_T0_init: Formula: (and (<= 0 v_hdr.ipv4.fragOffset_12) (<= v_hdr.ipv4.fragOffset_12 8192))  InVars {hdr.ipv4.fragOffset=v_hdr.ipv4.fragOffset_12}  OutVars{hdr.ipv4.fragOffset=v_hdr.ipv4.fragOffset_12}  AuxVars[]  AssignedVars[] 5615#L503_T0_init [1964] L503_T0_init-->L504_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.ttl=v_hdr.ipv4.ttl_12}  AuxVars[]  AssignedVars[hdr.ipv4.ttl] 5499#L504_T0_init [1828] L504_T0_init-->L505_T0_init: Formula: (and (<= v_hdr.ipv4.ttl_11 256) (<= 0 v_hdr.ipv4.ttl_11))  InVars {hdr.ipv4.ttl=v_hdr.ipv4.ttl_11}  OutVars{hdr.ipv4.ttl=v_hdr.ipv4.ttl_11}  AuxVars[]  AssignedVars[] 4937#L505_T0_init [1463] L505_T0_init-->L506_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.protocol=v_hdr.ipv4.protocol_13}  AuxVars[]  AssignedVars[hdr.ipv4.protocol] 4938#L506_T0_init [2080] L506_T0_init-->L507_T0_init: Formula: (and (<= 0 v_hdr.ipv4.protocol_12) (<= v_hdr.ipv4.protocol_12 256))  InVars {hdr.ipv4.protocol=v_hdr.ipv4.protocol_12}  OutVars{hdr.ipv4.protocol=v_hdr.ipv4.protocol_12}  AuxVars[]  AssignedVars[] 5523#L507_T0_init [1861] L507_T0_init-->L508_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.hdrChecksum=v_hdr.ipv4.hdrChecksum_11}  AuxVars[]  AssignedVars[hdr.ipv4.hdrChecksum] 5524#L508_T0_init [2008] L508_T0_init-->L509_T0_init: Formula: (and (<= 0 v_hdr.ipv4.hdrChecksum_9) (<= v_hdr.ipv4.hdrChecksum_9 65536))  InVars {hdr.ipv4.hdrChecksum=v_hdr.ipv4.hdrChecksum_9}  OutVars{hdr.ipv4.hdrChecksum=v_hdr.ipv4.hdrChecksum_9}  AuxVars[]  AssignedVars[] 5640#L509_T0_init [2205] L509_T0_init-->L510_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.srcAddr=v_hdr.ipv4.srcAddr_10}  AuxVars[]  AssignedVars[hdr.ipv4.srcAddr] 5022#L510_T0_init [1507] L510_T0_init-->L511_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_14}  AuxVars[]  AssignedVars[hdr.ipv4.dstAddr] 5023#L511_T0_init [1777] L511_T0_init-->L512_T0_init: Formula: (= v_hdr.ipv4.dstAddr_13 v__old_hdr.ipv4.dstAddr_11)  InVars {hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_13}  OutVars{_old_hdr.ipv4.dstAddr=v__old_hdr.ipv4.dstAddr_11, hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_13}  AuxVars[]  AssignedVars[_old_hdr.ipv4.dstAddr] 5155#L512_T0_init [1579] L512_T0_init-->L513_T0_init: Formula: (= v_hdr.ipv4.dstAddr_12 v__old_hdr.ipv4.dstAddr_10)  InVars {hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_12}  OutVars{_old_hdr.ipv4.dstAddr=v__old_hdr.ipv4.dstAddr_10, hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_12}  AuxVars[]  AssignedVars[_old_hdr.ipv4.dstAddr] 5156#L513_T0_init [1986] L513_T0_init-->L514_T0_init: Formula: (not v_hdr.tcp.valid_29)  InVars {}  OutVars{hdr.tcp.valid=v_hdr.tcp.valid_29}  AuxVars[]  AssignedVars[hdr.tcp.valid] 5320#L514_T0_init [1682] L514_T0_init-->L515_T0_init: Formula: (= v_emit_33 (store v_emit_34 v_hdr.tcp_2 false))  InVars {hdr.tcp=v_hdr.tcp_2, emit=v_emit_34}  OutVars{hdr.tcp=v_hdr.tcp_2, emit=v_emit_33}  AuxVars[]  AssignedVars[emit] 5321#L515_T0_init [1741] L515_T0_init-->L516_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.srcport=v_hdr.tcp.srcport_12}  AuxVars[]  AssignedVars[hdr.tcp.srcport] 5404#L516_T0_init [2063] L516_T0_init-->L517_T0_init: Formula: (and (<= v_hdr.tcp.srcport_9 65536) (<= 0 v_hdr.tcp.srcport_9))  InVars {hdr.tcp.srcport=v_hdr.tcp.srcport_9}  OutVars{hdr.tcp.srcport=v_hdr.tcp.srcport_9}  AuxVars[]  AssignedVars[] 5473#L517_T0_init [1801] L517_T0_init-->L518_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.dstport=v_hdr.tcp.dstport_9}  AuxVars[]  AssignedVars[hdr.tcp.dstport] 5474#L518_T0_init [1879] L518_T0_init-->L519_T0_init: Formula: (and (<= v_hdr.tcp.dstport_10 65536) (<= 0 v_hdr.tcp.dstport_10))  InVars {hdr.tcp.dstport=v_hdr.tcp.dstport_10}  OutVars{hdr.tcp.dstport=v_hdr.tcp.dstport_10}  AuxVars[]  AssignedVars[] 5324#L519_T0_init [1683] L519_T0_init-->L520_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.sequence=v_hdr.tcp.sequence_43}  AuxVars[]  AssignedVars[hdr.tcp.sequence] 5089#L520_T0_init [1541] L520_T0_init-->L521_T0_init: Formula: (and (<= v_hdr.tcp.sequence_44 4294967296) (<= 0 v_hdr.tcp.sequence_44))  InVars {hdr.tcp.sequence=v_hdr.tcp.sequence_44}  OutVars{hdr.tcp.sequence=v_hdr.tcp.sequence_44}  AuxVars[]  AssignedVars[] 5090#L521_T0_init [1694] L521_T0_init-->L522_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.ackseq=v_hdr.tcp.ackseq_43}  AuxVars[]  AssignedVars[hdr.tcp.ackseq] 5339#L522_T0_init [2020] L522_T0_init-->L523_T0_init: Formula: (and (<= v_hdr.tcp.ackseq_44 4294967296) (<= 0 v_hdr.tcp.ackseq_44))  InVars {hdr.tcp.ackseq=v_hdr.tcp.ackseq_44}  OutVars{hdr.tcp.ackseq=v_hdr.tcp.ackseq_44}  AuxVars[]  AssignedVars[] 5167#L523_T0_init [1588] L523_T0_init-->L524_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.headerlength=v_hdr.tcp.headerlength_11}  AuxVars[]  AssignedVars[hdr.tcp.headerlength] 4867#L524_T0_init [1434] L524_T0_init-->L525_T0_init: Formula: (and (<= v_hdr.tcp.headerlength_10 16) (<= 0 v_hdr.tcp.headerlength_10))  InVars {hdr.tcp.headerlength=v_hdr.tcp.headerlength_10}  OutVars{hdr.tcp.headerlength=v_hdr.tcp.headerlength_10}  AuxVars[]  AssignedVars[] 4869#L525_T0_init [1536] L525_T0_init-->L526_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.reservation=v_hdr.tcp.reservation_12}  AuxVars[]  AssignedVars[hdr.tcp.reservation] 5080#L526_T0_init [1832] L526_T0_init-->L527_T0_init: Formula: (and (<= v_hdr.tcp.reservation_9 64) (<= 0 v_hdr.tcp.reservation_9))  InVars {hdr.tcp.reservation=v_hdr.tcp.reservation_9}  OutVars{hdr.tcp.reservation=v_hdr.tcp.reservation_9}  AuxVars[]  AssignedVars[] 5345#L527_T0_init [1700] L527_T0_init-->L528_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.URG=v_hdr.tcp.URG_9}  AuxVars[]  AssignedVars[hdr.tcp.URG] 5346#L528_T0_init [1797] L528_T0_init-->L529_T0_init: Formula: (and (<= v_hdr.tcp.URG_12 2) (<= 0 v_hdr.tcp.URG_12))  InVars {hdr.tcp.URG=v_hdr.tcp.URG_12}  OutVars{hdr.tcp.URG=v_hdr.tcp.URG_12}  AuxVars[]  AssignedVars[] 5468#L529_T0_init [1892] L529_T0_init-->L530_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.ACK=v_hdr.tcp.ACK_11}  AuxVars[]  AssignedVars[hdr.tcp.ACK] 5162#L530_T0_init [1584] L530_T0_init-->L531_T0_init: Formula: (and (<= 0 v_hdr.tcp.ACK_9) (<= v_hdr.tcp.ACK_9 2))  InVars {hdr.tcp.ACK=v_hdr.tcp.ACK_9}  OutVars{hdr.tcp.ACK=v_hdr.tcp.ACK_9}  AuxVars[]  AssignedVars[] 4924#L531_T0_init [1458] L531_T0_init-->L532_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.PSH=v_hdr.tcp.PSH_11}  AuxVars[]  AssignedVars[hdr.tcp.PSH] 4925#L532_T0_init [2203] L532_T0_init-->L533_T0_init: Formula: (and (<= 0 v_hdr.tcp.PSH_9) (<= v_hdr.tcp.PSH_9 2))  InVars {hdr.tcp.PSH=v_hdr.tcp.PSH_9}  OutVars{hdr.tcp.PSH=v_hdr.tcp.PSH_9}  AuxVars[]  AssignedVars[] 5705#L533_T0_init [2141] L533_T0_init-->L534_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.RST=v_hdr.tcp.RST_9}  AuxVars[]  AssignedVars[hdr.tcp.RST] 5165#L534_T0_init [1587] L534_T0_init-->L535_T0_init: Formula: (and (<= 0 v_hdr.tcp.RST_11) (<= v_hdr.tcp.RST_11 2))  InVars {hdr.tcp.RST=v_hdr.tcp.RST_11}  OutVars{hdr.tcp.RST=v_hdr.tcp.RST_11}  AuxVars[]  AssignedVars[] 5166#L535_T0_init [2154] L535_T0_init-->L536_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.SYN=v_hdr.tcp.SYN_9}  AuxVars[]  AssignedVars[hdr.tcp.SYN] 5218#L536_T0_init [1620] L536_T0_init-->L537_T0_init: Formula: (and (<= 0 v_hdr.tcp.SYN_11) (<= v_hdr.tcp.SYN_11 2))  InVars {hdr.tcp.SYN=v_hdr.tcp.SYN_11}  OutVars{hdr.tcp.SYN=v_hdr.tcp.SYN_11}  AuxVars[]  AssignedVars[] 5219#L537_T0_init [1893] L537_T0_init-->L538_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.FIN=v_hdr.tcp.FIN_9}  AuxVars[]  AssignedVars[hdr.tcp.FIN] 5553#L538_T0_init [1895] L538_T0_init-->L539_T0_init: Formula: (and (<= 0 v_hdr.tcp.FIN_10) (<= v_hdr.tcp.FIN_10 2))  InVars {hdr.tcp.FIN=v_hdr.tcp.FIN_10}  OutVars{hdr.tcp.FIN=v_hdr.tcp.FIN_10}  AuxVars[]  AssignedVars[] 5555#L539_T0_init [2212] L539_T0_init-->L540_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.windowsize=v_hdr.tcp.windowsize_10}  AuxVars[]  AssignedVars[hdr.tcp.windowsize] 5591#L540_T0_init [1939] L540_T0_init-->L541_T0_init: Formula: (and (<= v_hdr.tcp.windowsize_12 65536) (<= 0 v_hdr.tcp.windowsize_12))  InVars {hdr.tcp.windowsize=v_hdr.tcp.windowsize_12}  OutVars{hdr.tcp.windowsize=v_hdr.tcp.windowsize_12}  AuxVars[]  AssignedVars[] 5592#L541_T0_init [2096] L541_T0_init-->L542_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.checksum=v_hdr.tcp.checksum_10}  AuxVars[]  AssignedVars[hdr.tcp.checksum] 5676#L542_T0_init [2083] L542_T0_init-->L543_T0_init: Formula: (and (<= 0 v_hdr.tcp.checksum_12) (<= v_hdr.tcp.checksum_12 65536))  InVars {hdr.tcp.checksum=v_hdr.tcp.checksum_12}  OutVars{hdr.tcp.checksum=v_hdr.tcp.checksum_12}  AuxVars[]  AssignedVars[] 5677#L543_T0_init [2088] L543_T0_init-->L544_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.pointer=v_hdr.tcp.pointer_11}  AuxVars[]  AssignedVars[hdr.tcp.pointer] 5678#L544_T0_init [2119] L544_T0_init-->L545_T0_init: Formula: (and (<= 0 v_hdr.tcp.pointer_10) (<= v_hdr.tcp.pointer_10 65536))  InVars {hdr.tcp.pointer=v_hdr.tcp.pointer_10}  OutVars{hdr.tcp.pointer=v_hdr.tcp.pointer_10}  AuxVars[]  AssignedVars[] 5588#L545_T0_init [1935] L545_T0_init-->L546_T0_init: Formula: (not v_hdr.udp_tunnel.valid_20)  InVars {}  OutVars{hdr.udp_tunnel.valid=v_hdr.udp_tunnel.valid_20}  AuxVars[]  AssignedVars[hdr.udp_tunnel.valid] 5589#L546_T0_init [2229] L546_T0_init-->L547_T0_init: Formula: (= v_emit_31 (store v_emit_32 v_hdr.udp_tunnel_9 false))  InVars {emit=v_emit_32, hdr.udp_tunnel=v_hdr.udp_tunnel_9}  OutVars{emit=v_emit_31, hdr.udp_tunnel=v_hdr.udp_tunnel_9}  AuxVars[]  AssignedVars[emit] 5599#L547_T0_init [1949] L547_T0_init-->L548_T0_init: Formula: true  InVars {}  OutVars{hdr.udp_tunnel.srcport=v_hdr.udp_tunnel.srcport_16}  AuxVars[]  AssignedVars[hdr.udp_tunnel.srcport] 5459#L548_T0_init [1790] L548_T0_init-->L549_T0_init: Formula: (and (<= 0 v_hdr.udp_tunnel.srcport_14) (<= v_hdr.udp_tunnel.srcport_14 65536))  InVars {hdr.udp_tunnel.srcport=v_hdr.udp_tunnel.srcport_14}  OutVars{hdr.udp_tunnel.srcport=v_hdr.udp_tunnel.srcport_14}  AuxVars[]  AssignedVars[] 5460#L549_T0_init [2166] L549_T0_init-->L550_T0_init: Formula: true  InVars {}  OutVars{hdr.udp_tunnel.dstport=v_hdr.udp_tunnel.dstport_14}  AuxVars[]  AssignedVars[hdr.udp_tunnel.dstport] 5715#L550_T0_init [2155] L550_T0_init-->L551_T0_init: Formula: (and (<= 0 v_hdr.udp_tunnel.dstport_15) (<= v_hdr.udp_tunnel.dstport_15 65536))  InVars {hdr.udp_tunnel.dstport=v_hdr.udp_tunnel.dstport_15}  OutVars{hdr.udp_tunnel.dstport=v_hdr.udp_tunnel.dstport_15}  AuxVars[]  AssignedVars[] 5475#L551_T0_init [1802] L551_T0_init-->L552_T0_init: Formula: true  InVars {}  OutVars{hdr.udp_tunnel.userlength=v_hdr.udp_tunnel.userlength_16}  AuxVars[]  AssignedVars[hdr.udp_tunnel.userlength] 4994#L552_T0_init [1494] L552_T0_init-->L553_T0_init: Formula: (and (<= 0 v_hdr.udp_tunnel.userlength_17) (<= v_hdr.udp_tunnel.userlength_17 65536))  InVars {hdr.udp_tunnel.userlength=v_hdr.udp_tunnel.userlength_17}  OutVars{hdr.udp_tunnel.userlength=v_hdr.udp_tunnel.userlength_17}  AuxVars[]  AssignedVars[] 4995#L553_T0_init [1607] L553_T0_init-->L554_T0_init: Formula: true  InVars {}  OutVars{hdr.udp_tunnel.checksum=v_hdr.udp_tunnel.checksum_15}  AuxVars[]  AssignedVars[hdr.udp_tunnel.checksum] 4971#L554_T0_init [1482] L554_T0_init-->havocProcedureFINAL_T0_init: Formula: (and (<= v_hdr.udp_tunnel.checksum_14 65536) (<= 0 v_hdr.udp_tunnel.checksum_14))  InVars {hdr.udp_tunnel.checksum=v_hdr.udp_tunnel.checksum_14}  OutVars{hdr.udp_tunnel.checksum=v_hdr.udp_tunnel.checksum_14}  AuxVars[]  AssignedVars[] 4972#havocProcedureFINAL_T0_init [2184] havocProcedureFINAL_T0_init-->havocProcedureEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5107#havocProcedureEXIT_T0_init >[2294] havocProcedureEXIT_T0_init-->L559-D56: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5108#L559-D56 [1645] L559-D56-->L559_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5127#L559_T0_init [1563] L559_T0_init-->L559_T0_init-D22: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 5128#L559_T0_init-D22 [1934] L559_T0_init-D22-->_parser_MyParserENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 4930#_parser_MyParserENTRY_T0_init [1580] _parser_MyParserENTRY_T0_init-->_parser_MyParserENTRY_T0_init-D14: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 4929#_parser_MyParserENTRY_T0_init-D14 [1461] _parser_MyParserENTRY_T0_init-D14-->startENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 4931#startENTRY_T0_init [1983] startENTRY_T0_init-->L727_T0_init: Formula: v_hdr.ethernet.valid_16  InVars {}  OutVars{hdr.ethernet.valid=v_hdr.ethernet.valid_16}  AuxVars[]  AssignedVars[hdr.ethernet.valid] 5611#L727_T0_init [1961] L727_T0_init-->L730_T0_init: Formula: (not (= v_hdr.ethernet.etherType_35 34525))  InVars {hdr.ethernet.etherType=v_hdr.ethernet.etherType_35}  OutVars{hdr.ethernet.etherType=v_hdr.ethernet.etherType_35}  AuxVars[]  AssignedVars[] 5612#L730_T0_init [2005] L730_T0_init-->L730-1_T0_init: Formula: (not (= v_hdr.ethernet.etherType_37 2048))  InVars {hdr.ethernet.etherType=v_hdr.ethernet.etherType_37}  OutVars{hdr.ethernet.etherType=v_hdr.ethernet.etherType_37}  AuxVars[]  AssignedVars[] 5163#L730-1_T0_init [1883] L730-1_T0_init-->startEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5153#startEXIT_T0_init >[2245] startEXIT_T0_init-->_parser_MyParserFINAL-D66: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5154#_parser_MyParserFINAL-D66 [1638] _parser_MyParserFINAL-D66-->_parser_MyParserFINAL_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5248#_parser_MyParserFINAL_T0_init [1963] _parser_MyParserFINAL_T0_init-->_parser_MyParserEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5613#_parser_MyParserEXIT_T0_init >[2284] _parser_MyParserEXIT_T0_init-->L560-D104: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5674#L560-D104 [2220] L560-D104-->L560_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5068#L560_T0_init [1530] L560_T0_init-->L560_T0_init-D16: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 5069#L560_T0_init-D16 [1972] L560_T0_init-D16-->MyVerifyChecksumFINAL_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5545#MyVerifyChecksumFINAL_T0_init [1885] MyVerifyChecksumFINAL_T0_init-->MyVerifyChecksumEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5533#MyVerifyChecksumEXIT_T0_init >[2283] MyVerifyChecksumEXIT_T0_init-->L561-D74: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5503#L561-D74 [1833] L561-D74-->L561_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5004#L561_T0_init [1771] L561_T0_init-->L561_T0_init-D6: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 5317#L561_T0_init-D6 [1680] L561_T0_init-D6-->MyIngressENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5249#MyIngressENTRY_T0_init [1639] MyIngressENTRY_T0_init-->L259_T0_init: Formula: (= v_standard_metadata.ingress_port_17 0)  InVars {standard_metadata.ingress_port=v_standard_metadata.ingress_port_17}  OutVars{standard_metadata.ingress_port=v_standard_metadata.ingress_port_17}  AuxVars[]  AssignedVars[] 5250#L259_T0_init [1793] L259_T0_init-->L260_T0_init: Formula: (= v_hdr.ipv4.dstAddr_18 2071690107)  InVars {hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_18}  OutVars{hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_18}  AuxVars[]  AssignedVars[] 5418#L260_T0_init [1753] L260_T0_init-->L261_T0_init: Formula: (= 174219185552744 v_hdr.ethernet.dstAddr_36)  InVars {}  OutVars{hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_36}  AuxVars[]  AssignedVars[hdr.ethernet.dstAddr] 5003#L261_T0_init [1499] L261_T0_init-->L262_T0_init: Formula: (= v_standard_metadata.egress_spec_25 1)  InVars {}  OutVars{standard_metadata.egress_spec=v_standard_metadata.egress_spec_25}  AuxVars[]  AssignedVars[standard_metadata.egress_spec] 5005#L262_T0_init [1913] L262_T0_init-->L263_T0_init: Formula: (= 1 v_standard_metadata.egress_port_21)  InVars {}  OutVars{standard_metadata.egress_port=v_standard_metadata.egress_port_21}  AuxVars[]  AssignedVars[standard_metadata.egress_port] 5195#L263_T0_init [1604] L263_T0_init-->L258_T0_init: Formula: v_forward_22  InVars {}  OutVars{forward=v_forward_22}  AuxVars[]  AssignedVars[forward] 5196#L258_T0_init [2204] L258_T0_init-->MyIngressEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5734#MyIngressEXIT_T0_init >[2287] MyIngressEXIT_T0_init-->L562-D108: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5865#L562-D108 [1699] L562-D108-->L562_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5353#L562_T0_init [1989] L562_T0_init-->L562_T0_init-D50: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 5861#L562_T0_init-D50 [1602] L562_T0_init-D50-->MyEgressENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5868#MyEgressENTRY_T0_init [1617] MyEgressENTRY_T0_init-->L249_T0_init: Formula: (or (not (= 0 v_standard_metadata.egress_port_34)) (not v_hdr.tcp.valid_32))  InVars {standard_metadata.egress_port=v_standard_metadata.egress_port_34, hdr.tcp.valid=v_hdr.tcp.valid_32}  OutVars{standard_metadata.egress_port=v_standard_metadata.egress_port_34, hdr.tcp.valid=v_hdr.tcp.valid_32}  AuxVars[]  AssignedVars[] 5864#L249_T0_init [1619] L249_T0_init-->MyEgressEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5860#MyEgressEXIT_T0_init >[2308] MyEgressEXIT_T0_init-->L563-D90: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5857#L563-D90 [1623] L563-D90-->L563_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5851#L563_T0_init [1840] L563_T0_init-->L563_T0_init-D32: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 5852#L563_T0_init-D32 [2149] L563_T0_init-D32-->MyComputeChecksumFINAL_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5856#MyComputeChecksumFINAL_T0_init [1927] MyComputeChecksumFINAL_T0_init-->MyComputeChecksumEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5850#MyComputeChecksumEXIT_T0_init >[2341] MyComputeChecksumEXIT_T0_init-->L564-D110: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5848#L564-D110 [1498] L564-D110-->L564_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5845#L564_T0_init [1919] L564_T0_init-->L565-1_T0_init: Formula: v_forward_30  InVars {forward=v_forward_30}  OutVars{forward=v_forward_30}  AuxVars[]  AssignedVars[] 5842#L565-1_T0_init [1928] L565-1_T0_init-->L569_T0_init: Formula: (let ((.cse0 (= v__old_hdr.ethernet.srcAddr_14 0))) (or (and v__p4ltl_0_6 (not .cse0)) (and (not v__p4ltl_0_6) .cse0)))  InVars {_old_hdr.ethernet.srcAddr=v__old_hdr.ethernet.srcAddr_14}  OutVars{_p4ltl_0=v__p4ltl_0_6, _old_hdr.ethernet.srcAddr=v__old_hdr.ethernet.srcAddr_14}  AuxVars[]  AssignedVars[_p4ltl_0] 5840#L569_T0_init [1772] L569_T0_init-->L570_T0_init: Formula: (let ((.cse0 (= 2071690107 v__old_hdr.ipv4.dstAddr_14))) (or (and v__p4ltl_1_6 (not .cse0)) (and .cse0 (not v__p4ltl_1_6))))  InVars {_old_hdr.ipv4.dstAddr=v__old_hdr.ipv4.dstAddr_14}  OutVars{_old_hdr.ipv4.dstAddr=v__old_hdr.ipv4.dstAddr_14, _p4ltl_1=v__p4ltl_1_6}  AuxVars[]  AssignedVars[_p4ltl_1] 5838#L570_T0_init [1440] L570_T0_init-->L571_T0_init: Formula: (let ((.cse0 (= 281474976710655 v__old_hdr.ethernet.dstAddr_15))) (or (and v__p4ltl_2_7 (not .cse0)) (and (not v__p4ltl_2_7) .cse0)))  InVars {_old_hdr.ethernet.dstAddr=v__old_hdr.ethernet.dstAddr_15}  OutVars{_p4ltl_2=v__p4ltl_2_7, _old_hdr.ethernet.dstAddr=v__old_hdr.ethernet.dstAddr_15}  AuxVars[]  AssignedVars[_p4ltl_2] 5836#L571_T0_init [1910] L571_T0_init-->mainFINAL_T0_init: Formula: (let ((.cse0 (= v_standard_metadata.ingress_port_19 0))) (or (and v__p4ltl_3_6 .cse0) (and (not .cse0) (not v__p4ltl_3_6))))  InVars {standard_metadata.ingress_port=v_standard_metadata.ingress_port_19}  OutVars{standard_metadata.ingress_port=v_standard_metadata.ingress_port_19, _p4ltl_3=v__p4ltl_3_6}  AuxVars[]  AssignedVars[_p4ltl_3] 5834#mainFINAL_T0_init [2017] mainFINAL_T0_init-->mainEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5832#mainEXIT_T0_init >[2277] mainEXIT_T0_init-->L577-1-D72: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5830#L577-1-D72 [1809] L577-1-D72-->L577-1_accept_S1: Formula: (and v__p4ltl_1_9 v__p4ltl_0_9 v__p4ltl_3_9 v__p4ltl_2_9 (or (not v__p4ltl_3_9) (not v__p4ltl_1_9) (= 1 v_standard_metadata.egress_port_30) (not v__p4ltl_2_9) (not v__p4ltl_0_9)))  InVars {_p4ltl_2=v__p4ltl_2_9, standard_metadata.egress_port=v_standard_metadata.egress_port_30, _p4ltl_3=v__p4ltl_3_9, _p4ltl_0=v__p4ltl_0_9, _p4ltl_1=v__p4ltl_1_9}  OutVars{_p4ltl_2=v__p4ltl_2_9, standard_metadata.egress_port=v_standard_metadata.egress_port_30, _p4ltl_3=v__p4ltl_3_9, _p4ltl_0=v__p4ltl_0_9, _p4ltl_1=v__p4ltl_1_9}  AuxVars[]  AssignedVars[] 4983#L577-1_accept_S1 
[2023-01-16 05:55:38,305 INFO  L754   eck$LassoCheckResult]: Loop: 4983#L577-1_accept_S1 [1488] L577-1_accept_S1-->L577_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 4927#L577_accept_S1 [1736] L577_accept_S1-->L577_accept_S1-D53: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 5398#L577_accept_S1-D53 [1856] L577_accept_S1-D53-->mainENTRY_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 4862#mainENTRY_accept_S1 [1988] mainENTRY_accept_S1-->mainENTRY_accept_S1-D39: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 5603#mainENTRY_accept_S1-D39 [1953] mainENTRY_accept_S1-D39-->havocProcedureENTRY_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5604#havocProcedureENTRY_accept_S1 [2101] havocProcedureENTRY_accept_S1-->L421_accept_S1: Formula: (not v_drop_11)  InVars {}  OutVars{drop=v_drop_11}  AuxVars[]  AssignedVars[drop] 5606#L421_accept_S1 [1955] L421_accept_S1-->L422_accept_S1: Formula: (not v_forward_18)  InVars {}  OutVars{forward=v_forward_18}  AuxVars[]  AssignedVars[forward] 5607#L422_accept_S1 [1966] L422_accept_S1-->L423_accept_S1: Formula: (= v_standard_metadata.ingress_port_13 0)  InVars {}  OutVars{standard_metadata.ingress_port=v_standard_metadata.ingress_port_13}  AuxVars[]  AssignedVars[standard_metadata.ingress_port] 4893#L423_accept_S1 [1445] L423_accept_S1-->L424_accept_S1: Formula: (= v_standard_metadata.egress_spec_16 0)  InVars {}  OutVars{standard_metadata.egress_spec=v_standard_metadata.egress_spec_16}  AuxVars[]  AssignedVars[standard_metadata.egress_spec] 4894#L424_accept_S1 [1702] L424_accept_S1-->L425_accept_S1: Formula: (= 0 v_standard_metadata.egress_port_17)  InVars {}  OutVars{standard_metadata.egress_port=v_standard_metadata.egress_port_17}  AuxVars[]  AssignedVars[standard_metadata.egress_port] 5264#L425_accept_S1 [1647] L425_accept_S1-->L426_accept_S1: Formula: (= v_standard_metadata.instance_type_8 0)  InVars {}  OutVars{standard_metadata.instance_type=v_standard_metadata.instance_type_8}  AuxVars[]  AssignedVars[standard_metadata.instance_type] 5265#L426_accept_S1 [1817] L426_accept_S1-->L427_accept_S1: Formula: (= v_standard_metadata.packet_length_9 0)  InVars {}  OutVars{standard_metadata.packet_length=v_standard_metadata.packet_length_9}  AuxVars[]  AssignedVars[standard_metadata.packet_length] 5363#L427_accept_S1 [1712] L427_accept_S1-->L428_accept_S1: Formula: (= v_standard_metadata.enq_timestamp_8 0)  InVars {}  OutVars{standard_metadata.enq_timestamp=v_standard_metadata.enq_timestamp_8}  AuxVars[]  AssignedVars[standard_metadata.enq_timestamp] 5259#L428_accept_S1 [1646] L428_accept_S1-->L429_accept_S1: Formula: (= v_standard_metadata.enq_qdepth_8 0)  InVars {}  OutVars{standard_metadata.enq_qdepth=v_standard_metadata.enq_qdepth_8}  AuxVars[]  AssignedVars[standard_metadata.enq_qdepth] 5260#L429_accept_S1 [2106] L429_accept_S1-->L430_accept_S1: Formula: (= v_standard_metadata.deq_timedelta_8 0)  InVars {}  OutVars{standard_metadata.deq_timedelta=v_standard_metadata.deq_timedelta_8}  AuxVars[]  AssignedVars[standard_metadata.deq_timedelta] 5689#L430_accept_S1 [2124] L430_accept_S1-->L431_accept_S1: Formula: (= v_standard_metadata.deq_qdepth_9 0)  InVars {}  OutVars{standard_metadata.deq_qdepth=v_standard_metadata.deq_qdepth_9}  AuxVars[]  AssignedVars[standard_metadata.deq_qdepth] 5147#L431_accept_S1 [1575] L431_accept_S1-->L432_accept_S1: Formula: (= v_standard_metadata.ingress_global_timestamp_9 0)  InVars {}  OutVars{standard_metadata.ingress_global_timestamp=v_standard_metadata.ingress_global_timestamp_9}  AuxVars[]  AssignedVars[standard_metadata.ingress_global_timestamp] 4861#L432_accept_S1 [1430] L432_accept_S1-->L433_accept_S1: Formula: (= v_standard_metadata.egress_global_timestamp_8 0)  InVars {}  OutVars{standard_metadata.egress_global_timestamp=v_standard_metadata.egress_global_timestamp_8}  AuxVars[]  AssignedVars[standard_metadata.egress_global_timestamp] 4863#L433_accept_S1 [2160] L433_accept_S1-->L434_accept_S1: Formula: (= 0 v_standard_metadata.mcast_grp_8)  InVars {}  OutVars{standard_metadata.mcast_grp=v_standard_metadata.mcast_grp_8}  AuxVars[]  AssignedVars[standard_metadata.mcast_grp] 5655#L434_accept_S1 [2037] L434_accept_S1-->L435_accept_S1: Formula: (= v_standard_metadata.egress_rid_8 0)  InVars {}  OutVars{standard_metadata.egress_rid=v_standard_metadata.egress_rid_8}  AuxVars[]  AssignedVars[standard_metadata.egress_rid] 5455#L435_accept_S1 [1784] L435_accept_S1-->L436_accept_S1: Formula: (= v_standard_metadata.checksum_error_9 0)  InVars {}  OutVars{standard_metadata.checksum_error=v_standard_metadata.checksum_error_9}  AuxVars[]  AssignedVars[standard_metadata.checksum_error] 5456#L436_accept_S1 [1853] L436_accept_S1-->L437_accept_S1: Formula: (= v_standard_metadata.priority_8 0)  InVars {}  OutVars{standard_metadata.priority=v_standard_metadata.priority_8}  AuxVars[]  AssignedVars[standard_metadata.priority] 5384#L437_accept_S1 [1728] L437_accept_S1-->L438_accept_S1: Formula: (not v_hdr.ethernet.valid_13)  InVars {}  OutVars{hdr.ethernet.valid=v_hdr.ethernet.valid_13}  AuxVars[]  AssignedVars[hdr.ethernet.valid] 5385#L438_accept_S1 [1824] L438_accept_S1-->L439_accept_S1: Formula: (= v_emit_23 (store v_emit_24 v_hdr.ethernet_2 false))  InVars {emit=v_emit_24, hdr.ethernet=v_hdr.ethernet_2}  OutVars{emit=v_emit_23, hdr.ethernet=v_hdr.ethernet_2}  AuxVars[]  AssignedVars[emit] 5493#L439_accept_S1 [1875] L439_accept_S1-->L440_accept_S1: Formula: true  InVars {}  OutVars{hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_25}  AuxVars[]  AssignedVars[hdr.ethernet.dstAddr] 5140#L440_accept_S1 [1571] L440_accept_S1-->L441_accept_S1: Formula: (= v_hdr.ethernet.dstAddr_27 v__old_hdr.ethernet.dstAddr_11)  InVars {hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_27}  OutVars{_old_hdr.ethernet.dstAddr=v__old_hdr.ethernet.dstAddr_11, hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_27}  AuxVars[]  AssignedVars[_old_hdr.ethernet.dstAddr] 5141#L441_accept_S1 [2023] L441_accept_S1-->L442_accept_S1: Formula: (= v_hdr.ethernet.dstAddr_30 v__old_hdr.ethernet.dstAddr_13)  InVars {hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_30}  OutVars{_old_hdr.ethernet.dstAddr=v__old_hdr.ethernet.dstAddr_13, hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_30}  AuxVars[]  AssignedVars[_old_hdr.ethernet.dstAddr] 5305#L442_accept_S1 [1674] L442_accept_S1-->L443_accept_S1: Formula: true  InVars {}  OutVars{hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_22}  AuxVars[]  AssignedVars[hdr.ethernet.srcAddr] 5306#L443_accept_S1 [2168] L443_accept_S1-->L444_accept_S1: Formula: (= v_hdr.ethernet.srcAddr_27 v__old_hdr.ethernet.srcAddr_13)  InVars {hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_27}  OutVars{hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_27, _old_hdr.ethernet.srcAddr=v__old_hdr.ethernet.srcAddr_13}  AuxVars[]  AssignedVars[_old_hdr.ethernet.srcAddr] 5136#L444_accept_S1 [1568] L444_accept_S1-->L445_accept_S1: Formula: (= v_hdr.ethernet.srcAddr_24 v__old_hdr.ethernet.srcAddr_11)  InVars {hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_24}  OutVars{hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_24, _old_hdr.ethernet.srcAddr=v__old_hdr.ethernet.srcAddr_11}  AuxVars[]  AssignedVars[_old_hdr.ethernet.srcAddr] 5137#L445_accept_S1 [2169] L445_accept_S1-->L446_accept_S1: Formula: true  InVars {}  OutVars{hdr.ethernet.etherType=v_hdr.ethernet.etherType_23}  AuxVars[]  AssignedVars[hdr.ethernet.etherType] 5261#L446_accept_S1 [1648] L446_accept_S1-->L447_accept_S1: Formula: (and (<= 0 v_hdr.ethernet.etherType_25) (<= v_hdr.ethernet.etherType_25 65536))  InVars {hdr.ethernet.etherType=v_hdr.ethernet.etherType_25}  OutVars{hdr.ethernet.etherType=v_hdr.ethernet.etherType_25}  AuxVars[]  AssignedVars[] 5262#L447_accept_S1 [2121] L447_accept_S1-->L448_accept_S1: Formula: (not v_hdr.ipv6.valid_17)  InVars {}  OutVars{hdr.ipv6.valid=v_hdr.ipv6.valid_17}  AuxVars[]  AssignedVars[hdr.ipv6.valid] 5535#L448_accept_S1 [1871] L448_accept_S1-->L449_accept_S1: Formula: (= (store v_emit_20 v_hdr.ipv6_9 false) v_emit_19)  InVars {emit=v_emit_20, hdr.ipv6=v_hdr.ipv6_9}  OutVars{emit=v_emit_19, hdr.ipv6=v_hdr.ipv6_9}  AuxVars[]  AssignedVars[emit] 5528#L449_accept_S1 [1865] L449_accept_S1-->L450_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv6.version=v_hdr.ipv6.version_18}  AuxVars[]  AssignedVars[hdr.ipv6.version] 5529#L450_accept_S1 [2071] L450_accept_S1-->L451_accept_S1: Formula: (and (<= v_hdr.ipv6.version_17 16) (<= 0 v_hdr.ipv6.version_17))  InVars {hdr.ipv6.version=v_hdr.ipv6.version_17}  OutVars{hdr.ipv6.version=v_hdr.ipv6.version_17}  AuxVars[]  AssignedVars[] 4889#L451_accept_S1 [1443] L451_accept_S1-->L452_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv6.trafclass=v_hdr.ipv6.trafclass_11}  AuxVars[]  AssignedVars[hdr.ipv6.trafclass] 4890#L452_accept_S1 [1624] L452_accept_S1-->L453_accept_S1: Formula: (and (<= 0 v_hdr.ipv6.trafclass_10) (<= v_hdr.ipv6.trafclass_10 256))  InVars {hdr.ipv6.trafclass=v_hdr.ipv6.trafclass_10}  OutVars{hdr.ipv6.trafclass=v_hdr.ipv6.trafclass_10}  AuxVars[]  AssignedVars[] 5222#L453_accept_S1 [2130] L453_accept_S1-->L454_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv6.flowlabel=v_hdr.ipv6.flowlabel_9}  AuxVars[]  AssignedVars[hdr.ipv6.flowlabel] 5703#L454_accept_S1 [2191] L454_accept_S1-->L455_accept_S1: Formula: (and (<= 0 v_hdr.ipv6.flowlabel_10) (<= v_hdr.ipv6.flowlabel_10 1048576))  InVars {hdr.ipv6.flowlabel=v_hdr.ipv6.flowlabel_10}  OutVars{hdr.ipv6.flowlabel=v_hdr.ipv6.flowlabel_10}  AuxVars[]  AssignedVars[] 5732#L455_accept_S1 [2213] L455_accept_S1-->L456_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv6.payloadlen=v_hdr.ipv6.payloadlen_19}  AuxVars[]  AssignedVars[hdr.ipv6.payloadlen] 5364#L456_accept_S1 [1713] L456_accept_S1-->L457_accept_S1: Formula: (and (<= v_hdr.ipv6.payloadlen_18 65536) (<= 0 v_hdr.ipv6.payloadlen_18))  InVars {hdr.ipv6.payloadlen=v_hdr.ipv6.payloadlen_18}  OutVars{hdr.ipv6.payloadlen=v_hdr.ipv6.payloadlen_18}  AuxVars[]  AssignedVars[] 5280#L457_accept_S1 [1659] L457_accept_S1-->L458_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv6.nextheader=v_hdr.ipv6.nextheader_19}  AuxVars[]  AssignedVars[hdr.ipv6.nextheader] 5281#L458_accept_S1 [1976] L458_accept_S1-->L459_accept_S1: Formula: (and (<= 0 v_hdr.ipv6.nextheader_21) (<= v_hdr.ipv6.nextheader_21 256))  InVars {hdr.ipv6.nextheader=v_hdr.ipv6.nextheader_21}  OutVars{hdr.ipv6.nextheader=v_hdr.ipv6.nextheader_21}  AuxVars[]  AssignedVars[] 5624#L459_accept_S1 [2062] L459_accept_S1-->L460_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv6.hoplimit=v_hdr.ipv6.hoplimit_19}  AuxVars[]  AssignedVars[hdr.ipv6.hoplimit] 5554#L460_accept_S1 [1894] L460_accept_S1-->L461_accept_S1: Formula: (and (<= 0 v_hdr.ipv6.hoplimit_18) (<= v_hdr.ipv6.hoplimit_18 256))  InVars {hdr.ipv6.hoplimit=v_hdr.ipv6.hoplimit_18}  OutVars{hdr.ipv6.hoplimit=v_hdr.ipv6.hoplimit_18}  AuxVars[]  AssignedVars[] 4967#L461_accept_S1 [1480] L461_accept_S1-->L462_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv6.srcAddr=v_hdr.ipv6.srcAddr_16}  AuxVars[]  AssignedVars[hdr.ipv6.srcAddr] 4968#L462_accept_S1 [2047] L462_accept_S1-->L463_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv6.dstAddr=v_hdr.ipv6.dstAddr_17}  AuxVars[]  AssignedVars[hdr.ipv6.dstAddr] 4922#L463_accept_S1 [1457] L463_accept_S1-->L464_accept_S1: Formula: (not v_hdr.ipv4_tunnel.valid_19)  InVars {}  OutVars{hdr.ipv4_tunnel.valid=v_hdr.ipv4_tunnel.valid_19}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.valid] 4923#L464_accept_S1 [1546] L464_accept_S1-->L465_accept_S1: Formula: (= v_emit_37 (store v_emit_38 v_hdr.ipv4_tunnel_9 false))  InVars {emit=v_emit_38, hdr.ipv4_tunnel=v_hdr.ipv4_tunnel_9}  OutVars{emit=v_emit_37, hdr.ipv4_tunnel=v_hdr.ipv4_tunnel_9}  AuxVars[]  AssignedVars[emit] 5097#L465_accept_S1 [2053] L465_accept_S1-->L466_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.version=v_hdr.ipv4_tunnel.version_14}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.version] 5516#L466_accept_S1 [1847] L466_accept_S1-->L467_accept_S1: Formula: (and (<= v_hdr.ipv4_tunnel.version_15 16) (<= 0 v_hdr.ipv4_tunnel.version_15))  InVars {hdr.ipv4_tunnel.version=v_hdr.ipv4_tunnel.version_15}  OutVars{hdr.ipv4_tunnel.version=v_hdr.ipv4_tunnel.version_15}  AuxVars[]  AssignedVars[] 4965#L467_accept_S1 [1479] L467_accept_S1-->L468_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.ihl=v_hdr.ipv4_tunnel.ihl_17}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.ihl] 4966#L468_accept_S1 [2182] L468_accept_S1-->L469_accept_S1: Formula: (and (<= 0 v_hdr.ipv4_tunnel.ihl_15) (<= v_hdr.ipv4_tunnel.ihl_15 16))  InVars {hdr.ipv4_tunnel.ihl=v_hdr.ipv4_tunnel.ihl_15}  OutVars{hdr.ipv4_tunnel.ihl=v_hdr.ipv4_tunnel.ihl_15}  AuxVars[]  AssignedVars[] 5292#L469_accept_S1 [1666] L469_accept_S1-->L470_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.diffserv=v_hdr.ipv4_tunnel.diffserv_17}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.diffserv] 5293#L470_accept_S1 [1669] L470_accept_S1-->L471_accept_S1: Formula: (and (<= v_hdr.ipv4_tunnel.diffserv_16 256) (<= 0 v_hdr.ipv4_tunnel.diffserv_16))  InVars {hdr.ipv4_tunnel.diffserv=v_hdr.ipv4_tunnel.diffserv_16}  OutVars{hdr.ipv4_tunnel.diffserv=v_hdr.ipv4_tunnel.diffserv_16}  AuxVars[]  AssignedVars[] 5294#L471_accept_S1 [1820] L471_accept_S1-->L472_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.totalLen=v_hdr.ipv4_tunnel.totalLen_17}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.totalLen] 5489#L472_accept_S1 [2199] L472_accept_S1-->L473_accept_S1: Formula: (and (<= v_hdr.ipv4_tunnel.totalLen_16 65536) (<= 0 v_hdr.ipv4_tunnel.totalLen_16))  InVars {hdr.ipv4_tunnel.totalLen=v_hdr.ipv4_tunnel.totalLen_16}  OutVars{hdr.ipv4_tunnel.totalLen=v_hdr.ipv4_tunnel.totalLen_16}  AuxVars[]  AssignedVars[] 5224#L473_accept_S1 [1626] L473_accept_S1-->L474_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.identification=v_hdr.ipv4_tunnel.identification_15}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.identification] 5225#L474_accept_S1 [1757] L474_accept_S1-->L475_accept_S1: Formula: (and (<= v_hdr.ipv4_tunnel.identification_14 65536) (<= 0 v_hdr.ipv4_tunnel.identification_14))  InVars {hdr.ipv4_tunnel.identification=v_hdr.ipv4_tunnel.identification_14}  OutVars{hdr.ipv4_tunnel.identification=v_hdr.ipv4_tunnel.identification_14}  AuxVars[]  AssignedVars[] 5423#L475_accept_S1 [2044] L475_accept_S1-->L476_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.flags=v_hdr.ipv4_tunnel.flags_15}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.flags] 5094#L476_accept_S1 [1544] L476_accept_S1-->L477_accept_S1: Formula: (and (<= v_hdr.ipv4_tunnel.flags_16 8) (<= 0 v_hdr.ipv4_tunnel.flags_16))  InVars {hdr.ipv4_tunnel.flags=v_hdr.ipv4_tunnel.flags_16}  OutVars{hdr.ipv4_tunnel.flags=v_hdr.ipv4_tunnel.flags_16}  AuxVars[]  AssignedVars[] 5095#L477_accept_S1 [1657] L477_accept_S1-->L478_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.fragOffset=v_hdr.ipv4_tunnel.fragOffset_14}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.fragOffset] 5093#L478_accept_S1 [1543] L478_accept_S1-->L479_accept_S1: Formula: (and (<= 0 v_hdr.ipv4_tunnel.fragOffset_16) (<= v_hdr.ipv4_tunnel.fragOffset_16 8192))  InVars {hdr.ipv4_tunnel.fragOffset=v_hdr.ipv4_tunnel.fragOffset_16}  OutVars{hdr.ipv4_tunnel.fragOffset=v_hdr.ipv4_tunnel.fragOffset_16}  AuxVars[]  AssignedVars[] 4891#L479_accept_S1 [1444] L479_accept_S1-->L480_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.ttl=v_hdr.ipv4_tunnel.ttl_17}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.ttl] 4892#L480_accept_S1 [2092] L480_accept_S1-->L481_accept_S1: Formula: (and (<= 0 v_hdr.ipv4_tunnel.ttl_16) (<= v_hdr.ipv4_tunnel.ttl_16 256))  InVars {hdr.ipv4_tunnel.ttl=v_hdr.ipv4_tunnel.ttl_16}  OutVars{hdr.ipv4_tunnel.ttl=v_hdr.ipv4_tunnel.ttl_16}  AuxVars[]  AssignedVars[] 5058#L481_accept_S1 [1524] L481_accept_S1-->L482_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.protocol=v_hdr.ipv4_tunnel.protocol_18}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.protocol] 5013#L482_accept_S1 [1503] L482_accept_S1-->L483_accept_S1: Formula: (and (<= v_hdr.ipv4_tunnel.protocol_16 256) (<= 0 v_hdr.ipv4_tunnel.protocol_16))  InVars {hdr.ipv4_tunnel.protocol=v_hdr.ipv4_tunnel.protocol_16}  OutVars{hdr.ipv4_tunnel.protocol=v_hdr.ipv4_tunnel.protocol_16}  AuxVars[]  AssignedVars[] 5014#L483_accept_S1 [2089] L483_accept_S1-->L484_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.hdrChecksum=v_hdr.ipv4_tunnel.hdrChecksum_9}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.hdrChecksum] 5679#L484_accept_S1 [2138] L484_accept_S1-->L485_accept_S1: Formula: (and (<= 0 v_hdr.ipv4_tunnel.hdrChecksum_12) (<= v_hdr.ipv4_tunnel.hdrChecksum_12 65536))  InVars {hdr.ipv4_tunnel.hdrChecksum=v_hdr.ipv4_tunnel.hdrChecksum_12}  OutVars{hdr.ipv4_tunnel.hdrChecksum=v_hdr.ipv4_tunnel.hdrChecksum_12}  AuxVars[]  AssignedVars[] 5510#L485_accept_S1 [1842] L485_accept_S1-->L486_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.srcAddr=v_hdr.ipv4_tunnel.srcAddr_13}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.srcAddr] 5335#L486_accept_S1 [1691] L486_accept_S1-->L487_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.dstAddr=v_hdr.ipv4_tunnel.dstAddr_13}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.dstAddr] 5186#L487_accept_S1 [1600] L487_accept_S1-->L488_accept_S1: Formula: (not v_hdr.ipv4.valid_25)  InVars {}  OutVars{hdr.ipv4.valid=v_hdr.ipv4.valid_25}  AuxVars[]  AssignedVars[hdr.ipv4.valid] 5187#L488_accept_S1 [1730] L488_accept_S1-->L489_accept_S1: Formula: (= v_emit_39 (store v_emit_40 v_hdr.ipv4_3 false))  InVars {hdr.ipv4=v_hdr.ipv4_3, emit=v_emit_40}  OutVars{hdr.ipv4=v_hdr.ipv4_3, emit=v_emit_39}  AuxVars[]  AssignedVars[emit] 5386#L489_accept_S1 [2125] L489_accept_S1-->L490_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.version=v_hdr.ipv4.version_11}  AuxVars[]  AssignedVars[hdr.ipv4.version] 5699#L490_accept_S1 [2162] L490_accept_S1-->L491_accept_S1: Formula: (and (<= 0 v_hdr.ipv4.version_13) (<= v_hdr.ipv4.version_13 16))  InVars {hdr.ipv4.version=v_hdr.ipv4.version_13}  OutVars{hdr.ipv4.version=v_hdr.ipv4.version_13}  AuxVars[]  AssignedVars[] 5083#L491_accept_S1 [1538] L491_accept_S1-->L492_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.ihl=v_hdr.ipv4.ihl_12}  AuxVars[]  AssignedVars[hdr.ipv4.ihl] 5084#L492_accept_S1 [1952] L492_accept_S1-->L493_accept_S1: Formula: (and (<= 0 v_hdr.ipv4.ihl_9) (<= v_hdr.ipv4.ihl_9 16))  InVars {hdr.ipv4.ihl=v_hdr.ipv4.ihl_9}  OutVars{hdr.ipv4.ihl=v_hdr.ipv4.ihl_9}  AuxVars[]  AssignedVars[] 5527#L493_accept_S1 [1864] L493_accept_S1-->L494_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.diffserv=v_hdr.ipv4.diffserv_10}  AuxVars[]  AssignedVars[hdr.ipv4.diffserv] 5267#L494_accept_S1 [1650] L494_accept_S1-->L495_accept_S1: Formula: (and (<= v_hdr.ipv4.diffserv_13 256) (<= 0 v_hdr.ipv4.diffserv_13))  InVars {hdr.ipv4.diffserv=v_hdr.ipv4.diffserv_13}  OutVars{hdr.ipv4.diffserv=v_hdr.ipv4.diffserv_13}  AuxVars[]  AssignedVars[] 5112#L495_accept_S1 [1555] L495_accept_S1-->L496_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.totalLen=v_hdr.ipv4.totalLen_14}  AuxVars[]  AssignedVars[hdr.ipv4.totalLen] 5113#L496_accept_S1 [1721] L496_accept_S1-->L497_accept_S1: Formula: (and (<= 0 v_hdr.ipv4.totalLen_16) (<= v_hdr.ipv4.totalLen_16 65536))  InVars {hdr.ipv4.totalLen=v_hdr.ipv4.totalLen_16}  OutVars{hdr.ipv4.totalLen=v_hdr.ipv4.totalLen_16}  AuxVars[]  AssignedVars[] 5376#L497_accept_S1 [2216] L497_accept_S1-->L498_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.identification=v_hdr.ipv4.identification_12}  AuxVars[]  AssignedVars[hdr.ipv4.identification] 5625#L498_accept_S1 [1980] L498_accept_S1-->L499_accept_S1: Formula: (and (<= 0 v_hdr.ipv4.identification_10) (<= v_hdr.ipv4.identification_10 65536))  InVars {hdr.ipv4.identification=v_hdr.ipv4.identification_10}  OutVars{hdr.ipv4.identification=v_hdr.ipv4.identification_10}  AuxVars[]  AssignedVars[] 5439#L499_accept_S1 [1767] L499_accept_S1-->L500_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.flags=v_hdr.ipv4.flags_12}  AuxVars[]  AssignedVars[hdr.ipv4.flags] 5382#L500_accept_S1 [1725] L500_accept_S1-->L501_accept_S1: Formula: (and (<= v_hdr.ipv4.flags_13 8) (<= 0 v_hdr.ipv4.flags_13))  InVars {hdr.ipv4.flags=v_hdr.ipv4.flags_13}  OutVars{hdr.ipv4.flags=v_hdr.ipv4.flags_13}  AuxVars[]  AssignedVars[] 5181#L501_accept_S1 [1595] L501_accept_S1-->L502_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.fragOffset=v_hdr.ipv4.fragOffset_13}  AuxVars[]  AssignedVars[hdr.ipv4.fragOffset] 5182#L502_accept_S1 [2118] L502_accept_S1-->L503_accept_S1: Formula: (and (<= v_hdr.ipv4.fragOffset_10 8192) (<= 0 v_hdr.ipv4.fragOffset_10))  InVars {hdr.ipv4.fragOffset=v_hdr.ipv4.fragOffset_10}  OutVars{hdr.ipv4.fragOffset=v_hdr.ipv4.fragOffset_10}  AuxVars[]  AssignedVars[] 5698#L503_accept_S1 [2145] L503_accept_S1-->L504_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.ttl=v_hdr.ipv4.ttl_10}  AuxVars[]  AssignedVars[hdr.ipv4.ttl] 4973#L504_accept_S1 [1483] L504_accept_S1-->L505_accept_S1: Formula: (and (<= v_hdr.ipv4.ttl_13 256) (<= 0 v_hdr.ipv4.ttl_13))  InVars {hdr.ipv4.ttl=v_hdr.ipv4.ttl_13}  OutVars{hdr.ipv4.ttl=v_hdr.ipv4.ttl_13}  AuxVars[]  AssignedVars[] 4974#L505_accept_S1 [2057] L505_accept_S1-->L506_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.protocol=v_hdr.ipv4.protocol_11}  AuxVars[]  AssignedVars[hdr.ipv4.protocol] 5536#L506_accept_S1 [1872] L506_accept_S1-->L507_accept_S1: Formula: (and (<= 0 v_hdr.ipv4.protocol_14) (<= v_hdr.ipv4.protocol_14 256))  InVars {hdr.ipv4.protocol=v_hdr.ipv4.protocol_14}  OutVars{hdr.ipv4.protocol=v_hdr.ipv4.protocol_14}  AuxVars[]  AssignedVars[] 5537#L507_accept_S1 [2135] L507_accept_S1-->L508_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.hdrChecksum=v_hdr.ipv4.hdrChecksum_10}  AuxVars[]  AssignedVars[hdr.ipv4.hdrChecksum] 5651#L508_accept_S1 [2024] L508_accept_S1-->L509_accept_S1: Formula: (and (<= v_hdr.ipv4.hdrChecksum_12 65536) (<= 0 v_hdr.ipv4.hdrChecksum_12))  InVars {hdr.ipv4.hdrChecksum=v_hdr.ipv4.hdrChecksum_12}  OutVars{hdr.ipv4.hdrChecksum=v_hdr.ipv4.hdrChecksum_12}  AuxVars[]  AssignedVars[] 5577#L509_accept_S1 [1921] L509_accept_S1-->L510_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.srcAddr=v_hdr.ipv4.srcAddr_9}  AuxVars[]  AssignedVars[hdr.ipv4.srcAddr] 5578#L510_accept_S1 [2224] L510_accept_S1-->L511_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_15}  AuxVars[]  AssignedVars[hdr.ipv4.dstAddr] 5279#L511_accept_S1 [1658] L511_accept_S1-->L512_accept_S1: Formula: (= v_hdr.ipv4.dstAddr_17 v__old_hdr.ipv4.dstAddr_13)  InVars {hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_17}  OutVars{_old_hdr.ipv4.dstAddr=v__old_hdr.ipv4.dstAddr_13, hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_17}  AuxVars[]  AssignedVars[_old_hdr.ipv4.dstAddr] 4964#L512_accept_S1 [1478] L512_accept_S1-->L513_accept_S1: Formula: (= v_hdr.ipv4.dstAddr_16 v__old_hdr.ipv4.dstAddr_12)  InVars {hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_16}  OutVars{_old_hdr.ipv4.dstAddr=v__old_hdr.ipv4.dstAddr_12, hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_16}  AuxVars[]  AssignedVars[_old_hdr.ipv4.dstAddr] 4882#L513_accept_S1 [1439] L513_accept_S1-->L514_accept_S1: Formula: (not v_hdr.tcp.valid_30)  InVars {}  OutVars{hdr.tcp.valid=v_hdr.tcp.valid_30}  AuxVars[]  AssignedVars[hdr.tcp.valid] 4883#L514_accept_S1 [2183] L514_accept_S1-->L515_accept_S1: Formula: (= v_emit_35 (store v_emit_36 v_hdr.tcp_3 false))  InVars {hdr.tcp=v_hdr.tcp_3, emit=v_emit_36}  OutVars{hdr.tcp=v_hdr.tcp_3, emit=v_emit_35}  AuxVars[]  AssignedVars[emit] 5044#L515_accept_S1 [1518] L515_accept_S1-->L516_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.srcport=v_hdr.tcp.srcport_10}  AuxVars[]  AssignedVars[hdr.tcp.srcport] 5045#L516_accept_S1 [1866] L516_accept_S1-->L517_accept_S1: Formula: (and (<= 0 v_hdr.tcp.srcport_11) (<= v_hdr.tcp.srcport_11 65536))  InVars {hdr.tcp.srcport=v_hdr.tcp.srcport_11}  OutVars{hdr.tcp.srcport=v_hdr.tcp.srcport_11}  AuxVars[]  AssignedVars[] 5341#L517_accept_S1 [1698] L517_accept_S1-->L518_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.dstport=v_hdr.tcp.dstport_11}  AuxVars[]  AssignedVars[hdr.tcp.dstport] 5087#L518_accept_S1 [1540] L518_accept_S1-->L519_accept_S1: Formula: (and (<= v_hdr.tcp.dstport_12 65536) (<= 0 v_hdr.tcp.dstport_12))  InVars {hdr.tcp.dstport=v_hdr.tcp.dstport_12}  OutVars{hdr.tcp.dstport=v_hdr.tcp.dstport_12}  AuxVars[]  AssignedVars[] 5088#L519_accept_S1 [2187] L519_accept_S1-->L520_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.sequence=v_hdr.tcp.sequence_41}  AuxVars[]  AssignedVars[hdr.tcp.sequence] 5652#L520_accept_S1 [2025] L520_accept_S1-->L521_accept_S1: Formula: (and (<= 0 v_hdr.tcp.sequence_42) (<= v_hdr.tcp.sequence_42 4294967296))  InVars {hdr.tcp.sequence=v_hdr.tcp.sequence_42}  OutVars{hdr.tcp.sequence=v_hdr.tcp.sequence_42}  AuxVars[]  AssignedVars[] 5433#L521_accept_S1 [1765] L521_accept_S1-->L522_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.ackseq=v_hdr.tcp.ackseq_42}  AuxVars[]  AssignedVars[hdr.tcp.ackseq] 5434#L522_accept_S1 [2090] L522_accept_S1-->L523_accept_S1: Formula: (and (<= v_hdr.tcp.ackseq_41 4294967296) (<= 0 v_hdr.tcp.ackseq_41))  InVars {hdr.tcp.ackseq=v_hdr.tcp.ackseq_41}  OutVars{hdr.tcp.ackseq=v_hdr.tcp.ackseq_41}  AuxVars[]  AssignedVars[] 5479#L523_accept_S1 [1807] L523_accept_S1-->L524_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.headerlength=v_hdr.tcp.headerlength_9}  AuxVars[]  AssignedVars[hdr.tcp.headerlength] 5480#L524_accept_S1 [1858] L524_accept_S1-->L525_accept_S1: Formula: (and (<= v_hdr.tcp.headerlength_12 16) (<= 0 v_hdr.tcp.headerlength_12))  InVars {hdr.tcp.headerlength=v_hdr.tcp.headerlength_12}  OutVars{hdr.tcp.headerlength=v_hdr.tcp.headerlength_12}  AuxVars[]  AssignedVars[] 5096#L525_accept_S1 [1545] L525_accept_S1-->L526_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.reservation=v_hdr.tcp.reservation_10}  AuxVars[]  AssignedVars[hdr.tcp.reservation] 4985#L526_accept_S1 [1491] L526_accept_S1-->L527_accept_S1: Formula: (and (<= v_hdr.tcp.reservation_11 64) (<= 0 v_hdr.tcp.reservation_11))  InVars {hdr.tcp.reservation=v_hdr.tcp.reservation_11}  OutVars{hdr.tcp.reservation=v_hdr.tcp.reservation_11}  AuxVars[]  AssignedVars[] 4986#L527_accept_S1 [2059] L527_accept_S1-->L528_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.URG=v_hdr.tcp.URG_11}  AuxVars[]  AssignedVars[hdr.tcp.URG] 5583#L528_accept_S1 [1926] L528_accept_S1-->L529_accept_S1: Formula: (and (<= v_hdr.tcp.URG_10 2) (<= 0 v_hdr.tcp.URG_10))  InVars {hdr.tcp.URG=v_hdr.tcp.URG_10}  OutVars{hdr.tcp.URG=v_hdr.tcp.URG_10}  AuxVars[]  AssignedVars[] 5461#L529_accept_S1 [1791] L529_accept_S1-->L530_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.ACK=v_hdr.tcp.ACK_10}  AuxVars[]  AssignedVars[hdr.tcp.ACK] 5462#L530_accept_S1 [2041] L530_accept_S1-->L531_accept_S1: Formula: (and (<= 0 v_hdr.tcp.ACK_12) (<= v_hdr.tcp.ACK_12 2))  InVars {hdr.tcp.ACK=v_hdr.tcp.ACK_12}  OutVars{hdr.tcp.ACK=v_hdr.tcp.ACK_12}  AuxVars[]  AssignedVars[] 5636#L531_accept_S1 [2000] L531_accept_S1-->L532_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.PSH=v_hdr.tcp.PSH_10}  AuxVars[]  AssignedVars[hdr.tcp.PSH] 5637#L532_accept_S1 [2042] L532_accept_S1-->L533_accept_S1: Formula: (and (<= v_hdr.tcp.PSH_12 2) (<= 0 v_hdr.tcp.PSH_12))  InVars {hdr.tcp.PSH=v_hdr.tcp.PSH_12}  OutVars{hdr.tcp.PSH=v_hdr.tcp.PSH_12}  AuxVars[]  AssignedVars[] 5521#L533_accept_S1 [1859] L533_accept_S1-->L534_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.RST=v_hdr.tcp.RST_12}  AuxVars[]  AssignedVars[hdr.tcp.RST] 5315#L534_accept_S1 [1679] L534_accept_S1-->L535_accept_S1: Formula: (and (<= v_hdr.tcp.RST_10 2) (<= 0 v_hdr.tcp.RST_10))  InVars {hdr.tcp.RST=v_hdr.tcp.RST_10}  OutVars{hdr.tcp.RST=v_hdr.tcp.RST_10}  AuxVars[]  AssignedVars[] 5316#L535_accept_S1 [1993] L535_accept_S1-->L536_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.SYN=v_hdr.tcp.SYN_12}  AuxVars[]  AssignedVars[hdr.tcp.SYN] 5125#L536_accept_S1 [1562] L536_accept_S1-->L537_accept_S1: Formula: (and (<= 0 v_hdr.tcp.SYN_10) (<= v_hdr.tcp.SYN_10 2))  InVars {hdr.tcp.SYN=v_hdr.tcp.SYN_10}  OutVars{hdr.tcp.SYN=v_hdr.tcp.SYN_10}  AuxVars[]  AssignedVars[] 5126#L537_accept_S1 [1970] L537_accept_S1-->L538_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.FIN=v_hdr.tcp.FIN_12}  AuxVars[]  AssignedVars[hdr.tcp.FIN] 5551#L538_accept_S1 [1891] L538_accept_S1-->L539_accept_S1: Formula: (and (<= 0 v_hdr.tcp.FIN_11) (<= v_hdr.tcp.FIN_11 2))  InVars {hdr.tcp.FIN=v_hdr.tcp.FIN_11}  OutVars{hdr.tcp.FIN=v_hdr.tcp.FIN_11}  AuxVars[]  AssignedVars[] 5552#L539_accept_S1 [2032] L539_accept_S1-->L540_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.windowsize=v_hdr.tcp.windowsize_11}  AuxVars[]  AssignedVars[hdr.tcp.windowsize] 5179#L540_accept_S1 [1594] L540_accept_S1-->L541_accept_S1: Formula: (and (<= 0 v_hdr.tcp.windowsize_9) (<= v_hdr.tcp.windowsize_9 65536))  InVars {hdr.tcp.windowsize=v_hdr.tcp.windowsize_9}  OutVars{hdr.tcp.windowsize=v_hdr.tcp.windowsize_9}  AuxVars[]  AssignedVars[] 5180#L541_accept_S1 [1660] L541_accept_S1-->L542_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.checksum=v_hdr.tcp.checksum_11}  AuxVars[]  AssignedVars[hdr.tcp.checksum] 5283#L542_accept_S1 [1981] L542_accept_S1-->L543_accept_S1: Formula: (and (<= v_hdr.tcp.checksum_9 65536) (<= 0 v_hdr.tcp.checksum_9))  InVars {hdr.tcp.checksum=v_hdr.tcp.checksum_9}  OutVars{hdr.tcp.checksum=v_hdr.tcp.checksum_9}  AuxVars[]  AssignedVars[] 4946#L543_accept_S1 [1468] L543_accept_S1-->L544_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.pointer=v_hdr.tcp.pointer_12}  AuxVars[]  AssignedVars[hdr.tcp.pointer] 4947#L544_accept_S1 [1473] L544_accept_S1-->L545_accept_S1: Formula: (and (<= 0 v_hdr.tcp.pointer_9) (<= v_hdr.tcp.pointer_9 65536))  InVars {hdr.tcp.pointer=v_hdr.tcp.pointer_9}  OutVars{hdr.tcp.pointer=v_hdr.tcp.pointer_9}  AuxVars[]  AssignedVars[] 4958#L545_accept_S1 [2018] L545_accept_S1-->L546_accept_S1: Formula: (not v_hdr.udp_tunnel.valid_19)  InVars {}  OutVars{hdr.udp_tunnel.valid=v_hdr.udp_tunnel.valid_19}  AuxVars[]  AssignedVars[hdr.udp_tunnel.valid] 5214#L546_accept_S1 [1615] L546_accept_S1-->L547_accept_S1: Formula: (= v_emit_21 (store v_emit_22 v_hdr.udp_tunnel_8 false))  InVars {emit=v_emit_22, hdr.udp_tunnel=v_hdr.udp_tunnel_8}  OutVars{emit=v_emit_21, hdr.udp_tunnel=v_hdr.udp_tunnel_8}  AuxVars[]  AssignedVars[emit] 5215#L547_accept_S1 [2099] L547_accept_S1-->L548_accept_S1: Formula: true  InVars {}  OutVars{hdr.udp_tunnel.srcport=v_hdr.udp_tunnel.srcport_15}  AuxVars[]  AssignedVars[hdr.udp_tunnel.srcport] 5241#L548_accept_S1 [1635] L548_accept_S1-->L549_accept_S1: Formula: (and (<= v_hdr.udp_tunnel.srcport_17 65536) (<= 0 v_hdr.udp_tunnel.srcport_17))  InVars {hdr.udp_tunnel.srcport=v_hdr.udp_tunnel.srcport_17}  OutVars{hdr.udp_tunnel.srcport=v_hdr.udp_tunnel.srcport_17}  AuxVars[]  AssignedVars[] 5242#L549_accept_S1 [2225] L549_accept_S1-->L550_accept_S1: Formula: true  InVars {}  OutVars{hdr.udp_tunnel.dstport=v_hdr.udp_tunnel.dstport_17}  AuxVars[]  AssignedVars[hdr.udp_tunnel.dstport] 5431#L550_accept_S1 [1764] L550_accept_S1-->L551_accept_S1: Formula: (and (<= v_hdr.udp_tunnel.dstport_16 65536) (<= 0 v_hdr.udp_tunnel.dstport_16))  InVars {hdr.udp_tunnel.dstport=v_hdr.udp_tunnel.dstport_16}  OutVars{hdr.udp_tunnel.dstport=v_hdr.udp_tunnel.dstport_16}  AuxVars[]  AssignedVars[] 5432#L551_accept_S1 [2102] L551_accept_S1-->L552_accept_S1: Formula: true  InVars {}  OutVars{hdr.udp_tunnel.userlength=v_hdr.udp_tunnel.userlength_14}  AuxVars[]  AssignedVars[hdr.udp_tunnel.userlength] 5620#L552_accept_S1 [1971] L552_accept_S1-->L553_accept_S1: Formula: (and (<= 0 v_hdr.udp_tunnel.userlength_15) (<= v_hdr.udp_tunnel.userlength_15 65536))  InVars {hdr.udp_tunnel.userlength=v_hdr.udp_tunnel.userlength_15}  OutVars{hdr.udp_tunnel.userlength=v_hdr.udp_tunnel.userlength_15}  AuxVars[]  AssignedVars[] 5621#L553_accept_S1 [1998] L553_accept_S1-->L554_accept_S1: Formula: true  InVars {}  OutVars{hdr.udp_tunnel.checksum=v_hdr.udp_tunnel.checksum_17}  AuxVars[]  AssignedVars[hdr.udp_tunnel.checksum] 5071#L554_accept_S1 [1532] L554_accept_S1-->havocProcedureFINAL_accept_S1: Formula: (and (<= v_hdr.udp_tunnel.checksum_16 65536) (<= 0 v_hdr.udp_tunnel.checksum_16))  InVars {hdr.udp_tunnel.checksum=v_hdr.udp_tunnel.checksum_16}  OutVars{hdr.udp_tunnel.checksum=v_hdr.udp_tunnel.checksum_16}  AuxVars[]  AssignedVars[] 5072#havocProcedureFINAL_accept_S1 [1756] havocProcedureFINAL_accept_S1-->havocProcedureEXIT_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5123#havocProcedureEXIT_accept_S1 >[2239] havocProcedureEXIT_accept_S1-->L559-D55: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5124#L559-D55 [2068] L559-D55-->L559_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 4926#L559_accept_S1 [1459] L559_accept_S1-->L559_accept_S1-D21: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 4928#L559_accept_S1-D21 [2131] L559_accept_S1-D21-->_parser_MyParserENTRY_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5085#_parser_MyParserENTRY_accept_S1 [1539] _parser_MyParserENTRY_accept_S1-->_parser_MyParserENTRY_accept_S1-D13: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 5086#_parser_MyParserENTRY_accept_S1-D13 [2142] _parser_MyParserENTRY_accept_S1-D13-->startENTRY_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5424#startENTRY_accept_S1 [1759] startENTRY_accept_S1-->L727_accept_S1: Formula: v_hdr.ethernet.valid_15  InVars {}  OutVars{hdr.ethernet.valid=v_hdr.ethernet.valid_15}  AuxVars[]  AssignedVars[hdr.ethernet.valid] 5197#L727_accept_S1 [1606] L727_accept_S1-->L730_accept_S1: Formula: (not (= v_hdr.ethernet.etherType_33 34525))  InVars {hdr.ethernet.etherType=v_hdr.ethernet.etherType_33}  OutVars{hdr.ethernet.etherType=v_hdr.ethernet.etherType_33}  AuxVars[]  AssignedVars[] 5198#L730_accept_S1 [1878] L730_accept_S1-->L730-1_accept_S1: Formula: (not (= v_hdr.ethernet.etherType_39 2048))  InVars {hdr.ethernet.etherType=v_hdr.ethernet.etherType_39}  OutVars{hdr.ethernet.etherType=v_hdr.ethernet.etherType_39}  AuxVars[]  AssignedVars[] 5091#L730-1_accept_S1 [1542] L730-1_accept_S1-->startEXIT_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5092#startEXIT_accept_S1 >[2261] startEXIT_accept_S1-->_parser_MyParserFINAL-D65: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5114#_parser_MyParserFINAL-D65 [1556] _parser_MyParserFINAL-D65-->_parser_MyParserFINAL_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5115#_parser_MyParserFINAL_accept_S1 [1557] _parser_MyParserFINAL_accept_S1-->_parser_MyParserEXIT_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5116#_parser_MyParserEXIT_accept_S1 >[2247] _parser_MyParserEXIT_accept_S1-->L560-D103: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5573#L560-D103 [1958] L560-D103-->L560_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5343#L560_accept_S1 [2028] L560_accept_S1-->L560_accept_S1-D15: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 5653#L560_accept_S1-D15 [2180] L560_accept_S1-D15-->MyVerifyChecksumFINAL_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5342#MyVerifyChecksumFINAL_accept_S1 [1697] MyVerifyChecksumFINAL_accept_S1-->MyVerifyChecksumEXIT_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5344#MyVerifyChecksumEXIT_accept_S1 >[2310] MyVerifyChecksumEXIT_accept_S1-->L561-D73: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5168#L561-D73 [1589] L561-D73-->L561_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 4878#L561_accept_S1 [1888] L561_accept_S1-->L561_accept_S1-D5: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 5392#L561_accept_S1-D5 [1733] L561_accept_S1-D5-->MyIngressENTRY_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5393#MyIngressENTRY_accept_S1 [1899] MyIngressENTRY_accept_S1-->L259_accept_S1: Formula: (= v_standard_metadata.ingress_port_15 0)  InVars {standard_metadata.ingress_port=v_standard_metadata.ingress_port_15}  OutVars{standard_metadata.ingress_port=v_standard_metadata.ingress_port_15}  AuxVars[]  AssignedVars[] 5560#L259_accept_S1 [2133] L259_accept_S1-->L260_accept_S1: Formula: (= v_hdr.ipv4.dstAddr_20 2071690107)  InVars {hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_20}  OutVars{hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_20}  AuxVars[]  AssignedVars[] 5546#L260_accept_S1 [1887] L260_accept_S1-->L261_accept_S1: Formula: (= 174219185552744 v_hdr.ethernet.dstAddr_34)  InVars {}  OutVars{hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_34}  AuxVars[]  AssignedVars[hdr.ethernet.dstAddr] 5547#L261_accept_S1 [1940] L261_accept_S1-->L262_accept_S1: Formula: (= v_standard_metadata.egress_spec_23 1)  InVars {}  OutVars{standard_metadata.egress_spec=v_standard_metadata.egress_spec_23}  AuxVars[]  AssignedVars[standard_metadata.egress_spec] 5160#L262_accept_S1 [1583] L262_accept_S1-->L263_accept_S1: Formula: (= 1 v_standard_metadata.egress_port_23)  InVars {}  OutVars{standard_metadata.egress_port=v_standard_metadata.egress_port_23}  AuxVars[]  AssignedVars[standard_metadata.egress_port] 5161#L263_accept_S1 [1786] L263_accept_S1-->L258_accept_S1: Formula: v_forward_26  InVars {}  OutVars{forward=v_forward_26}  AuxVars[]  AssignedVars[forward] 5457#L258_accept_S1 [1869] L258_accept_S1-->MyIngressEXIT_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5532#MyIngressEXIT_accept_S1 >[2343] MyIngressEXIT_accept_S1-->L562-D107: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5867#L562-D107 [1992] L562-D107-->L562_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 4917#L562_accept_S1 [2153] L562_accept_S1-->L562_accept_S1-D49: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 5863#L562_accept_S1-D49 [2198] L562_accept_S1-D49-->MyEgressENTRY_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5869#MyEgressENTRY_accept_S1 [1505] MyEgressENTRY_accept_S1-->L249_accept_S1: Formula: (or (not v_hdr.tcp.valid_34) (not (= 0 v_standard_metadata.egress_port_36)))  InVars {standard_metadata.egress_port=v_standard_metadata.egress_port_36, hdr.tcp.valid=v_hdr.tcp.valid_34}  OutVars{standard_metadata.egress_port=v_standard_metadata.egress_port_36, hdr.tcp.valid=v_hdr.tcp.valid_34}  AuxVars[]  AssignedVars[] 5866#L249_accept_S1 [1553] L249_accept_S1-->MyEgressEXIT_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5862#MyEgressEXIT_accept_S1 >[2276] MyEgressEXIT_accept_S1-->L563-D89: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5859#L563-D89 [1774] L563-D89-->L563_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5854#L563_accept_S1 [2161] L563_accept_S1-->L563_accept_S1-D31: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 5855#L563_accept_S1-D31 [1990] L563_accept_S1-D31-->MyComputeChecksumFINAL_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5858#MyComputeChecksumFINAL_accept_S1 [1810] MyComputeChecksumFINAL_accept_S1-->MyComputeChecksumEXIT_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5853#MyComputeChecksumEXIT_accept_S1 >[2305] MyComputeChecksumEXIT_accept_S1-->L564-D109: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5849#L564-D109 [1915] L564-D109-->L564_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5846#L564_accept_S1 [1985] L564_accept_S1-->L565-1_accept_S1: Formula: v_forward_32  InVars {forward=v_forward_32}  OutVars{forward=v_forward_32}  AuxVars[]  AssignedVars[] 5843#L565-1_accept_S1 [2058] L565-1_accept_S1-->L569_accept_S1: Formula: (let ((.cse0 (= v__old_hdr.ethernet.srcAddr_15 0))) (or (and .cse0 (not v__p4ltl_0_7)) (and v__p4ltl_0_7 (not .cse0))))  InVars {_old_hdr.ethernet.srcAddr=v__old_hdr.ethernet.srcAddr_15}  OutVars{_p4ltl_0=v__p4ltl_0_7, _old_hdr.ethernet.srcAddr=v__old_hdr.ethernet.srcAddr_15}  AuxVars[]  AssignedVars[_p4ltl_0] 5841#L569_accept_S1 [1627] L569_accept_S1-->L570_accept_S1: Formula: (let ((.cse0 (= 2071690107 v__old_hdr.ipv4.dstAddr_15))) (or (and v__p4ltl_1_7 (not .cse0)) (and .cse0 (not v__p4ltl_1_7))))  InVars {_old_hdr.ipv4.dstAddr=v__old_hdr.ipv4.dstAddr_15}  OutVars{_old_hdr.ipv4.dstAddr=v__old_hdr.ipv4.dstAddr_15, _p4ltl_1=v__p4ltl_1_7}  AuxVars[]  AssignedVars[_p4ltl_1] 5839#L570_accept_S1 [2010] L570_accept_S1-->L571_accept_S1: Formula: (let ((.cse0 (= 281474976710655 v__old_hdr.ethernet.dstAddr_14))) (or (and v__p4ltl_2_6 (not .cse0)) (and .cse0 (not v__p4ltl_2_6))))  InVars {_old_hdr.ethernet.dstAddr=v__old_hdr.ethernet.dstAddr_14}  OutVars{_p4ltl_2=v__p4ltl_2_6, _old_hdr.ethernet.dstAddr=v__old_hdr.ethernet.dstAddr_14}  AuxVars[]  AssignedVars[_p4ltl_2] 5837#L571_accept_S1 [2046] L571_accept_S1-->mainFINAL_accept_S1: Formula: (let ((.cse0 (= v_standard_metadata.ingress_port_20 0))) (or (and (not v__p4ltl_3_7) (not .cse0)) (and v__p4ltl_3_7 .cse0)))  InVars {standard_metadata.ingress_port=v_standard_metadata.ingress_port_20}  OutVars{standard_metadata.ingress_port=v_standard_metadata.ingress_port_20, _p4ltl_3=v__p4ltl_3_7}  AuxVars[]  AssignedVars[_p4ltl_3] 5835#mainFINAL_accept_S1 [1800] mainFINAL_accept_S1-->mainEXIT_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5833#mainEXIT_accept_S1 >[2336] mainEXIT_accept_S1-->L577-1-D71: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 5831#L577-1-D71 [1433] L577-1-D71-->L577-1_accept_S1: Formula: (and v__p4ltl_3_11 v__p4ltl_2_11 v__p4ltl_1_11 v__p4ltl_0_11 (or (not v__p4ltl_2_11) (not v__p4ltl_0_11) (not v__p4ltl_3_11) (not v__p4ltl_1_11) (= 1 v_standard_metadata.egress_port_32)))  InVars {_p4ltl_2=v__p4ltl_2_11, standard_metadata.egress_port=v_standard_metadata.egress_port_32, _p4ltl_3=v__p4ltl_3_11, _p4ltl_0=v__p4ltl_0_11, _p4ltl_1=v__p4ltl_1_11}  OutVars{_p4ltl_2=v__p4ltl_2_11, standard_metadata.egress_port=v_standard_metadata.egress_port_32, _p4ltl_3=v__p4ltl_3_11, _p4ltl_0=v__p4ltl_0_11, _p4ltl_1=v__p4ltl_1_11}  AuxVars[]  AssignedVars[] 4983#L577-1_accept_S1 
[2023-01-16 05:55:38,306 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2023-01-16 05:55:38,306 INFO  L85        PathProgramCache]: Analyzing trace with hash 227576805, now seen corresponding path program 1 times
[2023-01-16 05:55:38,307 INFO  L118   FreeRefinementEngine]: Executing refinement strategy CAMEL
[2023-01-16 05:55:38,307 INFO  L333   FreeRefinementEngine]: Using trace check IpTcStrategyModuleSmtInterpolCraig [690909031]
[2023-01-16 05:55:38,307 INFO  L95    rtionOrderModulation]: Keeping assertion order NOT_INCREMENTALLY
[2023-01-16 05:55:38,307 INFO  L127          SolverBuilder]: Constructing new instance of SMTInterpol with explicit timeout -1 ms and remaining time -1 ms
[2023-01-16 05:55:38,328 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-01-16 05:55:38,460 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 2
[2023-01-16 05:55:38,476 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-01-16 05:55:38,557 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 1
[2023-01-16 05:55:38,565 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-01-16 05:55:38,586 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 141
[2023-01-16 05:55:38,610 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-01-16 05:55:38,619 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 1
[2023-01-16 05:55:38,620 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-01-16 05:55:38,621 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 154
[2023-01-16 05:55:38,622 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-01-16 05:55:38,653 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 159
[2023-01-16 05:55:38,657 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-01-16 05:55:38,691 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 170
[2023-01-16 05:55:38,694 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-01-16 05:55:38,696 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 176
[2023-01-16 05:55:38,697 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-01-16 05:55:38,699 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2023-01-16 05:55:38,699 INFO  L136   FreeRefinementEngine]: Strategy CAMEL found an infeasible trace
[2023-01-16 05:55:38,700 INFO  L333   FreeRefinementEngine]: Using interpolant generator IpTcStrategyModuleSmtInterpolCraig [690909031]
[2023-01-16 05:55:38,700 INFO  L157   FreeRefinementEngine]: IpTcStrategyModuleSmtInterpolCraig [690909031] provided 1 perfect and 0 imperfect interpolant sequences
[2023-01-16 05:55:38,700 INFO  L184   FreeRefinementEngine]: Found 1 perfect and 0 imperfect interpolant sequences.
[2023-01-16 05:55:38,700 INFO  L197   FreeRefinementEngine]: Number of different interpolants: perfect sequences [11] imperfect sequences [] total 11
[2023-01-16 05:55:38,700 INFO  L121   tionRefinementEngine]: Using interpolant automaton builder IpAbStrategyModuleStraightlineAll [1984267642]
[2023-01-16 05:55:38,700 INFO  L85    oduleStraightlineAll]: Using 1 perfect interpolants to construct interpolant automaton
[2023-01-16 05:55:38,700 INFO  L757   eck$LassoCheckResult]: stem already infeasible
[2023-01-16 05:55:38,701 INFO  L100   FreeRefinementEngine]: Using predicate unifier PredicateUnifier provided by strategy CAMEL
[2023-01-16 05:55:38,701 INFO  L143   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2023-01-16 05:55:38,701 INFO  L145   InterpolantAutomaton]: CoverageRelationStatistics Valid=29, Invalid=103, Unknown=0, NotChecked=0, Total=132
[2023-01-16 05:55:38,702 INFO  L87              Difference]: Start difference. First operand 1079 states and 1135 transitions. cyclomatic complexity: 57 Second operand  has 12 states, 11 states have (on average 15.909090909090908) internal successors, (175), 6 states have internal predecessors, (175), 3 states have call successors, (9), 7 states have call predecessors, (9), 4 states have return successors, (8), 4 states have call predecessors, (8), 3 states have call successors, (8)
[2023-01-16 05:55:43,934 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2023-01-16 05:55:43,934 INFO  L93              Difference]: Finished difference Result 1925 states and 2026 transitions.
[2023-01-16 05:55:43,935 INFO  L141   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 38 states. 
[2023-01-16 05:55:43,935 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1925 states and 2026 transitions.
[2023-01-16 05:55:43,941 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 14
[2023-01-16 05:55:43,949 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1925 states to 1925 states and 2026 transitions.
[2023-01-16 05:55:43,949 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2
[2023-01-16 05:55:43,949 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2
[2023-01-16 05:55:43,949 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1925 states and 2026 transitions.
[2023-01-16 05:55:43,952 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2023-01-16 05:55:43,952 INFO  L369   hiAutomatonCegarLoop]: Abstraction has 1925 states and 2026 transitions.
[2023-01-16 05:55:43,953 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1925 states and 2026 transitions.
[2023-01-16 05:55:43,970 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1925 to 1153.
[2023-01-16 05:55:43,971 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand  has 1153 states, 990 states have (on average 1.0484848484848486) internal successors, (1038), 992 states have internal predecessors, (1038), 81 states have call successors, (81), 81 states have call predecessors, (81), 82 states have return successors, (92), 80 states have call predecessors, (92), 80 states have call successors, (92)
[2023-01-16 05:55:43,973 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1153 states to 1153 states and 1211 transitions.
[2023-01-16 05:55:43,973 INFO  L392   hiAutomatonCegarLoop]: Abstraction has 1153 states and 1211 transitions.
[2023-01-16 05:55:43,973 INFO  L399   stractBuchiCegarLoop]: Abstraction has 1153 states and 1211 transitions.
[2023-01-16 05:55:43,974 INFO  L287   stractBuchiCegarLoop]: ======== Iteration 4 ============
[2023-01-16 05:55:43,974 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1153 states and 1211 transitions.
[2023-01-16 05:55:43,976 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2023-01-16 05:55:43,976 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2023-01-16 05:55:43,976 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2023-01-16 05:55:43,979 INFO  L179   hiAutomatonCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2023-01-16 05:55:43,979 INFO  L180   hiAutomatonCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2023-01-16 05:55:43,981 INFO  L752   eck$LassoCheckResult]: Stem: 8325#ULTIMATE.startENTRY_NONWA [1500] ULTIMATE.startENTRY_NONWA-->L577-1_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 8326#L577-1_T0_init [1466] L577-1_T0_init-->L577_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8316#L577_T0_init [2074] L577_T0_init-->L577_T0_init-D54: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 9066#L577_T0_init-D54 [1959] L577_T0_init-D54-->mainENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8328#mainENTRY_T0_init [1819] mainENTRY_T0_init-->mainENTRY_T0_init-D40: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 8729#mainENTRY_T0_init-D40 [1649] mainENTRY_T0_init-D40-->havocProcedureENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8715#havocProcedureENTRY_T0_init [1641] havocProcedureENTRY_T0_init-->L421_T0_init: Formula: (not v_drop_12)  InVars {}  OutVars{drop=v_drop_12}  AuxVars[]  AssignedVars[drop] 8716#L421_T0_init [2158] L421_T0_init-->L422_T0_init: Formula: (not v_forward_17)  InVars {}  OutVars{forward=v_forward_17}  AuxVars[]  AssignedVars[forward] 9142#L422_T0_init [2104] L422_T0_init-->L423_T0_init: Formula: (= v_standard_metadata.ingress_port_14 0)  InVars {}  OutVars{standard_metadata.ingress_port=v_standard_metadata.ingress_port_14}  AuxVars[]  AssignedVars[standard_metadata.ingress_port] 9021#L423_T0_init [1901] L423_T0_init-->L424_T0_init: Formula: (= v_standard_metadata.egress_spec_15 0)  InVars {}  OutVars{standard_metadata.egress_spec=v_standard_metadata.egress_spec_15}  AuxVars[]  AssignedVars[standard_metadata.egress_spec] 9022#L424_T0_init [1962] L424_T0_init-->L425_T0_init: Formula: (= 0 v_standard_metadata.egress_port_18)  InVars {}  OutVars{standard_metadata.egress_port=v_standard_metadata.egress_port_18}  AuxVars[]  AssignedVars[standard_metadata.egress_port] 9059#L425_T0_init [1951] L425_T0_init-->L426_T0_init: Formula: (= v_standard_metadata.instance_type_9 0)  InVars {}  OutVars{standard_metadata.instance_type=v_standard_metadata.instance_type_9}  AuxVars[]  AssignedVars[standard_metadata.instance_type] 8819#L426_T0_init [1709] L426_T0_init-->L427_T0_init: Formula: (= v_standard_metadata.packet_length_8 0)  InVars {}  OutVars{standard_metadata.packet_length=v_standard_metadata.packet_length_8}  AuxVars[]  AssignedVars[standard_metadata.packet_length] 8370#L427_T0_init [1453] L427_T0_init-->L428_T0_init: Formula: (= v_standard_metadata.enq_timestamp_9 0)  InVars {}  OutVars{standard_metadata.enq_timestamp=v_standard_metadata.enq_timestamp_9}  AuxVars[]  AssignedVars[standard_metadata.enq_timestamp] 8371#L428_T0_init [1578] L428_T0_init-->L429_T0_init: Formula: (= v_standard_metadata.enq_qdepth_9 0)  InVars {}  OutVars{standard_metadata.enq_qdepth=v_standard_metadata.enq_qdepth_9}  AuxVars[]  AssignedVars[standard_metadata.enq_qdepth] 8613#L429_T0_init [1855] L429_T0_init-->L430_T0_init: Formula: (= v_standard_metadata.deq_timedelta_9 0)  InVars {}  OutVars{standard_metadata.deq_timedelta=v_standard_metadata.deq_timedelta_9}  AuxVars[]  AssignedVars[standard_metadata.deq_timedelta] 8511#L430_T0_init [1521] L430_T0_init-->L431_T0_init: Formula: (= v_standard_metadata.deq_qdepth_8 0)  InVars {}  OutVars{standard_metadata.deq_qdepth=v_standard_metadata.deq_qdepth_8}  AuxVars[]  AssignedVars[standard_metadata.deq_qdepth] 8512#L431_T0_init [1609] L431_T0_init-->L432_T0_init: Formula: (= v_standard_metadata.ingress_global_timestamp_8 0)  InVars {}  OutVars{standard_metadata.ingress_global_timestamp=v_standard_metadata.ingress_global_timestamp_8}  AuxVars[]  AssignedVars[standard_metadata.ingress_global_timestamp] 8662#L432_T0_init [2111] L432_T0_init-->L433_T0_init: Formula: (= v_standard_metadata.egress_global_timestamp_9 0)  InVars {}  OutVars{standard_metadata.egress_global_timestamp=v_standard_metadata.egress_global_timestamp_9}  AuxVars[]  AssignedVars[standard_metadata.egress_global_timestamp] 8903#L433_T0_init [1775] L433_T0_init-->L434_T0_init: Formula: (= 0 v_standard_metadata.mcast_grp_9)  InVars {}  OutVars{standard_metadata.mcast_grp=v_standard_metadata.mcast_grp_9}  AuxVars[]  AssignedVars[standard_metadata.mcast_grp] 8904#L434_T0_init [2007] L434_T0_init-->L435_T0_init: Formula: (= v_standard_metadata.egress_rid_9 0)  InVars {}  OutVars{standard_metadata.egress_rid=v_standard_metadata.egress_rid_9}  AuxVars[]  AssignedVars[standard_metadata.egress_rid] 8484#L435_T0_init [1510] L435_T0_init-->L436_T0_init: Formula: (= v_standard_metadata.checksum_error_8 0)  InVars {}  OutVars{standard_metadata.checksum_error=v_standard_metadata.checksum_error_8}  AuxVars[]  AssignedVars[standard_metadata.checksum_error] 8485#L436_T0_init [2011] L436_T0_init-->L437_T0_init: Formula: (= v_standard_metadata.priority_9 0)  InVars {}  OutVars{standard_metadata.priority=v_standard_metadata.priority_9}  AuxVars[]  AssignedVars[standard_metadata.priority] 8691#L437_T0_init [1628] L437_T0_init-->L438_T0_init: Formula: (not v_hdr.ethernet.valid_14)  InVars {}  OutVars{hdr.ethernet.valid=v_hdr.ethernet.valid_14}  AuxVars[]  AssignedVars[hdr.ethernet.valid] 8635#L438_T0_init [1593] L438_T0_init-->L439_T0_init: Formula: (= v_emit_41 (store v_emit_42 v_hdr.ethernet_3 false))  InVars {emit=v_emit_42, hdr.ethernet=v_hdr.ethernet_3}  OutVars{emit=v_emit_41, hdr.ethernet=v_hdr.ethernet_3}  AuxVars[]  AssignedVars[emit] 8636#L439_T0_init [2186] L439_T0_init-->L440_T0_init: Formula: true  InVars {}  OutVars{hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_28}  AuxVars[]  AssignedVars[hdr.ethernet.dstAddr] 8401#L440_T0_init [1464] L440_T0_init-->L441_T0_init: Formula: (= v_hdr.ethernet.dstAddr_29 v__old_hdr.ethernet.dstAddr_12)  InVars {hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_29}  OutVars{_old_hdr.ethernet.dstAddr=v__old_hdr.ethernet.dstAddr_12, hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_29}  AuxVars[]  AssignedVars[_old_hdr.ethernet.dstAddr] 8402#L441_T0_init [1474] L441_T0_init-->L442_T0_init: Formula: (= v_hdr.ethernet.dstAddr_26 v__old_hdr.ethernet.dstAddr_10)  InVars {hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_26}  OutVars{_old_hdr.ethernet.dstAddr=v__old_hdr.ethernet.dstAddr_10, hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_26}  AuxVars[]  AssignedVars[_old_hdr.ethernet.dstAddr] 8418#L442_T0_init [1747] L442_T0_init-->L443_T0_init: Formula: true  InVars {}  OutVars{hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_26}  AuxVars[]  AssignedVars[hdr.ethernet.srcAddr] 8870#L443_T0_init [1848] L443_T0_init-->L444_T0_init: Formula: (= v_hdr.ethernet.srcAddr_23 v__old_hdr.ethernet.srcAddr_10)  InVars {hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_23}  OutVars{hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_23, _old_hdr.ethernet.srcAddr=v__old_hdr.ethernet.srcAddr_10}  AuxVars[]  AssignedVars[_old_hdr.ethernet.srcAddr] 8788#L444_T0_init [1686] L444_T0_init-->L445_T0_init: Formula: (= v_hdr.ethernet.srcAddr_25 v__old_hdr.ethernet.srcAddr_12)  InVars {hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_25}  OutVars{hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_25, _old_hdr.ethernet.srcAddr=v__old_hdr.ethernet.srcAddr_12}  AuxVars[]  AssignedVars[_old_hdr.ethernet.srcAddr] 8789#L445_T0_init [2211] L445_T0_init-->L446_T0_init: Formula: true  InVars {}  OutVars{hdr.ethernet.etherType=v_hdr.ethernet.etherType_24}  AuxVars[]  AssignedVars[hdr.ethernet.etherType] 9126#L446_T0_init [2078] L446_T0_init-->L447_T0_init: Formula: (and (<= 0 v_hdr.ethernet.etherType_22) (<= v_hdr.ethernet.etherType_22 65536))  InVars {hdr.ethernet.etherType=v_hdr.ethernet.etherType_22}  OutVars{hdr.ethernet.etherType=v_hdr.ethernet.etherType_22}  AuxVars[]  AssignedVars[] 8855#L447_T0_init [1735] L447_T0_init-->L448_T0_init: Formula: (not v_hdr.ipv6.valid_18)  InVars {}  OutVars{hdr.ipv6.valid=v_hdr.ipv6.valid_18}  AuxVars[]  AssignedVars[hdr.ipv6.valid] 8856#L448_T0_init [1792] L448_T0_init-->L449_T0_init: Formula: (= v_emit_27 (store v_emit_28 v_hdr.ipv6_10 false))  InVars {emit=v_emit_28, hdr.ipv6=v_hdr.ipv6_10}  OutVars{emit=v_emit_27, hdr.ipv6=v_hdr.ipv6_10}  AuxVars[]  AssignedVars[emit] 8922#L449_T0_init [2175] L449_T0_init-->L450_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv6.version=v_hdr.ipv6.version_19}  AuxVars[]  AssignedVars[hdr.ipv6.version] 8771#L450_T0_init [1676] L450_T0_init-->L451_T0_init: Formula: (and (<= v_hdr.ipv6.version_20 16) (<= 0 v_hdr.ipv6.version_20))  InVars {hdr.ipv6.version=v_hdr.ipv6.version_20}  OutVars{hdr.ipv6.version=v_hdr.ipv6.version_20}  AuxVars[]  AssignedVars[] 8772#L451_T0_init [2109] L451_T0_init-->L452_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv6.trafclass=v_hdr.ipv6.trafclass_9}  AuxVars[]  AssignedVars[hdr.ipv6.trafclass] 9030#L452_T0_init [1912] L452_T0_init-->L453_T0_init: Formula: (and (<= v_hdr.ipv6.trafclass_12 256) (<= 0 v_hdr.ipv6.trafclass_12))  InVars {hdr.ipv6.trafclass=v_hdr.ipv6.trafclass_12}  OutVars{hdr.ipv6.trafclass=v_hdr.ipv6.trafclass_12}  AuxVars[]  AssignedVars[] 9027#L453_T0_init [1908] L453_T0_init-->L454_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv6.flowlabel=v_hdr.ipv6.flowlabel_11}  AuxVars[]  AssignedVars[hdr.ipv6.flowlabel] 8853#L454_T0_init [1734] L454_T0_init-->L455_T0_init: Formula: (and (<= 0 v_hdr.ipv6.flowlabel_12) (<= v_hdr.ipv6.flowlabel_12 1048576))  InVars {hdr.ipv6.flowlabel=v_hdr.ipv6.flowlabel_12}  OutVars{hdr.ipv6.flowlabel=v_hdr.ipv6.flowlabel_12}  AuxVars[]  AssignedVars[] 8854#L455_T0_init [1825] L455_T0_init-->L456_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv6.payloadlen=v_hdr.ipv6.payloadlen_20}  AuxVars[]  AssignedVars[hdr.ipv6.payloadlen] 8952#L456_T0_init [2079] L456_T0_init-->L457_T0_init: Formula: (and (<= v_hdr.ipv6.payloadlen_17 65536) (<= 0 v_hdr.ipv6.payloadlen_17))  InVars {hdr.ipv6.payloadlen=v_hdr.ipv6.payloadlen_17}  OutVars{hdr.ipv6.payloadlen=v_hdr.ipv6.payloadlen_17}  AuxVars[]  AssignedVars[] 8977#L457_T0_init [1849] L457_T0_init-->L458_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv6.nextheader=v_hdr.ipv6.nextheader_22}  AuxVars[]  AssignedVars[hdr.ipv6.nextheader] 8889#L458_T0_init [1763] L458_T0_init-->L459_T0_init: Formula: (and (<= v_hdr.ipv6.nextheader_20 256) (<= 0 v_hdr.ipv6.nextheader_20))  InVars {hdr.ipv6.nextheader=v_hdr.ipv6.nextheader_20}  OutVars{hdr.ipv6.nextheader=v_hdr.ipv6.nextheader_20}  AuxVars[]  AssignedVars[] 8890#L459_T0_init [1982] L459_T0_init-->L460_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv6.hoplimit=v_hdr.ipv6.hoplimit_17}  AuxVars[]  AssignedVars[hdr.ipv6.hoplimit] 8588#L460_T0_init [1564] L460_T0_init-->L461_T0_init: Formula: (and (<= v_hdr.ipv6.hoplimit_20 256) (<= 0 v_hdr.ipv6.hoplimit_20))  InVars {hdr.ipv6.hoplimit=v_hdr.ipv6.hoplimit_20}  OutVars{hdr.ipv6.hoplimit=v_hdr.ipv6.hoplimit_20}  AuxVars[]  AssignedVars[] 8499#L461_T0_init [1517] L461_T0_init-->L462_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv6.srcAddr=v_hdr.ipv6.srcAddr_17}  AuxVars[]  AssignedVars[hdr.ipv6.srcAddr] 8500#L462_T0_init [1621] L462_T0_init-->L463_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv6.dstAddr=v_hdr.ipv6.dstAddr_16}  AuxVars[]  AssignedVars[hdr.ipv6.dstAddr] 8391#L463_T0_init [1462] L463_T0_init-->L464_T0_init: Formula: (not v_hdr.ipv4_tunnel.valid_20)  InVars {}  OutVars{hdr.ipv4_tunnel.valid=v_hdr.ipv4_tunnel.valid_20}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.valid] 8392#L464_T0_init [1506] L464_T0_init-->L465_T0_init: Formula: (= v_emit_29 (store v_emit_30 v_hdr.ipv4_tunnel_8 false))  InVars {emit=v_emit_30, hdr.ipv4_tunnel=v_hdr.ipv4_tunnel_8}  OutVars{emit=v_emit_29, hdr.ipv4_tunnel=v_hdr.ipv4_tunnel_8}  AuxVars[]  AssignedVars[emit] 8477#L465_T0_init [1653] L465_T0_init-->L466_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.version=v_hdr.ipv4_tunnel.version_16}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.version] 8733#L466_T0_init [1724] L466_T0_init-->L467_T0_init: Formula: (and (<= v_hdr.ipv4_tunnel.version_17 16) (<= 0 v_hdr.ipv4_tunnel.version_17))  InVars {hdr.ipv4_tunnel.version=v_hdr.ipv4_tunnel.version_17}  OutVars{hdr.ipv4_tunnel.version=v_hdr.ipv4_tunnel.version_17}  AuxVars[]  AssignedVars[] 8815#L467_T0_init [1706] L467_T0_init-->L468_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.ihl=v_hdr.ipv4_tunnel.ihl_14}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.ihl] 8816#L468_T0_init [1799] L468_T0_init-->L469_T0_init: Formula: (and (<= 0 v_hdr.ipv4_tunnel.ihl_16) (<= v_hdr.ipv4_tunnel.ihl_16 16))  InVars {hdr.ipv4_tunnel.ihl=v_hdr.ipv4_tunnel.ihl_16}  OutVars{hdr.ipv4_tunnel.ihl=v_hdr.ipv4_tunnel.ihl_16}  AuxVars[]  AssignedVars[] 8928#L469_T0_init [1860] L469_T0_init-->L470_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.diffserv=v_hdr.ipv4_tunnel.diffserv_15}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.diffserv] 8982#L470_T0_init [2116] L470_T0_init-->L471_T0_init: Formula: (and (<= v_hdr.ipv4_tunnel.diffserv_14 256) (<= 0 v_hdr.ipv4_tunnel.diffserv_14))  InVars {hdr.ipv4_tunnel.diffserv=v_hdr.ipv4_tunnel.diffserv_14}  OutVars{hdr.ipv4_tunnel.diffserv=v_hdr.ipv4_tunnel.diffserv_14}  AuxVars[]  AssignedVars[] 8332#L471_T0_init [1436] L471_T0_init-->L472_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.totalLen=v_hdr.ipv4_tunnel.totalLen_14}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.totalLen] 8333#L472_T0_init [1696] L472_T0_init-->L473_T0_init: Formula: (and (<= v_hdr.ipv4_tunnel.totalLen_15 65536) (<= 0 v_hdr.ipv4_tunnel.totalLen_15))  InVars {hdr.ipv4_tunnel.totalLen=v_hdr.ipv4_tunnel.totalLen_15}  OutVars{hdr.ipv4_tunnel.totalLen=v_hdr.ipv4_tunnel.totalLen_15}  AuxVars[]  AssignedVars[] 8561#L473_T0_init [1549] L473_T0_init-->L474_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.identification=v_hdr.ipv4_tunnel.identification_17}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.identification] 8540#L474_T0_init [1537] L474_T0_init-->L475_T0_init: Formula: (and (<= v_hdr.ipv4_tunnel.identification_16 65536) (<= 0 v_hdr.ipv4_tunnel.identification_16))  InVars {hdr.ipv4_tunnel.identification=v_hdr.ipv4_tunnel.identification_16}  OutVars{hdr.ipv4_tunnel.identification=v_hdr.ipv4_tunnel.identification_16}  AuxVars[]  AssignedVars[] 8541#L475_T0_init [1776] L475_T0_init-->L476_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.flags=v_hdr.ipv4_tunnel.flags_17}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.flags] 8905#L476_T0_init [1837] L476_T0_init-->L477_T0_init: Formula: (and (<= v_hdr.ipv4_tunnel.flags_14 8) (<= 0 v_hdr.ipv4_tunnel.flags_14))  InVars {hdr.ipv4_tunnel.flags=v_hdr.ipv4_tunnel.flags_14}  OutVars{hdr.ipv4_tunnel.flags=v_hdr.ipv4_tunnel.flags_14}  AuxVars[]  AssignedVars[] 8330#L477_T0_init [1435] L477_T0_init-->L478_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.fragOffset=v_hdr.ipv4_tunnel.fragOffset_17}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.fragOffset] 8331#L478_T0_init [1711] L478_T0_init-->L479_T0_init: Formula: (and (<= 0 v_hdr.ipv4_tunnel.fragOffset_15) (<= v_hdr.ipv4_tunnel.fragOffset_15 8192))  InVars {hdr.ipv4_tunnel.fragOffset=v_hdr.ipv4_tunnel.fragOffset_15}  OutVars{hdr.ipv4_tunnel.fragOffset=v_hdr.ipv4_tunnel.fragOffset_15}  AuxVars[]  AssignedVars[] 8701#L479_T0_init [1633] L479_T0_init-->L480_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.ttl=v_hdr.ipv4_tunnel.ttl_15}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.ttl] 8591#L480_T0_init [1566] L480_T0_init-->L481_T0_init: Formula: (and (<= 0 v_hdr.ipv4_tunnel.ttl_14) (<= v_hdr.ipv4_tunnel.ttl_14 256))  InVars {hdr.ipv4_tunnel.ttl=v_hdr.ipv4_tunnel.ttl_14}  OutVars{hdr.ipv4_tunnel.ttl=v_hdr.ipv4_tunnel.ttl_14}  AuxVars[]  AssignedVars[] 8592#L481_T0_init [2223] L481_T0_init-->L482_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.protocol=v_hdr.ipv4_tunnel.protocol_19}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.protocol] 8786#L482_T0_init [1685] L482_T0_init-->L483_T0_init: Formula: (and (<= 0 v_hdr.ipv4_tunnel.protocol_17) (<= v_hdr.ipv4_tunnel.protocol_17 256))  InVars {hdr.ipv4_tunnel.protocol=v_hdr.ipv4_tunnel.protocol_17}  OutVars{hdr.ipv4_tunnel.protocol=v_hdr.ipv4_tunnel.protocol_17}  AuxVars[]  AssignedVars[] 8787#L483_T0_init [1783] L483_T0_init-->L484_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.hdrChecksum=v_hdr.ipv4_tunnel.hdrChecksum_11}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.hdrChecksum] 8912#L484_T0_init [1857] L484_T0_init-->L485_T0_init: Formula: (and (<= v_hdr.ipv4_tunnel.hdrChecksum_10 65536) (<= 0 v_hdr.ipv4_tunnel.hdrChecksum_10))  InVars {hdr.ipv4_tunnel.hdrChecksum=v_hdr.ipv4_tunnel.hdrChecksum_10}  OutVars{hdr.ipv4_tunnel.hdrChecksum=v_hdr.ipv4_tunnel.hdrChecksum_10}  AuxVars[]  AssignedVars[] 8670#L485_T0_init [1614] L485_T0_init-->L486_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.srcAddr=v_hdr.ipv4_tunnel.srcAddr_14}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.srcAddr] 8671#L486_T0_init [1851] L486_T0_init-->L487_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.dstAddr=v_hdr.ipv4_tunnel.dstAddr_14}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.dstAddr] 8979#L487_T0_init [2051] L487_T0_init-->L488_T0_init: Formula: (not v_hdr.ipv4.valid_26)  InVars {}  OutVars{hdr.ipv4.valid=v_hdr.ipv4.valid_26}  AuxVars[]  AssignedVars[hdr.ipv4.valid] 9116#L488_T0_init [2112] L488_T0_init-->L489_T0_init: Formula: (= (store v_emit_26 v_hdr.ipv4_2 false) v_emit_25)  InVars {hdr.ipv4=v_hdr.ipv4_2, emit=v_emit_26}  OutVars{hdr.ipv4=v_hdr.ipv4_2, emit=v_emit_25}  AuxVars[]  AssignedVars[emit] 9112#L489_T0_init [2038] L489_T0_init-->L490_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.version=v_hdr.ipv4.version_12}  AuxVars[]  AssignedVars[hdr.ipv4.version] 8403#L490_T0_init [1465] L490_T0_init-->L491_T0_init: Formula: (and (<= 0 v_hdr.ipv4.version_10) (<= v_hdr.ipv4.version_10 16))  InVars {hdr.ipv4.version=v_hdr.ipv4.version_10}  OutVars{hdr.ipv4.version=v_hdr.ipv4.version_10}  AuxVars[]  AssignedVars[] 8404#L491_T0_init [2181] L491_T0_init-->L492_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.ihl=v_hdr.ipv4.ihl_10}  AuxVars[]  AssignedVars[hdr.ipv4.ihl] 9176#L492_T0_init [2179] L492_T0_init-->L493_T0_init: Formula: (and (<= v_hdr.ipv4.ihl_11 16) (<= 0 v_hdr.ipv4.ihl_11))  InVars {hdr.ipv4.ihl=v_hdr.ipv4.ihl_11}  OutVars{hdr.ipv4.ihl=v_hdr.ipv4.ihl_11}  AuxVars[]  AssignedVars[] 9177#L493_T0_init [2233] L493_T0_init-->L494_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.diffserv=v_hdr.ipv4.diffserv_12}  AuxVars[]  AssignedVars[hdr.ipv4.diffserv] 9128#L494_T0_init [2082] L494_T0_init-->L495_T0_init: Formula: (and (<= v_hdr.ipv4.diffserv_11 256) (<= 0 v_hdr.ipv4.diffserv_11))  InVars {hdr.ipv4.diffserv=v_hdr.ipv4.diffserv_11}  OutVars{hdr.ipv4.diffserv=v_hdr.ipv4.diffserv_11}  AuxVars[]  AssignedVars[] 8412#L495_T0_init [1471] L495_T0_init-->L496_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.totalLen=v_hdr.ipv4.totalLen_13}  AuxVars[]  AssignedVars[hdr.ipv4.totalLen] 8413#L496_T0_init [1495] L496_T0_init-->L497_T0_init: Formula: (and (<= 0 v_hdr.ipv4.totalLen_15) (<= v_hdr.ipv4.totalLen_15 65536))  InVars {hdr.ipv4.totalLen=v_hdr.ipv4.totalLen_15}  OutVars{hdr.ipv4.totalLen=v_hdr.ipv4.totalLen_15}  AuxVars[]  AssignedVars[] 8455#L497_T0_init [1755] L497_T0_init-->L498_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.identification=v_hdr.ipv4.identification_11}  AuxVars[]  AssignedVars[hdr.ipv4.identification] 8881#L498_T0_init [2076] L498_T0_init-->L499_T0_init: Formula: (and (<= 0 v_hdr.ipv4.identification_13) (<= v_hdr.ipv4.identification_13 65536))  InVars {hdr.ipv4.identification=v_hdr.ipv4.identification_13}  OutVars{hdr.ipv4.identification=v_hdr.ipv4.identification_13}  AuxVars[]  AssignedVars[] 8760#L499_T0_init [1671] L499_T0_init-->L500_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.flags=v_hdr.ipv4.flags_11}  AuxVars[]  AssignedVars[hdr.ipv4.flags] 8761#L500_T0_init [1997] L500_T0_init-->L501_T0_init: Formula: (and (<= 0 v_hdr.ipv4.flags_10) (<= v_hdr.ipv4.flags_10 8))  InVars {hdr.ipv4.flags=v_hdr.ipv4.flags_10}  OutVars{hdr.ipv4.flags=v_hdr.ipv4.flags_10}  AuxVars[]  AssignedVars[] 9090#L501_T0_init [2095] L501_T0_init-->L502_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.fragOffset=v_hdr.ipv4.fragOffset_11}  AuxVars[]  AssignedVars[hdr.ipv4.fragOffset] 9104#L502_T0_init [2022] L502_T0_init-->L503_T0_init: Formula: (and (<= 0 v_hdr.ipv4.fragOffset_12) (<= v_hdr.ipv4.fragOffset_12 8192))  InVars {hdr.ipv4.fragOffset=v_hdr.ipv4.fragOffset_12}  OutVars{hdr.ipv4.fragOffset=v_hdr.ipv4.fragOffset_12}  AuxVars[]  AssignedVars[] 9071#L503_T0_init [1964] L503_T0_init-->L504_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.ttl=v_hdr.ipv4.ttl_12}  AuxVars[]  AssignedVars[hdr.ipv4.ttl] 8957#L504_T0_init [1828] L504_T0_init-->L505_T0_init: Formula: (and (<= v_hdr.ipv4.ttl_11 256) (<= 0 v_hdr.ipv4.ttl_11))  InVars {hdr.ipv4.ttl=v_hdr.ipv4.ttl_11}  OutVars{hdr.ipv4.ttl=v_hdr.ipv4.ttl_11}  AuxVars[]  AssignedVars[] 8396#L505_T0_init [1463] L505_T0_init-->L506_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.protocol=v_hdr.ipv4.protocol_13}  AuxVars[]  AssignedVars[hdr.ipv4.protocol] 8397#L506_T0_init [2080] L506_T0_init-->L507_T0_init: Formula: (and (<= 0 v_hdr.ipv4.protocol_12) (<= v_hdr.ipv4.protocol_12 256))  InVars {hdr.ipv4.protocol=v_hdr.ipv4.protocol_12}  OutVars{hdr.ipv4.protocol=v_hdr.ipv4.protocol_12}  AuxVars[]  AssignedVars[] 8983#L507_T0_init [1861] L507_T0_init-->L508_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.hdrChecksum=v_hdr.ipv4.hdrChecksum_11}  AuxVars[]  AssignedVars[hdr.ipv4.hdrChecksum] 8984#L508_T0_init [2008] L508_T0_init-->L509_T0_init: Formula: (and (<= 0 v_hdr.ipv4.hdrChecksum_9) (<= v_hdr.ipv4.hdrChecksum_9 65536))  InVars {hdr.ipv4.hdrChecksum=v_hdr.ipv4.hdrChecksum_9}  OutVars{hdr.ipv4.hdrChecksum=v_hdr.ipv4.hdrChecksum_9}  AuxVars[]  AssignedVars[] 9096#L509_T0_init [2205] L509_T0_init-->L510_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.srcAddr=v_hdr.ipv4.srcAddr_10}  AuxVars[]  AssignedVars[hdr.ipv4.srcAddr] 8480#L510_T0_init [1507] L510_T0_init-->L511_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_14}  AuxVars[]  AssignedVars[hdr.ipv4.dstAddr] 8481#L511_T0_init [1777] L511_T0_init-->L512_T0_init: Formula: (= v_hdr.ipv4.dstAddr_13 v__old_hdr.ipv4.dstAddr_11)  InVars {hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_13}  OutVars{_old_hdr.ipv4.dstAddr=v__old_hdr.ipv4.dstAddr_11, hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_13}  AuxVars[]  AssignedVars[_old_hdr.ipv4.dstAddr] 8616#L512_T0_init [1579] L512_T0_init-->L513_T0_init: Formula: (= v_hdr.ipv4.dstAddr_12 v__old_hdr.ipv4.dstAddr_10)  InVars {hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_12}  OutVars{_old_hdr.ipv4.dstAddr=v__old_hdr.ipv4.dstAddr_10, hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_12}  AuxVars[]  AssignedVars[_old_hdr.ipv4.dstAddr] 8617#L513_T0_init [1986] L513_T0_init-->L514_T0_init: Formula: (not v_hdr.tcp.valid_29)  InVars {}  OutVars{hdr.tcp.valid=v_hdr.tcp.valid_29}  AuxVars[]  AssignedVars[hdr.tcp.valid] 8781#L514_T0_init [1682] L514_T0_init-->L515_T0_init: Formula: (= v_emit_33 (store v_emit_34 v_hdr.tcp_2 false))  InVars {hdr.tcp=v_hdr.tcp_2, emit=v_emit_34}  OutVars{hdr.tcp=v_hdr.tcp_2, emit=v_emit_33}  AuxVars[]  AssignedVars[emit] 8782#L515_T0_init [1741] L515_T0_init-->L516_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.srcport=v_hdr.tcp.srcport_12}  AuxVars[]  AssignedVars[hdr.tcp.srcport] 8863#L516_T0_init [2063] L516_T0_init-->L517_T0_init: Formula: (and (<= v_hdr.tcp.srcport_9 65536) (<= 0 v_hdr.tcp.srcport_9))  InVars {hdr.tcp.srcport=v_hdr.tcp.srcport_9}  OutVars{hdr.tcp.srcport=v_hdr.tcp.srcport_9}  AuxVars[]  AssignedVars[] 8931#L517_T0_init [1801] L517_T0_init-->L518_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.dstport=v_hdr.tcp.dstport_9}  AuxVars[]  AssignedVars[hdr.tcp.dstport] 8932#L518_T0_init [1879] L518_T0_init-->L519_T0_init: Formula: (and (<= v_hdr.tcp.dstport_10 65536) (<= 0 v_hdr.tcp.dstport_10))  InVars {hdr.tcp.dstport=v_hdr.tcp.dstport_10}  OutVars{hdr.tcp.dstport=v_hdr.tcp.dstport_10}  AuxVars[]  AssignedVars[] 8783#L519_T0_init [1683] L519_T0_init-->L520_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.sequence=v_hdr.tcp.sequence_43}  AuxVars[]  AssignedVars[hdr.tcp.sequence] 8548#L520_T0_init [1541] L520_T0_init-->L521_T0_init: Formula: (and (<= v_hdr.tcp.sequence_44 4294967296) (<= 0 v_hdr.tcp.sequence_44))  InVars {hdr.tcp.sequence=v_hdr.tcp.sequence_44}  OutVars{hdr.tcp.sequence=v_hdr.tcp.sequence_44}  AuxVars[]  AssignedVars[] 8549#L521_T0_init [1694] L521_T0_init-->L522_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.ackseq=v_hdr.tcp.ackseq_43}  AuxVars[]  AssignedVars[hdr.tcp.ackseq] 8800#L522_T0_init [2020] L522_T0_init-->L523_T0_init: Formula: (and (<= v_hdr.tcp.ackseq_44 4294967296) (<= 0 v_hdr.tcp.ackseq_44))  InVars {hdr.tcp.ackseq=v_hdr.tcp.ackseq_44}  OutVars{hdr.tcp.ackseq=v_hdr.tcp.ackseq_44}  AuxVars[]  AssignedVars[] 8627#L523_T0_init [1588] L523_T0_init-->L524_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.headerlength=v_hdr.tcp.headerlength_11}  AuxVars[]  AssignedVars[hdr.tcp.headerlength] 8327#L524_T0_init [1434] L524_T0_init-->L525_T0_init: Formula: (and (<= v_hdr.tcp.headerlength_10 16) (<= 0 v_hdr.tcp.headerlength_10))  InVars {hdr.tcp.headerlength=v_hdr.tcp.headerlength_10}  OutVars{hdr.tcp.headerlength=v_hdr.tcp.headerlength_10}  AuxVars[]  AssignedVars[] 8329#L525_T0_init [1536] L525_T0_init-->L526_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.reservation=v_hdr.tcp.reservation_12}  AuxVars[]  AssignedVars[hdr.tcp.reservation] 8539#L526_T0_init [1832] L526_T0_init-->L527_T0_init: Formula: (and (<= v_hdr.tcp.reservation_9 64) (<= 0 v_hdr.tcp.reservation_9))  InVars {hdr.tcp.reservation=v_hdr.tcp.reservation_9}  OutVars{hdr.tcp.reservation=v_hdr.tcp.reservation_9}  AuxVars[]  AssignedVars[] 8806#L527_T0_init [1700] L527_T0_init-->L528_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.URG=v_hdr.tcp.URG_9}  AuxVars[]  AssignedVars[hdr.tcp.URG] 8807#L528_T0_init [1797] L528_T0_init-->L529_T0_init: Formula: (and (<= v_hdr.tcp.URG_12 2) (<= 0 v_hdr.tcp.URG_12))  InVars {hdr.tcp.URG=v_hdr.tcp.URG_12}  OutVars{hdr.tcp.URG=v_hdr.tcp.URG_12}  AuxVars[]  AssignedVars[] 8926#L529_T0_init [1892] L529_T0_init-->L530_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.ACK=v_hdr.tcp.ACK_11}  AuxVars[]  AssignedVars[hdr.tcp.ACK] 8622#L530_T0_init [1584] L530_T0_init-->L531_T0_init: Formula: (and (<= 0 v_hdr.tcp.ACK_9) (<= v_hdr.tcp.ACK_9 2))  InVars {hdr.tcp.ACK=v_hdr.tcp.ACK_9}  OutVars{hdr.tcp.ACK=v_hdr.tcp.ACK_9}  AuxVars[]  AssignedVars[] 8383#L531_T0_init [1458] L531_T0_init-->L532_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.PSH=v_hdr.tcp.PSH_11}  AuxVars[]  AssignedVars[hdr.tcp.PSH] 8384#L532_T0_init [2203] L532_T0_init-->L533_T0_init: Formula: (and (<= 0 v_hdr.tcp.PSH_9) (<= v_hdr.tcp.PSH_9 2))  InVars {hdr.tcp.PSH=v_hdr.tcp.PSH_9}  OutVars{hdr.tcp.PSH=v_hdr.tcp.PSH_9}  AuxVars[]  AssignedVars[] 9157#L533_T0_init [2141] L533_T0_init-->L534_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.RST=v_hdr.tcp.RST_9}  AuxVars[]  AssignedVars[hdr.tcp.RST] 8625#L534_T0_init [1587] L534_T0_init-->L535_T0_init: Formula: (and (<= 0 v_hdr.tcp.RST_11) (<= v_hdr.tcp.RST_11 2))  InVars {hdr.tcp.RST=v_hdr.tcp.RST_11}  OutVars{hdr.tcp.RST=v_hdr.tcp.RST_11}  AuxVars[]  AssignedVars[] 8626#L535_T0_init [2154] L535_T0_init-->L536_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.SYN=v_hdr.tcp.SYN_9}  AuxVars[]  AssignedVars[hdr.tcp.SYN] 8681#L536_T0_init [1620] L536_T0_init-->L537_T0_init: Formula: (and (<= 0 v_hdr.tcp.SYN_11) (<= v_hdr.tcp.SYN_11 2))  InVars {hdr.tcp.SYN=v_hdr.tcp.SYN_11}  OutVars{hdr.tcp.SYN=v_hdr.tcp.SYN_11}  AuxVars[]  AssignedVars[] 8682#L537_T0_init [1893] L537_T0_init-->L538_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.FIN=v_hdr.tcp.FIN_9}  AuxVars[]  AssignedVars[hdr.tcp.FIN] 9012#L538_T0_init [1895] L538_T0_init-->L539_T0_init: Formula: (and (<= 0 v_hdr.tcp.FIN_10) (<= v_hdr.tcp.FIN_10 2))  InVars {hdr.tcp.FIN=v_hdr.tcp.FIN_10}  OutVars{hdr.tcp.FIN=v_hdr.tcp.FIN_10}  AuxVars[]  AssignedVars[] 9014#L539_T0_init [2212] L539_T0_init-->L540_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.windowsize=v_hdr.tcp.windowsize_10}  AuxVars[]  AssignedVars[hdr.tcp.windowsize] 9050#L540_T0_init [1939] L540_T0_init-->L541_T0_init: Formula: (and (<= v_hdr.tcp.windowsize_12 65536) (<= 0 v_hdr.tcp.windowsize_12))  InVars {hdr.tcp.windowsize=v_hdr.tcp.windowsize_12}  OutVars{hdr.tcp.windowsize=v_hdr.tcp.windowsize_12}  AuxVars[]  AssignedVars[] 9051#L541_T0_init [2096] L541_T0_init-->L542_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.checksum=v_hdr.tcp.checksum_10}  AuxVars[]  AssignedVars[hdr.tcp.checksum] 9129#L542_T0_init [2083] L542_T0_init-->L543_T0_init: Formula: (and (<= 0 v_hdr.tcp.checksum_12) (<= v_hdr.tcp.checksum_12 65536))  InVars {hdr.tcp.checksum=v_hdr.tcp.checksum_12}  OutVars{hdr.tcp.checksum=v_hdr.tcp.checksum_12}  AuxVars[]  AssignedVars[] 9130#L543_T0_init [2088] L543_T0_init-->L544_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.pointer=v_hdr.tcp.pointer_11}  AuxVars[]  AssignedVars[hdr.tcp.pointer] 9131#L544_T0_init [2119] L544_T0_init-->L545_T0_init: Formula: (and (<= 0 v_hdr.tcp.pointer_10) (<= v_hdr.tcp.pointer_10 65536))  InVars {hdr.tcp.pointer=v_hdr.tcp.pointer_10}  OutVars{hdr.tcp.pointer=v_hdr.tcp.pointer_10}  AuxVars[]  AssignedVars[] 9047#L545_T0_init [1935] L545_T0_init-->L546_T0_init: Formula: (not v_hdr.udp_tunnel.valid_20)  InVars {}  OutVars{hdr.udp_tunnel.valid=v_hdr.udp_tunnel.valid_20}  AuxVars[]  AssignedVars[hdr.udp_tunnel.valid] 9048#L546_T0_init [2229] L546_T0_init-->L547_T0_init: Formula: (= v_emit_31 (store v_emit_32 v_hdr.udp_tunnel_9 false))  InVars {emit=v_emit_32, hdr.udp_tunnel=v_hdr.udp_tunnel_9}  OutVars{emit=v_emit_31, hdr.udp_tunnel=v_hdr.udp_tunnel_9}  AuxVars[]  AssignedVars[emit] 9058#L547_T0_init [1949] L547_T0_init-->L548_T0_init: Formula: true  InVars {}  OutVars{hdr.udp_tunnel.srcport=v_hdr.udp_tunnel.srcport_16}  AuxVars[]  AssignedVars[hdr.udp_tunnel.srcport] 8918#L548_T0_init [1790] L548_T0_init-->L549_T0_init: Formula: (and (<= 0 v_hdr.udp_tunnel.srcport_14) (<= v_hdr.udp_tunnel.srcport_14 65536))  InVars {hdr.udp_tunnel.srcport=v_hdr.udp_tunnel.srcport_14}  OutVars{hdr.udp_tunnel.srcport=v_hdr.udp_tunnel.srcport_14}  AuxVars[]  AssignedVars[] 8919#L549_T0_init [2166] L549_T0_init-->L550_T0_init: Formula: true  InVars {}  OutVars{hdr.udp_tunnel.dstport=v_hdr.udp_tunnel.dstport_14}  AuxVars[]  AssignedVars[hdr.udp_tunnel.dstport] 9166#L550_T0_init [2155] L550_T0_init-->L551_T0_init: Formula: (and (<= 0 v_hdr.udp_tunnel.dstport_15) (<= v_hdr.udp_tunnel.dstport_15 65536))  InVars {hdr.udp_tunnel.dstport=v_hdr.udp_tunnel.dstport_15}  OutVars{hdr.udp_tunnel.dstport=v_hdr.udp_tunnel.dstport_15}  AuxVars[]  AssignedVars[] 8933#L551_T0_init [1802] L551_T0_init-->L552_T0_init: Formula: true  InVars {}  OutVars{hdr.udp_tunnel.userlength=v_hdr.udp_tunnel.userlength_16}  AuxVars[]  AssignedVars[hdr.udp_tunnel.userlength] 8453#L552_T0_init [1494] L552_T0_init-->L553_T0_init: Formula: (and (<= 0 v_hdr.udp_tunnel.userlength_17) (<= v_hdr.udp_tunnel.userlength_17 65536))  InVars {hdr.udp_tunnel.userlength=v_hdr.udp_tunnel.userlength_17}  OutVars{hdr.udp_tunnel.userlength=v_hdr.udp_tunnel.userlength_17}  AuxVars[]  AssignedVars[] 8454#L553_T0_init [1607] L553_T0_init-->L554_T0_init: Formula: true  InVars {}  OutVars{hdr.udp_tunnel.checksum=v_hdr.udp_tunnel.checksum_15}  AuxVars[]  AssignedVars[hdr.udp_tunnel.checksum] 8428#L554_T0_init [1482] L554_T0_init-->havocProcedureFINAL_T0_init: Formula: (and (<= v_hdr.udp_tunnel.checksum_14 65536) (<= 0 v_hdr.udp_tunnel.checksum_14))  InVars {hdr.udp_tunnel.checksum=v_hdr.udp_tunnel.checksum_14}  OutVars{hdr.udp_tunnel.checksum=v_hdr.udp_tunnel.checksum_14}  AuxVars[]  AssignedVars[] 8429#havocProcedureFINAL_T0_init [2184] havocProcedureFINAL_T0_init-->havocProcedureEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8566#havocProcedureEXIT_T0_init >[2294] havocProcedureEXIT_T0_init-->L559-D56: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8567#L559-D56 [1645] L559-D56-->L559_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8586#L559_T0_init [1563] L559_T0_init-->L559_T0_init-D22: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 8587#L559_T0_init-D22 [1934] L559_T0_init-D22-->_parser_MyParserENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8389#_parser_MyParserENTRY_T0_init [1580] _parser_MyParserENTRY_T0_init-->_parser_MyParserENTRY_T0_init-D14: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 8388#_parser_MyParserENTRY_T0_init-D14 [1461] _parser_MyParserENTRY_T0_init-D14-->startENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8390#startENTRY_T0_init [1983] startENTRY_T0_init-->L727_T0_init: Formula: v_hdr.ethernet.valid_16  InVars {}  OutVars{hdr.ethernet.valid=v_hdr.ethernet.valid_16}  AuxVars[]  AssignedVars[hdr.ethernet.valid] 9067#L727_T0_init [1961] L727_T0_init-->L730_T0_init: Formula: (not (= v_hdr.ethernet.etherType_35 34525))  InVars {hdr.ethernet.etherType=v_hdr.ethernet.etherType_35}  OutVars{hdr.ethernet.etherType=v_hdr.ethernet.etherType_35}  AuxVars[]  AssignedVars[] 9068#L730_T0_init [2005] L730_T0_init-->L730-1_T0_init: Formula: (not (= v_hdr.ethernet.etherType_37 2048))  InVars {hdr.ethernet.etherType=v_hdr.ethernet.etherType_37}  OutVars{hdr.ethernet.etherType=v_hdr.ethernet.etherType_37}  AuxVars[]  AssignedVars[] 8623#L730-1_T0_init [1883] L730-1_T0_init-->startEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8614#startEXIT_T0_init >[2245] startEXIT_T0_init-->_parser_MyParserFINAL-D66: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8615#_parser_MyParserFINAL-D66 [1638] _parser_MyParserFINAL-D66-->_parser_MyParserFINAL_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8711#_parser_MyParserFINAL_T0_init [1963] _parser_MyParserFINAL_T0_init-->_parser_MyParserEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 9069#_parser_MyParserEXIT_T0_init >[2284] _parser_MyParserEXIT_T0_init-->L560-D104: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 9127#L560-D104 [2220] L560-D104-->L560_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8528#L560_T0_init [1530] L560_T0_init-->L560_T0_init-D16: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 8529#L560_T0_init-D16 [1972] L560_T0_init-D16-->MyVerifyChecksumFINAL_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 9004#MyVerifyChecksumFINAL_T0_init [1885] MyVerifyChecksumFINAL_T0_init-->MyVerifyChecksumEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8993#MyVerifyChecksumEXIT_T0_init >[2283] MyVerifyChecksumEXIT_T0_init-->L561-D74: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8962#L561-D74 [1833] L561-D74-->L561_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8463#L561_T0_init [1771] L561_T0_init-->L561_T0_init-D6: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 8776#L561_T0_init-D6 [1680] L561_T0_init-D6-->MyIngressENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8712#MyIngressENTRY_T0_init [1639] MyIngressENTRY_T0_init-->L259_T0_init: Formula: (= v_standard_metadata.ingress_port_17 0)  InVars {standard_metadata.ingress_port=v_standard_metadata.ingress_port_17}  OutVars{standard_metadata.ingress_port=v_standard_metadata.ingress_port_17}  AuxVars[]  AssignedVars[] 8713#L259_T0_init [1794] L259_T0_init-->L266_T0_init: Formula: (not (= v_hdr.ipv4.dstAddr_19 2071690107))  InVars {hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_19}  OutVars{hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_19}  AuxVars[]  AssignedVars[] 8923#L266_T0_init [2048] L266_T0_init-->L267_T0_init: Formula: (and (not (= v_hdr.ethernet.srcAddr_30 0)) (not (= 281474976710655 v_hdr.ethernet.dstAddr_39)))  InVars {hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_30, hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_39}  OutVars{hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_30, hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_39}  AuxVars[]  AssignedVars[] 8564#L267_T0_init [1661] L267_T0_init-->L267_T0_init-D36: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 8743#L267_T0_init-D36 [2084] L267_T0_init-D36-->store_user_macENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8376#store_user_macENTRY_T0_init [1551] store_user_macENTRY_T0_init-->store_user_macENTRY_T0_init-D42: Formula: (and (= v_user_mac.write_indexInParam_1 0) (= v_hdr.ethernet.srcAddr_21 v_user_mac.write_valueInParam_1))  InVars {hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_21}  OutVars{user_mac.write_value=v_user_mac.write_valueInParam_1, user_mac.write_index=v_user_mac.write_indexInParam_1, hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_21}  AuxVars[]  AssignedVars[user_mac.write_value, user_mac.write_index]< 8565#store_user_macENTRY_T0_init-D42 [1622] store_user_macENTRY_T0_init-D42-->user_mac.writeENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8375#user_mac.writeENTRY_T0_init [1456] user_mac.writeENTRY_T0_init-->user_mac.writeFINAL_T0_init: Formula: (= v_user_mac_18 (store v_user_mac_19 v_user_mac.write_index_3 v_user_mac.write_value_3))  InVars {user_mac.write_value=v_user_mac.write_value_3, user_mac.write_index=v_user_mac.write_index_3, user_mac=v_user_mac_19}  OutVars{user_mac.write_value=v_user_mac.write_value_3, user_mac.write_index=v_user_mac.write_index_3, user_mac=v_user_mac_18}  AuxVars[]  AssignedVars[user_mac] 8377#user_mac.writeFINAL_T0_init [2176] user_mac.writeFINAL_T0_init-->user_mac.writeEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 9174#user_mac.writeEXIT_T0_init >[2291] user_mac.writeEXIT_T0_init-->store_user_macFINAL-D64: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: (and (= v_user_mac.write_indexInParam_1 0) (= v_hdr.ethernet.srcAddr_21 v_user_mac.write_valueInParam_1))  InVars {hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_21}  OutVars{user_mac.write_value=v_user_mac.write_valueInParam_1, user_mac.write_index=v_user_mac.write_indexInParam_1, hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_21}  AuxVars[]  AssignedVars[user_mac.write_value, user_mac.write_index] 9091#store_user_macFINAL-D64 [1999] store_user_macFINAL-D64-->store_user_macFINAL_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 9055#store_user_macFINAL_T0_init [1944] store_user_macFINAL_T0_init-->store_user_macEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8895#store_user_macEXIT_T0_init >[2329] store_user_macEXIT_T0_init-->L267-1-D68: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8896#L267-1-D68 [2170] L267-1-D68-->L267-1_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8345#L267-1_T0_init [2117] L267-1_T0_init-->L267-1_T0_init-D4: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 8769#L267-1_T0_init-D4 [1675] L267-1_T0_init-D4-->read_esboxENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8770#read_esboxENTRY_T0_init [1695] read_esboxENTRY_T0_init-->L683_T0_init: Formula: (= (mod (div (+ (* (- 1) (mod 0 1)) v_hdr.tcp.sequence_53) 1) 256) v_tmp_0_12)  InVars {hdr.tcp.sequence=v_hdr.tcp.sequence_53}  OutVars{hdr.tcp.sequence=v_hdr.tcp.sequence_53, tmp_0=v_tmp_0_12}  AuxVars[]  AssignedVars[tmp_0] 8801#L683_T0_init [1852] L683_T0_init-->L684_T0_init: Formula: (= (select v_es_box_26 v_tmp_0_14) v_tmp_14)  InVars {es_box=v_es_box_26, tmp_0=v_tmp_0_14}  OutVars{tmp=v_tmp_14, es_box=v_es_box_26, tmp_0=v_tmp_0_14}  AuxVars[]  AssignedVars[tmp] 8344#L684_T0_init [1441] L684_T0_init-->L685_T0_init: Formula: (= (+ (* (- 1) (mod v_hdr.tcp.sequence_50 256)) (mod 0 1) v_hdr.tcp.sequence_50 v_tmp_11) v_hdr.tcp.sequence_49)  InVars {tmp=v_tmp_11, hdr.tcp.sequence=v_hdr.tcp.sequence_50}  OutVars{tmp=v_tmp_11, hdr.tcp.sequence=v_hdr.tcp.sequence_49}  AuxVars[]  AssignedVars[hdr.tcp.sequence] 8346#L685_T0_init [1795] L685_T0_init-->L687_T0_init: Formula: (= v_tmp_2_14 (mod (div (+ v_hdr.tcp.sequence_64 (* (- 1) (mod v_hdr.tcp.sequence_64 256))) 256) 256))  InVars {hdr.tcp.sequence=v_hdr.tcp.sequence_64}  OutVars{tmp_2=v_tmp_2_14, hdr.tcp.sequence=v_hdr.tcp.sequence_64}  AuxVars[]  AssignedVars[tmp_2] 8513#L687_T0_init [1522] L687_T0_init-->L688_T0_init: Formula: (= v_tmp_1_13 (select v_es_box_16 v_tmp_2_12))  InVars {es_box=v_es_box_16, tmp_2=v_tmp_2_12}  OutVars{tmp_2=v_tmp_2_12, es_box=v_es_box_16, tmp_1=v_tmp_1_13}  AuxVars[]  AssignedVars[tmp_1] 8514#L688_T0_init [1770] L688_T0_init-->L689_T0_init: Formula: (= v_hdr.tcp.sequence_47 (+ (mod v_hdr.tcp.sequence_48 256) (* 256 v_tmp_1_11) (* (- 1) (mod v_hdr.tcp.sequence_48 65536)) v_hdr.tcp.sequence_48))  InVars {hdr.tcp.sequence=v_hdr.tcp.sequence_48, tmp_1=v_tmp_1_11}  OutVars{hdr.tcp.sequence=v_hdr.tcp.sequence_47, tmp_1=v_tmp_1_11}  AuxVars[]  AssignedVars[hdr.tcp.sequence] 8899#L689_T0_init [2206] L689_T0_init-->L691_T0_init: Formula: (= (mod (div (+ (* (mod v_hdr.tcp.sequence_63 65536) (- 1)) v_hdr.tcp.sequence_63) 65536) 256) v_tmp_4_12)  InVars {hdr.tcp.sequence=v_hdr.tcp.sequence_63}  OutVars{hdr.tcp.sequence=v_hdr.tcp.sequence_63, tmp_4=v_tmp_4_12}  AuxVars[]  AssignedVars[tmp_4] 8489#L691_T0_init [1512] L691_T0_init-->L692_T0_init: Formula: (= (select v_es_box_24 v_tmp_4_13) v_tmp_3_14)  InVars {es_box=v_es_box_24, tmp_4=v_tmp_4_13}  OutVars{tmp_3=v_tmp_3_14, tmp_4=v_tmp_4_13, es_box=v_es_box_24}  AuxVars[]  AssignedVars[tmp_3] 8490#L692_T0_init [1693] L692_T0_init-->L693_T0_init: Formula: (= (+ (* (- 1) (mod v_hdr.tcp.sequence_57 16777216)) (* 65536 v_tmp_3_13) v_hdr.tcp.sequence_57 (mod v_hdr.tcp.sequence_57 65536)) v_hdr.tcp.sequence_56)  InVars {tmp_3=v_tmp_3_13, hdr.tcp.sequence=v_hdr.tcp.sequence_57}  OutVars{tmp_3=v_tmp_3_13, hdr.tcp.sequence=v_hdr.tcp.sequence_56}  AuxVars[]  AssignedVars[hdr.tcp.sequence] 8799#L693_T0_init [1977] L693_T0_init-->L695_T0_init: Formula: (= v_tmp_6_14 (mod (div (+ (* (- 1) (mod v_hdr.tcp.sequence_68 16777216)) v_hdr.tcp.sequence_68) 16777216) 256))  InVars {hdr.tcp.sequence=v_hdr.tcp.sequence_68}  OutVars{tmp_6=v_tmp_6_14, hdr.tcp.sequence=v_hdr.tcp.sequence_68}  AuxVars[]  AssignedVars[tmp_6] 8907#L695_T0_init [1779] L695_T0_init-->L696_T0_init: Formula: (= v_tmp_5_12 (select v_es_box_17 v_tmp_6_11))  InVars {es_box=v_es_box_17, tmp_6=v_tmp_6_11}  OutVars{tmp_5=v_tmp_5_12, es_box=v_es_box_17, tmp_6=v_tmp_6_11}  AuxVars[]  AssignedVars[tmp_5] 8908#L696_T0_init [1811] L696_T0_init-->L697_T0_init: Formula: (= (+ (* 16777216 v_tmp_5_11) v_hdr.tcp.sequence_52 (mod v_hdr.tcp.sequence_52 16777216) (* (- 1) (mod v_hdr.tcp.sequence_52 4294967296))) v_hdr.tcp.sequence_51)  InVars {tmp_5=v_tmp_5_11, hdr.tcp.sequence=v_hdr.tcp.sequence_52}  OutVars{tmp_5=v_tmp_5_11, hdr.tcp.sequence=v_hdr.tcp.sequence_51}  AuxVars[]  AssignedVars[hdr.tcp.sequence] 8909#L697_T0_init [1780] L697_T0_init-->L699_T0_init: Formula: (= v_tmp_8_14 (mod (div (+ v_hdr.tcp.ackseq_62 (* (- 1) (mod 0 1))) 1) 256))  InVars {hdr.tcp.ackseq=v_hdr.tcp.ackseq_62}  OutVars{hdr.tcp.ackseq=v_hdr.tcp.ackseq_62, tmp_8=v_tmp_8_14}  AuxVars[]  AssignedVars[tmp_8] 8910#L699_T0_init [2014] L699_T0_init-->L700_T0_init: Formula: (= v_tmp_7_11 (select v_es_box_14 v_tmp_8_12))  InVars {es_box=v_es_box_14, tmp_8=v_tmp_8_12}  OutVars{tmp_7=v_tmp_7_11, es_box=v_es_box_14, tmp_8=v_tmp_8_12}  AuxVars[]  AssignedVars[tmp_7] 8694#L700_T0_init [1630] L700_T0_init-->L701_T0_init: Formula: (= v_hdr.tcp.ackseq_65 (+ v_hdr.tcp.ackseq_66 v_tmp_7_14 (* (- 1) (mod v_hdr.tcp.ackseq_66 256)) (mod 0 1)))  InVars {tmp_7=v_tmp_7_14, hdr.tcp.ackseq=v_hdr.tcp.ackseq_66}  OutVars{tmp_7=v_tmp_7_14, hdr.tcp.ackseq=v_hdr.tcp.ackseq_65}  AuxVars[]  AssignedVars[hdr.tcp.ackseq] 8695#L701_T0_init [1750] L701_T0_init-->L703_T0_init: Formula: (= (mod (div (+ v_hdr.tcp.ackseq_61 (* (mod v_hdr.tcp.ackseq_61 256) (- 1))) 256) 256) v_tmp_10_14)  InVars {hdr.tcp.ackseq=v_hdr.tcp.ackseq_61}  OutVars{hdr.tcp.ackseq=v_hdr.tcp.ackseq_61, tmp_10=v_tmp_10_14}  AuxVars[]  AssignedVars[tmp_10] 8451#L703_T0_init [1493] L703_T0_init-->L704_T0_init: Formula: (= v_tmp_9_11 (select v_es_box_18 v_tmp_10_11))  InVars {es_box=v_es_box_18, tmp_10=v_tmp_10_11}  OutVars{tmp_10=v_tmp_10_11, es_box=v_es_box_18, tmp_9=v_tmp_9_11}  AuxVars[]  AssignedVars[tmp_9] 8452#L704_T0_init [1581] L704_T0_init-->L705_T0_init: Formula: (= v_hdr.tcp.ackseq_53 (+ v_hdr.tcp.ackseq_54 (mod v_hdr.tcp.ackseq_54 256) (* 256 v_tmp_9_13) (* (- 1) (mod v_hdr.tcp.ackseq_54 65536))))  InVars {hdr.tcp.ackseq=v_hdr.tcp.ackseq_54, tmp_9=v_tmp_9_13}  OutVars{hdr.tcp.ackseq=v_hdr.tcp.ackseq_53, tmp_9=v_tmp_9_13}  AuxVars[]  AssignedVars[hdr.tcp.ackseq] 8618#L705_T0_init [2193] L705_T0_init-->L707_T0_init: Formula: (= (mod (div (+ v_hdr.tcp.ackseq_51 (* (mod v_hdr.tcp.ackseq_51 65536) (- 1))) 65536) 256) v_tmp_12_14)  InVars {hdr.tcp.ackseq=v_hdr.tcp.ackseq_51}  OutVars{hdr.tcp.ackseq=v_hdr.tcp.ackseq_51, tmp_12=v_tmp_12_14}  AuxVars[]  AssignedVars[tmp_12] 8405#L707_T0_init [1469] L707_T0_init-->L708_T0_init: Formula: (= (select v_es_box_13 v_tmp_12_11) v_tmp_11_11)  InVars {es_box=v_es_box_13, tmp_12=v_tmp_12_11}  OutVars{tmp_11=v_tmp_11_11, tmp_12=v_tmp_12_11, es_box=v_es_box_13}  AuxVars[]  AssignedVars[tmp_11] 8406#L708_T0_init [1727] L708_T0_init-->L709_T0_init: Formula: (= v_hdr.tcp.ackseq_59 (+ v_hdr.tcp.ackseq_60 (* 65536 v_tmp_11_14) (* (- 1) (mod v_hdr.tcp.ackseq_60 16777216)) (mod v_hdr.tcp.ackseq_60 65536)))  InVars {tmp_11=v_tmp_11_14, hdr.tcp.ackseq=v_hdr.tcp.ackseq_60}  OutVars{tmp_11=v_tmp_11_14, hdr.tcp.ackseq=v_hdr.tcp.ackseq_59}  AuxVars[]  AssignedVars[hdr.tcp.ackseq] 8842#L709_T0_init [2127] L709_T0_init-->L711_T0_init: Formula: (= (mod (div (+ (* (- 1) (mod v_hdr.tcp.ackseq_45 16777216)) v_hdr.tcp.ackseq_45) 16777216) 256) v_tmp_14_11)  InVars {hdr.tcp.ackseq=v_hdr.tcp.ackseq_45}  OutVars{hdr.tcp.ackseq=v_hdr.tcp.ackseq_45, tmp_14=v_tmp_14_11}  AuxVars[]  AssignedVars[tmp_14] 8368#L711_T0_init [1451] L711_T0_init-->L712_T0_init: Formula: (= (select v_es_box_25 v_tmp_14_14) v_tmp_13_14)  InVars {es_box=v_es_box_25, tmp_14=v_tmp_14_14}  OutVars{es_box=v_es_box_25, tmp_13=v_tmp_13_14, tmp_14=v_tmp_14_14}  AuxVars[]  AssignedVars[tmp_13] 8369#L712_T0_init [1652] L712_T0_init-->read_esboxFINAL_T0_init: Formula: (= v_hdr.tcp.ackseq_49 (+ (* (- 1) (mod v_hdr.tcp.ackseq_50 4294967296)) (mod v_hdr.tcp.ackseq_50 16777216) v_hdr.tcp.ackseq_50 (* 16777216 v_tmp_13_12)))  InVars {hdr.tcp.ackseq=v_hdr.tcp.ackseq_50, tmp_13=v_tmp_13_12}  OutVars{hdr.tcp.ackseq=v_hdr.tcp.ackseq_49, tmp_13=v_tmp_13_12}  AuxVars[]  AssignedVars[hdr.tcp.ackseq] 8732#read_esboxFINAL_T0_init [1969] read_esboxFINAL_T0_init-->read_esboxEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 9073#read_esboxEXIT_T0_init >[2263] read_esboxEXIT_T0_init-->L268-D82: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 9035#L268-D82 [1920] L268-D82-->L268_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8830#L268_T0_init [2221] L268_T0_init-->L268_T0_init-D28: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 9062#L268_T0_init-D28 [1954] L268_T0_init-D28-->do_read_countENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8941#do_read_countENTRY_T0_init [1812] do_read_countENTRY_T0_init-->do_read_countFINAL_T0_init: Formula: (= v_temp_0_29 (select v_count_17 0))  InVars {count=v_count_17}  OutVars{count=v_count_17, temp_0=v_temp_0_29}  AuxVars[]  AssignedVars[temp_0] 8829#do_read_countFINAL_T0_init [1717] do_read_countFINAL_T0_init-->do_read_countEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8831#do_read_countEXIT_T0_init >[2338] do_read_countEXIT_T0_init-->L269-D84: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 9044#L269-D84 [1996] L269-D84-->L269_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 9089#L269_T0_init [2164] L269_T0_init-->L271_T0_init: Formula: (= v_temp_0_24 0)  InVars {temp_0=v_temp_0_24}  OutVars{temp_0=v_temp_0_24}  AuxVars[]  AssignedVars[] 8630#L271_T0_init [2139] L271_T0_init-->L271_T0_init-D8: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 9139#L271_T0_init-D8 [2098] L271_T0_init-D8-->creatipv6_1ENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 9097#creatipv6_1ENTRY_T0_init [2009] creatipv6_1ENTRY_T0_init-->L346_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 9098#L346_T0_init [2061] L346_T0_init-->L348_T0_init: Formula: (= 6 v_hdr.ipv6.version_21)  InVars {}  OutVars{hdr.ipv6.version=v_hdr.ipv6.version_21}  AuxVars[]  AssignedVars[hdr.ipv6.version] 9043#L348_T0_init [1929] L348_T0_init-->L349_T0_init: Formula: (= v_hdr.ipv6.payloadlen_22 v_hdr.ipv4.totalLen_22)  InVars {hdr.ipv4.totalLen=v_hdr.ipv4.totalLen_22}  OutVars{hdr.ipv4.totalLen=v_hdr.ipv4.totalLen_22, hdr.ipv6.payloadlen=v_hdr.ipv6.payloadlen_22}  AuxVars[]  AssignedVars[hdr.ipv6.payloadlen] 8839#L349_T0_init [1726] L349_T0_init-->L350_T0_init: Formula: (= v_hdr.ipv6.nextheader_28 65)  InVars {}  OutVars{hdr.ipv6.nextheader=v_hdr.ipv6.nextheader_28}  AuxVars[]  AssignedVars[hdr.ipv6.nextheader] 8840#L350_T0_init [2189] L350_T0_init-->L351_T0_init: Formula: (= 64 v_hdr.ipv6.hoplimit_22)  InVars {}  OutVars{hdr.ipv6.hoplimit=v_hdr.ipv6.hoplimit_22}  AuxVars[]  AssignedVars[hdr.ipv6.hoplimit] 9117#L351_T0_init [2055] L351_T0_init-->L352_T0_init: Formula: (= v_hdr.ethernet.etherType_28 34525)  InVars {}  OutVars{hdr.ethernet.etherType=v_hdr.ethernet.etherType_28}  AuxVars[]  AssignedVars[hdr.ethernet.etherType] 9118#L352_T0_init [2075] L352_T0_init-->L353_T0_init: Formula: (= v_hdr.ipv6.srcAddr_19 42545680458834377588178886921629466626)  InVars {}  OutVars{hdr.ipv6.srcAddr=v_hdr.ipv6.srcAddr_19}  AuxVars[]  AssignedVars[hdr.ipv6.srcAddr] 8718#L353_T0_init [1643] L353_T0_init-->L354_T0_init: Formula: (= v_hdr.ipv6.dstAddr_18 42540765144257160172006968799218772356)  InVars {}  OutVars{hdr.ipv6.dstAddr=v_hdr.ipv6.dstAddr_18}  AuxVars[]  AssignedVars[hdr.ipv6.dstAddr] 8719#L354_T0_init [1773] L354_T0_init-->L355_T0_init: Formula: (= v_hdr.ethernet.srcAddr_33 19799850608873)  InVars {}  OutVars{hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_33}  AuxVars[]  AssignedVars[hdr.ethernet.srcAddr] 8902#L355_T0_init [1881] L355_T0_init-->creatipv6_1FINAL_T0_init: Formula: (= 174219185552744 v_hdr.ethernet.dstAddr_41)  InVars {}  OutVars{hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_41}  AuxVars[]  AssignedVars[hdr.ethernet.dstAddr] 8629#creatipv6_1FINAL_T0_init [1590] creatipv6_1FINAL_T0_init-->creatipv6_1EXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8631#creatipv6_1EXIT_T0_init >[2246] creatipv6_1EXIT_T0_init-->L271-1-D62: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8885#L271-1-D62 [1760] L271-1-D62-->L271-1_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8886#L271-1_T0_init [1814] L271-1_T0_init-->L271-1_T0_init-D34: Formula: (and (= v_count.write_indexInParam_1 0) (= v_count.write_valueInParam_1 1))  InVars {}  OutVars{count.write_index=v_count.write_indexInParam_1, count.write_value=v_count.write_valueInParam_1}  AuxVars[]  AssignedVars[count.write_index, count.write_value]< 8943#L271-1_T0_init-D34 [1818] L271-1_T0_init-D34-->count.writeENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8946#count.writeENTRY_T0_init [2103] count.writeENTRY_T0_init-->count.writeFINAL_T0_init: Formula: (= v_count_20 (store v_count_21 v_count.write_index_3 v_count.write_value_3))  InVars {count=v_count_21, count.write_index=v_count.write_index_3, count.write_value=v_count.write_value_3}  OutVars{count=v_count_20, count.write_index=v_count.write_index_3, count.write_value=v_count.write_value_3}  AuxVars[]  AssignedVars[count] 9285#count.writeFINAL_T0_init [1688] count.writeFINAL_T0_init-->count.writeEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 9260#count.writeEXIT_T0_init >[2295] count.writeEXIT_T0_init-->L273-D98: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: (and (= v_count.write_indexInParam_1 0) (= v_count.write_valueInParam_1 1))  InVars {}  OutVars{count.write_index=v_count.write_indexInParam_1, count.write_value=v_count.write_valueInParam_1}  AuxVars[]  AssignedVars[count.write_index, count.write_value] 9168#L273-D98 [2157] L273-D98-->L273_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8990#L273_T0_init [1867] L273_T0_init-->L275_T0_init: Formula: (= v_standard_metadata.egress_spec_24 1)  InVars {}  OutVars{standard_metadata.egress_spec=v_standard_metadata.egress_spec_24}  AuxVars[]  AssignedVars[standard_metadata.egress_spec] 8517#L275_T0_init [1525] L275_T0_init-->L276_T0_init: Formula: (= 1 v_standard_metadata.egress_port_25)  InVars {}  OutVars{standard_metadata.egress_port=v_standard_metadata.egress_port_25}  AuxVars[]  AssignedVars[standard_metadata.egress_port] 8518#L276_T0_init [1761] L276_T0_init-->L270-1_T0_init: Formula: v_forward_24  InVars {}  OutVars{forward=v_forward_24}  AuxVars[]  AssignedVars[forward] 8887#L270-1_T0_init [1943] L270-1_T0_init-->L278-1_T0_init: Formula: (not (= v_temp_0_27 1))  InVars {temp_0=v_temp_0_27}  OutVars{temp_0=v_temp_0_27}  AuxVars[]  AssignedVars[] 8660#L278-1_T0_init [1611] L278-1_T0_init-->L258_T0_init: Formula: (not (= v_temp_0_23 2))  InVars {temp_0=v_temp_0_23}  OutVars{temp_0=v_temp_0_23}  AuxVars[]  AssignedVars[] 8661#L258_T0_init [2204] L258_T0_init-->MyIngressEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 9345#MyIngressEXIT_T0_init >[2287] MyIngressEXIT_T0_init-->L562-D108: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 9342#L562-D108 [1699] L562-D108-->L562_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8599#L562_T0_init [1989] L562_T0_init-->L562_T0_init-D50: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 9341#L562_T0_init-D50 [1602] L562_T0_init-D50-->MyEgressENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 9346#MyEgressENTRY_T0_init [1617] MyEgressENTRY_T0_init-->L249_T0_init: Formula: (or (not (= 0 v_standard_metadata.egress_port_34)) (not v_hdr.tcp.valid_32))  InVars {standard_metadata.egress_port=v_standard_metadata.egress_port_34, hdr.tcp.valid=v_hdr.tcp.valid_32}  OutVars{standard_metadata.egress_port=v_standard_metadata.egress_port_34, hdr.tcp.valid=v_hdr.tcp.valid_32}  AuxVars[]  AssignedVars[] 9344#L249_T0_init [1619] L249_T0_init-->MyEgressEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 9340#MyEgressEXIT_T0_init >[2308] MyEgressEXIT_T0_init-->L563-D90: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 9339#L563-D90 [1623] L563-D90-->L563_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 9337#L563_T0_init [1840] L563_T0_init-->L563_T0_init-D32: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 9338#L563_T0_init-D32 [2149] L563_T0_init-D32-->MyComputeChecksumFINAL_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 9343#MyComputeChecksumFINAL_T0_init [1927] MyComputeChecksumFINAL_T0_init-->MyComputeChecksumEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 9336#MyComputeChecksumEXIT_T0_init >[2341] MyComputeChecksumEXIT_T0_init-->L564-D110: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 9335#L564-D110 [1498] L564-D110-->L564_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 9334#L564_T0_init [1919] L564_T0_init-->L565-1_T0_init: Formula: v_forward_30  InVars {forward=v_forward_30}  OutVars{forward=v_forward_30}  AuxVars[]  AssignedVars[] 9332#L565-1_T0_init [1928] L565-1_T0_init-->L569_T0_init: Formula: (let ((.cse0 (= v__old_hdr.ethernet.srcAddr_14 0))) (or (and v__p4ltl_0_6 (not .cse0)) (and (not v__p4ltl_0_6) .cse0)))  InVars {_old_hdr.ethernet.srcAddr=v__old_hdr.ethernet.srcAddr_14}  OutVars{_p4ltl_0=v__p4ltl_0_6, _old_hdr.ethernet.srcAddr=v__old_hdr.ethernet.srcAddr_14}  AuxVars[]  AssignedVars[_p4ltl_0] 9244#L569_T0_init [1772] L569_T0_init-->L570_T0_init: Formula: (let ((.cse0 (= 2071690107 v__old_hdr.ipv4.dstAddr_14))) (or (and v__p4ltl_1_6 (not .cse0)) (and .cse0 (not v__p4ltl_1_6))))  InVars {_old_hdr.ipv4.dstAddr=v__old_hdr.ipv4.dstAddr_14}  OutVars{_old_hdr.ipv4.dstAddr=v__old_hdr.ipv4.dstAddr_14, _p4ltl_1=v__p4ltl_1_6}  AuxVars[]  AssignedVars[_p4ltl_1] 9241#L570_T0_init [1440] L570_T0_init-->L571_T0_init: Formula: (let ((.cse0 (= 281474976710655 v__old_hdr.ethernet.dstAddr_15))) (or (and v__p4ltl_2_7 (not .cse0)) (and (not v__p4ltl_2_7) .cse0)))  InVars {_old_hdr.ethernet.dstAddr=v__old_hdr.ethernet.dstAddr_15}  OutVars{_p4ltl_2=v__p4ltl_2_7, _old_hdr.ethernet.dstAddr=v__old_hdr.ethernet.dstAddr_15}  AuxVars[]  AssignedVars[_p4ltl_2] 9238#L571_T0_init [1910] L571_T0_init-->mainFINAL_T0_init: Formula: (let ((.cse0 (= v_standard_metadata.ingress_port_19 0))) (or (and v__p4ltl_3_6 .cse0) (and (not .cse0) (not v__p4ltl_3_6))))  InVars {standard_metadata.ingress_port=v_standard_metadata.ingress_port_19}  OutVars{standard_metadata.ingress_port=v_standard_metadata.ingress_port_19, _p4ltl_3=v__p4ltl_3_6}  AuxVars[]  AssignedVars[_p4ltl_3] 9235#mainFINAL_T0_init [2017] mainFINAL_T0_init-->mainEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 9231#mainEXIT_T0_init >[2277] mainEXIT_T0_init-->L577-1-D72: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 9225#L577-1-D72 [1809] L577-1-D72-->L577-1_accept_S1: Formula: (and v__p4ltl_1_9 v__p4ltl_0_9 v__p4ltl_3_9 v__p4ltl_2_9 (or (not v__p4ltl_3_9) (not v__p4ltl_1_9) (= 1 v_standard_metadata.egress_port_30) (not v__p4ltl_2_9) (not v__p4ltl_0_9)))  InVars {_p4ltl_2=v__p4ltl_2_9, standard_metadata.egress_port=v_standard_metadata.egress_port_30, _p4ltl_3=v__p4ltl_3_9, _p4ltl_0=v__p4ltl_0_9, _p4ltl_1=v__p4ltl_1_9}  OutVars{_p4ltl_2=v__p4ltl_2_9, standard_metadata.egress_port=v_standard_metadata.egress_port_30, _p4ltl_3=v__p4ltl_3_9, _p4ltl_0=v__p4ltl_0_9, _p4ltl_1=v__p4ltl_1_9}  AuxVars[]  AssignedVars[] 8442#L577-1_accept_S1 
[2023-01-16 05:55:43,984 INFO  L754   eck$LassoCheckResult]: Loop: 8442#L577-1_accept_S1 [1488] L577-1_accept_S1-->L577_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8386#L577_accept_S1 [1736] L577_accept_S1-->L577_accept_S1-D53: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 8857#L577_accept_S1-D53 [1856] L577_accept_S1-D53-->mainENTRY_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8322#mainENTRY_accept_S1 [1988] mainENTRY_accept_S1-->mainENTRY_accept_S1-D39: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 9060#mainENTRY_accept_S1-D39 [1953] mainENTRY_accept_S1-D39-->havocProcedureENTRY_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 9061#havocProcedureENTRY_accept_S1 [2101] havocProcedureENTRY_accept_S1-->L421_accept_S1: Formula: (not v_drop_11)  InVars {}  OutVars{drop=v_drop_11}  AuxVars[]  AssignedVars[drop] 9063#L421_accept_S1 [1955] L421_accept_S1-->L422_accept_S1: Formula: (not v_forward_18)  InVars {}  OutVars{forward=v_forward_18}  AuxVars[]  AssignedVars[forward] 9064#L422_accept_S1 [1966] L422_accept_S1-->L423_accept_S1: Formula: (= v_standard_metadata.ingress_port_13 0)  InVars {}  OutVars{standard_metadata.ingress_port=v_standard_metadata.ingress_port_13}  AuxVars[]  AssignedVars[standard_metadata.ingress_port] 8353#L423_accept_S1 [1445] L423_accept_S1-->L424_accept_S1: Formula: (= v_standard_metadata.egress_spec_16 0)  InVars {}  OutVars{standard_metadata.egress_spec=v_standard_metadata.egress_spec_16}  AuxVars[]  AssignedVars[standard_metadata.egress_spec] 8354#L424_accept_S1 [1702] L424_accept_S1-->L425_accept_S1: Formula: (= 0 v_standard_metadata.egress_port_17)  InVars {}  OutVars{standard_metadata.egress_port=v_standard_metadata.egress_port_17}  AuxVars[]  AssignedVars[standard_metadata.egress_port] 8725#L425_accept_S1 [1647] L425_accept_S1-->L426_accept_S1: Formula: (= v_standard_metadata.instance_type_8 0)  InVars {}  OutVars{standard_metadata.instance_type=v_standard_metadata.instance_type_8}  AuxVars[]  AssignedVars[standard_metadata.instance_type] 8726#L426_accept_S1 [1817] L426_accept_S1-->L427_accept_S1: Formula: (= v_standard_metadata.packet_length_9 0)  InVars {}  OutVars{standard_metadata.packet_length=v_standard_metadata.packet_length_9}  AuxVars[]  AssignedVars[standard_metadata.packet_length] 8822#L427_accept_S1 [1712] L427_accept_S1-->L428_accept_S1: Formula: (= v_standard_metadata.enq_timestamp_8 0)  InVars {}  OutVars{standard_metadata.enq_timestamp=v_standard_metadata.enq_timestamp_8}  AuxVars[]  AssignedVars[standard_metadata.enq_timestamp] 8722#L428_accept_S1 [1646] L428_accept_S1-->L429_accept_S1: Formula: (= v_standard_metadata.enq_qdepth_8 0)  InVars {}  OutVars{standard_metadata.enq_qdepth=v_standard_metadata.enq_qdepth_8}  AuxVars[]  AssignedVars[standard_metadata.enq_qdepth] 8723#L429_accept_S1 [2106] L429_accept_S1-->L430_accept_S1: Formula: (= v_standard_metadata.deq_timedelta_8 0)  InVars {}  OutVars{standard_metadata.deq_timedelta=v_standard_metadata.deq_timedelta_8}  AuxVars[]  AssignedVars[standard_metadata.deq_timedelta] 9143#L430_accept_S1 [2124] L430_accept_S1-->L431_accept_S1: Formula: (= v_standard_metadata.deq_qdepth_9 0)  InVars {}  OutVars{standard_metadata.deq_qdepth=v_standard_metadata.deq_qdepth_9}  AuxVars[]  AssignedVars[standard_metadata.deq_qdepth] 8607#L431_accept_S1 [1575] L431_accept_S1-->L432_accept_S1: Formula: (= v_standard_metadata.ingress_global_timestamp_9 0)  InVars {}  OutVars{standard_metadata.ingress_global_timestamp=v_standard_metadata.ingress_global_timestamp_9}  AuxVars[]  AssignedVars[standard_metadata.ingress_global_timestamp] 8321#L432_accept_S1 [1430] L432_accept_S1-->L433_accept_S1: Formula: (= v_standard_metadata.egress_global_timestamp_8 0)  InVars {}  OutVars{standard_metadata.egress_global_timestamp=v_standard_metadata.egress_global_timestamp_8}  AuxVars[]  AssignedVars[standard_metadata.egress_global_timestamp] 8323#L433_accept_S1 [2160] L433_accept_S1-->L434_accept_S1: Formula: (= 0 v_standard_metadata.mcast_grp_8)  InVars {}  OutVars{standard_metadata.mcast_grp=v_standard_metadata.mcast_grp_8}  AuxVars[]  AssignedVars[standard_metadata.mcast_grp] 9111#L434_accept_S1 [2037] L434_accept_S1-->L435_accept_S1: Formula: (= v_standard_metadata.egress_rid_8 0)  InVars {}  OutVars{standard_metadata.egress_rid=v_standard_metadata.egress_rid_8}  AuxVars[]  AssignedVars[standard_metadata.egress_rid] 8914#L435_accept_S1 [1784] L435_accept_S1-->L436_accept_S1: Formula: (= v_standard_metadata.checksum_error_9 0)  InVars {}  OutVars{standard_metadata.checksum_error=v_standard_metadata.checksum_error_9}  AuxVars[]  AssignedVars[standard_metadata.checksum_error] 8915#L436_accept_S1 [1853] L436_accept_S1-->L437_accept_S1: Formula: (= v_standard_metadata.priority_8 0)  InVars {}  OutVars{standard_metadata.priority=v_standard_metadata.priority_8}  AuxVars[]  AssignedVars[standard_metadata.priority] 8843#L437_accept_S1 [1728] L437_accept_S1-->L438_accept_S1: Formula: (not v_hdr.ethernet.valid_13)  InVars {}  OutVars{hdr.ethernet.valid=v_hdr.ethernet.valid_13}  AuxVars[]  AssignedVars[hdr.ethernet.valid] 8844#L438_accept_S1 [1824] L438_accept_S1-->L439_accept_S1: Formula: (= v_emit_23 (store v_emit_24 v_hdr.ethernet_2 false))  InVars {emit=v_emit_24, hdr.ethernet=v_hdr.ethernet_2}  OutVars{emit=v_emit_23, hdr.ethernet=v_hdr.ethernet_2}  AuxVars[]  AssignedVars[emit] 8951#L439_accept_S1 [1875] L439_accept_S1-->L440_accept_S1: Formula: true  InVars {}  OutVars{hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_25}  AuxVars[]  AssignedVars[hdr.ethernet.dstAddr] 8601#L440_accept_S1 [1571] L440_accept_S1-->L441_accept_S1: Formula: (= v_hdr.ethernet.dstAddr_27 v__old_hdr.ethernet.dstAddr_11)  InVars {hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_27}  OutVars{_old_hdr.ethernet.dstAddr=v__old_hdr.ethernet.dstAddr_11, hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_27}  AuxVars[]  AssignedVars[_old_hdr.ethernet.dstAddr] 8602#L441_accept_S1 [2023] L441_accept_S1-->L442_accept_S1: Formula: (= v_hdr.ethernet.dstAddr_30 v__old_hdr.ethernet.dstAddr_13)  InVars {hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_30}  OutVars{_old_hdr.ethernet.dstAddr=v__old_hdr.ethernet.dstAddr_13, hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_30}  AuxVars[]  AssignedVars[_old_hdr.ethernet.dstAddr] 8767#L442_accept_S1 [1674] L442_accept_S1-->L443_accept_S1: Formula: true  InVars {}  OutVars{hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_22}  AuxVars[]  AssignedVars[hdr.ethernet.srcAddr] 8768#L443_accept_S1 [2168] L443_accept_S1-->L444_accept_S1: Formula: (= v_hdr.ethernet.srcAddr_27 v__old_hdr.ethernet.srcAddr_13)  InVars {hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_27}  OutVars{hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_27, _old_hdr.ethernet.srcAddr=v__old_hdr.ethernet.srcAddr_13}  AuxVars[]  AssignedVars[_old_hdr.ethernet.srcAddr] 8595#L444_accept_S1 [1568] L444_accept_S1-->L445_accept_S1: Formula: (= v_hdr.ethernet.srcAddr_24 v__old_hdr.ethernet.srcAddr_11)  InVars {hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_24}  OutVars{hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_24, _old_hdr.ethernet.srcAddr=v__old_hdr.ethernet.srcAddr_11}  AuxVars[]  AssignedVars[_old_hdr.ethernet.srcAddr] 8596#L445_accept_S1 [2169] L445_accept_S1-->L446_accept_S1: Formula: true  InVars {}  OutVars{hdr.ethernet.etherType=v_hdr.ethernet.etherType_23}  AuxVars[]  AssignedVars[hdr.ethernet.etherType] 8727#L446_accept_S1 [1648] L446_accept_S1-->L447_accept_S1: Formula: (and (<= 0 v_hdr.ethernet.etherType_25) (<= v_hdr.ethernet.etherType_25 65536))  InVars {hdr.ethernet.etherType=v_hdr.ethernet.etherType_25}  OutVars{hdr.ethernet.etherType=v_hdr.ethernet.etherType_25}  AuxVars[]  AssignedVars[] 8728#L447_accept_S1 [2121] L447_accept_S1-->L448_accept_S1: Formula: (not v_hdr.ipv6.valid_17)  InVars {}  OutVars{hdr.ipv6.valid=v_hdr.ipv6.valid_17}  AuxVars[]  AssignedVars[hdr.ipv6.valid] 8995#L448_accept_S1 [1871] L448_accept_S1-->L449_accept_S1: Formula: (= (store v_emit_20 v_hdr.ipv6_9 false) v_emit_19)  InVars {emit=v_emit_20, hdr.ipv6=v_hdr.ipv6_9}  OutVars{emit=v_emit_19, hdr.ipv6=v_hdr.ipv6_9}  AuxVars[]  AssignedVars[emit] 8988#L449_accept_S1 [1865] L449_accept_S1-->L450_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv6.version=v_hdr.ipv6.version_18}  AuxVars[]  AssignedVars[hdr.ipv6.version] 8989#L450_accept_S1 [2071] L450_accept_S1-->L451_accept_S1: Formula: (and (<= v_hdr.ipv6.version_17 16) (<= 0 v_hdr.ipv6.version_17))  InVars {hdr.ipv6.version=v_hdr.ipv6.version_17}  OutVars{hdr.ipv6.version=v_hdr.ipv6.version_17}  AuxVars[]  AssignedVars[] 8349#L451_accept_S1 [1443] L451_accept_S1-->L452_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv6.trafclass=v_hdr.ipv6.trafclass_11}  AuxVars[]  AssignedVars[hdr.ipv6.trafclass] 8350#L452_accept_S1 [1624] L452_accept_S1-->L453_accept_S1: Formula: (and (<= 0 v_hdr.ipv6.trafclass_10) (<= v_hdr.ipv6.trafclass_10 256))  InVars {hdr.ipv6.trafclass=v_hdr.ipv6.trafclass_10}  OutVars{hdr.ipv6.trafclass=v_hdr.ipv6.trafclass_10}  AuxVars[]  AssignedVars[] 8685#L453_accept_S1 [2130] L453_accept_S1-->L454_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv6.flowlabel=v_hdr.ipv6.flowlabel_9}  AuxVars[]  AssignedVars[hdr.ipv6.flowlabel] 9155#L454_accept_S1 [2191] L454_accept_S1-->L455_accept_S1: Formula: (and (<= 0 v_hdr.ipv6.flowlabel_10) (<= v_hdr.ipv6.flowlabel_10 1048576))  InVars {hdr.ipv6.flowlabel=v_hdr.ipv6.flowlabel_10}  OutVars{hdr.ipv6.flowlabel=v_hdr.ipv6.flowlabel_10}  AuxVars[]  AssignedVars[] 9181#L455_accept_S1 [2213] L455_accept_S1-->L456_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv6.payloadlen=v_hdr.ipv6.payloadlen_19}  AuxVars[]  AssignedVars[hdr.ipv6.payloadlen] 8823#L456_accept_S1 [1713] L456_accept_S1-->L457_accept_S1: Formula: (and (<= v_hdr.ipv6.payloadlen_18 65536) (<= 0 v_hdr.ipv6.payloadlen_18))  InVars {hdr.ipv6.payloadlen=v_hdr.ipv6.payloadlen_18}  OutVars{hdr.ipv6.payloadlen=v_hdr.ipv6.payloadlen_18}  AuxVars[]  AssignedVars[] 8746#L457_accept_S1 [1659] L457_accept_S1-->L458_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv6.nextheader=v_hdr.ipv6.nextheader_19}  AuxVars[]  AssignedVars[hdr.ipv6.nextheader] 8747#L458_accept_S1 [1976] L458_accept_S1-->L459_accept_S1: Formula: (and (<= 0 v_hdr.ipv6.nextheader_21) (<= v_hdr.ipv6.nextheader_21 256))  InVars {hdr.ipv6.nextheader=v_hdr.ipv6.nextheader_21}  OutVars{hdr.ipv6.nextheader=v_hdr.ipv6.nextheader_21}  AuxVars[]  AssignedVars[] 9079#L459_accept_S1 [2062] L459_accept_S1-->L460_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv6.hoplimit=v_hdr.ipv6.hoplimit_19}  AuxVars[]  AssignedVars[hdr.ipv6.hoplimit] 9013#L460_accept_S1 [1894] L460_accept_S1-->L461_accept_S1: Formula: (and (<= 0 v_hdr.ipv6.hoplimit_18) (<= v_hdr.ipv6.hoplimit_18 256))  InVars {hdr.ipv6.hoplimit=v_hdr.ipv6.hoplimit_18}  OutVars{hdr.ipv6.hoplimit=v_hdr.ipv6.hoplimit_18}  AuxVars[]  AssignedVars[] 8426#L461_accept_S1 [1480] L461_accept_S1-->L462_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv6.srcAddr=v_hdr.ipv6.srcAddr_16}  AuxVars[]  AssignedVars[hdr.ipv6.srcAddr] 8427#L462_accept_S1 [2047] L462_accept_S1-->L463_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv6.dstAddr=v_hdr.ipv6.dstAddr_17}  AuxVars[]  AssignedVars[hdr.ipv6.dstAddr] 8381#L463_accept_S1 [1457] L463_accept_S1-->L464_accept_S1: Formula: (not v_hdr.ipv4_tunnel.valid_19)  InVars {}  OutVars{hdr.ipv4_tunnel.valid=v_hdr.ipv4_tunnel.valid_19}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.valid] 8382#L464_accept_S1 [1546] L464_accept_S1-->L465_accept_S1: Formula: (= v_emit_37 (store v_emit_38 v_hdr.ipv4_tunnel_9 false))  InVars {emit=v_emit_38, hdr.ipv4_tunnel=v_hdr.ipv4_tunnel_9}  OutVars{emit=v_emit_37, hdr.ipv4_tunnel=v_hdr.ipv4_tunnel_9}  AuxVars[]  AssignedVars[emit] 8556#L465_accept_S1 [2053] L465_accept_S1-->L466_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.version=v_hdr.ipv4_tunnel.version_14}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.version] 8976#L466_accept_S1 [1847] L466_accept_S1-->L467_accept_S1: Formula: (and (<= v_hdr.ipv4_tunnel.version_15 16) (<= 0 v_hdr.ipv4_tunnel.version_15))  InVars {hdr.ipv4_tunnel.version=v_hdr.ipv4_tunnel.version_15}  OutVars{hdr.ipv4_tunnel.version=v_hdr.ipv4_tunnel.version_15}  AuxVars[]  AssignedVars[] 8424#L467_accept_S1 [1479] L467_accept_S1-->L468_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.ihl=v_hdr.ipv4_tunnel.ihl_17}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.ihl] 8425#L468_accept_S1 [2182] L468_accept_S1-->L469_accept_S1: Formula: (and (<= 0 v_hdr.ipv4_tunnel.ihl_15) (<= v_hdr.ipv4_tunnel.ihl_15 16))  InVars {hdr.ipv4_tunnel.ihl=v_hdr.ipv4_tunnel.ihl_15}  OutVars{hdr.ipv4_tunnel.ihl=v_hdr.ipv4_tunnel.ihl_15}  AuxVars[]  AssignedVars[] 8754#L469_accept_S1 [1666] L469_accept_S1-->L470_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.diffserv=v_hdr.ipv4_tunnel.diffserv_17}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.diffserv] 8755#L470_accept_S1 [1669] L470_accept_S1-->L471_accept_S1: Formula: (and (<= v_hdr.ipv4_tunnel.diffserv_16 256) (<= 0 v_hdr.ipv4_tunnel.diffserv_16))  InVars {hdr.ipv4_tunnel.diffserv=v_hdr.ipv4_tunnel.diffserv_16}  OutVars{hdr.ipv4_tunnel.diffserv=v_hdr.ipv4_tunnel.diffserv_16}  AuxVars[]  AssignedVars[] 8757#L471_accept_S1 [1820] L471_accept_S1-->L472_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.totalLen=v_hdr.ipv4_tunnel.totalLen_17}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.totalLen] 8947#L472_accept_S1 [2199] L472_accept_S1-->L473_accept_S1: Formula: (and (<= v_hdr.ipv4_tunnel.totalLen_16 65536) (<= 0 v_hdr.ipv4_tunnel.totalLen_16))  InVars {hdr.ipv4_tunnel.totalLen=v_hdr.ipv4_tunnel.totalLen_16}  OutVars{hdr.ipv4_tunnel.totalLen=v_hdr.ipv4_tunnel.totalLen_16}  AuxVars[]  AssignedVars[] 8687#L473_accept_S1 [1626] L473_accept_S1-->L474_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.identification=v_hdr.ipv4_tunnel.identification_15}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.identification] 8688#L474_accept_S1 [1757] L474_accept_S1-->L475_accept_S1: Formula: (and (<= v_hdr.ipv4_tunnel.identification_14 65536) (<= 0 v_hdr.ipv4_tunnel.identification_14))  InVars {hdr.ipv4_tunnel.identification=v_hdr.ipv4_tunnel.identification_14}  OutVars{hdr.ipv4_tunnel.identification=v_hdr.ipv4_tunnel.identification_14}  AuxVars[]  AssignedVars[] 8883#L475_accept_S1 [2044] L475_accept_S1-->L476_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.flags=v_hdr.ipv4_tunnel.flags_15}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.flags] 8553#L476_accept_S1 [1544] L476_accept_S1-->L477_accept_S1: Formula: (and (<= v_hdr.ipv4_tunnel.flags_16 8) (<= 0 v_hdr.ipv4_tunnel.flags_16))  InVars {hdr.ipv4_tunnel.flags=v_hdr.ipv4_tunnel.flags_16}  OutVars{hdr.ipv4_tunnel.flags=v_hdr.ipv4_tunnel.flags_16}  AuxVars[]  AssignedVars[] 8554#L477_accept_S1 [1657] L477_accept_S1-->L478_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.fragOffset=v_hdr.ipv4_tunnel.fragOffset_14}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.fragOffset] 8552#L478_accept_S1 [1543] L478_accept_S1-->L479_accept_S1: Formula: (and (<= 0 v_hdr.ipv4_tunnel.fragOffset_16) (<= v_hdr.ipv4_tunnel.fragOffset_16 8192))  InVars {hdr.ipv4_tunnel.fragOffset=v_hdr.ipv4_tunnel.fragOffset_16}  OutVars{hdr.ipv4_tunnel.fragOffset=v_hdr.ipv4_tunnel.fragOffset_16}  AuxVars[]  AssignedVars[] 8351#L479_accept_S1 [1444] L479_accept_S1-->L480_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.ttl=v_hdr.ipv4_tunnel.ttl_17}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.ttl] 8352#L480_accept_S1 [2092] L480_accept_S1-->L481_accept_S1: Formula: (and (<= 0 v_hdr.ipv4_tunnel.ttl_16) (<= v_hdr.ipv4_tunnel.ttl_16 256))  InVars {hdr.ipv4_tunnel.ttl=v_hdr.ipv4_tunnel.ttl_16}  OutVars{hdr.ipv4_tunnel.ttl=v_hdr.ipv4_tunnel.ttl_16}  AuxVars[]  AssignedVars[] 8516#L481_accept_S1 [1524] L481_accept_S1-->L482_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.protocol=v_hdr.ipv4_tunnel.protocol_18}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.protocol] 8472#L482_accept_S1 [1503] L482_accept_S1-->L483_accept_S1: Formula: (and (<= v_hdr.ipv4_tunnel.protocol_16 256) (<= 0 v_hdr.ipv4_tunnel.protocol_16))  InVars {hdr.ipv4_tunnel.protocol=v_hdr.ipv4_tunnel.protocol_16}  OutVars{hdr.ipv4_tunnel.protocol=v_hdr.ipv4_tunnel.protocol_16}  AuxVars[]  AssignedVars[] 8473#L483_accept_S1 [2089] L483_accept_S1-->L484_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.hdrChecksum=v_hdr.ipv4_tunnel.hdrChecksum_9}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.hdrChecksum] 9132#L484_accept_S1 [2138] L484_accept_S1-->L485_accept_S1: Formula: (and (<= 0 v_hdr.ipv4_tunnel.hdrChecksum_12) (<= v_hdr.ipv4_tunnel.hdrChecksum_12 65536))  InVars {hdr.ipv4_tunnel.hdrChecksum=v_hdr.ipv4_tunnel.hdrChecksum_12}  OutVars{hdr.ipv4_tunnel.hdrChecksum=v_hdr.ipv4_tunnel.hdrChecksum_12}  AuxVars[]  AssignedVars[] 8970#L485_accept_S1 [1842] L485_accept_S1-->L486_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.srcAddr=v_hdr.ipv4_tunnel.srcAddr_13}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.srcAddr] 8796#L486_accept_S1 [1691] L486_accept_S1-->L487_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.dstAddr=v_hdr.ipv4_tunnel.dstAddr_13}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.dstAddr] 8646#L487_accept_S1 [1600] L487_accept_S1-->L488_accept_S1: Formula: (not v_hdr.ipv4.valid_25)  InVars {}  OutVars{hdr.ipv4.valid=v_hdr.ipv4.valid_25}  AuxVars[]  AssignedVars[hdr.ipv4.valid] 8647#L488_accept_S1 [1730] L488_accept_S1-->L489_accept_S1: Formula: (= v_emit_39 (store v_emit_40 v_hdr.ipv4_3 false))  InVars {hdr.ipv4=v_hdr.ipv4_3, emit=v_emit_40}  OutVars{hdr.ipv4=v_hdr.ipv4_3, emit=v_emit_39}  AuxVars[]  AssignedVars[emit] 8847#L489_accept_S1 [2125] L489_accept_S1-->L490_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.version=v_hdr.ipv4.version_11}  AuxVars[]  AssignedVars[hdr.ipv4.version] 9151#L490_accept_S1 [2162] L490_accept_S1-->L491_accept_S1: Formula: (and (<= 0 v_hdr.ipv4.version_13) (<= v_hdr.ipv4.version_13 16))  InVars {hdr.ipv4.version=v_hdr.ipv4.version_13}  OutVars{hdr.ipv4.version=v_hdr.ipv4.version_13}  AuxVars[]  AssignedVars[] 8542#L491_accept_S1 [1538] L491_accept_S1-->L492_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.ihl=v_hdr.ipv4.ihl_12}  AuxVars[]  AssignedVars[hdr.ipv4.ihl] 8543#L492_accept_S1 [1952] L492_accept_S1-->L493_accept_S1: Formula: (and (<= 0 v_hdr.ipv4.ihl_9) (<= v_hdr.ipv4.ihl_9 16))  InVars {hdr.ipv4.ihl=v_hdr.ipv4.ihl_9}  OutVars{hdr.ipv4.ihl=v_hdr.ipv4.ihl_9}  AuxVars[]  AssignedVars[] 8987#L493_accept_S1 [1864] L493_accept_S1-->L494_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.diffserv=v_hdr.ipv4.diffserv_10}  AuxVars[]  AssignedVars[hdr.ipv4.diffserv] 8731#L494_accept_S1 [1650] L494_accept_S1-->L495_accept_S1: Formula: (and (<= v_hdr.ipv4.diffserv_13 256) (<= 0 v_hdr.ipv4.diffserv_13))  InVars {hdr.ipv4.diffserv=v_hdr.ipv4.diffserv_13}  OutVars{hdr.ipv4.diffserv=v_hdr.ipv4.diffserv_13}  AuxVars[]  AssignedVars[] 8571#L495_accept_S1 [1555] L495_accept_S1-->L496_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.totalLen=v_hdr.ipv4.totalLen_14}  AuxVars[]  AssignedVars[hdr.ipv4.totalLen] 8572#L496_accept_S1 [1721] L496_accept_S1-->L497_accept_S1: Formula: (and (<= 0 v_hdr.ipv4.totalLen_16) (<= v_hdr.ipv4.totalLen_16 65536))  InVars {hdr.ipv4.totalLen=v_hdr.ipv4.totalLen_16}  OutVars{hdr.ipv4.totalLen=v_hdr.ipv4.totalLen_16}  AuxVars[]  AssignedVars[] 8835#L497_accept_S1 [2216] L497_accept_S1-->L498_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.identification=v_hdr.ipv4.identification_12}  AuxVars[]  AssignedVars[hdr.ipv4.identification] 9082#L498_accept_S1 [1980] L498_accept_S1-->L499_accept_S1: Formula: (and (<= 0 v_hdr.ipv4.identification_10) (<= v_hdr.ipv4.identification_10 65536))  InVars {hdr.ipv4.identification=v_hdr.ipv4.identification_10}  OutVars{hdr.ipv4.identification=v_hdr.ipv4.identification_10}  AuxVars[]  AssignedVars[] 8898#L499_accept_S1 [1767] L499_accept_S1-->L500_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.flags=v_hdr.ipv4.flags_12}  AuxVars[]  AssignedVars[hdr.ipv4.flags] 8841#L500_accept_S1 [1725] L500_accept_S1-->L501_accept_S1: Formula: (and (<= v_hdr.ipv4.flags_13 8) (<= 0 v_hdr.ipv4.flags_13))  InVars {hdr.ipv4.flags=v_hdr.ipv4.flags_13}  OutVars{hdr.ipv4.flags=v_hdr.ipv4.flags_13}  AuxVars[]  AssignedVars[] 8641#L501_accept_S1 [1595] L501_accept_S1-->L502_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.fragOffset=v_hdr.ipv4.fragOffset_13}  AuxVars[]  AssignedVars[hdr.ipv4.fragOffset] 8642#L502_accept_S1 [2118] L502_accept_S1-->L503_accept_S1: Formula: (and (<= v_hdr.ipv4.fragOffset_10 8192) (<= 0 v_hdr.ipv4.fragOffset_10))  InVars {hdr.ipv4.fragOffset=v_hdr.ipv4.fragOffset_10}  OutVars{hdr.ipv4.fragOffset=v_hdr.ipv4.fragOffset_10}  AuxVars[]  AssignedVars[] 9150#L503_accept_S1 [2145] L503_accept_S1-->L504_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.ttl=v_hdr.ipv4.ttl_10}  AuxVars[]  AssignedVars[hdr.ipv4.ttl] 8435#L504_accept_S1 [1483] L504_accept_S1-->L505_accept_S1: Formula: (and (<= v_hdr.ipv4.ttl_13 256) (<= 0 v_hdr.ipv4.ttl_13))  InVars {hdr.ipv4.ttl=v_hdr.ipv4.ttl_13}  OutVars{hdr.ipv4.ttl=v_hdr.ipv4.ttl_13}  AuxVars[]  AssignedVars[] 8436#L505_accept_S1 [2057] L505_accept_S1-->L506_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.protocol=v_hdr.ipv4.protocol_11}  AuxVars[]  AssignedVars[hdr.ipv4.protocol] 8996#L506_accept_S1 [1872] L506_accept_S1-->L507_accept_S1: Formula: (and (<= 0 v_hdr.ipv4.protocol_14) (<= v_hdr.ipv4.protocol_14 256))  InVars {hdr.ipv4.protocol=v_hdr.ipv4.protocol_14}  OutVars{hdr.ipv4.protocol=v_hdr.ipv4.protocol_14}  AuxVars[]  AssignedVars[] 8997#L507_accept_S1 [2135] L507_accept_S1-->L508_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.hdrChecksum=v_hdr.ipv4.hdrChecksum_10}  AuxVars[]  AssignedVars[hdr.ipv4.hdrChecksum] 9107#L508_accept_S1 [2024] L508_accept_S1-->L509_accept_S1: Formula: (and (<= v_hdr.ipv4.hdrChecksum_12 65536) (<= 0 v_hdr.ipv4.hdrChecksum_12))  InVars {hdr.ipv4.hdrChecksum=v_hdr.ipv4.hdrChecksum_12}  OutVars{hdr.ipv4.hdrChecksum=v_hdr.ipv4.hdrChecksum_12}  AuxVars[]  AssignedVars[] 9036#L509_accept_S1 [1921] L509_accept_S1-->L510_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.srcAddr=v_hdr.ipv4.srcAddr_9}  AuxVars[]  AssignedVars[hdr.ipv4.srcAddr] 9037#L510_accept_S1 [2224] L510_accept_S1-->L511_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_15}  AuxVars[]  AssignedVars[hdr.ipv4.dstAddr] 8742#L511_accept_S1 [1658] L511_accept_S1-->L512_accept_S1: Formula: (= v_hdr.ipv4.dstAddr_17 v__old_hdr.ipv4.dstAddr_13)  InVars {hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_17}  OutVars{_old_hdr.ipv4.dstAddr=v__old_hdr.ipv4.dstAddr_13, hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_17}  AuxVars[]  AssignedVars[_old_hdr.ipv4.dstAddr] 8423#L512_accept_S1 [1478] L512_accept_S1-->L513_accept_S1: Formula: (= v_hdr.ipv4.dstAddr_16 v__old_hdr.ipv4.dstAddr_12)  InVars {hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_16}  OutVars{_old_hdr.ipv4.dstAddr=v__old_hdr.ipv4.dstAddr_12, hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_16}  AuxVars[]  AssignedVars[_old_hdr.ipv4.dstAddr] 8342#L513_accept_S1 [1439] L513_accept_S1-->L514_accept_S1: Formula: (not v_hdr.tcp.valid_30)  InVars {}  OutVars{hdr.tcp.valid=v_hdr.tcp.valid_30}  AuxVars[]  AssignedVars[hdr.tcp.valid] 8343#L514_accept_S1 [2183] L514_accept_S1-->L515_accept_S1: Formula: (= v_emit_35 (store v_emit_36 v_hdr.tcp_3 false))  InVars {hdr.tcp=v_hdr.tcp_3, emit=v_emit_36}  OutVars{hdr.tcp=v_hdr.tcp_3, emit=v_emit_35}  AuxVars[]  AssignedVars[emit] 8503#L515_accept_S1 [1518] L515_accept_S1-->L516_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.srcport=v_hdr.tcp.srcport_10}  AuxVars[]  AssignedVars[hdr.tcp.srcport] 8504#L516_accept_S1 [1866] L516_accept_S1-->L517_accept_S1: Formula: (and (<= 0 v_hdr.tcp.srcport_11) (<= v_hdr.tcp.srcport_11 65536))  InVars {hdr.tcp.srcport=v_hdr.tcp.srcport_11}  OutVars{hdr.tcp.srcport=v_hdr.tcp.srcport_11}  AuxVars[]  AssignedVars[] 8802#L517_accept_S1 [1698] L517_accept_S1-->L518_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.dstport=v_hdr.tcp.dstport_11}  AuxVars[]  AssignedVars[hdr.tcp.dstport] 8546#L518_accept_S1 [1540] L518_accept_S1-->L519_accept_S1: Formula: (and (<= v_hdr.tcp.dstport_12 65536) (<= 0 v_hdr.tcp.dstport_12))  InVars {hdr.tcp.dstport=v_hdr.tcp.dstport_12}  OutVars{hdr.tcp.dstport=v_hdr.tcp.dstport_12}  AuxVars[]  AssignedVars[] 8547#L519_accept_S1 [2187] L519_accept_S1-->L520_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.sequence=v_hdr.tcp.sequence_41}  AuxVars[]  AssignedVars[hdr.tcp.sequence] 9108#L520_accept_S1 [2025] L520_accept_S1-->L521_accept_S1: Formula: (and (<= 0 v_hdr.tcp.sequence_42) (<= v_hdr.tcp.sequence_42 4294967296))  InVars {hdr.tcp.sequence=v_hdr.tcp.sequence_42}  OutVars{hdr.tcp.sequence=v_hdr.tcp.sequence_42}  AuxVars[]  AssignedVars[] 8893#L521_accept_S1 [1765] L521_accept_S1-->L522_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.ackseq=v_hdr.tcp.ackseq_42}  AuxVars[]  AssignedVars[hdr.tcp.ackseq] 8894#L522_accept_S1 [2090] L522_accept_S1-->L523_accept_S1: Formula: (and (<= v_hdr.tcp.ackseq_41 4294967296) (<= 0 v_hdr.tcp.ackseq_41))  InVars {hdr.tcp.ackseq=v_hdr.tcp.ackseq_41}  OutVars{hdr.tcp.ackseq=v_hdr.tcp.ackseq_41}  AuxVars[]  AssignedVars[] 8937#L523_accept_S1 [1807] L523_accept_S1-->L524_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.headerlength=v_hdr.tcp.headerlength_9}  AuxVars[]  AssignedVars[hdr.tcp.headerlength] 8938#L524_accept_S1 [1858] L524_accept_S1-->L525_accept_S1: Formula: (and (<= v_hdr.tcp.headerlength_12 16) (<= 0 v_hdr.tcp.headerlength_12))  InVars {hdr.tcp.headerlength=v_hdr.tcp.headerlength_12}  OutVars{hdr.tcp.headerlength=v_hdr.tcp.headerlength_12}  AuxVars[]  AssignedVars[] 8555#L525_accept_S1 [1545] L525_accept_S1-->L526_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.reservation=v_hdr.tcp.reservation_10}  AuxVars[]  AssignedVars[hdr.tcp.reservation] 8445#L526_accept_S1 [1491] L526_accept_S1-->L527_accept_S1: Formula: (and (<= v_hdr.tcp.reservation_11 64) (<= 0 v_hdr.tcp.reservation_11))  InVars {hdr.tcp.reservation=v_hdr.tcp.reservation_11}  OutVars{hdr.tcp.reservation=v_hdr.tcp.reservation_11}  AuxVars[]  AssignedVars[] 8446#L527_accept_S1 [2059] L527_accept_S1-->L528_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.URG=v_hdr.tcp.URG_11}  AuxVars[]  AssignedVars[hdr.tcp.URG] 9042#L528_accept_S1 [1926] L528_accept_S1-->L529_accept_S1: Formula: (and (<= v_hdr.tcp.URG_10 2) (<= 0 v_hdr.tcp.URG_10))  InVars {hdr.tcp.URG=v_hdr.tcp.URG_10}  OutVars{hdr.tcp.URG=v_hdr.tcp.URG_10}  AuxVars[]  AssignedVars[] 8920#L529_accept_S1 [1791] L529_accept_S1-->L530_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.ACK=v_hdr.tcp.ACK_10}  AuxVars[]  AssignedVars[hdr.tcp.ACK] 8921#L530_accept_S1 [2041] L530_accept_S1-->L531_accept_S1: Formula: (and (<= 0 v_hdr.tcp.ACK_12) (<= v_hdr.tcp.ACK_12 2))  InVars {hdr.tcp.ACK=v_hdr.tcp.ACK_12}  OutVars{hdr.tcp.ACK=v_hdr.tcp.ACK_12}  AuxVars[]  AssignedVars[] 9092#L531_accept_S1 [2000] L531_accept_S1-->L532_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.PSH=v_hdr.tcp.PSH_10}  AuxVars[]  AssignedVars[hdr.tcp.PSH] 9093#L532_accept_S1 [2042] L532_accept_S1-->L533_accept_S1: Formula: (and (<= v_hdr.tcp.PSH_12 2) (<= 0 v_hdr.tcp.PSH_12))  InVars {hdr.tcp.PSH=v_hdr.tcp.PSH_12}  OutVars{hdr.tcp.PSH=v_hdr.tcp.PSH_12}  AuxVars[]  AssignedVars[] 8981#L533_accept_S1 [1859] L533_accept_S1-->L534_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.RST=v_hdr.tcp.RST_12}  AuxVars[]  AssignedVars[hdr.tcp.RST] 8777#L534_accept_S1 [1679] L534_accept_S1-->L535_accept_S1: Formula: (and (<= v_hdr.tcp.RST_10 2) (<= 0 v_hdr.tcp.RST_10))  InVars {hdr.tcp.RST=v_hdr.tcp.RST_10}  OutVars{hdr.tcp.RST=v_hdr.tcp.RST_10}  AuxVars[]  AssignedVars[] 8778#L535_accept_S1 [1993] L535_accept_S1-->L536_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.SYN=v_hdr.tcp.SYN_12}  AuxVars[]  AssignedVars[hdr.tcp.SYN] 8584#L536_accept_S1 [1562] L536_accept_S1-->L537_accept_S1: Formula: (and (<= 0 v_hdr.tcp.SYN_10) (<= v_hdr.tcp.SYN_10 2))  InVars {hdr.tcp.SYN=v_hdr.tcp.SYN_10}  OutVars{hdr.tcp.SYN=v_hdr.tcp.SYN_10}  AuxVars[]  AssignedVars[] 8585#L537_accept_S1 [1970] L537_accept_S1-->L538_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.FIN=v_hdr.tcp.FIN_12}  AuxVars[]  AssignedVars[hdr.tcp.FIN] 9010#L538_accept_S1 [1891] L538_accept_S1-->L539_accept_S1: Formula: (and (<= 0 v_hdr.tcp.FIN_11) (<= v_hdr.tcp.FIN_11 2))  InVars {hdr.tcp.FIN=v_hdr.tcp.FIN_11}  OutVars{hdr.tcp.FIN=v_hdr.tcp.FIN_11}  AuxVars[]  AssignedVars[] 9011#L539_accept_S1 [2032] L539_accept_S1-->L540_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.windowsize=v_hdr.tcp.windowsize_11}  AuxVars[]  AssignedVars[hdr.tcp.windowsize] 8639#L540_accept_S1 [1594] L540_accept_S1-->L541_accept_S1: Formula: (and (<= 0 v_hdr.tcp.windowsize_9) (<= v_hdr.tcp.windowsize_9 65536))  InVars {hdr.tcp.windowsize=v_hdr.tcp.windowsize_9}  OutVars{hdr.tcp.windowsize=v_hdr.tcp.windowsize_9}  AuxVars[]  AssignedVars[] 8640#L541_accept_S1 [1660] L541_accept_S1-->L542_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.checksum=v_hdr.tcp.checksum_11}  AuxVars[]  AssignedVars[hdr.tcp.checksum] 8748#L542_accept_S1 [1981] L542_accept_S1-->L543_accept_S1: Formula: (and (<= v_hdr.tcp.checksum_9 65536) (<= 0 v_hdr.tcp.checksum_9))  InVars {hdr.tcp.checksum=v_hdr.tcp.checksum_9}  OutVars{hdr.tcp.checksum=v_hdr.tcp.checksum_9}  AuxVars[]  AssignedVars[] 8407#L543_accept_S1 [1468] L543_accept_S1-->L544_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.pointer=v_hdr.tcp.pointer_12}  AuxVars[]  AssignedVars[hdr.tcp.pointer] 8408#L544_accept_S1 [1473] L544_accept_S1-->L545_accept_S1: Formula: (and (<= 0 v_hdr.tcp.pointer_9) (<= v_hdr.tcp.pointer_9 65536))  InVars {hdr.tcp.pointer=v_hdr.tcp.pointer_9}  OutVars{hdr.tcp.pointer=v_hdr.tcp.pointer_9}  AuxVars[]  AssignedVars[] 8417#L545_accept_S1 [2018] L545_accept_S1-->L546_accept_S1: Formula: (not v_hdr.udp_tunnel.valid_19)  InVars {}  OutVars{hdr.udp_tunnel.valid=v_hdr.udp_tunnel.valid_19}  AuxVars[]  AssignedVars[hdr.udp_tunnel.valid] 8673#L546_accept_S1 [1615] L546_accept_S1-->L547_accept_S1: Formula: (= v_emit_21 (store v_emit_22 v_hdr.udp_tunnel_8 false))  InVars {emit=v_emit_22, hdr.udp_tunnel=v_hdr.udp_tunnel_8}  OutVars{emit=v_emit_21, hdr.udp_tunnel=v_hdr.udp_tunnel_8}  AuxVars[]  AssignedVars[emit] 8674#L547_accept_S1 [2099] L547_accept_S1-->L548_accept_S1: Formula: true  InVars {}  OutVars{hdr.udp_tunnel.srcport=v_hdr.udp_tunnel.srcport_15}  AuxVars[]  AssignedVars[hdr.udp_tunnel.srcport] 8704#L548_accept_S1 [1635] L548_accept_S1-->L549_accept_S1: Formula: (and (<= v_hdr.udp_tunnel.srcport_17 65536) (<= 0 v_hdr.udp_tunnel.srcport_17))  InVars {hdr.udp_tunnel.srcport=v_hdr.udp_tunnel.srcport_17}  OutVars{hdr.udp_tunnel.srcport=v_hdr.udp_tunnel.srcport_17}  AuxVars[]  AssignedVars[] 8705#L549_accept_S1 [2225] L549_accept_S1-->L550_accept_S1: Formula: true  InVars {}  OutVars{hdr.udp_tunnel.dstport=v_hdr.udp_tunnel.dstport_17}  AuxVars[]  AssignedVars[hdr.udp_tunnel.dstport] 8891#L550_accept_S1 [1764] L550_accept_S1-->L551_accept_S1: Formula: (and (<= v_hdr.udp_tunnel.dstport_16 65536) (<= 0 v_hdr.udp_tunnel.dstport_16))  InVars {hdr.udp_tunnel.dstport=v_hdr.udp_tunnel.dstport_16}  OutVars{hdr.udp_tunnel.dstport=v_hdr.udp_tunnel.dstport_16}  AuxVars[]  AssignedVars[] 8892#L551_accept_S1 [2102] L551_accept_S1-->L552_accept_S1: Formula: true  InVars {}  OutVars{hdr.udp_tunnel.userlength=v_hdr.udp_tunnel.userlength_14}  AuxVars[]  AssignedVars[hdr.udp_tunnel.userlength] 9075#L552_accept_S1 [1971] L552_accept_S1-->L553_accept_S1: Formula: (and (<= 0 v_hdr.udp_tunnel.userlength_15) (<= v_hdr.udp_tunnel.userlength_15 65536))  InVars {hdr.udp_tunnel.userlength=v_hdr.udp_tunnel.userlength_15}  OutVars{hdr.udp_tunnel.userlength=v_hdr.udp_tunnel.userlength_15}  AuxVars[]  AssignedVars[] 9076#L553_accept_S1 [1998] L553_accept_S1-->L554_accept_S1: Formula: true  InVars {}  OutVars{hdr.udp_tunnel.checksum=v_hdr.udp_tunnel.checksum_17}  AuxVars[]  AssignedVars[hdr.udp_tunnel.checksum] 8531#L554_accept_S1 [1532] L554_accept_S1-->havocProcedureFINAL_accept_S1: Formula: (and (<= v_hdr.udp_tunnel.checksum_16 65536) (<= 0 v_hdr.udp_tunnel.checksum_16))  InVars {hdr.udp_tunnel.checksum=v_hdr.udp_tunnel.checksum_16}  OutVars{hdr.udp_tunnel.checksum=v_hdr.udp_tunnel.checksum_16}  AuxVars[]  AssignedVars[] 8532#havocProcedureFINAL_accept_S1 [1756] havocProcedureFINAL_accept_S1-->havocProcedureEXIT_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8582#havocProcedureEXIT_accept_S1 >[2239] havocProcedureEXIT_accept_S1-->L559-D55: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8583#L559-D55 [2068] L559-D55-->L559_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8385#L559_accept_S1 [1459] L559_accept_S1-->L559_accept_S1-D21: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 8387#L559_accept_S1-D21 [2131] L559_accept_S1-D21-->_parser_MyParserENTRY_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8544#_parser_MyParserENTRY_accept_S1 [1539] _parser_MyParserENTRY_accept_S1-->_parser_MyParserENTRY_accept_S1-D13: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 8545#_parser_MyParserENTRY_accept_S1-D13 [2142] _parser_MyParserENTRY_accept_S1-D13-->startENTRY_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8884#startENTRY_accept_S1 [1759] startENTRY_accept_S1-->L727_accept_S1: Formula: v_hdr.ethernet.valid_15  InVars {}  OutVars{hdr.ethernet.valid=v_hdr.ethernet.valid_15}  AuxVars[]  AssignedVars[hdr.ethernet.valid] 8656#L727_accept_S1 [1606] L727_accept_S1-->L730_accept_S1: Formula: (not (= v_hdr.ethernet.etherType_33 34525))  InVars {hdr.ethernet.etherType=v_hdr.ethernet.etherType_33}  OutVars{hdr.ethernet.etherType=v_hdr.ethernet.etherType_33}  AuxVars[]  AssignedVars[] 8657#L730_accept_S1 [1878] L730_accept_S1-->L730-1_accept_S1: Formula: (not (= v_hdr.ethernet.etherType_39 2048))  InVars {hdr.ethernet.etherType=v_hdr.ethernet.etherType_39}  OutVars{hdr.ethernet.etherType=v_hdr.ethernet.etherType_39}  AuxVars[]  AssignedVars[] 8550#L730-1_accept_S1 [1542] L730-1_accept_S1-->startEXIT_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8551#startEXIT_accept_S1 >[2261] startEXIT_accept_S1-->_parser_MyParserFINAL-D65: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8573#_parser_MyParserFINAL-D65 [1556] _parser_MyParserFINAL-D65-->_parser_MyParserFINAL_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8574#_parser_MyParserFINAL_accept_S1 [1557] _parser_MyParserFINAL_accept_S1-->_parser_MyParserEXIT_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8575#_parser_MyParserEXIT_accept_S1 >[2247] _parser_MyParserEXIT_accept_S1-->L560-D103: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 9032#L560-D103 [1958] L560-D103-->L560_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8804#L560_accept_S1 [2028] L560_accept_S1-->L560_accept_S1-D15: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 9109#L560_accept_S1-D15 [2180] L560_accept_S1-D15-->MyVerifyChecksumFINAL_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8803#MyVerifyChecksumFINAL_accept_S1 [1697] MyVerifyChecksumFINAL_accept_S1-->MyVerifyChecksumEXIT_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8805#MyVerifyChecksumEXIT_accept_S1 >[2310] MyVerifyChecksumEXIT_accept_S1-->L561-D73: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8628#L561-D73 [1589] L561-D73-->L561_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8338#L561_accept_S1 [1888] L561_accept_S1-->L561_accept_S1-D5: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 8851#L561_accept_S1-D5 [1733] L561_accept_S1-D5-->MyIngressENTRY_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8852#MyIngressENTRY_accept_S1 [1899] MyIngressENTRY_accept_S1-->L259_accept_S1: Formula: (= v_standard_metadata.ingress_port_15 0)  InVars {standard_metadata.ingress_port=v_standard_metadata.ingress_port_15}  OutVars{standard_metadata.ingress_port=v_standard_metadata.ingress_port_15}  AuxVars[]  AssignedVars[] 9019#L259_accept_S1 [2134] L259_accept_S1-->L266_accept_S1: Formula: (not (= v_hdr.ipv4.dstAddr_21 2071690107))  InVars {hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_21}  OutVars{hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_21}  AuxVars[]  AssignedVars[] 8437#L266_accept_S1 [1485] L266_accept_S1-->L267_accept_S1: Formula: (and (not (= 281474976710655 v_hdr.ethernet.dstAddr_37)) (not (= v_hdr.ethernet.srcAddr_28 0)))  InVars {hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_28, hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_37}  OutVars{hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_28, hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_37}  AuxVars[]  AssignedVars[] 8366#L267_accept_S1 [1476] L267_accept_S1-->L267_accept_S1-D35: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 8422#L267_accept_S1-D35 [1596] L267_accept_S1-D35-->store_user_macENTRY_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8430#store_user_macENTRY_accept_S1 [1481] store_user_macENTRY_accept_S1-->store_user_macENTRY_accept_S1-D41: Formula: (and (= v_user_mac.write_indexInParam_1 0) (= v_hdr.ethernet.srcAddr_21 v_user_mac.write_valueInParam_1))  InVars {hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_21}  OutVars{user_mac.write_value=v_user_mac.write_valueInParam_1, user_mac.write_index=v_user_mac.write_indexInParam_1, hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_21}  AuxVars[]  AssignedVars[user_mac.write_value, user_mac.write_index]< 8431#store_user_macENTRY_accept_S1-D41 [1854] store_user_macENTRY_accept_S1-D41-->user_mac.writeENTRY_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8980#user_mac.writeENTRY_accept_S1 [1956] user_mac.writeENTRY_accept_S1-->user_mac.writeFINAL_accept_S1: Formula: (= v_user_mac_16 (store v_user_mac_17 v_user_mac.write_index_2 v_user_mac.write_value_2))  InVars {user_mac.write_value=v_user_mac.write_value_2, user_mac.write_index=v_user_mac.write_index_2, user_mac=v_user_mac_17}  OutVars{user_mac.write_value=v_user_mac.write_value_2, user_mac.write_index=v_user_mac.write_index_2, user_mac=v_user_mac_16}  AuxVars[]  AssignedVars[user_mac] 9007#user_mac.writeFINAL_accept_S1 [1889] user_mac.writeFINAL_accept_S1-->user_mac.writeEXIT_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 9008#user_mac.writeEXIT_accept_S1 >[2314] user_mac.writeEXIT_accept_S1-->store_user_macFINAL-D63: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: (and (= v_user_mac.write_indexInParam_1 0) (= v_hdr.ethernet.srcAddr_21 v_user_mac.write_valueInParam_1))  InVars {hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_21}  OutVars{user_mac.write_value=v_user_mac.write_valueInParam_1, user_mac.write_index=v_user_mac.write_indexInParam_1, hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_21}  AuxVars[]  AssignedVars[user_mac.write_value, user_mac.write_index] 8365#store_user_macFINAL-D63 [1450] store_user_macFINAL-D63-->store_user_macFINAL_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8367#store_user_macFINAL_accept_S1 [2027] store_user_macFINAL_accept_S1-->store_user_macEXIT_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8774#store_user_macEXIT_accept_S1 >[2321] store_user_macEXIT_accept_S1-->L267-1-D67: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8608#L267-1-D67 [1574] L267-1-D67-->L267-1_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8335#L267-1_accept_S1 [2228] L267-1_accept_S1-->L267-1_accept_S1-D3: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 8686#L267-1_accept_S1-D3 [1625] L267-1_accept_S1-D3-->read_esboxENTRY_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8648#read_esboxENTRY_accept_S1 [1601] read_esboxENTRY_accept_S1-->L683_accept_S1: Formula: (= (mod (div (+ (* (- 1) (mod 0 1)) v_hdr.tcp.sequence_62) 1) 256) v_tmp_0_13)  InVars {hdr.tcp.sequence=v_hdr.tcp.sequence_62}  OutVars{hdr.tcp.sequence=v_hdr.tcp.sequence_62, tmp_0=v_tmp_0_13}  AuxVars[]  AssignedVars[tmp_0] 8649#L683_accept_S1 [1903] L683_accept_S1-->L684_accept_S1: Formula: (= v_tmp_12 (select v_es_box_15 v_tmp_0_11))  InVars {es_box=v_es_box_15, tmp_0=v_tmp_0_11}  OutVars{tmp=v_tmp_12, es_box=v_es_box_15, tmp_0=v_tmp_0_11}  AuxVars[]  AssignedVars[tmp] 8964#L684_accept_S1 [1835] L684_accept_S1-->L685_accept_S1: Formula: (= (+ (* (- 1) (mod v_hdr.tcp.sequence_60 256)) (mod 0 1) v_hdr.tcp.sequence_60 v_tmp_13) v_hdr.tcp.sequence_59)  InVars {tmp=v_tmp_13, hdr.tcp.sequence=v_hdr.tcp.sequence_60}  OutVars{tmp=v_tmp_13, hdr.tcp.sequence=v_hdr.tcp.sequence_59}  AuxVars[]  AssignedVars[hdr.tcp.sequence] 8668#L685_accept_S1 [1613] L685_accept_S1-->L687_accept_S1: Formula: (= v_tmp_2_13 (mod (div (+ v_hdr.tcp.sequence_58 (* (- 1) (mod v_hdr.tcp.sequence_58 256))) 256) 256))  InVars {hdr.tcp.sequence=v_hdr.tcp.sequence_58}  OutVars{tmp_2=v_tmp_2_13, hdr.tcp.sequence=v_hdr.tcp.sequence_58}  AuxVars[]  AssignedVars[tmp_2] 8669#L687_accept_S1 [2174] L687_accept_S1-->L688_accept_S1: Formula: (= v_tmp_1_12 (select v_es_box_12 v_tmp_2_11))  InVars {es_box=v_es_box_12, tmp_2=v_tmp_2_11}  OutVars{tmp_2=v_tmp_2_11, es_box=v_es_box_12, tmp_1=v_tmp_1_12}  AuxVars[]  AssignedVars[tmp_1] 9156#L688_accept_S1 [2132] L688_accept_S1-->L689_accept_S1: Formula: (= v_hdr.tcp.sequence_54 (+ (mod v_hdr.tcp.sequence_55 256) (* (- 1) (mod v_hdr.tcp.sequence_55 65536)) v_hdr.tcp.sequence_55 (* 256 v_tmp_1_14)))  InVars {hdr.tcp.sequence=v_hdr.tcp.sequence_55, tmp_1=v_tmp_1_14}  OutVars{hdr.tcp.sequence=v_hdr.tcp.sequence_54, tmp_1=v_tmp_1_14}  AuxVars[]  AssignedVars[hdr.tcp.sequence] 8580#L689_accept_S1 [1560] L689_accept_S1-->L691_accept_S1: Formula: (= (mod (div (+ (* (- 1) (mod v_hdr.tcp.sequence_65 65536)) v_hdr.tcp.sequence_65) 65536) 256) v_tmp_4_14)  InVars {hdr.tcp.sequence=v_hdr.tcp.sequence_65}  OutVars{hdr.tcp.sequence=v_hdr.tcp.sequence_65, tmp_4=v_tmp_4_14}  AuxVars[]  AssignedVars[tmp_4] 8581#L691_accept_S1 [1782] L691_accept_S1-->L692_accept_S1: Formula: (= v_tmp_3_12 (select v_es_box_11 v_tmp_4_11))  InVars {es_box=v_es_box_11, tmp_4=v_tmp_4_11}  OutVars{tmp_3=v_tmp_3_12, tmp_4=v_tmp_4_11, es_box=v_es_box_11}  AuxVars[]  AssignedVars[tmp_3] 8913#L692_accept_S1 [1841] L692_accept_S1-->L693_accept_S1: Formula: (= (+ (* 65536 v_tmp_3_11) (mod v_hdr.tcp.sequence_46 65536) (* (- 1) (mod v_hdr.tcp.sequence_46 16777216)) v_hdr.tcp.sequence_46) v_hdr.tcp.sequence_45)  InVars {tmp_3=v_tmp_3_11, hdr.tcp.sequence=v_hdr.tcp.sequence_46}  OutVars{tmp_3=v_tmp_3_11, hdr.tcp.sequence=v_hdr.tcp.sequence_45}  AuxVars[]  AssignedVars[hdr.tcp.sequence] 8969#L693_accept_S1 [2003] L693_accept_S1-->L695_accept_S1: Formula: (= (mod (div (+ (* (- 1) (mod v_hdr.tcp.sequence_61 16777216)) v_hdr.tcp.sequence_61) 16777216) 256) v_tmp_6_12)  InVars {hdr.tcp.sequence=v_hdr.tcp.sequence_61}  OutVars{tmp_6=v_tmp_6_12, hdr.tcp.sequence=v_hdr.tcp.sequence_61}  AuxVars[]  AssignedVars[tmp_6] 8521#L695_accept_S1 [1526] L695_accept_S1-->L696_accept_S1: Formula: (= (select v_es_box_23 v_tmp_6_13) v_tmp_5_13)  InVars {es_box=v_es_box_23, tmp_6=v_tmp_6_13}  OutVars{tmp_5=v_tmp_5_13, es_box=v_es_box_23, tmp_6=v_tmp_6_13}  AuxVars[]  AssignedVars[tmp_5] 8474#L696_accept_S1 [1502] L696_accept_S1-->L697_accept_S1: Formula: (= (+ (mod v_hdr.tcp.sequence_67 16777216) (* (- 1) (mod v_hdr.tcp.sequence_67 4294967296)) v_hdr.tcp.sequence_67 (* 16777216 v_tmp_5_14)) v_hdr.tcp.sequence_66)  InVars {tmp_5=v_tmp_5_14, hdr.tcp.sequence=v_hdr.tcp.sequence_67}  OutVars{tmp_5=v_tmp_5_14, hdr.tcp.sequence=v_hdr.tcp.sequence_66}  AuxVars[]  AssignedVars[hdr.tcp.sequence] 8475#L697_accept_S1 [1914] L697_accept_S1-->L699_accept_S1: Formula: (= v_tmp_8_11 (mod (div (+ v_hdr.tcp.ackseq_46 (* (- 1) (mod 0 1))) 1) 256))  InVars {hdr.tcp.ackseq=v_hdr.tcp.ackseq_46}  OutVars{hdr.tcp.ackseq=v_hdr.tcp.ackseq_46, tmp_8=v_tmp_8_11}  AuxVars[]  AssignedVars[tmp_8] 8456#L699_accept_S1 [1496] L699_accept_S1-->L700_accept_S1: Formula: (= v_tmp_7_12 (select v_es_box_19 v_tmp_8_13))  InVars {es_box=v_es_box_19, tmp_8=v_tmp_8_13}  OutVars{tmp_7=v_tmp_7_12, es_box=v_es_box_19, tmp_8=v_tmp_8_13}  AuxVars[]  AssignedVars[tmp_7] 8457#L700_accept_S1 [1569] L700_accept_S1-->L701_accept_S1: Formula: (= v_hdr.tcp.ackseq_55 (+ v_hdr.tcp.ackseq_56 v_tmp_7_13 (mod 0 1) (* (- 1) (mod v_hdr.tcp.ackseq_56 256))))  InVars {tmp_7=v_tmp_7_13, hdr.tcp.ackseq=v_hdr.tcp.ackseq_56}  OutVars{tmp_7=v_tmp_7_13, hdr.tcp.ackseq=v_hdr.tcp.ackseq_55}  AuxVars[]  AssignedVars[hdr.tcp.ackseq] 8334#L701_accept_S1 [1437] L701_accept_S1-->L703_accept_S1: Formula: (= (mod (div (+ v_hdr.tcp.ackseq_52 (* (- 1) (mod v_hdr.tcp.ackseq_52 256))) 256) 256) v_tmp_10_13)  InVars {hdr.tcp.ackseq=v_hdr.tcp.ackseq_52}  OutVars{hdr.tcp.ackseq=v_hdr.tcp.ackseq_52, tmp_10=v_tmp_10_13}  AuxVars[]  AssignedVars[tmp_10] 8336#L703_accept_S1 [1938] L703_accept_S1-->L704_accept_S1: Formula: (= (select v_es_box_22 v_tmp_10_12) v_tmp_9_12)  InVars {es_box=v_es_box_22, tmp_10=v_tmp_10_12}  OutVars{tmp_10=v_tmp_10_12, es_box=v_es_box_22, tmp_9=v_tmp_9_12}  AuxVars[]  AssignedVars[tmp_9] 8537#L704_accept_S1 [1535] L704_accept_S1-->L705_accept_S1: Formula: (= v_hdr.tcp.ackseq_67 (+ v_hdr.tcp.ackseq_68 (* 256 v_tmp_9_14) (* (- 1) (mod v_hdr.tcp.ackseq_68 65536)) (mod v_hdr.tcp.ackseq_68 256)))  InVars {hdr.tcp.ackseq=v_hdr.tcp.ackseq_68, tmp_9=v_tmp_9_14}  OutVars{hdr.tcp.ackseq=v_hdr.tcp.ackseq_67, tmp_9=v_tmp_9_14}  AuxVars[]  AssignedVars[hdr.tcp.ackseq] 8538#L705_accept_S1 [1909] L705_accept_S1-->L707_accept_S1: Formula: (= (mod (div (+ v_hdr.tcp.ackseq_47 (* (- 1) (mod v_hdr.tcp.ackseq_47 65536))) 65536) 256) v_tmp_12_12)  InVars {hdr.tcp.ackseq=v_hdr.tcp.ackseq_47}  OutVars{hdr.tcp.ackseq=v_hdr.tcp.ackseq_47, tmp_12=v_tmp_12_12}  AuxVars[]  AssignedVars[tmp_12] 8611#L707_accept_S1 [1577] L707_accept_S1-->L708_accept_S1: Formula: (= (select v_es_box_21 v_tmp_12_13) v_tmp_11_12)  InVars {es_box=v_es_box_21, tmp_12=v_tmp_12_13}  OutVars{tmp_11=v_tmp_11_12, tmp_12=v_tmp_12_13, es_box=v_es_box_21}  AuxVars[]  AssignedVars[tmp_11] 8612#L708_accept_S1 [1868] L708_accept_S1-->L709_accept_S1: Formula: (= v_hdr.tcp.ackseq_57 (+ v_hdr.tcp.ackseq_58 (mod v_hdr.tcp.ackseq_58 65536) (* (- 1) (mod v_hdr.tcp.ackseq_58 16777216)) (* 65536 v_tmp_11_13)))  InVars {tmp_11=v_tmp_11_13, hdr.tcp.ackseq=v_hdr.tcp.ackseq_58}  OutVars{tmp_11=v_tmp_11_13, hdr.tcp.ackseq=v_hdr.tcp.ackseq_57}  AuxVars[]  AssignedVars[hdr.tcp.ackseq] 8991#L709_accept_S1 [2030] L709_accept_S1-->L711_accept_S1: Formula: (= (mod (div (+ v_hdr.tcp.ackseq_48 (* (- 1) (mod v_hdr.tcp.ackseq_48 16777216))) 16777216) 256) v_tmp_14_13)  InVars {hdr.tcp.ackseq=v_hdr.tcp.ackseq_48}  OutVars{hdr.tcp.ackseq=v_hdr.tcp.ackseq_48, tmp_14=v_tmp_14_13}  AuxVars[]  AssignedVars[tmp_14] 8765#L711_accept_S1 [1673] L711_accept_S1-->L712_accept_S1: Formula: (= (select v_es_box_20 v_tmp_14_12) v_tmp_13_11)  InVars {es_box=v_es_box_20, tmp_14=v_tmp_14_12}  OutVars{es_box=v_es_box_20, tmp_13=v_tmp_13_11, tmp_14=v_tmp_14_12}  AuxVars[]  AssignedVars[tmp_13] 8766#L712_accept_S1 [1844] L712_accept_S1-->read_esboxFINAL_accept_S1: Formula: (= v_hdr.tcp.ackseq_63 (+ v_hdr.tcp.ackseq_64 (* (- 1) (mod v_hdr.tcp.ackseq_64 4294967296)) (mod v_hdr.tcp.ackseq_64 16777216) (* 16777216 v_tmp_13_13)))  InVars {hdr.tcp.ackseq=v_hdr.tcp.ackseq_64, tmp_13=v_tmp_13_13}  OutVars{hdr.tcp.ackseq=v_hdr.tcp.ackseq_63, tmp_13=v_tmp_13_13}  AuxVars[]  AssignedVars[hdr.tcp.ackseq] 8971#read_esboxFINAL_accept_S1 [2137] read_esboxFINAL_accept_S1-->read_esboxEXIT_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 9074#read_esboxEXIT_accept_S1 >[2290] read_esboxEXIT_accept_S1-->L268-D81: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8832#L268-D81 [1719] L268-D81-->L268_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8633#L268_accept_S1 [1979] L268_accept_S1-->L268_accept_S1-D27: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 8632#L268_accept_S1-D27 [1592] L268_accept_S1-D27-->do_read_countENTRY_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8634#do_read_countENTRY_accept_S1 [2107] do_read_countENTRY_accept_S1-->do_read_countFINAL_accept_S1: Formula: (= (select v_count_16 0) v_temp_0_28)  InVars {count=v_count_16}  OutVars{count=v_count_16, temp_0=v_temp_0_28}  AuxVars[]  AssignedVars[temp_0] 9084#do_read_countFINAL_accept_S1 [1987] do_read_countFINAL_accept_S1-->do_read_countEXIT_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8637#do_read_countEXIT_accept_S1 >[2257] do_read_countEXIT_accept_S1-->L269-D83: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8638#L269-D83 [1687] L269-D83-->L269_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8790#L269_accept_S1 [2200] L269_accept_S1-->L271_accept_S1: Formula: (= v_temp_0_18 0)  InVars {temp_0=v_temp_0_18}  OutVars{temp_0=v_temp_0_18}  AuxVars[]  AssignedVars[] 8741#L271_accept_S1 [1906] L271_accept_S1-->L271_accept_S1-D7: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 9025#L271_accept_S1-D7 [2123] L271_accept_S1-D7-->creatipv6_1ENTRY_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8797#creatipv6_1ENTRY_accept_S1 [1692] creatipv6_1ENTRY_accept_S1-->L346_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8798#L346_accept_S1 [1769] L346_accept_S1-->L348_accept_S1: Formula: (= 6 v_hdr.ipv6.version_22)  InVars {}  OutVars{hdr.ipv6.version=v_hdr.ipv6.version_22}  AuxVars[]  AssignedVars[hdr.ipv6.version] 8900#L348_accept_S1 [2234] L348_accept_S1-->L349_accept_S1: Formula: (= v_hdr.ipv6.payloadlen_21 v_hdr.ipv4.totalLen_21)  InVars {hdr.ipv4.totalLen=v_hdr.ipv4.totalLen_21}  OutVars{hdr.ipv4.totalLen=v_hdr.ipv4.totalLen_21, hdr.ipv6.payloadlen=v_hdr.ipv6.payloadlen_21}  AuxVars[]  AssignedVars[hdr.ipv6.payloadlen] 9152#L349_accept_S1 [2126] L349_accept_S1-->L350_accept_S1: Formula: (= v_hdr.ipv6.nextheader_27 65)  InVars {}  OutVars{hdr.ipv6.nextheader=v_hdr.ipv6.nextheader_27}  AuxVars[]  AssignedVars[hdr.ipv6.nextheader] 9144#L350_accept_S1 [2108] L350_accept_S1-->L351_accept_S1: Formula: (= 64 v_hdr.ipv6.hoplimit_21)  InVars {}  OutVars{hdr.ipv6.hoplimit=v_hdr.ipv6.hoplimit_21}  AuxVars[]  AssignedVars[hdr.ipv6.hoplimit] 9140#L351_accept_S1 [2100] L351_accept_S1-->L352_accept_S1: Formula: (= v_hdr.ethernet.etherType_29 34525)  InVars {}  OutVars{hdr.ethernet.etherType=v_hdr.ethernet.etherType_29}  AuxVars[]  AssignedVars[hdr.ethernet.etherType] 9056#L352_accept_S1 [1946] L352_accept_S1-->L353_accept_S1: Formula: (= v_hdr.ipv6.srcAddr_18 42545680458834377588178886921629466626)  InVars {}  OutVars{hdr.ipv6.srcAddr=v_hdr.ipv6.srcAddr_18}  AuxVars[]  AssignedVars[hdr.ipv6.srcAddr] 8999#L353_accept_S1 [1876] L353_accept_S1-->L354_accept_S1: Formula: (= v_hdr.ipv6.dstAddr_19 42540765144257160172006968799218772356)  InVars {}  OutVars{hdr.ipv6.dstAddr=v_hdr.ipv6.dstAddr_19}  AuxVars[]  AssignedVars[hdr.ipv6.dstAddr] 8858#L354_accept_S1 [1737] L354_accept_S1-->L355_accept_S1: Formula: (= v_hdr.ethernet.srcAddr_32 19799850608873)  InVars {}  OutVars{hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_32}  AuxVars[]  AssignedVars[hdr.ethernet.srcAddr] 8833#L355_accept_S1 [1718] L355_accept_S1-->creatipv6_1FINAL_accept_S1: Formula: (= 174219185552744 v_hdr.ethernet.dstAddr_42)  InVars {}  OutVars{hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_42}  AuxVars[]  AssignedVars[hdr.ethernet.dstAddr] 8834#creatipv6_1FINAL_accept_S1 [1839] creatipv6_1FINAL_accept_S1-->creatipv6_1EXIT_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8740#creatipv6_1EXIT_accept_S1 >[2279] creatipv6_1EXIT_accept_S1-->L271-1-D61: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8358#L271-1-D61 [1447] L271-1-D61-->L271-1_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8359#L271-1_accept_S1 [1904] L271-1_accept_S1-->L271-1_accept_S1-D33: Formula: (and (= v_count.write_indexInParam_1 0) (= v_count.write_valueInParam_1 1))  InVars {}  OutVars{count.write_index=v_count.write_indexInParam_1, count.write_value=v_count.write_valueInParam_1}  AuxVars[]  AssignedVars[count.write_index, count.write_value]< 8557#L271-1_accept_S1-D33 [1547] L271-1_accept_S1-D33-->count.writeENTRY_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8558#count.writeENTRY_accept_S1 [1796] count.writeENTRY_accept_S1-->count.writeFINAL_accept_S1: Formula: (= (store v_count_19 v_count.write_index_2 v_count.write_value_2) v_count_18)  InVars {count=v_count_19, count.write_index=v_count.write_index_2, count.write_value=v_count.write_value_2}  OutVars{count=v_count_18, count.write_index=v_count.write_index_2, count.write_value=v_count.write_value_2}  AuxVars[]  AssignedVars[count] 9223#count.writeFINAL_accept_S1 [1751] count.writeFINAL_accept_S1-->count.writeEXIT_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 9191#count.writeEXIT_accept_S1 >[2259] count.writeEXIT_accept_S1-->L273-D97: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: (and (= v_count.write_indexInParam_1 0) (= v_count.write_valueInParam_1 1))  InVars {}  OutVars{count.write_index=v_count.write_indexInParam_1, count.write_value=v_count.write_valueInParam_1}  AuxVars[]  AssignedVars[count.write_index, count.write_value] 8808#L273-D97 [1701] L273-D97-->L273_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8809#L273_accept_S1 [1720] L273_accept_S1-->L275_accept_S1: Formula: (= v_standard_metadata.egress_spec_21 1)  InVars {}  OutVars{standard_metadata.egress_spec=v_standard_metadata.egress_spec_21}  AuxVars[]  AssignedVars[standard_metadata.egress_spec] 8652#L275_accept_S1 [1603] L275_accept_S1-->L276_accept_S1: Formula: (= 1 v_standard_metadata.egress_port_26)  InVars {}  OutVars{standard_metadata.egress_port=v_standard_metadata.egress_port_26}  AuxVars[]  AssignedVars[standard_metadata.egress_port] 8653#L276_accept_S1 [1805] L276_accept_S1-->L270-1_accept_S1: Formula: v_forward_27  InVars {}  OutVars{forward=v_forward_27}  AuxVars[]  AssignedVars[forward] 8758#L270-1_accept_S1 [1668] L270-1_accept_S1-->L278-1_accept_S1: Formula: (not (= v_temp_0_21 1))  InVars {temp_0=v_temp_0_21}  OutVars{temp_0=v_temp_0_21}  AuxVars[]  AssignedVars[] 8759#L278-1_accept_S1 [2073] L278-1_accept_S1-->L258_accept_S1: Formula: (not (= v_temp_0_17 2))  InVars {temp_0=v_temp_0_17}  OutVars{temp_0=v_temp_0_17}  AuxVars[]  AssignedVars[] 9212#L258_accept_S1 [1869] L258_accept_S1-->MyIngressEXIT_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 9331#MyIngressEXIT_accept_S1 >[2343] MyIngressEXIT_accept_S1-->L562-D107: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 9329#L562-D107 [1992] L562-D107-->L562_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 8676#L562_accept_S1 [2153] L562_accept_S1-->L562_accept_S1-D49: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 9327#L562_accept_S1-D49 [2198] L562_accept_S1-D49-->MyEgressENTRY_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 9330#MyEgressENTRY_accept_S1 [1505] MyEgressENTRY_accept_S1-->L249_accept_S1: Formula: (or (not v_hdr.tcp.valid_34) (not (= 0 v_standard_metadata.egress_port_36)))  InVars {standard_metadata.egress_port=v_standard_metadata.egress_port_36, hdr.tcp.valid=v_hdr.tcp.valid_34}  OutVars{standard_metadata.egress_port=v_standard_metadata.egress_port_36, hdr.tcp.valid=v_hdr.tcp.valid_34}  AuxVars[]  AssignedVars[] 9328#L249_accept_S1 [1553] L249_accept_S1-->MyEgressEXIT_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 9326#MyEgressEXIT_accept_S1 >[2276] MyEgressEXIT_accept_S1-->L563-D89: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 9325#L563-D89 [1774] L563-D89-->L563_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 9255#L563_accept_S1 [2161] L563_accept_S1-->L563_accept_S1-D31: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 9256#L563_accept_S1-D31 [1990] L563_accept_S1-D31-->MyComputeChecksumFINAL_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 9258#MyComputeChecksumFINAL_accept_S1 [1810] MyComputeChecksumFINAL_accept_S1-->MyComputeChecksumEXIT_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 9254#MyComputeChecksumEXIT_accept_S1 >[2305] MyComputeChecksumEXIT_accept_S1-->L564-D109: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 9252#L564-D109 [1915] L564-D109-->L564_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 9249#L564_accept_S1 [1985] L564_accept_S1-->L565-1_accept_S1: Formula: v_forward_32  InVars {forward=v_forward_32}  OutVars{forward=v_forward_32}  AuxVars[]  AssignedVars[] 9247#L565-1_accept_S1 [2058] L565-1_accept_S1-->L569_accept_S1: Formula: (let ((.cse0 (= v__old_hdr.ethernet.srcAddr_15 0))) (or (and .cse0 (not v__p4ltl_0_7)) (and v__p4ltl_0_7 (not .cse0))))  InVars {_old_hdr.ethernet.srcAddr=v__old_hdr.ethernet.srcAddr_15}  OutVars{_p4ltl_0=v__p4ltl_0_7, _old_hdr.ethernet.srcAddr=v__old_hdr.ethernet.srcAddr_15}  AuxVars[]  AssignedVars[_p4ltl_0] 9245#L569_accept_S1 [1627] L569_accept_S1-->L570_accept_S1: Formula: (let ((.cse0 (= 2071690107 v__old_hdr.ipv4.dstAddr_15))) (or (and v__p4ltl_1_7 (not .cse0)) (and .cse0 (not v__p4ltl_1_7))))  InVars {_old_hdr.ipv4.dstAddr=v__old_hdr.ipv4.dstAddr_15}  OutVars{_old_hdr.ipv4.dstAddr=v__old_hdr.ipv4.dstAddr_15, _p4ltl_1=v__p4ltl_1_7}  AuxVars[]  AssignedVars[_p4ltl_1] 9242#L570_accept_S1 [2010] L570_accept_S1-->L571_accept_S1: Formula: (let ((.cse0 (= 281474976710655 v__old_hdr.ethernet.dstAddr_14))) (or (and v__p4ltl_2_6 (not .cse0)) (and .cse0 (not v__p4ltl_2_6))))  InVars {_old_hdr.ethernet.dstAddr=v__old_hdr.ethernet.dstAddr_14}  OutVars{_p4ltl_2=v__p4ltl_2_6, _old_hdr.ethernet.dstAddr=v__old_hdr.ethernet.dstAddr_14}  AuxVars[]  AssignedVars[_p4ltl_2] 9239#L571_accept_S1 [2046] L571_accept_S1-->mainFINAL_accept_S1: Formula: (let ((.cse0 (= v_standard_metadata.ingress_port_20 0))) (or (and (not v__p4ltl_3_7) (not .cse0)) (and v__p4ltl_3_7 .cse0)))  InVars {standard_metadata.ingress_port=v_standard_metadata.ingress_port_20}  OutVars{standard_metadata.ingress_port=v_standard_metadata.ingress_port_20, _p4ltl_3=v__p4ltl_3_7}  AuxVars[]  AssignedVars[_p4ltl_3] 9236#mainFINAL_accept_S1 [1800] mainFINAL_accept_S1-->mainEXIT_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 9232#mainEXIT_accept_S1 >[2336] mainEXIT_accept_S1-->L577-1-D71: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 9226#L577-1-D71 [1433] L577-1-D71-->L577-1_accept_S1: Formula: (and v__p4ltl_3_11 v__p4ltl_2_11 v__p4ltl_1_11 v__p4ltl_0_11 (or (not v__p4ltl_2_11) (not v__p4ltl_0_11) (not v__p4ltl_3_11) (not v__p4ltl_1_11) (= 1 v_standard_metadata.egress_port_32)))  InVars {_p4ltl_2=v__p4ltl_2_11, standard_metadata.egress_port=v_standard_metadata.egress_port_32, _p4ltl_3=v__p4ltl_3_11, _p4ltl_0=v__p4ltl_0_11, _p4ltl_1=v__p4ltl_1_11}  OutVars{_p4ltl_2=v__p4ltl_2_11, standard_metadata.egress_port=v_standard_metadata.egress_port_32, _p4ltl_3=v__p4ltl_3_11, _p4ltl_0=v__p4ltl_0_11, _p4ltl_1=v__p4ltl_1_11}  AuxVars[]  AssignedVars[] 8442#L577-1_accept_S1 
[2023-01-16 05:55:43,984 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2023-01-16 05:55:43,984 INFO  L85        PathProgramCache]: Analyzing trace with hash -1107163318, now seen corresponding path program 1 times
[2023-01-16 05:55:43,985 INFO  L118   FreeRefinementEngine]: Executing refinement strategy CAMEL
[2023-01-16 05:55:43,985 INFO  L333   FreeRefinementEngine]: Using trace check IpTcStrategyModuleSmtInterpolCraig [1827907678]
[2023-01-16 05:55:43,985 INFO  L95    rtionOrderModulation]: Keeping assertion order NOT_INCREMENTALLY
[2023-01-16 05:55:43,985 INFO  L127          SolverBuilder]: Constructing new instance of SMTInterpol with explicit timeout -1 ms and remaining time -1 ms
[2023-01-16 05:55:44,018 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is sat
[2023-01-16 05:55:44,019 INFO  L352             TraceCheck]: Trace is feasible, we will do another trace check, this time with branch encoders.
[2023-01-16 05:55:44,058 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is sat
[2023-01-16 05:55:44,325 INFO  L130   FreeRefinementEngine]: Strategy CAMEL found a feasible trace
[2023-01-16 05:55:44,325 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2023-01-16 05:55:44,326 INFO  L85        PathProgramCache]: Analyzing trace with hash -1722451648, now seen corresponding path program 1 times
[2023-01-16 05:55:44,326 INFO  L118   FreeRefinementEngine]: Executing refinement strategy CAMEL
[2023-01-16 05:55:44,326 INFO  L333   FreeRefinementEngine]: Using trace check IpTcStrategyModuleSmtInterpolCraig [945444257]
[2023-01-16 05:55:44,326 INFO  L95    rtionOrderModulation]: Keeping assertion order NOT_INCREMENTALLY
[2023-01-16 05:55:44,326 INFO  L127          SolverBuilder]: Constructing new instance of SMTInterpol with explicit timeout -1 ms and remaining time -1 ms
[2023-01-16 05:55:44,357 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is sat
[2023-01-16 05:55:44,357 INFO  L352             TraceCheck]: Trace is feasible, we will do another trace check, this time with branch encoders.
[2023-01-16 05:55:44,385 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is sat
[2023-01-16 05:55:44,565 INFO  L130   FreeRefinementEngine]: Strategy CAMEL found a feasible trace
[2023-01-16 05:55:44,565 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2023-01-16 05:55:44,565 INFO  L85        PathProgramCache]: Analyzing trace with hash -31934569, now seen corresponding path program 1 times
[2023-01-16 05:55:44,565 INFO  L118   FreeRefinementEngine]: Executing refinement strategy CAMEL
[2023-01-16 05:55:44,566 INFO  L333   FreeRefinementEngine]: Using trace check IpTcStrategyModuleSmtInterpolCraig [865375930]
[2023-01-16 05:55:44,566 INFO  L95    rtionOrderModulation]: Keeping assertion order NOT_INCREMENTALLY
[2023-01-16 05:55:44,566 INFO  L127          SolverBuilder]: Constructing new instance of SMTInterpol with explicit timeout -1 ms and remaining time -1 ms
[2023-01-16 05:55:44,607 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-01-16 05:55:44,798 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 2
[2023-01-16 05:55:44,827 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-01-16 05:55:44,932 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 1
[2023-01-16 05:55:44,939 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-01-16 05:55:44,956 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 141
[2023-01-16 05:55:44,958 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-01-16 05:55:44,967 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 1
[2023-01-16 05:55:44,968 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-01-16 05:55:44,969 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 154
[2023-01-16 05:55:44,971 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-01-16 05:55:45,007 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 159
[2023-01-16 05:55:45,016 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-01-16 05:55:45,032 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 4
[2023-01-16 05:55:45,033 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-01-16 05:55:45,034 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 1
[2023-01-16 05:55:45,035 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-01-16 05:55:45,049 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 15
[2023-01-16 05:55:45,052 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-01-16 05:55:45,063 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 44
[2023-01-16 05:55:45,064 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-01-16 05:55:45,075 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 51
[2023-01-16 05:55:45,077 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-01-16 05:55:45,085 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 66
[2023-01-16 05:55:45,088 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-01-16 05:55:45,119 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 240
[2023-01-16 05:55:45,122 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-01-16 05:55:45,125 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 246
[2023-01-16 05:55:45,126 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-01-16 05:55:45,131 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 263
[2023-01-16 05:55:45,164 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-01-16 05:55:45,200 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 1
[2023-01-16 05:55:45,211 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-01-16 05:55:45,220 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 141
[2023-01-16 05:55:45,229 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-01-16 05:55:45,232 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 1
[2023-01-16 05:55:45,233 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-01-16 05:55:45,234 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 154
[2023-01-16 05:55:45,236 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-01-16 05:55:45,237 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 159
[2023-01-16 05:55:45,248 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-01-16 05:55:45,271 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 4
[2023-01-16 05:55:45,274 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-01-16 05:55:45,275 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 1
[2023-01-16 05:55:45,275 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-01-16 05:55:45,276 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 15
[2023-01-16 05:55:45,281 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-01-16 05:55:45,284 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 44
[2023-01-16 05:55:45,285 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-01-16 05:55:45,293 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 51
[2023-01-16 05:55:45,295 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-01-16 05:55:45,297 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 66
[2023-01-16 05:55:45,298 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-01-16 05:55:45,299 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 240
[2023-01-16 05:55:45,302 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-01-16 05:55:45,303 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 246
[2023-01-16 05:55:45,305 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-01-16 05:55:45,307 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2023-01-16 05:55:45,307 INFO  L136   FreeRefinementEngine]: Strategy CAMEL found an infeasible trace
[2023-01-16 05:55:45,307 INFO  L333   FreeRefinementEngine]: Using interpolant generator IpTcStrategyModuleSmtInterpolCraig [865375930]
[2023-01-16 05:55:45,308 INFO  L157   FreeRefinementEngine]: IpTcStrategyModuleSmtInterpolCraig [865375930] provided 1 perfect and 0 imperfect interpolant sequences
[2023-01-16 05:55:45,308 INFO  L184   FreeRefinementEngine]: Found 1 perfect and 0 imperfect interpolant sequences.
[2023-01-16 05:55:45,308 INFO  L197   FreeRefinementEngine]: Number of different interpolants: perfect sequences [19] imperfect sequences [] total 19
[2023-01-16 05:55:45,308 INFO  L121   tionRefinementEngine]: Using interpolant automaton builder IpAbStrategyModuleStraightlineAll [648313708]
[2023-01-16 05:55:45,308 INFO  L85    oduleStraightlineAll]: Using 1 perfect interpolants to construct interpolant automaton
[2023-01-16 05:55:45,308 INFO  L100   FreeRefinementEngine]: Using predicate unifier PredicateUnifier provided by strategy CAMEL
[2023-01-16 05:55:45,309 INFO  L143   InterpolantAutomaton]: Constructing interpolant automaton starting with 19 interpolants.
[2023-01-16 05:55:45,309 INFO  L145   InterpolantAutomaton]: CoverageRelationStatistics Valid=57, Invalid=285, Unknown=0, NotChecked=0, Total=342
[2023-01-16 05:55:45,309 INFO  L87              Difference]: Start difference. First operand 1153 states and 1211 transitions. cyclomatic complexity: 59 Second operand  has 19 states, 19 states have (on average 24.526315789473685) internal successors, (466), 9 states have internal predecessors, (466), 5 states have call successors, (29), 12 states have call predecessors, (29), 5 states have return successors, (28), 7 states have call predecessors, (28), 5 states have call successors, (28)
[2023-01-16 05:55:54,777 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2023-01-16 05:55:54,778 INFO  L93              Difference]: Finished difference Result 2205 states and 2378 transitions.
[2023-01-16 05:55:54,778 INFO  L141   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 70 states. 
[2023-01-16 05:55:54,779 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2205 states and 2378 transitions.
[2023-01-16 05:55:54,788 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 30
[2023-01-16 05:55:54,798 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2205 states to 2205 states and 2378 transitions.
[2023-01-16 05:55:54,798 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2023-01-16 05:55:54,798 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 4
[2023-01-16 05:55:54,798 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2205 states and 2378 transitions.
[2023-01-16 05:55:54,802 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2023-01-16 05:55:54,802 INFO  L369   hiAutomatonCegarLoop]: Abstraction has 2205 states and 2378 transitions.
[2023-01-16 05:55:54,804 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2205 states and 2378 transitions.
[2023-01-16 05:55:54,841 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2205 to 2029.
[2023-01-16 05:55:54,843 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand  has 2029 states, 1738 states have (on average 1.047180667433832) internal successors, (1820), 1744 states have internal predecessors, (1820), 147 states have call successors, (147), 127 states have call predecessors, (147), 144 states have return successors, (181), 158 states have call predecessors, (181), 146 states have call successors, (181)
[2023-01-16 05:55:54,847 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2029 states to 2029 states and 2148 transitions.
[2023-01-16 05:55:54,847 INFO  L392   hiAutomatonCegarLoop]: Abstraction has 2029 states and 2148 transitions.
[2023-01-16 05:55:54,847 INFO  L399   stractBuchiCegarLoop]: Abstraction has 2029 states and 2148 transitions.
[2023-01-16 05:55:54,847 INFO  L287   stractBuchiCegarLoop]: ======== Iteration 5 ============
[2023-01-16 05:55:54,848 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2029 states and 2148 transitions.
[2023-01-16 05:55:54,851 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 15
[2023-01-16 05:55:54,851 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2023-01-16 05:55:54,852 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2023-01-16 05:55:54,855 INFO  L179   hiAutomatonCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2023-01-16 05:55:54,856 INFO  L180   hiAutomatonCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2023-01-16 05:55:54,859 INFO  L752   eck$LassoCheckResult]: Stem: 12981#ULTIMATE.startENTRY_NONWA [1500] ULTIMATE.startENTRY_NONWA-->L577-1_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 13120#L577-1_T0_init [1466] L577-1_T0_init-->L577_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13898#L577_T0_init [2074] L577_T0_init-->L577_T0_init-D54: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 13952#L577_T0_init-D54 [1959] L577_T0_init-D54-->mainENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13945#mainENTRY_T0_init [1819] mainENTRY_T0_init-->mainENTRY_T0_init-D40: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 13946#mainENTRY_T0_init-D40 [1649] mainENTRY_T0_init-D40-->havocProcedureENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14148#havocProcedureENTRY_T0_init [1641] havocProcedureENTRY_T0_init-->L421_T0_init: Formula: (not v_drop_12)  InVars {}  OutVars{drop=v_drop_12}  AuxVars[]  AssignedVars[drop] 14147#L421_T0_init [2158] L421_T0_init-->L422_T0_init: Formula: (not v_forward_17)  InVars {}  OutVars{forward=v_forward_17}  AuxVars[]  AssignedVars[forward] 14146#L422_T0_init [2104] L422_T0_init-->L423_T0_init: Formula: (= v_standard_metadata.ingress_port_14 0)  InVars {}  OutVars{standard_metadata.ingress_port=v_standard_metadata.ingress_port_14}  AuxVars[]  AssignedVars[standard_metadata.ingress_port] 14145#L423_T0_init [1901] L423_T0_init-->L424_T0_init: Formula: (= v_standard_metadata.egress_spec_15 0)  InVars {}  OutVars{standard_metadata.egress_spec=v_standard_metadata.egress_spec_15}  AuxVars[]  AssignedVars[standard_metadata.egress_spec] 14144#L424_T0_init [1962] L424_T0_init-->L425_T0_init: Formula: (= 0 v_standard_metadata.egress_port_18)  InVars {}  OutVars{standard_metadata.egress_port=v_standard_metadata.egress_port_18}  AuxVars[]  AssignedVars[standard_metadata.egress_port] 14143#L425_T0_init [1951] L425_T0_init-->L426_T0_init: Formula: (= v_standard_metadata.instance_type_9 0)  InVars {}  OutVars{standard_metadata.instance_type=v_standard_metadata.instance_type_9}  AuxVars[]  AssignedVars[standard_metadata.instance_type] 14142#L426_T0_init [1709] L426_T0_init-->L427_T0_init: Formula: (= v_standard_metadata.packet_length_8 0)  InVars {}  OutVars{standard_metadata.packet_length=v_standard_metadata.packet_length_8}  AuxVars[]  AssignedVars[standard_metadata.packet_length] 14141#L427_T0_init [1453] L427_T0_init-->L428_T0_init: Formula: (= v_standard_metadata.enq_timestamp_9 0)  InVars {}  OutVars{standard_metadata.enq_timestamp=v_standard_metadata.enq_timestamp_9}  AuxVars[]  AssignedVars[standard_metadata.enq_timestamp] 14140#L428_T0_init [1578] L428_T0_init-->L429_T0_init: Formula: (= v_standard_metadata.enq_qdepth_9 0)  InVars {}  OutVars{standard_metadata.enq_qdepth=v_standard_metadata.enq_qdepth_9}  AuxVars[]  AssignedVars[standard_metadata.enq_qdepth] 14139#L429_T0_init [1855] L429_T0_init-->L430_T0_init: Formula: (= v_standard_metadata.deq_timedelta_9 0)  InVars {}  OutVars{standard_metadata.deq_timedelta=v_standard_metadata.deq_timedelta_9}  AuxVars[]  AssignedVars[standard_metadata.deq_timedelta] 14138#L430_T0_init [1521] L430_T0_init-->L431_T0_init: Formula: (= v_standard_metadata.deq_qdepth_8 0)  InVars {}  OutVars{standard_metadata.deq_qdepth=v_standard_metadata.deq_qdepth_8}  AuxVars[]  AssignedVars[standard_metadata.deq_qdepth] 14137#L431_T0_init [1609] L431_T0_init-->L432_T0_init: Formula: (= v_standard_metadata.ingress_global_timestamp_8 0)  InVars {}  OutVars{standard_metadata.ingress_global_timestamp=v_standard_metadata.ingress_global_timestamp_8}  AuxVars[]  AssignedVars[standard_metadata.ingress_global_timestamp] 14136#L432_T0_init [2111] L432_T0_init-->L433_T0_init: Formula: (= v_standard_metadata.egress_global_timestamp_9 0)  InVars {}  OutVars{standard_metadata.egress_global_timestamp=v_standard_metadata.egress_global_timestamp_9}  AuxVars[]  AssignedVars[standard_metadata.egress_global_timestamp] 14135#L433_T0_init [1775] L433_T0_init-->L434_T0_init: Formula: (= 0 v_standard_metadata.mcast_grp_9)  InVars {}  OutVars{standard_metadata.mcast_grp=v_standard_metadata.mcast_grp_9}  AuxVars[]  AssignedVars[standard_metadata.mcast_grp] 14134#L434_T0_init [2007] L434_T0_init-->L435_T0_init: Formula: (= v_standard_metadata.egress_rid_9 0)  InVars {}  OutVars{standard_metadata.egress_rid=v_standard_metadata.egress_rid_9}  AuxVars[]  AssignedVars[standard_metadata.egress_rid] 14133#L435_T0_init [1510] L435_T0_init-->L436_T0_init: Formula: (= v_standard_metadata.checksum_error_8 0)  InVars {}  OutVars{standard_metadata.checksum_error=v_standard_metadata.checksum_error_8}  AuxVars[]  AssignedVars[standard_metadata.checksum_error] 14132#L436_T0_init [2011] L436_T0_init-->L437_T0_init: Formula: (= v_standard_metadata.priority_9 0)  InVars {}  OutVars{standard_metadata.priority=v_standard_metadata.priority_9}  AuxVars[]  AssignedVars[standard_metadata.priority] 14131#L437_T0_init [1628] L437_T0_init-->L438_T0_init: Formula: (not v_hdr.ethernet.valid_14)  InVars {}  OutVars{hdr.ethernet.valid=v_hdr.ethernet.valid_14}  AuxVars[]  AssignedVars[hdr.ethernet.valid] 14130#L438_T0_init [1593] L438_T0_init-->L439_T0_init: Formula: (= v_emit_41 (store v_emit_42 v_hdr.ethernet_3 false))  InVars {emit=v_emit_42, hdr.ethernet=v_hdr.ethernet_3}  OutVars{emit=v_emit_41, hdr.ethernet=v_hdr.ethernet_3}  AuxVars[]  AssignedVars[emit] 14129#L439_T0_init [2186] L439_T0_init-->L440_T0_init: Formula: true  InVars {}  OutVars{hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_28}  AuxVars[]  AssignedVars[hdr.ethernet.dstAddr] 14128#L440_T0_init [1464] L440_T0_init-->L441_T0_init: Formula: (= v_hdr.ethernet.dstAddr_29 v__old_hdr.ethernet.dstAddr_12)  InVars {hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_29}  OutVars{_old_hdr.ethernet.dstAddr=v__old_hdr.ethernet.dstAddr_12, hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_29}  AuxVars[]  AssignedVars[_old_hdr.ethernet.dstAddr] 14127#L441_T0_init [1474] L441_T0_init-->L442_T0_init: Formula: (= v_hdr.ethernet.dstAddr_26 v__old_hdr.ethernet.dstAddr_10)  InVars {hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_26}  OutVars{_old_hdr.ethernet.dstAddr=v__old_hdr.ethernet.dstAddr_10, hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_26}  AuxVars[]  AssignedVars[_old_hdr.ethernet.dstAddr] 14126#L442_T0_init [1747] L442_T0_init-->L443_T0_init: Formula: true  InVars {}  OutVars{hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_26}  AuxVars[]  AssignedVars[hdr.ethernet.srcAddr] 14125#L443_T0_init [1848] L443_T0_init-->L444_T0_init: Formula: (= v_hdr.ethernet.srcAddr_23 v__old_hdr.ethernet.srcAddr_10)  InVars {hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_23}  OutVars{hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_23, _old_hdr.ethernet.srcAddr=v__old_hdr.ethernet.srcAddr_10}  AuxVars[]  AssignedVars[_old_hdr.ethernet.srcAddr] 14124#L444_T0_init [1686] L444_T0_init-->L445_T0_init: Formula: (= v_hdr.ethernet.srcAddr_25 v__old_hdr.ethernet.srcAddr_12)  InVars {hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_25}  OutVars{hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_25, _old_hdr.ethernet.srcAddr=v__old_hdr.ethernet.srcAddr_12}  AuxVars[]  AssignedVars[_old_hdr.ethernet.srcAddr] 14123#L445_T0_init [2211] L445_T0_init-->L446_T0_init: Formula: true  InVars {}  OutVars{hdr.ethernet.etherType=v_hdr.ethernet.etherType_24}  AuxVars[]  AssignedVars[hdr.ethernet.etherType] 14122#L446_T0_init [2078] L446_T0_init-->L447_T0_init: Formula: (and (<= 0 v_hdr.ethernet.etherType_22) (<= v_hdr.ethernet.etherType_22 65536))  InVars {hdr.ethernet.etherType=v_hdr.ethernet.etherType_22}  OutVars{hdr.ethernet.etherType=v_hdr.ethernet.etherType_22}  AuxVars[]  AssignedVars[] 14121#L447_T0_init [1735] L447_T0_init-->L448_T0_init: Formula: (not v_hdr.ipv6.valid_18)  InVars {}  OutVars{hdr.ipv6.valid=v_hdr.ipv6.valid_18}  AuxVars[]  AssignedVars[hdr.ipv6.valid] 14120#L448_T0_init [1792] L448_T0_init-->L449_T0_init: Formula: (= v_emit_27 (store v_emit_28 v_hdr.ipv6_10 false))  InVars {emit=v_emit_28, hdr.ipv6=v_hdr.ipv6_10}  OutVars{emit=v_emit_27, hdr.ipv6=v_hdr.ipv6_10}  AuxVars[]  AssignedVars[emit] 14119#L449_T0_init [2175] L449_T0_init-->L450_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv6.version=v_hdr.ipv6.version_19}  AuxVars[]  AssignedVars[hdr.ipv6.version] 14118#L450_T0_init [1676] L450_T0_init-->L451_T0_init: Formula: (and (<= v_hdr.ipv6.version_20 16) (<= 0 v_hdr.ipv6.version_20))  InVars {hdr.ipv6.version=v_hdr.ipv6.version_20}  OutVars{hdr.ipv6.version=v_hdr.ipv6.version_20}  AuxVars[]  AssignedVars[] 14117#L451_T0_init [2109] L451_T0_init-->L452_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv6.trafclass=v_hdr.ipv6.trafclass_9}  AuxVars[]  AssignedVars[hdr.ipv6.trafclass] 14116#L452_T0_init [1912] L452_T0_init-->L453_T0_init: Formula: (and (<= v_hdr.ipv6.trafclass_12 256) (<= 0 v_hdr.ipv6.trafclass_12))  InVars {hdr.ipv6.trafclass=v_hdr.ipv6.trafclass_12}  OutVars{hdr.ipv6.trafclass=v_hdr.ipv6.trafclass_12}  AuxVars[]  AssignedVars[] 14115#L453_T0_init [1908] L453_T0_init-->L454_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv6.flowlabel=v_hdr.ipv6.flowlabel_11}  AuxVars[]  AssignedVars[hdr.ipv6.flowlabel] 14114#L454_T0_init [1734] L454_T0_init-->L455_T0_init: Formula: (and (<= 0 v_hdr.ipv6.flowlabel_12) (<= v_hdr.ipv6.flowlabel_12 1048576))  InVars {hdr.ipv6.flowlabel=v_hdr.ipv6.flowlabel_12}  OutVars{hdr.ipv6.flowlabel=v_hdr.ipv6.flowlabel_12}  AuxVars[]  AssignedVars[] 14113#L455_T0_init [1825] L455_T0_init-->L456_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv6.payloadlen=v_hdr.ipv6.payloadlen_20}  AuxVars[]  AssignedVars[hdr.ipv6.payloadlen] 14112#L456_T0_init [2079] L456_T0_init-->L457_T0_init: Formula: (and (<= v_hdr.ipv6.payloadlen_17 65536) (<= 0 v_hdr.ipv6.payloadlen_17))  InVars {hdr.ipv6.payloadlen=v_hdr.ipv6.payloadlen_17}  OutVars{hdr.ipv6.payloadlen=v_hdr.ipv6.payloadlen_17}  AuxVars[]  AssignedVars[] 14111#L457_T0_init [1849] L457_T0_init-->L458_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv6.nextheader=v_hdr.ipv6.nextheader_22}  AuxVars[]  AssignedVars[hdr.ipv6.nextheader] 14110#L458_T0_init [1763] L458_T0_init-->L459_T0_init: Formula: (and (<= v_hdr.ipv6.nextheader_20 256) (<= 0 v_hdr.ipv6.nextheader_20))  InVars {hdr.ipv6.nextheader=v_hdr.ipv6.nextheader_20}  OutVars{hdr.ipv6.nextheader=v_hdr.ipv6.nextheader_20}  AuxVars[]  AssignedVars[] 14109#L459_T0_init [1982] L459_T0_init-->L460_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv6.hoplimit=v_hdr.ipv6.hoplimit_17}  AuxVars[]  AssignedVars[hdr.ipv6.hoplimit] 14108#L460_T0_init [1564] L460_T0_init-->L461_T0_init: Formula: (and (<= v_hdr.ipv6.hoplimit_20 256) (<= 0 v_hdr.ipv6.hoplimit_20))  InVars {hdr.ipv6.hoplimit=v_hdr.ipv6.hoplimit_20}  OutVars{hdr.ipv6.hoplimit=v_hdr.ipv6.hoplimit_20}  AuxVars[]  AssignedVars[] 14107#L461_T0_init [1517] L461_T0_init-->L462_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv6.srcAddr=v_hdr.ipv6.srcAddr_17}  AuxVars[]  AssignedVars[hdr.ipv6.srcAddr] 14106#L462_T0_init [1621] L462_T0_init-->L463_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv6.dstAddr=v_hdr.ipv6.dstAddr_16}  AuxVars[]  AssignedVars[hdr.ipv6.dstAddr] 14105#L463_T0_init [1462] L463_T0_init-->L464_T0_init: Formula: (not v_hdr.ipv4_tunnel.valid_20)  InVars {}  OutVars{hdr.ipv4_tunnel.valid=v_hdr.ipv4_tunnel.valid_20}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.valid] 14104#L464_T0_init [1506] L464_T0_init-->L465_T0_init: Formula: (= v_emit_29 (store v_emit_30 v_hdr.ipv4_tunnel_8 false))  InVars {emit=v_emit_30, hdr.ipv4_tunnel=v_hdr.ipv4_tunnel_8}  OutVars{emit=v_emit_29, hdr.ipv4_tunnel=v_hdr.ipv4_tunnel_8}  AuxVars[]  AssignedVars[emit] 14103#L465_T0_init [1653] L465_T0_init-->L466_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.version=v_hdr.ipv4_tunnel.version_16}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.version] 14102#L466_T0_init [1724] L466_T0_init-->L467_T0_init: Formula: (and (<= v_hdr.ipv4_tunnel.version_17 16) (<= 0 v_hdr.ipv4_tunnel.version_17))  InVars {hdr.ipv4_tunnel.version=v_hdr.ipv4_tunnel.version_17}  OutVars{hdr.ipv4_tunnel.version=v_hdr.ipv4_tunnel.version_17}  AuxVars[]  AssignedVars[] 14101#L467_T0_init [1706] L467_T0_init-->L468_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.ihl=v_hdr.ipv4_tunnel.ihl_14}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.ihl] 14100#L468_T0_init [1799] L468_T0_init-->L469_T0_init: Formula: (and (<= 0 v_hdr.ipv4_tunnel.ihl_16) (<= v_hdr.ipv4_tunnel.ihl_16 16))  InVars {hdr.ipv4_tunnel.ihl=v_hdr.ipv4_tunnel.ihl_16}  OutVars{hdr.ipv4_tunnel.ihl=v_hdr.ipv4_tunnel.ihl_16}  AuxVars[]  AssignedVars[] 14099#L469_T0_init [1860] L469_T0_init-->L470_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.diffserv=v_hdr.ipv4_tunnel.diffserv_15}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.diffserv] 14098#L470_T0_init [2116] L470_T0_init-->L471_T0_init: Formula: (and (<= v_hdr.ipv4_tunnel.diffserv_14 256) (<= 0 v_hdr.ipv4_tunnel.diffserv_14))  InVars {hdr.ipv4_tunnel.diffserv=v_hdr.ipv4_tunnel.diffserv_14}  OutVars{hdr.ipv4_tunnel.diffserv=v_hdr.ipv4_tunnel.diffserv_14}  AuxVars[]  AssignedVars[] 14097#L471_T0_init [1436] L471_T0_init-->L472_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.totalLen=v_hdr.ipv4_tunnel.totalLen_14}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.totalLen] 14096#L472_T0_init [1696] L472_T0_init-->L473_T0_init: Formula: (and (<= v_hdr.ipv4_tunnel.totalLen_15 65536) (<= 0 v_hdr.ipv4_tunnel.totalLen_15))  InVars {hdr.ipv4_tunnel.totalLen=v_hdr.ipv4_tunnel.totalLen_15}  OutVars{hdr.ipv4_tunnel.totalLen=v_hdr.ipv4_tunnel.totalLen_15}  AuxVars[]  AssignedVars[] 14095#L473_T0_init [1549] L473_T0_init-->L474_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.identification=v_hdr.ipv4_tunnel.identification_17}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.identification] 14094#L474_T0_init [1537] L474_T0_init-->L475_T0_init: Formula: (and (<= v_hdr.ipv4_tunnel.identification_16 65536) (<= 0 v_hdr.ipv4_tunnel.identification_16))  InVars {hdr.ipv4_tunnel.identification=v_hdr.ipv4_tunnel.identification_16}  OutVars{hdr.ipv4_tunnel.identification=v_hdr.ipv4_tunnel.identification_16}  AuxVars[]  AssignedVars[] 14093#L475_T0_init [1776] L475_T0_init-->L476_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.flags=v_hdr.ipv4_tunnel.flags_17}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.flags] 14092#L476_T0_init [1837] L476_T0_init-->L477_T0_init: Formula: (and (<= v_hdr.ipv4_tunnel.flags_14 8) (<= 0 v_hdr.ipv4_tunnel.flags_14))  InVars {hdr.ipv4_tunnel.flags=v_hdr.ipv4_tunnel.flags_14}  OutVars{hdr.ipv4_tunnel.flags=v_hdr.ipv4_tunnel.flags_14}  AuxVars[]  AssignedVars[] 14091#L477_T0_init [1435] L477_T0_init-->L478_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.fragOffset=v_hdr.ipv4_tunnel.fragOffset_17}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.fragOffset] 14090#L478_T0_init [1711] L478_T0_init-->L479_T0_init: Formula: (and (<= 0 v_hdr.ipv4_tunnel.fragOffset_15) (<= v_hdr.ipv4_tunnel.fragOffset_15 8192))  InVars {hdr.ipv4_tunnel.fragOffset=v_hdr.ipv4_tunnel.fragOffset_15}  OutVars{hdr.ipv4_tunnel.fragOffset=v_hdr.ipv4_tunnel.fragOffset_15}  AuxVars[]  AssignedVars[] 14089#L479_T0_init [1633] L479_T0_init-->L480_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.ttl=v_hdr.ipv4_tunnel.ttl_15}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.ttl] 14088#L480_T0_init [1566] L480_T0_init-->L481_T0_init: Formula: (and (<= 0 v_hdr.ipv4_tunnel.ttl_14) (<= v_hdr.ipv4_tunnel.ttl_14 256))  InVars {hdr.ipv4_tunnel.ttl=v_hdr.ipv4_tunnel.ttl_14}  OutVars{hdr.ipv4_tunnel.ttl=v_hdr.ipv4_tunnel.ttl_14}  AuxVars[]  AssignedVars[] 14087#L481_T0_init [2223] L481_T0_init-->L482_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.protocol=v_hdr.ipv4_tunnel.protocol_19}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.protocol] 14086#L482_T0_init [1685] L482_T0_init-->L483_T0_init: Formula: (and (<= 0 v_hdr.ipv4_tunnel.protocol_17) (<= v_hdr.ipv4_tunnel.protocol_17 256))  InVars {hdr.ipv4_tunnel.protocol=v_hdr.ipv4_tunnel.protocol_17}  OutVars{hdr.ipv4_tunnel.protocol=v_hdr.ipv4_tunnel.protocol_17}  AuxVars[]  AssignedVars[] 14085#L483_T0_init [1783] L483_T0_init-->L484_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.hdrChecksum=v_hdr.ipv4_tunnel.hdrChecksum_11}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.hdrChecksum] 14084#L484_T0_init [1857] L484_T0_init-->L485_T0_init: Formula: (and (<= v_hdr.ipv4_tunnel.hdrChecksum_10 65536) (<= 0 v_hdr.ipv4_tunnel.hdrChecksum_10))  InVars {hdr.ipv4_tunnel.hdrChecksum=v_hdr.ipv4_tunnel.hdrChecksum_10}  OutVars{hdr.ipv4_tunnel.hdrChecksum=v_hdr.ipv4_tunnel.hdrChecksum_10}  AuxVars[]  AssignedVars[] 14083#L485_T0_init [1614] L485_T0_init-->L486_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.srcAddr=v_hdr.ipv4_tunnel.srcAddr_14}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.srcAddr] 14082#L486_T0_init [1851] L486_T0_init-->L487_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.dstAddr=v_hdr.ipv4_tunnel.dstAddr_14}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.dstAddr] 14081#L487_T0_init [2051] L487_T0_init-->L488_T0_init: Formula: (not v_hdr.ipv4.valid_26)  InVars {}  OutVars{hdr.ipv4.valid=v_hdr.ipv4.valid_26}  AuxVars[]  AssignedVars[hdr.ipv4.valid] 14080#L488_T0_init [2112] L488_T0_init-->L489_T0_init: Formula: (= (store v_emit_26 v_hdr.ipv4_2 false) v_emit_25)  InVars {hdr.ipv4=v_hdr.ipv4_2, emit=v_emit_26}  OutVars{hdr.ipv4=v_hdr.ipv4_2, emit=v_emit_25}  AuxVars[]  AssignedVars[emit] 14079#L489_T0_init [2038] L489_T0_init-->L490_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.version=v_hdr.ipv4.version_12}  AuxVars[]  AssignedVars[hdr.ipv4.version] 14078#L490_T0_init [1465] L490_T0_init-->L491_T0_init: Formula: (and (<= 0 v_hdr.ipv4.version_10) (<= v_hdr.ipv4.version_10 16))  InVars {hdr.ipv4.version=v_hdr.ipv4.version_10}  OutVars{hdr.ipv4.version=v_hdr.ipv4.version_10}  AuxVars[]  AssignedVars[] 14077#L491_T0_init [2181] L491_T0_init-->L492_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.ihl=v_hdr.ipv4.ihl_10}  AuxVars[]  AssignedVars[hdr.ipv4.ihl] 14076#L492_T0_init [2179] L492_T0_init-->L493_T0_init: Formula: (and (<= v_hdr.ipv4.ihl_11 16) (<= 0 v_hdr.ipv4.ihl_11))  InVars {hdr.ipv4.ihl=v_hdr.ipv4.ihl_11}  OutVars{hdr.ipv4.ihl=v_hdr.ipv4.ihl_11}  AuxVars[]  AssignedVars[] 14075#L493_T0_init [2233] L493_T0_init-->L494_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.diffserv=v_hdr.ipv4.diffserv_12}  AuxVars[]  AssignedVars[hdr.ipv4.diffserv] 14074#L494_T0_init [2082] L494_T0_init-->L495_T0_init: Formula: (and (<= v_hdr.ipv4.diffserv_11 256) (<= 0 v_hdr.ipv4.diffserv_11))  InVars {hdr.ipv4.diffserv=v_hdr.ipv4.diffserv_11}  OutVars{hdr.ipv4.diffserv=v_hdr.ipv4.diffserv_11}  AuxVars[]  AssignedVars[] 14073#L495_T0_init [1471] L495_T0_init-->L496_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.totalLen=v_hdr.ipv4.totalLen_13}  AuxVars[]  AssignedVars[hdr.ipv4.totalLen] 14072#L496_T0_init [1495] L496_T0_init-->L497_T0_init: Formula: (and (<= 0 v_hdr.ipv4.totalLen_15) (<= v_hdr.ipv4.totalLen_15 65536))  InVars {hdr.ipv4.totalLen=v_hdr.ipv4.totalLen_15}  OutVars{hdr.ipv4.totalLen=v_hdr.ipv4.totalLen_15}  AuxVars[]  AssignedVars[] 14071#L497_T0_init [1755] L497_T0_init-->L498_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.identification=v_hdr.ipv4.identification_11}  AuxVars[]  AssignedVars[hdr.ipv4.identification] 14070#L498_T0_init [2076] L498_T0_init-->L499_T0_init: Formula: (and (<= 0 v_hdr.ipv4.identification_13) (<= v_hdr.ipv4.identification_13 65536))  InVars {hdr.ipv4.identification=v_hdr.ipv4.identification_13}  OutVars{hdr.ipv4.identification=v_hdr.ipv4.identification_13}  AuxVars[]  AssignedVars[] 14069#L499_T0_init [1671] L499_T0_init-->L500_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.flags=v_hdr.ipv4.flags_11}  AuxVars[]  AssignedVars[hdr.ipv4.flags] 14068#L500_T0_init [1997] L500_T0_init-->L501_T0_init: Formula: (and (<= 0 v_hdr.ipv4.flags_10) (<= v_hdr.ipv4.flags_10 8))  InVars {hdr.ipv4.flags=v_hdr.ipv4.flags_10}  OutVars{hdr.ipv4.flags=v_hdr.ipv4.flags_10}  AuxVars[]  AssignedVars[] 14067#L501_T0_init [2095] L501_T0_init-->L502_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.fragOffset=v_hdr.ipv4.fragOffset_11}  AuxVars[]  AssignedVars[hdr.ipv4.fragOffset] 14066#L502_T0_init [2022] L502_T0_init-->L503_T0_init: Formula: (and (<= 0 v_hdr.ipv4.fragOffset_12) (<= v_hdr.ipv4.fragOffset_12 8192))  InVars {hdr.ipv4.fragOffset=v_hdr.ipv4.fragOffset_12}  OutVars{hdr.ipv4.fragOffset=v_hdr.ipv4.fragOffset_12}  AuxVars[]  AssignedVars[] 14065#L503_T0_init [1964] L503_T0_init-->L504_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.ttl=v_hdr.ipv4.ttl_12}  AuxVars[]  AssignedVars[hdr.ipv4.ttl] 14064#L504_T0_init [1828] L504_T0_init-->L505_T0_init: Formula: (and (<= v_hdr.ipv4.ttl_11 256) (<= 0 v_hdr.ipv4.ttl_11))  InVars {hdr.ipv4.ttl=v_hdr.ipv4.ttl_11}  OutVars{hdr.ipv4.ttl=v_hdr.ipv4.ttl_11}  AuxVars[]  AssignedVars[] 14063#L505_T0_init [1463] L505_T0_init-->L506_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.protocol=v_hdr.ipv4.protocol_13}  AuxVars[]  AssignedVars[hdr.ipv4.protocol] 14062#L506_T0_init [2080] L506_T0_init-->L507_T0_init: Formula: (and (<= 0 v_hdr.ipv4.protocol_12) (<= v_hdr.ipv4.protocol_12 256))  InVars {hdr.ipv4.protocol=v_hdr.ipv4.protocol_12}  OutVars{hdr.ipv4.protocol=v_hdr.ipv4.protocol_12}  AuxVars[]  AssignedVars[] 14061#L507_T0_init [1861] L507_T0_init-->L508_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.hdrChecksum=v_hdr.ipv4.hdrChecksum_11}  AuxVars[]  AssignedVars[hdr.ipv4.hdrChecksum] 14060#L508_T0_init [2008] L508_T0_init-->L509_T0_init: Formula: (and (<= 0 v_hdr.ipv4.hdrChecksum_9) (<= v_hdr.ipv4.hdrChecksum_9 65536))  InVars {hdr.ipv4.hdrChecksum=v_hdr.ipv4.hdrChecksum_9}  OutVars{hdr.ipv4.hdrChecksum=v_hdr.ipv4.hdrChecksum_9}  AuxVars[]  AssignedVars[] 14059#L509_T0_init [2205] L509_T0_init-->L510_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.srcAddr=v_hdr.ipv4.srcAddr_10}  AuxVars[]  AssignedVars[hdr.ipv4.srcAddr] 14058#L510_T0_init [1507] L510_T0_init-->L511_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_14}  AuxVars[]  AssignedVars[hdr.ipv4.dstAddr] 14057#L511_T0_init [1777] L511_T0_init-->L512_T0_init: Formula: (= v_hdr.ipv4.dstAddr_13 v__old_hdr.ipv4.dstAddr_11)  InVars {hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_13}  OutVars{_old_hdr.ipv4.dstAddr=v__old_hdr.ipv4.dstAddr_11, hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_13}  AuxVars[]  AssignedVars[_old_hdr.ipv4.dstAddr] 14056#L512_T0_init [1579] L512_T0_init-->L513_T0_init: Formula: (= v_hdr.ipv4.dstAddr_12 v__old_hdr.ipv4.dstAddr_10)  InVars {hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_12}  OutVars{_old_hdr.ipv4.dstAddr=v__old_hdr.ipv4.dstAddr_10, hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_12}  AuxVars[]  AssignedVars[_old_hdr.ipv4.dstAddr] 14055#L513_T0_init [1986] L513_T0_init-->L514_T0_init: Formula: (not v_hdr.tcp.valid_29)  InVars {}  OutVars{hdr.tcp.valid=v_hdr.tcp.valid_29}  AuxVars[]  AssignedVars[hdr.tcp.valid] 14054#L514_T0_init [1682] L514_T0_init-->L515_T0_init: Formula: (= v_emit_33 (store v_emit_34 v_hdr.tcp_2 false))  InVars {hdr.tcp=v_hdr.tcp_2, emit=v_emit_34}  OutVars{hdr.tcp=v_hdr.tcp_2, emit=v_emit_33}  AuxVars[]  AssignedVars[emit] 14053#L515_T0_init [1741] L515_T0_init-->L516_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.srcport=v_hdr.tcp.srcport_12}  AuxVars[]  AssignedVars[hdr.tcp.srcport] 14052#L516_T0_init [2063] L516_T0_init-->L517_T0_init: Formula: (and (<= v_hdr.tcp.srcport_9 65536) (<= 0 v_hdr.tcp.srcport_9))  InVars {hdr.tcp.srcport=v_hdr.tcp.srcport_9}  OutVars{hdr.tcp.srcport=v_hdr.tcp.srcport_9}  AuxVars[]  AssignedVars[] 14051#L517_T0_init [1801] L517_T0_init-->L518_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.dstport=v_hdr.tcp.dstport_9}  AuxVars[]  AssignedVars[hdr.tcp.dstport] 14050#L518_T0_init [1879] L518_T0_init-->L519_T0_init: Formula: (and (<= v_hdr.tcp.dstport_10 65536) (<= 0 v_hdr.tcp.dstport_10))  InVars {hdr.tcp.dstport=v_hdr.tcp.dstport_10}  OutVars{hdr.tcp.dstport=v_hdr.tcp.dstport_10}  AuxVars[]  AssignedVars[] 14049#L519_T0_init [1683] L519_T0_init-->L520_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.sequence=v_hdr.tcp.sequence_43}  AuxVars[]  AssignedVars[hdr.tcp.sequence] 14048#L520_T0_init [1541] L520_T0_init-->L521_T0_init: Formula: (and (<= v_hdr.tcp.sequence_44 4294967296) (<= 0 v_hdr.tcp.sequence_44))  InVars {hdr.tcp.sequence=v_hdr.tcp.sequence_44}  OutVars{hdr.tcp.sequence=v_hdr.tcp.sequence_44}  AuxVars[]  AssignedVars[] 14047#L521_T0_init [1694] L521_T0_init-->L522_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.ackseq=v_hdr.tcp.ackseq_43}  AuxVars[]  AssignedVars[hdr.tcp.ackseq] 14046#L522_T0_init [2020] L522_T0_init-->L523_T0_init: Formula: (and (<= v_hdr.tcp.ackseq_44 4294967296) (<= 0 v_hdr.tcp.ackseq_44))  InVars {hdr.tcp.ackseq=v_hdr.tcp.ackseq_44}  OutVars{hdr.tcp.ackseq=v_hdr.tcp.ackseq_44}  AuxVars[]  AssignedVars[] 14045#L523_T0_init [1588] L523_T0_init-->L524_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.headerlength=v_hdr.tcp.headerlength_11}  AuxVars[]  AssignedVars[hdr.tcp.headerlength] 14044#L524_T0_init [1434] L524_T0_init-->L525_T0_init: Formula: (and (<= v_hdr.tcp.headerlength_10 16) (<= 0 v_hdr.tcp.headerlength_10))  InVars {hdr.tcp.headerlength=v_hdr.tcp.headerlength_10}  OutVars{hdr.tcp.headerlength=v_hdr.tcp.headerlength_10}  AuxVars[]  AssignedVars[] 14043#L525_T0_init [1536] L525_T0_init-->L526_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.reservation=v_hdr.tcp.reservation_12}  AuxVars[]  AssignedVars[hdr.tcp.reservation] 14042#L526_T0_init [1832] L526_T0_init-->L527_T0_init: Formula: (and (<= v_hdr.tcp.reservation_9 64) (<= 0 v_hdr.tcp.reservation_9))  InVars {hdr.tcp.reservation=v_hdr.tcp.reservation_9}  OutVars{hdr.tcp.reservation=v_hdr.tcp.reservation_9}  AuxVars[]  AssignedVars[] 14041#L527_T0_init [1700] L527_T0_init-->L528_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.URG=v_hdr.tcp.URG_9}  AuxVars[]  AssignedVars[hdr.tcp.URG] 14040#L528_T0_init [1797] L528_T0_init-->L529_T0_init: Formula: (and (<= v_hdr.tcp.URG_12 2) (<= 0 v_hdr.tcp.URG_12))  InVars {hdr.tcp.URG=v_hdr.tcp.URG_12}  OutVars{hdr.tcp.URG=v_hdr.tcp.URG_12}  AuxVars[]  AssignedVars[] 14039#L529_T0_init [1892] L529_T0_init-->L530_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.ACK=v_hdr.tcp.ACK_11}  AuxVars[]  AssignedVars[hdr.tcp.ACK] 14038#L530_T0_init [1584] L530_T0_init-->L531_T0_init: Formula: (and (<= 0 v_hdr.tcp.ACK_9) (<= v_hdr.tcp.ACK_9 2))  InVars {hdr.tcp.ACK=v_hdr.tcp.ACK_9}  OutVars{hdr.tcp.ACK=v_hdr.tcp.ACK_9}  AuxVars[]  AssignedVars[] 14037#L531_T0_init [1458] L531_T0_init-->L532_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.PSH=v_hdr.tcp.PSH_11}  AuxVars[]  AssignedVars[hdr.tcp.PSH] 14036#L532_T0_init [2203] L532_T0_init-->L533_T0_init: Formula: (and (<= 0 v_hdr.tcp.PSH_9) (<= v_hdr.tcp.PSH_9 2))  InVars {hdr.tcp.PSH=v_hdr.tcp.PSH_9}  OutVars{hdr.tcp.PSH=v_hdr.tcp.PSH_9}  AuxVars[]  AssignedVars[] 14035#L533_T0_init [2141] L533_T0_init-->L534_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.RST=v_hdr.tcp.RST_9}  AuxVars[]  AssignedVars[hdr.tcp.RST] 14034#L534_T0_init [1587] L534_T0_init-->L535_T0_init: Formula: (and (<= 0 v_hdr.tcp.RST_11) (<= v_hdr.tcp.RST_11 2))  InVars {hdr.tcp.RST=v_hdr.tcp.RST_11}  OutVars{hdr.tcp.RST=v_hdr.tcp.RST_11}  AuxVars[]  AssignedVars[] 14033#L535_T0_init [2154] L535_T0_init-->L536_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.SYN=v_hdr.tcp.SYN_9}  AuxVars[]  AssignedVars[hdr.tcp.SYN] 14032#L536_T0_init [1620] L536_T0_init-->L537_T0_init: Formula: (and (<= 0 v_hdr.tcp.SYN_11) (<= v_hdr.tcp.SYN_11 2))  InVars {hdr.tcp.SYN=v_hdr.tcp.SYN_11}  OutVars{hdr.tcp.SYN=v_hdr.tcp.SYN_11}  AuxVars[]  AssignedVars[] 14031#L537_T0_init [1893] L537_T0_init-->L538_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.FIN=v_hdr.tcp.FIN_9}  AuxVars[]  AssignedVars[hdr.tcp.FIN] 14030#L538_T0_init [1895] L538_T0_init-->L539_T0_init: Formula: (and (<= 0 v_hdr.tcp.FIN_10) (<= v_hdr.tcp.FIN_10 2))  InVars {hdr.tcp.FIN=v_hdr.tcp.FIN_10}  OutVars{hdr.tcp.FIN=v_hdr.tcp.FIN_10}  AuxVars[]  AssignedVars[] 14027#L539_T0_init [2212] L539_T0_init-->L540_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.windowsize=v_hdr.tcp.windowsize_10}  AuxVars[]  AssignedVars[hdr.tcp.windowsize] 14026#L540_T0_init [1939] L540_T0_init-->L541_T0_init: Formula: (and (<= v_hdr.tcp.windowsize_12 65536) (<= 0 v_hdr.tcp.windowsize_12))  InVars {hdr.tcp.windowsize=v_hdr.tcp.windowsize_12}  OutVars{hdr.tcp.windowsize=v_hdr.tcp.windowsize_12}  AuxVars[]  AssignedVars[] 14021#L541_T0_init [2096] L541_T0_init-->L542_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.checksum=v_hdr.tcp.checksum_10}  AuxVars[]  AssignedVars[hdr.tcp.checksum] 14015#L542_T0_init [2083] L542_T0_init-->L543_T0_init: Formula: (and (<= 0 v_hdr.tcp.checksum_12) (<= v_hdr.tcp.checksum_12 65536))  InVars {hdr.tcp.checksum=v_hdr.tcp.checksum_12}  OutVars{hdr.tcp.checksum=v_hdr.tcp.checksum_12}  AuxVars[]  AssignedVars[] 14010#L543_T0_init [2088] L543_T0_init-->L544_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.pointer=v_hdr.tcp.pointer_11}  AuxVars[]  AssignedVars[hdr.tcp.pointer] 14006#L544_T0_init [2119] L544_T0_init-->L545_T0_init: Formula: (and (<= 0 v_hdr.tcp.pointer_10) (<= v_hdr.tcp.pointer_10 65536))  InVars {hdr.tcp.pointer=v_hdr.tcp.pointer_10}  OutVars{hdr.tcp.pointer=v_hdr.tcp.pointer_10}  AuxVars[]  AssignedVars[] 14000#L545_T0_init [1935] L545_T0_init-->L546_T0_init: Formula: (not v_hdr.udp_tunnel.valid_20)  InVars {}  OutVars{hdr.udp_tunnel.valid=v_hdr.udp_tunnel.valid_20}  AuxVars[]  AssignedVars[hdr.udp_tunnel.valid] 13994#L546_T0_init [2229] L546_T0_init-->L547_T0_init: Formula: (= v_emit_31 (store v_emit_32 v_hdr.udp_tunnel_9 false))  InVars {emit=v_emit_32, hdr.udp_tunnel=v_hdr.udp_tunnel_9}  OutVars{emit=v_emit_31, hdr.udp_tunnel=v_hdr.udp_tunnel_9}  AuxVars[]  AssignedVars[emit] 13989#L547_T0_init [1949] L547_T0_init-->L548_T0_init: Formula: true  InVars {}  OutVars{hdr.udp_tunnel.srcport=v_hdr.udp_tunnel.srcport_16}  AuxVars[]  AssignedVars[hdr.udp_tunnel.srcport] 13982#L548_T0_init [1790] L548_T0_init-->L549_T0_init: Formula: (and (<= 0 v_hdr.udp_tunnel.srcport_14) (<= v_hdr.udp_tunnel.srcport_14 65536))  InVars {hdr.udp_tunnel.srcport=v_hdr.udp_tunnel.srcport_14}  OutVars{hdr.udp_tunnel.srcport=v_hdr.udp_tunnel.srcport_14}  AuxVars[]  AssignedVars[] 13977#L549_T0_init [2166] L549_T0_init-->L550_T0_init: Formula: true  InVars {}  OutVars{hdr.udp_tunnel.dstport=v_hdr.udp_tunnel.dstport_14}  AuxVars[]  AssignedVars[hdr.udp_tunnel.dstport] 13975#L550_T0_init [2155] L550_T0_init-->L551_T0_init: Formula: (and (<= 0 v_hdr.udp_tunnel.dstport_15) (<= v_hdr.udp_tunnel.dstport_15 65536))  InVars {hdr.udp_tunnel.dstport=v_hdr.udp_tunnel.dstport_15}  OutVars{hdr.udp_tunnel.dstport=v_hdr.udp_tunnel.dstport_15}  AuxVars[]  AssignedVars[] 13973#L551_T0_init [1802] L551_T0_init-->L552_T0_init: Formula: true  InVars {}  OutVars{hdr.udp_tunnel.userlength=v_hdr.udp_tunnel.userlength_16}  AuxVars[]  AssignedVars[hdr.udp_tunnel.userlength] 13969#L552_T0_init [1494] L552_T0_init-->L553_T0_init: Formula: (and (<= 0 v_hdr.udp_tunnel.userlength_17) (<= v_hdr.udp_tunnel.userlength_17 65536))  InVars {hdr.udp_tunnel.userlength=v_hdr.udp_tunnel.userlength_17}  OutVars{hdr.udp_tunnel.userlength=v_hdr.udp_tunnel.userlength_17}  AuxVars[]  AssignedVars[] 13961#L553_T0_init [1607] L553_T0_init-->L554_T0_init: Formula: true  InVars {}  OutVars{hdr.udp_tunnel.checksum=v_hdr.udp_tunnel.checksum_15}  AuxVars[]  AssignedVars[hdr.udp_tunnel.checksum] 13955#L554_T0_init [1482] L554_T0_init-->havocProcedureFINAL_T0_init: Formula: (and (<= v_hdr.udp_tunnel.checksum_14 65536) (<= 0 v_hdr.udp_tunnel.checksum_14))  InVars {hdr.udp_tunnel.checksum=v_hdr.udp_tunnel.checksum_14}  OutVars{hdr.udp_tunnel.checksum=v_hdr.udp_tunnel.checksum_14}  AuxVars[]  AssignedVars[] 13951#havocProcedureFINAL_T0_init [2184] havocProcedureFINAL_T0_init-->havocProcedureEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13944#havocProcedureEXIT_T0_init >[2294] havocProcedureEXIT_T0_init-->L559-D56: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13941#L559-D56 [1645] L559-D56-->L559_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13937#L559_T0_init [1563] L559_T0_init-->L559_T0_init-D22: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 13938#L559_T0_init-D22 [1934] L559_T0_init-D22-->_parser_MyParserENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13949#_parser_MyParserENTRY_T0_init [1580] _parser_MyParserENTRY_T0_init-->_parser_MyParserENTRY_T0_init-D14: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 13950#_parser_MyParserENTRY_T0_init-D14 [1461] _parser_MyParserENTRY_T0_init-D14-->startENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13972#startENTRY_T0_init [1983] startENTRY_T0_init-->L727_T0_init: Formula: v_hdr.ethernet.valid_16  InVars {}  OutVars{hdr.ethernet.valid=v_hdr.ethernet.valid_16}  AuxVars[]  AssignedVars[hdr.ethernet.valid] 13968#L727_T0_init [1961] L727_T0_init-->L730_T0_init: Formula: (not (= v_hdr.ethernet.etherType_35 34525))  InVars {hdr.ethernet.etherType=v_hdr.ethernet.etherType_35}  OutVars{hdr.ethernet.etherType=v_hdr.ethernet.etherType_35}  AuxVars[]  AssignedVars[] 13959#L730_T0_init [2005] L730_T0_init-->L730-1_T0_init: Formula: (not (= v_hdr.ethernet.etherType_37 2048))  InVars {hdr.ethernet.etherType=v_hdr.ethernet.etherType_37}  OutVars{hdr.ethernet.etherType=v_hdr.ethernet.etherType_37}  AuxVars[]  AssignedVars[] 13954#L730-1_T0_init [1883] L730-1_T0_init-->startEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13948#startEXIT_T0_init >[2245] startEXIT_T0_init-->_parser_MyParserFINAL-D66: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13943#_parser_MyParserFINAL-D66 [1638] _parser_MyParserFINAL-D66-->_parser_MyParserFINAL_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13940#_parser_MyParserFINAL_T0_init [1963] _parser_MyParserFINAL_T0_init-->_parser_MyParserEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13936#_parser_MyParserEXIT_T0_init >[2284] _parser_MyParserEXIT_T0_init-->L560-D104: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13928#L560-D104 [2220] L560-D104-->L560_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13904#L560_T0_init [1530] L560_T0_init-->L560_T0_init-D16: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 13905#L560_T0_init-D16 [1972] L560_T0_init-D16-->MyVerifyChecksumFINAL_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13906#MyVerifyChecksumFINAL_T0_init [1885] MyVerifyChecksumFINAL_T0_init-->MyVerifyChecksumEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13903#MyVerifyChecksumEXIT_T0_init >[2283] MyVerifyChecksumEXIT_T0_init-->L561-D74: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13902#L561-D74 [1833] L561-D74-->L561_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13135#L561_T0_init [1771] L561_T0_init-->L561_T0_init-D6: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 13896#L561_T0_init-D6 [1680] L561_T0_init-D6-->MyIngressENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13893#MyIngressENTRY_T0_init [1639] MyIngressENTRY_T0_init-->L259_T0_init: Formula: (= v_standard_metadata.ingress_port_17 0)  InVars {standard_metadata.ingress_port=v_standard_metadata.ingress_port_17}  OutVars{standard_metadata.ingress_port=v_standard_metadata.ingress_port_17}  AuxVars[]  AssignedVars[] 13891#L259_T0_init [1794] L259_T0_init-->L266_T0_init: Formula: (not (= v_hdr.ipv4.dstAddr_19 2071690107))  InVars {hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_19}  OutVars{hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_19}  AuxVars[]  AssignedVars[] 13889#L266_T0_init [2048] L266_T0_init-->L267_T0_init: Formula: (and (not (= v_hdr.ethernet.srcAddr_30 0)) (not (= 281474976710655 v_hdr.ethernet.dstAddr_39)))  InVars {hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_30, hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_39}  OutVars{hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_30, hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_39}  AuxVars[]  AssignedVars[] 13887#L267_T0_init [1661] L267_T0_init-->L267_T0_init-D36: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 13888#L267_T0_init-D36 [2084] L267_T0_init-D36-->store_user_macENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13900#store_user_macENTRY_T0_init [1551] store_user_macENTRY_T0_init-->store_user_macENTRY_T0_init-D42: Formula: (and (= v_user_mac.write_indexInParam_1 0) (= v_hdr.ethernet.srcAddr_21 v_user_mac.write_valueInParam_1))  InVars {hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_21}  OutVars{user_mac.write_value=v_user_mac.write_valueInParam_1, user_mac.write_index=v_user_mac.write_indexInParam_1, hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_21}  AuxVars[]  AssignedVars[user_mac.write_value, user_mac.write_index]< 13901#store_user_macENTRY_T0_init-D42 [1622] store_user_macENTRY_T0_init-D42-->user_mac.writeENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13908#user_mac.writeENTRY_T0_init [1456] user_mac.writeENTRY_T0_init-->user_mac.writeFINAL_T0_init: Formula: (= v_user_mac_18 (store v_user_mac_19 v_user_mac.write_index_3 v_user_mac.write_value_3))  InVars {user_mac.write_value=v_user_mac.write_value_3, user_mac.write_index=v_user_mac.write_index_3, user_mac=v_user_mac_19}  OutVars{user_mac.write_value=v_user_mac.write_value_3, user_mac.write_index=v_user_mac.write_index_3, user_mac=v_user_mac_18}  AuxVars[]  AssignedVars[user_mac] 13907#user_mac.writeFINAL_T0_init [2176] user_mac.writeFINAL_T0_init-->user_mac.writeEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13899#user_mac.writeEXIT_T0_init >[2291] user_mac.writeEXIT_T0_init-->store_user_macFINAL-D64: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: (and (= v_user_mac.write_indexInParam_1 0) (= v_hdr.ethernet.srcAddr_21 v_user_mac.write_valueInParam_1))  InVars {hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_21}  OutVars{user_mac.write_value=v_user_mac.write_valueInParam_1, user_mac.write_index=v_user_mac.write_indexInParam_1, hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_21}  AuxVars[]  AssignedVars[user_mac.write_value, user_mac.write_index] 13897#store_user_macFINAL-D64 [1999] store_user_macFINAL-D64-->store_user_macFINAL_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13895#store_user_macFINAL_T0_init [1944] store_user_macFINAL_T0_init-->store_user_macEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13886#store_user_macEXIT_T0_init >[2329] store_user_macEXIT_T0_init-->L267-1-D68: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13884#L267-1-D68 [2170] L267-1-D68-->L267-1_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13881#L267-1_T0_init [2117] L267-1_T0_init-->L267-1_T0_init-D4: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 13882#L267-1_T0_init-D4 [1675] L267-1_T0_init-D4-->read_esboxENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14022#read_esboxENTRY_T0_init [1695] read_esboxENTRY_T0_init-->L683_T0_init: Formula: (= (mod (div (+ (* (- 1) (mod 0 1)) v_hdr.tcp.sequence_53) 1) 256) v_tmp_0_12)  InVars {hdr.tcp.sequence=v_hdr.tcp.sequence_53}  OutVars{hdr.tcp.sequence=v_hdr.tcp.sequence_53, tmp_0=v_tmp_0_12}  AuxVars[]  AssignedVars[tmp_0] 14016#L683_T0_init [1852] L683_T0_init-->L684_T0_init: Formula: (= (select v_es_box_26 v_tmp_0_14) v_tmp_14)  InVars {es_box=v_es_box_26, tmp_0=v_tmp_0_14}  OutVars{tmp=v_tmp_14, es_box=v_es_box_26, tmp_0=v_tmp_0_14}  AuxVars[]  AssignedVars[tmp] 14011#L684_T0_init [1441] L684_T0_init-->L685_T0_init: Formula: (= (+ (* (- 1) (mod v_hdr.tcp.sequence_50 256)) (mod 0 1) v_hdr.tcp.sequence_50 v_tmp_11) v_hdr.tcp.sequence_49)  InVars {tmp=v_tmp_11, hdr.tcp.sequence=v_hdr.tcp.sequence_50}  OutVars{tmp=v_tmp_11, hdr.tcp.sequence=v_hdr.tcp.sequence_49}  AuxVars[]  AssignedVars[hdr.tcp.sequence] 14007#L685_T0_init [1795] L685_T0_init-->L687_T0_init: Formula: (= v_tmp_2_14 (mod (div (+ v_hdr.tcp.sequence_64 (* (- 1) (mod v_hdr.tcp.sequence_64 256))) 256) 256))  InVars {hdr.tcp.sequence=v_hdr.tcp.sequence_64}  OutVars{tmp_2=v_tmp_2_14, hdr.tcp.sequence=v_hdr.tcp.sequence_64}  AuxVars[]  AssignedVars[tmp_2] 14001#L687_T0_init [1522] L687_T0_init-->L688_T0_init: Formula: (= v_tmp_1_13 (select v_es_box_16 v_tmp_2_12))  InVars {es_box=v_es_box_16, tmp_2=v_tmp_2_12}  OutVars{tmp_2=v_tmp_2_12, es_box=v_es_box_16, tmp_1=v_tmp_1_13}  AuxVars[]  AssignedVars[tmp_1] 13995#L688_T0_init [1770] L688_T0_init-->L689_T0_init: Formula: (= v_hdr.tcp.sequence_47 (+ (mod v_hdr.tcp.sequence_48 256) (* 256 v_tmp_1_11) (* (- 1) (mod v_hdr.tcp.sequence_48 65536)) v_hdr.tcp.sequence_48))  InVars {hdr.tcp.sequence=v_hdr.tcp.sequence_48, tmp_1=v_tmp_1_11}  OutVars{hdr.tcp.sequence=v_hdr.tcp.sequence_47, tmp_1=v_tmp_1_11}  AuxVars[]  AssignedVars[hdr.tcp.sequence] 13990#L689_T0_init [2206] L689_T0_init-->L691_T0_init: Formula: (= (mod (div (+ (* (mod v_hdr.tcp.sequence_63 65536) (- 1)) v_hdr.tcp.sequence_63) 65536) 256) v_tmp_4_12)  InVars {hdr.tcp.sequence=v_hdr.tcp.sequence_63}  OutVars{hdr.tcp.sequence=v_hdr.tcp.sequence_63, tmp_4=v_tmp_4_12}  AuxVars[]  AssignedVars[tmp_4] 13983#L691_T0_init [1512] L691_T0_init-->L692_T0_init: Formula: (= (select v_es_box_24 v_tmp_4_13) v_tmp_3_14)  InVars {es_box=v_es_box_24, tmp_4=v_tmp_4_13}  OutVars{tmp_3=v_tmp_3_14, tmp_4=v_tmp_4_13, es_box=v_es_box_24}  AuxVars[]  AssignedVars[tmp_3] 13978#L692_T0_init [1693] L692_T0_init-->L693_T0_init: Formula: (= (+ (* (- 1) (mod v_hdr.tcp.sequence_57 16777216)) (* 65536 v_tmp_3_13) v_hdr.tcp.sequence_57 (mod v_hdr.tcp.sequence_57 65536)) v_hdr.tcp.sequence_56)  InVars {tmp_3=v_tmp_3_13, hdr.tcp.sequence=v_hdr.tcp.sequence_57}  OutVars{tmp_3=v_tmp_3_13, hdr.tcp.sequence=v_hdr.tcp.sequence_56}  AuxVars[]  AssignedVars[hdr.tcp.sequence] 13976#L693_T0_init [1977] L693_T0_init-->L695_T0_init: Formula: (= v_tmp_6_14 (mod (div (+ (* (- 1) (mod v_hdr.tcp.sequence_68 16777216)) v_hdr.tcp.sequence_68) 16777216) 256))  InVars {hdr.tcp.sequence=v_hdr.tcp.sequence_68}  OutVars{tmp_6=v_tmp_6_14, hdr.tcp.sequence=v_hdr.tcp.sequence_68}  AuxVars[]  AssignedVars[tmp_6] 13974#L695_T0_init [1779] L695_T0_init-->L696_T0_init: Formula: (= v_tmp_5_12 (select v_es_box_17 v_tmp_6_11))  InVars {es_box=v_es_box_17, tmp_6=v_tmp_6_11}  OutVars{tmp_5=v_tmp_5_12, es_box=v_es_box_17, tmp_6=v_tmp_6_11}  AuxVars[]  AssignedVars[tmp_5] 13970#L696_T0_init [1811] L696_T0_init-->L697_T0_init: Formula: (= (+ (* 16777216 v_tmp_5_11) v_hdr.tcp.sequence_52 (mod v_hdr.tcp.sequence_52 16777216) (* (- 1) (mod v_hdr.tcp.sequence_52 4294967296))) v_hdr.tcp.sequence_51)  InVars {tmp_5=v_tmp_5_11, hdr.tcp.sequence=v_hdr.tcp.sequence_52}  OutVars{tmp_5=v_tmp_5_11, hdr.tcp.sequence=v_hdr.tcp.sequence_51}  AuxVars[]  AssignedVars[hdr.tcp.sequence] 13962#L697_T0_init [1780] L697_T0_init-->L699_T0_init: Formula: (= v_tmp_8_14 (mod (div (+ v_hdr.tcp.ackseq_62 (* (- 1) (mod 0 1))) 1) 256))  InVars {hdr.tcp.ackseq=v_hdr.tcp.ackseq_62}  OutVars{hdr.tcp.ackseq=v_hdr.tcp.ackseq_62, tmp_8=v_tmp_8_14}  AuxVars[]  AssignedVars[tmp_8] 13956#L699_T0_init [2014] L699_T0_init-->L700_T0_init: Formula: (= v_tmp_7_11 (select v_es_box_14 v_tmp_8_12))  InVars {es_box=v_es_box_14, tmp_8=v_tmp_8_12}  OutVars{tmp_7=v_tmp_7_11, es_box=v_es_box_14, tmp_8=v_tmp_8_12}  AuxVars[]  AssignedVars[tmp_7] 13953#L700_T0_init [1630] L700_T0_init-->L701_T0_init: Formula: (= v_hdr.tcp.ackseq_65 (+ v_hdr.tcp.ackseq_66 v_tmp_7_14 (* (- 1) (mod v_hdr.tcp.ackseq_66 256)) (mod 0 1)))  InVars {tmp_7=v_tmp_7_14, hdr.tcp.ackseq=v_hdr.tcp.ackseq_66}  OutVars{tmp_7=v_tmp_7_14, hdr.tcp.ackseq=v_hdr.tcp.ackseq_65}  AuxVars[]  AssignedVars[hdr.tcp.ackseq] 13947#L701_T0_init [1750] L701_T0_init-->L703_T0_init: Formula: (= (mod (div (+ v_hdr.tcp.ackseq_61 (* (mod v_hdr.tcp.ackseq_61 256) (- 1))) 256) 256) v_tmp_10_14)  InVars {hdr.tcp.ackseq=v_hdr.tcp.ackseq_61}  OutVars{hdr.tcp.ackseq=v_hdr.tcp.ackseq_61, tmp_10=v_tmp_10_14}  AuxVars[]  AssignedVars[tmp_10] 13942#L703_T0_init [1493] L703_T0_init-->L704_T0_init: Formula: (= v_tmp_9_11 (select v_es_box_18 v_tmp_10_11))  InVars {es_box=v_es_box_18, tmp_10=v_tmp_10_11}  OutVars{tmp_10=v_tmp_10_11, es_box=v_es_box_18, tmp_9=v_tmp_9_11}  AuxVars[]  AssignedVars[tmp_9] 13939#L704_T0_init [1581] L704_T0_init-->L705_T0_init: Formula: (= v_hdr.tcp.ackseq_53 (+ v_hdr.tcp.ackseq_54 (mod v_hdr.tcp.ackseq_54 256) (* 256 v_tmp_9_13) (* (- 1) (mod v_hdr.tcp.ackseq_54 65536))))  InVars {hdr.tcp.ackseq=v_hdr.tcp.ackseq_54, tmp_9=v_tmp_9_13}  OutVars{hdr.tcp.ackseq=v_hdr.tcp.ackseq_53, tmp_9=v_tmp_9_13}  AuxVars[]  AssignedVars[hdr.tcp.ackseq] 13927#L705_T0_init [2193] L705_T0_init-->L707_T0_init: Formula: (= (mod (div (+ v_hdr.tcp.ackseq_51 (* (mod v_hdr.tcp.ackseq_51 65536) (- 1))) 65536) 256) v_tmp_12_14)  InVars {hdr.tcp.ackseq=v_hdr.tcp.ackseq_51}  OutVars{hdr.tcp.ackseq=v_hdr.tcp.ackseq_51, tmp_12=v_tmp_12_14}  AuxVars[]  AssignedVars[tmp_12] 13914#L707_T0_init [1469] L707_T0_init-->L708_T0_init: Formula: (= (select v_es_box_13 v_tmp_12_11) v_tmp_11_11)  InVars {es_box=v_es_box_13, tmp_12=v_tmp_12_11}  OutVars{tmp_11=v_tmp_11_11, tmp_12=v_tmp_12_11, es_box=v_es_box_13}  AuxVars[]  AssignedVars[tmp_11] 13913#L708_T0_init [1727] L708_T0_init-->L709_T0_init: Formula: (= v_hdr.tcp.ackseq_59 (+ v_hdr.tcp.ackseq_60 (* 65536 v_tmp_11_14) (* (- 1) (mod v_hdr.tcp.ackseq_60 16777216)) (mod v_hdr.tcp.ackseq_60 65536)))  InVars {tmp_11=v_tmp_11_14, hdr.tcp.ackseq=v_hdr.tcp.ackseq_60}  OutVars{tmp_11=v_tmp_11_14, hdr.tcp.ackseq=v_hdr.tcp.ackseq_59}  AuxVars[]  AssignedVars[hdr.tcp.ackseq] 13912#L709_T0_init [2127] L709_T0_init-->L711_T0_init: Formula: (= (mod (div (+ (* (- 1) (mod v_hdr.tcp.ackseq_45 16777216)) v_hdr.tcp.ackseq_45) 16777216) 256) v_tmp_14_11)  InVars {hdr.tcp.ackseq=v_hdr.tcp.ackseq_45}  OutVars{hdr.tcp.ackseq=v_hdr.tcp.ackseq_45, tmp_14=v_tmp_14_11}  AuxVars[]  AssignedVars[tmp_14] 13911#L711_T0_init [1451] L711_T0_init-->L712_T0_init: Formula: (= (select v_es_box_25 v_tmp_14_14) v_tmp_13_14)  InVars {es_box=v_es_box_25, tmp_14=v_tmp_14_14}  OutVars{es_box=v_es_box_25, tmp_13=v_tmp_13_14, tmp_14=v_tmp_14_14}  AuxVars[]  AssignedVars[tmp_13] 13910#L712_T0_init [1652] L712_T0_init-->read_esboxFINAL_T0_init: Formula: (= v_hdr.tcp.ackseq_49 (+ (* (- 1) (mod v_hdr.tcp.ackseq_50 4294967296)) (mod v_hdr.tcp.ackseq_50 16777216) v_hdr.tcp.ackseq_50 (* 16777216 v_tmp_13_12)))  InVars {hdr.tcp.ackseq=v_hdr.tcp.ackseq_50, tmp_13=v_tmp_13_12}  OutVars{hdr.tcp.ackseq=v_hdr.tcp.ackseq_49, tmp_13=v_tmp_13_12}  AuxVars[]  AssignedVars[hdr.tcp.ackseq] 13909#read_esboxFINAL_T0_init [1969] read_esboxFINAL_T0_init-->read_esboxEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13880#read_esboxEXIT_T0_init >[2263] read_esboxEXIT_T0_init-->L268-D82: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13879#L268-D82 [1920] L268-D82-->L268_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13877#L268_T0_init [2221] L268_T0_init-->L268_T0_init-D28: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 13878#L268_T0_init-D28 [1954] L268_T0_init-D28-->do_read_countENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13885#do_read_countENTRY_T0_init [1812] do_read_countENTRY_T0_init-->do_read_countFINAL_T0_init: Formula: (= v_temp_0_29 (select v_count_17 0))  InVars {count=v_count_17}  OutVars{count=v_count_17, temp_0=v_temp_0_29}  AuxVars[]  AssignedVars[temp_0] 13883#do_read_countFINAL_T0_init [1717] do_read_countFINAL_T0_init-->do_read_countEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13876#do_read_countEXIT_T0_init >[2338] do_read_countEXIT_T0_init-->L269-D84: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13875#L269-D84 [1996] L269-D84-->L269_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13873#L269_T0_init [2164] L269_T0_init-->L271_T0_init: Formula: (= v_temp_0_24 0)  InVars {temp_0=v_temp_0_24}  OutVars{temp_0=v_temp_0_24}  AuxVars[]  AssignedVars[] 13287#L271_T0_init [2139] L271_T0_init-->L271_T0_init-D8: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 13823#L271_T0_init-D8 [2098] L271_T0_init-D8-->creatipv6_1ENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13773#creatipv6_1ENTRY_T0_init [2009] creatipv6_1ENTRY_T0_init-->L346_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13774#L346_T0_init [2061] L346_T0_init-->L348_T0_init: Formula: (= 6 v_hdr.ipv6.version_21)  InVars {}  OutVars{hdr.ipv6.version=v_hdr.ipv6.version_21}  AuxVars[]  AssignedVars[hdr.ipv6.version] 13707#L348_T0_init [1929] L348_T0_init-->L349_T0_init: Formula: (= v_hdr.ipv6.payloadlen_22 v_hdr.ipv4.totalLen_22)  InVars {hdr.ipv4.totalLen=v_hdr.ipv4.totalLen_22}  OutVars{hdr.ipv4.totalLen=v_hdr.ipv4.totalLen_22, hdr.ipv6.payloadlen=v_hdr.ipv6.payloadlen_22}  AuxVars[]  AssignedVars[hdr.ipv6.payloadlen] 13492#L349_T0_init [1726] L349_T0_init-->L350_T0_init: Formula: (= v_hdr.ipv6.nextheader_28 65)  InVars {}  OutVars{hdr.ipv6.nextheader=v_hdr.ipv6.nextheader_28}  AuxVars[]  AssignedVars[hdr.ipv6.nextheader] 13493#L350_T0_init [2189] L350_T0_init-->L351_T0_init: Formula: (= 64 v_hdr.ipv6.hoplimit_22)  InVars {}  OutVars{hdr.ipv6.hoplimit=v_hdr.ipv6.hoplimit_22}  AuxVars[]  AssignedVars[hdr.ipv6.hoplimit] 13795#L351_T0_init [2055] L351_T0_init-->L352_T0_init: Formula: (= v_hdr.ethernet.etherType_28 34525)  InVars {}  OutVars{hdr.ethernet.etherType=v_hdr.ethernet.etherType_28}  AuxVars[]  AssignedVars[hdr.ethernet.etherType] 13796#L352_T0_init [2075] L352_T0_init-->L353_T0_init: Formula: (= v_hdr.ipv6.srcAddr_19 42545680458834377588178886921629466626)  InVars {}  OutVars{hdr.ipv6.srcAddr=v_hdr.ipv6.srcAddr_19}  AuxVars[]  AssignedVars[hdr.ipv6.srcAddr] 13370#L353_T0_init [1643] L353_T0_init-->L354_T0_init: Formula: (= v_hdr.ipv6.dstAddr_18 42540765144257160172006968799218772356)  InVars {}  OutVars{hdr.ipv6.dstAddr=v_hdr.ipv6.dstAddr_18}  AuxVars[]  AssignedVars[hdr.ipv6.dstAddr] 13371#L354_T0_init [1773] L354_T0_init-->L355_T0_init: Formula: (= v_hdr.ethernet.srcAddr_33 19799850608873)  InVars {}  OutVars{hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_33}  AuxVars[]  AssignedVars[hdr.ethernet.srcAddr] 13555#L355_T0_init [1881] L355_T0_init-->creatipv6_1FINAL_T0_init: Formula: (= 174219185552744 v_hdr.ethernet.dstAddr_41)  InVars {}  OutVars{hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_41}  AuxVars[]  AssignedVars[hdr.ethernet.dstAddr] 13286#creatipv6_1FINAL_T0_init [1590] creatipv6_1FINAL_T0_init-->creatipv6_1EXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13288#creatipv6_1EXIT_T0_init >[2246] creatipv6_1EXIT_T0_init-->L271-1-D62: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13538#L271-1-D62 [1760] L271-1-D62-->L271-1_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13539#L271-1_T0_init [1814] L271-1_T0_init-->L271-1_T0_init-D34: Formula: (and (= v_count.write_indexInParam_1 0) (= v_count.write_valueInParam_1 1))  InVars {}  OutVars{count.write_index=v_count.write_indexInParam_1, count.write_value=v_count.write_valueInParam_1}  AuxVars[]  AssignedVars[count.write_index, count.write_value]< 13597#L271-1_T0_init-D34 [1818] L271-1_T0_init-D34-->count.writeENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13600#count.writeENTRY_T0_init [2103] count.writeENTRY_T0_init-->count.writeFINAL_T0_init: Formula: (= v_count_20 (store v_count_21 v_count.write_index_3 v_count.write_value_3))  InVars {count=v_count_21, count.write_index=v_count.write_index_3, count.write_value=v_count.write_value_3}  OutVars{count=v_count_20, count.write_index=v_count.write_index_3, count.write_value=v_count.write_value_3}  AuxVars[]  AssignedVars[count] 13930#count.writeFINAL_T0_init [1688] count.writeFINAL_T0_init-->count.writeEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13929#count.writeEXIT_T0_init >[2295] count.writeEXIT_T0_init-->L273-D98: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: (and (= v_count.write_indexInParam_1 0) (= v_count.write_valueInParam_1 1))  InVars {}  OutVars{count.write_index=v_count.write_indexInParam_1, count.write_value=v_count.write_valueInParam_1}  AuxVars[]  AssignedVars[count.write_index, count.write_value] 13852#L273-D98 [2157] L273-D98-->L273_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13646#L273_T0_init [1867] L273_T0_init-->L275_T0_init: Formula: (= v_standard_metadata.egress_spec_24 1)  InVars {}  OutVars{standard_metadata.egress_spec=v_standard_metadata.egress_spec_24}  AuxVars[]  AssignedVars[standard_metadata.egress_spec] 13172#L275_T0_init [1525] L275_T0_init-->L276_T0_init: Formula: (= 1 v_standard_metadata.egress_port_25)  InVars {}  OutVars{standard_metadata.egress_port=v_standard_metadata.egress_port_25}  AuxVars[]  AssignedVars[standard_metadata.egress_port] 13173#L276_T0_init [1761] L276_T0_init-->L270-1_T0_init: Formula: v_forward_24  InVars {}  OutVars{forward=v_forward_24}  AuxVars[]  AssignedVars[forward] 13540#L270-1_T0_init [1943] L270-1_T0_init-->L278-1_T0_init: Formula: (not (= v_temp_0_27 1))  InVars {temp_0=v_temp_0_27}  OutVars{temp_0=v_temp_0_27}  AuxVars[]  AssignedVars[] 14179#L278-1_T0_init [1611] L278-1_T0_init-->L258_T0_init: Formula: (not (= v_temp_0_23 2))  InVars {temp_0=v_temp_0_23}  OutVars{temp_0=v_temp_0_23}  AuxVars[]  AssignedVars[] 14178#L258_T0_init [2204] L258_T0_init-->MyIngressEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14177#MyIngressEXIT_T0_init >[2287] MyIngressEXIT_T0_init-->L562-D108: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14174#L562-D108 [1699] L562-D108-->L562_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14171#L562_T0_init [1989] L562_T0_init-->L562_T0_init-D50: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 14172#L562_T0_init-D50 [1602] L562_T0_init-D50-->MyEgressENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14175#MyEgressENTRY_T0_init [1617] MyEgressENTRY_T0_init-->L249_T0_init: Formula: (or (not (= 0 v_standard_metadata.egress_port_34)) (not v_hdr.tcp.valid_32))  InVars {standard_metadata.egress_port=v_standard_metadata.egress_port_34, hdr.tcp.valid=v_hdr.tcp.valid_32}  OutVars{standard_metadata.egress_port=v_standard_metadata.egress_port_34, hdr.tcp.valid=v_hdr.tcp.valid_32}  AuxVars[]  AssignedVars[] 14173#L249_T0_init [1619] L249_T0_init-->MyEgressEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14170#MyEgressEXIT_T0_init >[2308] MyEgressEXIT_T0_init-->L563-D90: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14169#L563-D90 [1623] L563-D90-->L563_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14166#L563_T0_init [1840] L563_T0_init-->L563_T0_init-D32: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 14167#L563_T0_init-D32 [2149] L563_T0_init-D32-->MyComputeChecksumFINAL_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14168#MyComputeChecksumFINAL_T0_init [1927] MyComputeChecksumFINAL_T0_init-->MyComputeChecksumEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14165#MyComputeChecksumEXIT_T0_init >[2341] MyComputeChecksumEXIT_T0_init-->L564-D110: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14164#L564-D110 [1498] L564-D110-->L564_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14163#L564_T0_init [1919] L564_T0_init-->L565-1_T0_init: Formula: v_forward_30  InVars {forward=v_forward_30}  OutVars{forward=v_forward_30}  AuxVars[]  AssignedVars[] 14161#L565-1_T0_init [1928] L565-1_T0_init-->L569_T0_init: Formula: (let ((.cse0 (= v__old_hdr.ethernet.srcAddr_14 0))) (or (and v__p4ltl_0_6 (not .cse0)) (and (not v__p4ltl_0_6) .cse0)))  InVars {_old_hdr.ethernet.srcAddr=v__old_hdr.ethernet.srcAddr_14}  OutVars{_p4ltl_0=v__p4ltl_0_6, _old_hdr.ethernet.srcAddr=v__old_hdr.ethernet.srcAddr_14}  AuxVars[]  AssignedVars[_p4ltl_0] 14160#L569_T0_init [1772] L569_T0_init-->L570_T0_init: Formula: (let ((.cse0 (= 2071690107 v__old_hdr.ipv4.dstAddr_14))) (or (and v__p4ltl_1_6 (not .cse0)) (and .cse0 (not v__p4ltl_1_6))))  InVars {_old_hdr.ipv4.dstAddr=v__old_hdr.ipv4.dstAddr_14}  OutVars{_old_hdr.ipv4.dstAddr=v__old_hdr.ipv4.dstAddr_14, _p4ltl_1=v__p4ltl_1_6}  AuxVars[]  AssignedVars[_p4ltl_1] 14159#L570_T0_init [1440] L570_T0_init-->L571_T0_init: Formula: (let ((.cse0 (= 281474976710655 v__old_hdr.ethernet.dstAddr_15))) (or (and v__p4ltl_2_7 (not .cse0)) (and (not v__p4ltl_2_7) .cse0)))  InVars {_old_hdr.ethernet.dstAddr=v__old_hdr.ethernet.dstAddr_15}  OutVars{_p4ltl_2=v__p4ltl_2_7, _old_hdr.ethernet.dstAddr=v__old_hdr.ethernet.dstAddr_15}  AuxVars[]  AssignedVars[_p4ltl_2] 14158#L571_T0_init [1910] L571_T0_init-->mainFINAL_T0_init: Formula: (let ((.cse0 (= v_standard_metadata.ingress_port_19 0))) (or (and v__p4ltl_3_6 .cse0) (and (not .cse0) (not v__p4ltl_3_6))))  InVars {standard_metadata.ingress_port=v_standard_metadata.ingress_port_19}  OutVars{standard_metadata.ingress_port=v_standard_metadata.ingress_port_19, _p4ltl_3=v__p4ltl_3_6}  AuxVars[]  AssignedVars[_p4ltl_3] 14157#mainFINAL_T0_init [2017] mainFINAL_T0_init-->mainEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14156#mainEXIT_T0_init >[2277] mainEXIT_T0_init-->L577-1-D72: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14149#L577-1-D72 [1809] L577-1-D72-->L577-1_accept_S1: Formula: (and v__p4ltl_1_9 v__p4ltl_0_9 v__p4ltl_3_9 v__p4ltl_2_9 (or (not v__p4ltl_3_9) (not v__p4ltl_1_9) (= 1 v_standard_metadata.egress_port_30) (not v__p4ltl_2_9) (not v__p4ltl_0_9)))  InVars {_p4ltl_2=v__p4ltl_2_9, standard_metadata.egress_port=v_standard_metadata.egress_port_30, _p4ltl_3=v__p4ltl_3_9, _p4ltl_0=v__p4ltl_0_9, _p4ltl_1=v__p4ltl_1_9}  OutVars{_p4ltl_2=v__p4ltl_2_9, standard_metadata.egress_port=v_standard_metadata.egress_port_30, _p4ltl_3=v__p4ltl_3_9, _p4ltl_0=v__p4ltl_0_9, _p4ltl_1=v__p4ltl_1_9}  AuxVars[]  AssignedVars[] 13099#L577-1_accept_S1 
[2023-01-16 05:55:54,864 INFO  L754   eck$LassoCheckResult]: Loop: 13099#L577-1_accept_S1 [1488] L577-1_accept_S1-->L577_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13039#L577_accept_S1 [1736] L577_accept_S1-->L577_accept_S1-D53: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 13511#L577_accept_S1-D53 [1856] L577_accept_S1-D53-->mainENTRY_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 12978#mainENTRY_accept_S1 [1988] mainENTRY_accept_S1-->mainENTRY_accept_S1-D39: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 13726#mainENTRY_accept_S1-D39 [1953] mainENTRY_accept_S1-D39-->havocProcedureENTRY_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13727#havocProcedureENTRY_accept_S1 [2101] havocProcedureENTRY_accept_S1-->L421_accept_S1: Formula: (not v_drop_11)  InVars {}  OutVars{drop=v_drop_11}  AuxVars[]  AssignedVars[drop] 13729#L421_accept_S1 [1955] L421_accept_S1-->L422_accept_S1: Formula: (not v_forward_18)  InVars {}  OutVars{forward=v_forward_18}  AuxVars[]  AssignedVars[forward] 13730#L422_accept_S1 [1966] L422_accept_S1-->L423_accept_S1: Formula: (= v_standard_metadata.ingress_port_13 0)  InVars {}  OutVars{standard_metadata.ingress_port=v_standard_metadata.ingress_port_13}  AuxVars[]  AssignedVars[standard_metadata.ingress_port] 13009#L423_accept_S1 [1445] L423_accept_S1-->L424_accept_S1: Formula: (= v_standard_metadata.egress_spec_16 0)  InVars {}  OutVars{standard_metadata.egress_spec=v_standard_metadata.egress_spec_16}  AuxVars[]  AssignedVars[standard_metadata.egress_spec] 13010#L424_accept_S1 [1702] L424_accept_S1-->L425_accept_S1: Formula: (= 0 v_standard_metadata.egress_port_17)  InVars {}  OutVars{standard_metadata.egress_port=v_standard_metadata.egress_port_17}  AuxVars[]  AssignedVars[standard_metadata.egress_port] 13380#L425_accept_S1 [1647] L425_accept_S1-->L426_accept_S1: Formula: (= v_standard_metadata.instance_type_8 0)  InVars {}  OutVars{standard_metadata.instance_type=v_standard_metadata.instance_type_8}  AuxVars[]  AssignedVars[standard_metadata.instance_type] 13381#L426_accept_S1 [1817] L426_accept_S1-->L427_accept_S1: Formula: (= v_standard_metadata.packet_length_9 0)  InVars {}  OutVars{standard_metadata.packet_length=v_standard_metadata.packet_length_9}  AuxVars[]  AssignedVars[standard_metadata.packet_length] 13476#L427_accept_S1 [1712] L427_accept_S1-->L428_accept_S1: Formula: (= v_standard_metadata.enq_timestamp_8 0)  InVars {}  OutVars{standard_metadata.enq_timestamp=v_standard_metadata.enq_timestamp_8}  AuxVars[]  AssignedVars[standard_metadata.enq_timestamp] 13375#L428_accept_S1 [1646] L428_accept_S1-->L429_accept_S1: Formula: (= v_standard_metadata.enq_qdepth_8 0)  InVars {}  OutVars{standard_metadata.enq_qdepth=v_standard_metadata.enq_qdepth_8}  AuxVars[]  AssignedVars[standard_metadata.enq_qdepth] 13376#L429_accept_S1 [2106] L429_accept_S1-->L430_accept_S1: Formula: (= v_standard_metadata.deq_timedelta_8 0)  InVars {}  OutVars{standard_metadata.deq_timedelta=v_standard_metadata.deq_timedelta_8}  AuxVars[]  AssignedVars[standard_metadata.deq_timedelta] 13827#L430_accept_S1 [2124] L430_accept_S1-->L431_accept_S1: Formula: (= v_standard_metadata.deq_qdepth_9 0)  InVars {}  OutVars{standard_metadata.deq_qdepth=v_standard_metadata.deq_qdepth_9}  AuxVars[]  AssignedVars[standard_metadata.deq_qdepth] 13261#L431_accept_S1 [1575] L431_accept_S1-->L432_accept_S1: Formula: (= v_standard_metadata.ingress_global_timestamp_9 0)  InVars {}  OutVars{standard_metadata.ingress_global_timestamp=v_standard_metadata.ingress_global_timestamp_9}  AuxVars[]  AssignedVars[standard_metadata.ingress_global_timestamp] 12977#L432_accept_S1 [1430] L432_accept_S1-->L433_accept_S1: Formula: (= v_standard_metadata.egress_global_timestamp_8 0)  InVars {}  OutVars{standard_metadata.egress_global_timestamp=v_standard_metadata.egress_global_timestamp_8}  AuxVars[]  AssignedVars[standard_metadata.egress_global_timestamp] 12979#L433_accept_S1 [2160] L433_accept_S1-->L434_accept_S1: Formula: (= 0 v_standard_metadata.mcast_grp_8)  InVars {}  OutVars{standard_metadata.mcast_grp=v_standard_metadata.mcast_grp_8}  AuxVars[]  AssignedVars[standard_metadata.mcast_grp] 13787#L434_accept_S1 [2037] L434_accept_S1-->L435_accept_S1: Formula: (= v_standard_metadata.egress_rid_8 0)  InVars {}  OutVars{standard_metadata.egress_rid=v_standard_metadata.egress_rid_8}  AuxVars[]  AssignedVars[standard_metadata.egress_rid] 13569#L435_accept_S1 [1784] L435_accept_S1-->L436_accept_S1: Formula: (= v_standard_metadata.checksum_error_9 0)  InVars {}  OutVars{standard_metadata.checksum_error=v_standard_metadata.checksum_error_9}  AuxVars[]  AssignedVars[standard_metadata.checksum_error] 13570#L436_accept_S1 [1853] L436_accept_S1-->L437_accept_S1: Formula: (= v_standard_metadata.priority_8 0)  InVars {}  OutVars{standard_metadata.priority=v_standard_metadata.priority_8}  AuxVars[]  AssignedVars[standard_metadata.priority] 13496#L437_accept_S1 [1728] L437_accept_S1-->L438_accept_S1: Formula: (not v_hdr.ethernet.valid_13)  InVars {}  OutVars{hdr.ethernet.valid=v_hdr.ethernet.valid_13}  AuxVars[]  AssignedVars[hdr.ethernet.valid] 13497#L438_accept_S1 [1824] L438_accept_S1-->L439_accept_S1: Formula: (= v_emit_23 (store v_emit_24 v_hdr.ethernet_2 false))  InVars {emit=v_emit_24, hdr.ethernet=v_hdr.ethernet_2}  OutVars{emit=v_emit_23, hdr.ethernet=v_hdr.ethernet_2}  AuxVars[]  AssignedVars[emit] 13606#L439_accept_S1 [1875] L439_accept_S1-->L440_accept_S1: Formula: true  InVars {}  OutVars{hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_25}  AuxVars[]  AssignedVars[hdr.ethernet.dstAddr] 13256#L440_accept_S1 [1571] L440_accept_S1-->L441_accept_S1: Formula: (= v_hdr.ethernet.dstAddr_27 v__old_hdr.ethernet.dstAddr_11)  InVars {hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_27}  OutVars{_old_hdr.ethernet.dstAddr=v__old_hdr.ethernet.dstAddr_11, hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_27}  AuxVars[]  AssignedVars[_old_hdr.ethernet.dstAddr] 13257#L441_accept_S1 [2023] L441_accept_S1-->L442_accept_S1: Formula: (= v_hdr.ethernet.dstAddr_30 v__old_hdr.ethernet.dstAddr_13)  InVars {hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_30}  OutVars{_old_hdr.ethernet.dstAddr=v__old_hdr.ethernet.dstAddr_13, hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_30}  AuxVars[]  AssignedVars[_old_hdr.ethernet.dstAddr] 13424#L442_accept_S1 [1674] L442_accept_S1-->L443_accept_S1: Formula: true  InVars {}  OutVars{hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_22}  AuxVars[]  AssignedVars[hdr.ethernet.srcAddr] 13425#L443_accept_S1 [2168] L443_accept_S1-->L444_accept_S1: Formula: (= v_hdr.ethernet.srcAddr_27 v__old_hdr.ethernet.srcAddr_13)  InVars {hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_27}  OutVars{hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_27, _old_hdr.ethernet.srcAddr=v__old_hdr.ethernet.srcAddr_13}  AuxVars[]  AssignedVars[_old_hdr.ethernet.srcAddr] 13252#L444_accept_S1 [1568] L444_accept_S1-->L445_accept_S1: Formula: (= v_hdr.ethernet.srcAddr_24 v__old_hdr.ethernet.srcAddr_11)  InVars {hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_24}  OutVars{hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_24, _old_hdr.ethernet.srcAddr=v__old_hdr.ethernet.srcAddr_11}  AuxVars[]  AssignedVars[_old_hdr.ethernet.srcAddr] 13253#L445_accept_S1 [2169] L445_accept_S1-->L446_accept_S1: Formula: true  InVars {}  OutVars{hdr.ethernet.etherType=v_hdr.ethernet.etherType_23}  AuxVars[]  AssignedVars[hdr.ethernet.etherType] 13382#L446_accept_S1 [1648] L446_accept_S1-->L447_accept_S1: Formula: (and (<= 0 v_hdr.ethernet.etherType_25) (<= v_hdr.ethernet.etherType_25 65536))  InVars {hdr.ethernet.etherType=v_hdr.ethernet.etherType_25}  OutVars{hdr.ethernet.etherType=v_hdr.ethernet.etherType_25}  AuxVars[]  AssignedVars[] 13383#L447_accept_S1 [2121] L447_accept_S1-->L448_accept_S1: Formula: (not v_hdr.ipv6.valid_17)  InVars {}  OutVars{hdr.ipv6.valid=v_hdr.ipv6.valid_17}  AuxVars[]  AssignedVars[hdr.ipv6.valid] 13652#L448_accept_S1 [1871] L448_accept_S1-->L449_accept_S1: Formula: (= (store v_emit_20 v_hdr.ipv6_9 false) v_emit_19)  InVars {emit=v_emit_20, hdr.ipv6=v_hdr.ipv6_9}  OutVars{emit=v_emit_19, hdr.ipv6=v_hdr.ipv6_9}  AuxVars[]  AssignedVars[emit] 13644#L449_accept_S1 [1865] L449_accept_S1-->L450_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv6.version=v_hdr.ipv6.version_18}  AuxVars[]  AssignedVars[hdr.ipv6.version] 13645#L450_accept_S1 [2071] L450_accept_S1-->L451_accept_S1: Formula: (and (<= v_hdr.ipv6.version_17 16) (<= 0 v_hdr.ipv6.version_17))  InVars {hdr.ipv6.version=v_hdr.ipv6.version_17}  OutVars{hdr.ipv6.version=v_hdr.ipv6.version_17}  AuxVars[]  AssignedVars[] 13005#L451_accept_S1 [1443] L451_accept_S1-->L452_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv6.trafclass=v_hdr.ipv6.trafclass_11}  AuxVars[]  AssignedVars[hdr.ipv6.trafclass] 13006#L452_accept_S1 [1624] L452_accept_S1-->L453_accept_S1: Formula: (and (<= 0 v_hdr.ipv6.trafclass_10) (<= v_hdr.ipv6.trafclass_10 256))  InVars {hdr.ipv6.trafclass=v_hdr.ipv6.trafclass_10}  OutVars{hdr.ipv6.trafclass=v_hdr.ipv6.trafclass_10}  AuxVars[]  AssignedVars[] 13337#L453_accept_S1 [2130] L453_accept_S1-->L454_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv6.flowlabel=v_hdr.ipv6.flowlabel_9}  AuxVars[]  AssignedVars[hdr.ipv6.flowlabel] 13834#L454_accept_S1 [2191] L454_accept_S1-->L455_accept_S1: Formula: (and (<= 0 v_hdr.ipv6.flowlabel_10) (<= v_hdr.ipv6.flowlabel_10 1048576))  InVars {hdr.ipv6.flowlabel=v_hdr.ipv6.flowlabel_10}  OutVars{hdr.ipv6.flowlabel=v_hdr.ipv6.flowlabel_10}  AuxVars[]  AssignedVars[] 13861#L455_accept_S1 [2213] L455_accept_S1-->L456_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv6.payloadlen=v_hdr.ipv6.payloadlen_19}  AuxVars[]  AssignedVars[hdr.ipv6.payloadlen] 13477#L456_accept_S1 [1713] L456_accept_S1-->L457_accept_S1: Formula: (and (<= v_hdr.ipv6.payloadlen_18 65536) (<= 0 v_hdr.ipv6.payloadlen_18))  InVars {hdr.ipv6.payloadlen=v_hdr.ipv6.payloadlen_18}  OutVars{hdr.ipv6.payloadlen=v_hdr.ipv6.payloadlen_18}  AuxVars[]  AssignedVars[] 13403#L457_accept_S1 [1659] L457_accept_S1-->L458_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv6.nextheader=v_hdr.ipv6.nextheader_19}  AuxVars[]  AssignedVars[hdr.ipv6.nextheader] 13404#L458_accept_S1 [1976] L458_accept_S1-->L459_accept_S1: Formula: (and (<= 0 v_hdr.ipv6.nextheader_21) (<= v_hdr.ipv6.nextheader_21 256))  InVars {hdr.ipv6.nextheader=v_hdr.ipv6.nextheader_21}  OutVars{hdr.ipv6.nextheader=v_hdr.ipv6.nextheader_21}  AuxVars[]  AssignedVars[] 13750#L459_accept_S1 [2062] L459_accept_S1-->L460_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv6.hoplimit=v_hdr.ipv6.hoplimit_19}  AuxVars[]  AssignedVars[hdr.ipv6.hoplimit] 13672#L460_accept_S1 [1894] L460_accept_S1-->L461_accept_S1: Formula: (and (<= 0 v_hdr.ipv6.hoplimit_18) (<= v_hdr.ipv6.hoplimit_18 256))  InVars {hdr.ipv6.hoplimit=v_hdr.ipv6.hoplimit_18}  OutVars{hdr.ipv6.hoplimit=v_hdr.ipv6.hoplimit_18}  AuxVars[]  AssignedVars[] 13083#L461_accept_S1 [1480] L461_accept_S1-->L462_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv6.srcAddr=v_hdr.ipv6.srcAddr_16}  AuxVars[]  AssignedVars[hdr.ipv6.srcAddr] 13084#L462_accept_S1 [2047] L462_accept_S1-->L463_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv6.dstAddr=v_hdr.ipv6.dstAddr_17}  AuxVars[]  AssignedVars[hdr.ipv6.dstAddr] 13034#L463_accept_S1 [1457] L463_accept_S1-->L464_accept_S1: Formula: (not v_hdr.ipv4_tunnel.valid_19)  InVars {}  OutVars{hdr.ipv4_tunnel.valid=v_hdr.ipv4_tunnel.valid_19}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.valid] 13035#L464_accept_S1 [1546] L464_accept_S1-->L465_accept_S1: Formula: (= v_emit_37 (store v_emit_38 v_hdr.ipv4_tunnel_9 false))  InVars {emit=v_emit_38, hdr.ipv4_tunnel=v_hdr.ipv4_tunnel_9}  OutVars{emit=v_emit_37, hdr.ipv4_tunnel=v_hdr.ipv4_tunnel_9}  AuxVars[]  AssignedVars[emit] 13214#L465_accept_S1 [2053] L465_accept_S1-->L466_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.version=v_hdr.ipv4_tunnel.version_14}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.version] 13631#L466_accept_S1 [1847] L466_accept_S1-->L467_accept_S1: Formula: (and (<= v_hdr.ipv4_tunnel.version_15 16) (<= 0 v_hdr.ipv4_tunnel.version_15))  InVars {hdr.ipv4_tunnel.version=v_hdr.ipv4_tunnel.version_15}  OutVars{hdr.ipv4_tunnel.version=v_hdr.ipv4_tunnel.version_15}  AuxVars[]  AssignedVars[] 13081#L467_accept_S1 [1479] L467_accept_S1-->L468_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.ihl=v_hdr.ipv4_tunnel.ihl_17}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.ihl] 13082#L468_accept_S1 [2182] L468_accept_S1-->L469_accept_S1: Formula: (and (<= 0 v_hdr.ipv4_tunnel.ihl_15) (<= v_hdr.ipv4_tunnel.ihl_15 16))  InVars {hdr.ipv4_tunnel.ihl=v_hdr.ipv4_tunnel.ihl_15}  OutVars{hdr.ipv4_tunnel.ihl=v_hdr.ipv4_tunnel.ihl_15}  AuxVars[]  AssignedVars[] 13410#L469_accept_S1 [1666] L469_accept_S1-->L470_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.diffserv=v_hdr.ipv4_tunnel.diffserv_17}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.diffserv] 13411#L470_accept_S1 [1669] L470_accept_S1-->L471_accept_S1: Formula: (and (<= v_hdr.ipv4_tunnel.diffserv_16 256) (<= 0 v_hdr.ipv4_tunnel.diffserv_16))  InVars {hdr.ipv4_tunnel.diffserv=v_hdr.ipv4_tunnel.diffserv_16}  OutVars{hdr.ipv4_tunnel.diffserv=v_hdr.ipv4_tunnel.diffserv_16}  AuxVars[]  AssignedVars[] 13416#L471_accept_S1 [1820] L471_accept_S1-->L472_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.totalLen=v_hdr.ipv4_tunnel.totalLen_17}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.totalLen] 13602#L472_accept_S1 [2199] L472_accept_S1-->L473_accept_S1: Formula: (and (<= v_hdr.ipv4_tunnel.totalLen_16 65536) (<= 0 v_hdr.ipv4_tunnel.totalLen_16))  InVars {hdr.ipv4_tunnel.totalLen=v_hdr.ipv4_tunnel.totalLen_16}  OutVars{hdr.ipv4_tunnel.totalLen=v_hdr.ipv4_tunnel.totalLen_16}  AuxVars[]  AssignedVars[] 13339#L473_accept_S1 [1626] L473_accept_S1-->L474_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.identification=v_hdr.ipv4_tunnel.identification_15}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.identification] 13340#L474_accept_S1 [1757] L474_accept_S1-->L475_accept_S1: Formula: (and (<= v_hdr.ipv4_tunnel.identification_14 65536) (<= 0 v_hdr.ipv4_tunnel.identification_14))  InVars {hdr.ipv4_tunnel.identification=v_hdr.ipv4_tunnel.identification_14}  OutVars{hdr.ipv4_tunnel.identification=v_hdr.ipv4_tunnel.identification_14}  AuxVars[]  AssignedVars[] 13536#L475_accept_S1 [2044] L475_accept_S1-->L476_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.flags=v_hdr.ipv4_tunnel.flags_15}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.flags] 13211#L476_accept_S1 [1544] L476_accept_S1-->L477_accept_S1: Formula: (and (<= v_hdr.ipv4_tunnel.flags_16 8) (<= 0 v_hdr.ipv4_tunnel.flags_16))  InVars {hdr.ipv4_tunnel.flags=v_hdr.ipv4_tunnel.flags_16}  OutVars{hdr.ipv4_tunnel.flags=v_hdr.ipv4_tunnel.flags_16}  AuxVars[]  AssignedVars[] 13212#L477_accept_S1 [1657] L477_accept_S1-->L478_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.fragOffset=v_hdr.ipv4_tunnel.fragOffset_14}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.fragOffset] 13210#L478_accept_S1 [1543] L478_accept_S1-->L479_accept_S1: Formula: (and (<= 0 v_hdr.ipv4_tunnel.fragOffset_16) (<= v_hdr.ipv4_tunnel.fragOffset_16 8192))  InVars {hdr.ipv4_tunnel.fragOffset=v_hdr.ipv4_tunnel.fragOffset_16}  OutVars{hdr.ipv4_tunnel.fragOffset=v_hdr.ipv4_tunnel.fragOffset_16}  AuxVars[]  AssignedVars[] 13007#L479_accept_S1 [1444] L479_accept_S1-->L480_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.ttl=v_hdr.ipv4_tunnel.ttl_17}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.ttl] 13008#L480_accept_S1 [2092] L480_accept_S1-->L481_accept_S1: Formula: (and (<= 0 v_hdr.ipv4_tunnel.ttl_16) (<= v_hdr.ipv4_tunnel.ttl_16 256))  InVars {hdr.ipv4_tunnel.ttl=v_hdr.ipv4_tunnel.ttl_16}  OutVars{hdr.ipv4_tunnel.ttl=v_hdr.ipv4_tunnel.ttl_16}  AuxVars[]  AssignedVars[] 13171#L481_accept_S1 [1524] L481_accept_S1-->L482_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.protocol=v_hdr.ipv4_tunnel.protocol_18}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.protocol] 13130#L482_accept_S1 [1503] L482_accept_S1-->L483_accept_S1: Formula: (and (<= v_hdr.ipv4_tunnel.protocol_16 256) (<= 0 v_hdr.ipv4_tunnel.protocol_16))  InVars {hdr.ipv4_tunnel.protocol=v_hdr.ipv4_tunnel.protocol_16}  OutVars{hdr.ipv4_tunnel.protocol=v_hdr.ipv4_tunnel.protocol_16}  AuxVars[]  AssignedVars[] 13131#L483_accept_S1 [2089] L483_accept_S1-->L484_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.hdrChecksum=v_hdr.ipv4_tunnel.hdrChecksum_9}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.hdrChecksum] 13816#L484_accept_S1 [2138] L484_accept_S1-->L485_accept_S1: Formula: (and (<= 0 v_hdr.ipv4_tunnel.hdrChecksum_12) (<= v_hdr.ipv4_tunnel.hdrChecksum_12 65536))  InVars {hdr.ipv4_tunnel.hdrChecksum=v_hdr.ipv4_tunnel.hdrChecksum_12}  OutVars{hdr.ipv4_tunnel.hdrChecksum=v_hdr.ipv4_tunnel.hdrChecksum_12}  AuxVars[]  AssignedVars[] 13625#L485_accept_S1 [1842] L485_accept_S1-->L486_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.srcAddr=v_hdr.ipv4_tunnel.srcAddr_13}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.srcAddr] 13453#L486_accept_S1 [1691] L486_accept_S1-->L487_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.dstAddr=v_hdr.ipv4_tunnel.dstAddr_13}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.dstAddr] 13303#L487_accept_S1 [1600] L487_accept_S1-->L488_accept_S1: Formula: (not v_hdr.ipv4.valid_25)  InVars {}  OutVars{hdr.ipv4.valid=v_hdr.ipv4.valid_25}  AuxVars[]  AssignedVars[hdr.ipv4.valid] 13304#L488_accept_S1 [1730] L488_accept_S1-->L489_accept_S1: Formula: (= v_emit_39 (store v_emit_40 v_hdr.ipv4_3 false))  InVars {hdr.ipv4=v_hdr.ipv4_3, emit=v_emit_40}  OutVars{hdr.ipv4=v_hdr.ipv4_3, emit=v_emit_39}  AuxVars[]  AssignedVars[emit] 13501#L489_accept_S1 [2125] L489_accept_S1-->L490_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.version=v_hdr.ipv4.version_11}  AuxVars[]  AssignedVars[hdr.ipv4.version] 13832#L490_accept_S1 [2162] L490_accept_S1-->L491_accept_S1: Formula: (and (<= 0 v_hdr.ipv4.version_13) (<= v_hdr.ipv4.version_13 16))  InVars {hdr.ipv4.version=v_hdr.ipv4.version_13}  OutVars{hdr.ipv4.version=v_hdr.ipv4.version_13}  AuxVars[]  AssignedVars[] 13200#L491_accept_S1 [1538] L491_accept_S1-->L492_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.ihl=v_hdr.ipv4.ihl_12}  AuxVars[]  AssignedVars[hdr.ipv4.ihl] 13201#L492_accept_S1 [1952] L492_accept_S1-->L493_accept_S1: Formula: (and (<= 0 v_hdr.ipv4.ihl_9) (<= v_hdr.ipv4.ihl_9 16))  InVars {hdr.ipv4.ihl=v_hdr.ipv4.ihl_9}  OutVars{hdr.ipv4.ihl=v_hdr.ipv4.ihl_9}  AuxVars[]  AssignedVars[] 13643#L493_accept_S1 [1864] L493_accept_S1-->L494_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.diffserv=v_hdr.ipv4.diffserv_10}  AuxVars[]  AssignedVars[hdr.ipv4.diffserv] 13389#L494_accept_S1 [1650] L494_accept_S1-->L495_accept_S1: Formula: (and (<= v_hdr.ipv4.diffserv_13 256) (<= 0 v_hdr.ipv4.diffserv_13))  InVars {hdr.ipv4.diffserv=v_hdr.ipv4.diffserv_13}  OutVars{hdr.ipv4.diffserv=v_hdr.ipv4.diffserv_13}  AuxVars[]  AssignedVars[] 13228#L495_accept_S1 [1555] L495_accept_S1-->L496_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.totalLen=v_hdr.ipv4.totalLen_14}  AuxVars[]  AssignedVars[hdr.ipv4.totalLen] 13229#L496_accept_S1 [1721] L496_accept_S1-->L497_accept_S1: Formula: (and (<= 0 v_hdr.ipv4.totalLen_16) (<= v_hdr.ipv4.totalLen_16 65536))  InVars {hdr.ipv4.totalLen=v_hdr.ipv4.totalLen_16}  OutVars{hdr.ipv4.totalLen=v_hdr.ipv4.totalLen_16}  AuxVars[]  AssignedVars[] 13488#L497_accept_S1 [2216] L497_accept_S1-->L498_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.identification=v_hdr.ipv4.identification_12}  AuxVars[]  AssignedVars[hdr.ipv4.identification] 13751#L498_accept_S1 [1980] L498_accept_S1-->L499_accept_S1: Formula: (and (<= 0 v_hdr.ipv4.identification_10) (<= v_hdr.ipv4.identification_10 65536))  InVars {hdr.ipv4.identification=v_hdr.ipv4.identification_10}  OutVars{hdr.ipv4.identification=v_hdr.ipv4.identification_10}  AuxVars[]  AssignedVars[] 13551#L499_accept_S1 [1767] L499_accept_S1-->L500_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.flags=v_hdr.ipv4.flags_12}  AuxVars[]  AssignedVars[hdr.ipv4.flags] 13494#L500_accept_S1 [1725] L500_accept_S1-->L501_accept_S1: Formula: (and (<= v_hdr.ipv4.flags_13 8) (<= 0 v_hdr.ipv4.flags_13))  InVars {hdr.ipv4.flags=v_hdr.ipv4.flags_13}  OutVars{hdr.ipv4.flags=v_hdr.ipv4.flags_13}  AuxVars[]  AssignedVars[] 13298#L501_accept_S1 [1595] L501_accept_S1-->L502_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.fragOffset=v_hdr.ipv4.fragOffset_13}  AuxVars[]  AssignedVars[hdr.ipv4.fragOffset] 13299#L502_accept_S1 [2118] L502_accept_S1-->L503_accept_S1: Formula: (and (<= v_hdr.ipv4.fragOffset_10 8192) (<= 0 v_hdr.ipv4.fragOffset_10))  InVars {hdr.ipv4.fragOffset=v_hdr.ipv4.fragOffset_10}  OutVars{hdr.ipv4.fragOffset=v_hdr.ipv4.fragOffset_10}  AuxVars[]  AssignedVars[] 13830#L503_accept_S1 [2145] L503_accept_S1-->L504_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.ttl=v_hdr.ipv4.ttl_10}  AuxVars[]  AssignedVars[hdr.ipv4.ttl] 13092#L504_accept_S1 [1483] L504_accept_S1-->L505_accept_S1: Formula: (and (<= v_hdr.ipv4.ttl_13 256) (<= 0 v_hdr.ipv4.ttl_13))  InVars {hdr.ipv4.ttl=v_hdr.ipv4.ttl_13}  OutVars{hdr.ipv4.ttl=v_hdr.ipv4.ttl_13}  AuxVars[]  AssignedVars[] 13093#L505_accept_S1 [2057] L505_accept_S1-->L506_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.protocol=v_hdr.ipv4.protocol_11}  AuxVars[]  AssignedVars[hdr.ipv4.protocol] 13653#L506_accept_S1 [1872] L506_accept_S1-->L507_accept_S1: Formula: (and (<= 0 v_hdr.ipv4.protocol_14) (<= v_hdr.ipv4.protocol_14 256))  InVars {hdr.ipv4.protocol=v_hdr.ipv4.protocol_14}  OutVars{hdr.ipv4.protocol=v_hdr.ipv4.protocol_14}  AuxVars[]  AssignedVars[] 13654#L507_accept_S1 [2135] L507_accept_S1-->L508_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.hdrChecksum=v_hdr.ipv4.hdrChecksum_10}  AuxVars[]  AssignedVars[hdr.ipv4.hdrChecksum] 13783#L508_accept_S1 [2024] L508_accept_S1-->L509_accept_S1: Formula: (and (<= v_hdr.ipv4.hdrChecksum_12 65536) (<= 0 v_hdr.ipv4.hdrChecksum_12))  InVars {hdr.ipv4.hdrChecksum=v_hdr.ipv4.hdrChecksum_12}  OutVars{hdr.ipv4.hdrChecksum=v_hdr.ipv4.hdrChecksum_12}  AuxVars[]  AssignedVars[] 13697#L509_accept_S1 [1921] L509_accept_S1-->L510_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.srcAddr=v_hdr.ipv4.srcAddr_9}  AuxVars[]  AssignedVars[hdr.ipv4.srcAddr] 13698#L510_accept_S1 [2224] L510_accept_S1-->L511_accept_S1: Formula: true  InVars {}  OutVars{hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_15}  AuxVars[]  AssignedVars[hdr.ipv4.dstAddr] 13398#L511_accept_S1 [1658] L511_accept_S1-->L512_accept_S1: Formula: (= v_hdr.ipv4.dstAddr_17 v__old_hdr.ipv4.dstAddr_13)  InVars {hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_17}  OutVars{_old_hdr.ipv4.dstAddr=v__old_hdr.ipv4.dstAddr_13, hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_17}  AuxVars[]  AssignedVars[_old_hdr.ipv4.dstAddr] 13080#L512_accept_S1 [1478] L512_accept_S1-->L513_accept_S1: Formula: (= v_hdr.ipv4.dstAddr_16 v__old_hdr.ipv4.dstAddr_12)  InVars {hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_16}  OutVars{_old_hdr.ipv4.dstAddr=v__old_hdr.ipv4.dstAddr_12, hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_16}  AuxVars[]  AssignedVars[_old_hdr.ipv4.dstAddr] 12998#L513_accept_S1 [1439] L513_accept_S1-->L514_accept_S1: Formula: (not v_hdr.tcp.valid_30)  InVars {}  OutVars{hdr.tcp.valid=v_hdr.tcp.valid_30}  AuxVars[]  AssignedVars[hdr.tcp.valid] 12999#L514_accept_S1 [2183] L514_accept_S1-->L515_accept_S1: Formula: (= v_emit_35 (store v_emit_36 v_hdr.tcp_3 false))  InVars {hdr.tcp=v_hdr.tcp_3, emit=v_emit_36}  OutVars{hdr.tcp=v_hdr.tcp_3, emit=v_emit_35}  AuxVars[]  AssignedVars[emit] 13158#L515_accept_S1 [1518] L515_accept_S1-->L516_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.srcport=v_hdr.tcp.srcport_10}  AuxVars[]  AssignedVars[hdr.tcp.srcport] 13159#L516_accept_S1 [1866] L516_accept_S1-->L517_accept_S1: Formula: (and (<= 0 v_hdr.tcp.srcport_11) (<= v_hdr.tcp.srcport_11 65536))  InVars {hdr.tcp.srcport=v_hdr.tcp.srcport_11}  OutVars{hdr.tcp.srcport=v_hdr.tcp.srcport_11}  AuxVars[]  AssignedVars[] 13458#L517_accept_S1 [1698] L517_accept_S1-->L518_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.dstport=v_hdr.tcp.dstport_11}  AuxVars[]  AssignedVars[hdr.tcp.dstport] 13204#L518_accept_S1 [1540] L518_accept_S1-->L519_accept_S1: Formula: (and (<= v_hdr.tcp.dstport_12 65536) (<= 0 v_hdr.tcp.dstport_12))  InVars {hdr.tcp.dstport=v_hdr.tcp.dstport_12}  OutVars{hdr.tcp.dstport=v_hdr.tcp.dstport_12}  AuxVars[]  AssignedVars[] 13205#L519_accept_S1 [2187] L519_accept_S1-->L520_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.sequence=v_hdr.tcp.sequence_41}  AuxVars[]  AssignedVars[hdr.tcp.sequence] 13784#L520_accept_S1 [2025] L520_accept_S1-->L521_accept_S1: Formula: (and (<= 0 v_hdr.tcp.sequence_42) (<= v_hdr.tcp.sequence_42 4294967296))  InVars {hdr.tcp.sequence=v_hdr.tcp.sequence_42}  OutVars{hdr.tcp.sequence=v_hdr.tcp.sequence_42}  AuxVars[]  AssignedVars[] 13546#L521_accept_S1 [1765] L521_accept_S1-->L522_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.ackseq=v_hdr.tcp.ackseq_42}  AuxVars[]  AssignedVars[hdr.tcp.ackseq] 13547#L522_accept_S1 [2090] L522_accept_S1-->L523_accept_S1: Formula: (and (<= v_hdr.tcp.ackseq_41 4294967296) (<= 0 v_hdr.tcp.ackseq_41))  InVars {hdr.tcp.ackseq=v_hdr.tcp.ackseq_41}  OutVars{hdr.tcp.ackseq=v_hdr.tcp.ackseq_41}  AuxVars[]  AssignedVars[] 13591#L523_accept_S1 [1807] L523_accept_S1-->L524_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.headerlength=v_hdr.tcp.headerlength_9}  AuxVars[]  AssignedVars[hdr.tcp.headerlength] 13592#L524_accept_S1 [1858] L524_accept_S1-->L525_accept_S1: Formula: (and (<= v_hdr.tcp.headerlength_12 16) (<= 0 v_hdr.tcp.headerlength_12))  InVars {hdr.tcp.headerlength=v_hdr.tcp.headerlength_12}  OutVars{hdr.tcp.headerlength=v_hdr.tcp.headerlength_12}  AuxVars[]  AssignedVars[] 13213#L525_accept_S1 [1545] L525_accept_S1-->L526_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.reservation=v_hdr.tcp.reservation_10}  AuxVars[]  AssignedVars[hdr.tcp.reservation] 13103#L526_accept_S1 [1491] L526_accept_S1-->L527_accept_S1: Formula: (and (<= v_hdr.tcp.reservation_11 64) (<= 0 v_hdr.tcp.reservation_11))  InVars {hdr.tcp.reservation=v_hdr.tcp.reservation_11}  OutVars{hdr.tcp.reservation=v_hdr.tcp.reservation_11}  AuxVars[]  AssignedVars[] 13104#L527_accept_S1 [2059] L527_accept_S1-->L528_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.URG=v_hdr.tcp.URG_11}  AuxVars[]  AssignedVars[hdr.tcp.URG] 13706#L528_accept_S1 [1926] L528_accept_S1-->L529_accept_S1: Formula: (and (<= v_hdr.tcp.URG_10 2) (<= 0 v_hdr.tcp.URG_10))  InVars {hdr.tcp.URG=v_hdr.tcp.URG_10}  OutVars{hdr.tcp.URG=v_hdr.tcp.URG_10}  AuxVars[]  AssignedVars[] 13574#L529_accept_S1 [1791] L529_accept_S1-->L530_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.ACK=v_hdr.tcp.ACK_10}  AuxVars[]  AssignedVars[hdr.tcp.ACK] 13575#L530_accept_S1 [2041] L530_accept_S1-->L531_accept_S1: Formula: (and (<= 0 v_hdr.tcp.ACK_12) (<= v_hdr.tcp.ACK_12 2))  InVars {hdr.tcp.ACK=v_hdr.tcp.ACK_12}  OutVars{hdr.tcp.ACK=v_hdr.tcp.ACK_12}  AuxVars[]  AssignedVars[] 13768#L531_accept_S1 [2000] L531_accept_S1-->L532_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.PSH=v_hdr.tcp.PSH_10}  AuxVars[]  AssignedVars[hdr.tcp.PSH] 13769#L532_accept_S1 [2042] L532_accept_S1-->L533_accept_S1: Formula: (and (<= v_hdr.tcp.PSH_12 2) (<= 0 v_hdr.tcp.PSH_12))  InVars {hdr.tcp.PSH=v_hdr.tcp.PSH_12}  OutVars{hdr.tcp.PSH=v_hdr.tcp.PSH_12}  AuxVars[]  AssignedVars[] 13637#L533_accept_S1 [1859] L533_accept_S1-->L534_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.RST=v_hdr.tcp.RST_12}  AuxVars[]  AssignedVars[hdr.tcp.RST] 13434#L534_accept_S1 [1679] L534_accept_S1-->L535_accept_S1: Formula: (and (<= v_hdr.tcp.RST_10 2) (<= 0 v_hdr.tcp.RST_10))  InVars {hdr.tcp.RST=v_hdr.tcp.RST_10}  OutVars{hdr.tcp.RST=v_hdr.tcp.RST_10}  AuxVars[]  AssignedVars[] 13435#L535_accept_S1 [1993] L535_accept_S1-->L536_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.SYN=v_hdr.tcp.SYN_12}  AuxVars[]  AssignedVars[hdr.tcp.SYN] 13241#L536_accept_S1 [1562] L536_accept_S1-->L537_accept_S1: Formula: (and (<= 0 v_hdr.tcp.SYN_10) (<= v_hdr.tcp.SYN_10 2))  InVars {hdr.tcp.SYN=v_hdr.tcp.SYN_10}  OutVars{hdr.tcp.SYN=v_hdr.tcp.SYN_10}  AuxVars[]  AssignedVars[] 13242#L537_accept_S1 [1970] L537_accept_S1-->L538_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.FIN=v_hdr.tcp.FIN_12}  AuxVars[]  AssignedVars[hdr.tcp.FIN] 13669#L538_accept_S1 [1891] L538_accept_S1-->L539_accept_S1: Formula: (and (<= 0 v_hdr.tcp.FIN_11) (<= v_hdr.tcp.FIN_11 2))  InVars {hdr.tcp.FIN=v_hdr.tcp.FIN_11}  OutVars{hdr.tcp.FIN=v_hdr.tcp.FIN_11}  AuxVars[]  AssignedVars[] 13670#L539_accept_S1 [2032] L539_accept_S1-->L540_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.windowsize=v_hdr.tcp.windowsize_11}  AuxVars[]  AssignedVars[hdr.tcp.windowsize] 13296#L540_accept_S1 [1594] L540_accept_S1-->L541_accept_S1: Formula: (and (<= 0 v_hdr.tcp.windowsize_9) (<= v_hdr.tcp.windowsize_9 65536))  InVars {hdr.tcp.windowsize=v_hdr.tcp.windowsize_9}  OutVars{hdr.tcp.windowsize=v_hdr.tcp.windowsize_9}  AuxVars[]  AssignedVars[] 13297#L541_accept_S1 [1660] L541_accept_S1-->L542_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.checksum=v_hdr.tcp.checksum_11}  AuxVars[]  AssignedVars[hdr.tcp.checksum] 13405#L542_accept_S1 [1981] L542_accept_S1-->L543_accept_S1: Formula: (and (<= v_hdr.tcp.checksum_9 65536) (<= 0 v_hdr.tcp.checksum_9))  InVars {hdr.tcp.checksum=v_hdr.tcp.checksum_9}  OutVars{hdr.tcp.checksum=v_hdr.tcp.checksum_9}  AuxVars[]  AssignedVars[] 13064#L543_accept_S1 [1468] L543_accept_S1-->L544_accept_S1: Formula: true  InVars {}  OutVars{hdr.tcp.pointer=v_hdr.tcp.pointer_12}  AuxVars[]  AssignedVars[hdr.tcp.pointer] 13065#L544_accept_S1 [1473] L544_accept_S1-->L545_accept_S1: Formula: (and (<= 0 v_hdr.tcp.pointer_9) (<= v_hdr.tcp.pointer_9 65536))  InVars {hdr.tcp.pointer=v_hdr.tcp.pointer_9}  OutVars{hdr.tcp.pointer=v_hdr.tcp.pointer_9}  AuxVars[]  AssignedVars[] 13074#L545_accept_S1 [2018] L545_accept_S1-->L546_accept_S1: Formula: (not v_hdr.udp_tunnel.valid_19)  InVars {}  OutVars{hdr.udp_tunnel.valid=v_hdr.udp_tunnel.valid_19}  AuxVars[]  AssignedVars[hdr.udp_tunnel.valid] 13329#L546_accept_S1 [1615] L546_accept_S1-->L547_accept_S1: Formula: (= v_emit_21 (store v_emit_22 v_hdr.udp_tunnel_8 false))  InVars {emit=v_emit_22, hdr.udp_tunnel=v_hdr.udp_tunnel_8}  OutVars{emit=v_emit_21, hdr.udp_tunnel=v_hdr.udp_tunnel_8}  AuxVars[]  AssignedVars[emit] 13330#L547_accept_S1 [2099] L547_accept_S1-->L548_accept_S1: Formula: true  InVars {}  OutVars{hdr.udp_tunnel.srcport=v_hdr.udp_tunnel.srcport_15}  AuxVars[]  AssignedVars[hdr.udp_tunnel.srcport] 13356#L548_accept_S1 [1635] L548_accept_S1-->L549_accept_S1: Formula: (and (<= v_hdr.udp_tunnel.srcport_17 65536) (<= 0 v_hdr.udp_tunnel.srcport_17))  InVars {hdr.udp_tunnel.srcport=v_hdr.udp_tunnel.srcport_17}  OutVars{hdr.udp_tunnel.srcport=v_hdr.udp_tunnel.srcport_17}  AuxVars[]  AssignedVars[] 13357#L549_accept_S1 [2225] L549_accept_S1-->L550_accept_S1: Formula: true  InVars {}  OutVars{hdr.udp_tunnel.dstport=v_hdr.udp_tunnel.dstport_17}  AuxVars[]  AssignedVars[hdr.udp_tunnel.dstport] 13544#L550_accept_S1 [1764] L550_accept_S1-->L551_accept_S1: Formula: (and (<= v_hdr.udp_tunnel.dstport_16 65536) (<= 0 v_hdr.udp_tunnel.dstport_16))  InVars {hdr.udp_tunnel.dstport=v_hdr.udp_tunnel.dstport_16}  OutVars{hdr.udp_tunnel.dstport=v_hdr.udp_tunnel.dstport_16}  AuxVars[]  AssignedVars[] 13545#L551_accept_S1 [2102] L551_accept_S1-->L552_accept_S1: Formula: true  InVars {}  OutVars{hdr.udp_tunnel.userlength=v_hdr.udp_tunnel.userlength_14}  AuxVars[]  AssignedVars[hdr.udp_tunnel.userlength] 13745#L552_accept_S1 [1971] L552_accept_S1-->L553_accept_S1: Formula: (and (<= 0 v_hdr.udp_tunnel.userlength_15) (<= v_hdr.udp_tunnel.userlength_15 65536))  InVars {hdr.udp_tunnel.userlength=v_hdr.udp_tunnel.userlength_15}  OutVars{hdr.udp_tunnel.userlength=v_hdr.udp_tunnel.userlength_15}  AuxVars[]  AssignedVars[] 13746#L553_accept_S1 [1998] L553_accept_S1-->L554_accept_S1: Formula: true  InVars {}  OutVars{hdr.udp_tunnel.checksum=v_hdr.udp_tunnel.checksum_17}  AuxVars[]  AssignedVars[hdr.udp_tunnel.checksum] 13188#L554_accept_S1 [1532] L554_accept_S1-->havocProcedureFINAL_accept_S1: Formula: (and (<= v_hdr.udp_tunnel.checksum_16 65536) (<= 0 v_hdr.udp_tunnel.checksum_16))  InVars {hdr.udp_tunnel.checksum=v_hdr.udp_tunnel.checksum_16}  OutVars{hdr.udp_tunnel.checksum=v_hdr.udp_tunnel.checksum_16}  AuxVars[]  AssignedVars[] 13189#havocProcedureFINAL_accept_S1 [1756] havocProcedureFINAL_accept_S1-->havocProcedureEXIT_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13239#havocProcedureEXIT_accept_S1 >[2239] havocProcedureEXIT_accept_S1-->L559-D55: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13240#L559-D55 [2068] L559-D55-->L559_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13038#L559_accept_S1 [1459] L559_accept_S1-->L559_accept_S1-D21: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 13040#L559_accept_S1-D21 [2131] L559_accept_S1-D21-->_parser_MyParserENTRY_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13202#_parser_MyParserENTRY_accept_S1 [1539] _parser_MyParserENTRY_accept_S1-->_parser_MyParserENTRY_accept_S1-D13: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 13203#_parser_MyParserENTRY_accept_S1-D13 [2142] _parser_MyParserENTRY_accept_S1-D13-->startENTRY_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13537#startENTRY_accept_S1 [1759] startENTRY_accept_S1-->L727_accept_S1: Formula: v_hdr.ethernet.valid_15  InVars {}  OutVars{hdr.ethernet.valid=v_hdr.ethernet.valid_15}  AuxVars[]  AssignedVars[hdr.ethernet.valid] 13311#L727_accept_S1 [1606] L727_accept_S1-->L730_accept_S1: Formula: (not (= v_hdr.ethernet.etherType_33 34525))  InVars {hdr.ethernet.etherType=v_hdr.ethernet.etherType_33}  OutVars{hdr.ethernet.etherType=v_hdr.ethernet.etherType_33}  AuxVars[]  AssignedVars[] 13312#L730_accept_S1 [1878] L730_accept_S1-->L730-1_accept_S1: Formula: (not (= v_hdr.ethernet.etherType_39 2048))  InVars {hdr.ethernet.etherType=v_hdr.ethernet.etherType_39}  OutVars{hdr.ethernet.etherType=v_hdr.ethernet.etherType_39}  AuxVars[]  AssignedVars[] 13208#L730-1_accept_S1 [1542] L730-1_accept_S1-->startEXIT_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13209#startEXIT_accept_S1 >[2261] startEXIT_accept_S1-->_parser_MyParserFINAL-D65: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13230#_parser_MyParserFINAL-D65 [1556] _parser_MyParserFINAL-D65-->_parser_MyParserFINAL_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13231#_parser_MyParserFINAL_accept_S1 [1557] _parser_MyParserFINAL_accept_S1-->_parser_MyParserEXIT_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13232#_parser_MyParserEXIT_accept_S1 >[2247] _parser_MyParserEXIT_accept_S1-->L560-D103: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13693#L560-D103 [1958] L560-D103-->L560_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13460#L560_accept_S1 [2028] L560_accept_S1-->L560_accept_S1-D15: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 13785#L560_accept_S1-D15 [2180] L560_accept_S1-D15-->MyVerifyChecksumFINAL_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13459#MyVerifyChecksumFINAL_accept_S1 [1697] MyVerifyChecksumFINAL_accept_S1-->MyVerifyChecksumEXIT_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13461#MyVerifyChecksumEXIT_accept_S1 >[2310] MyVerifyChecksumEXIT_accept_S1-->L561-D73: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13285#L561-D73 [1589] L561-D73-->L561_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 12994#L561_accept_S1 [1888] L561_accept_S1-->L561_accept_S1-D5: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 13505#L561_accept_S1-D5 [1733] L561_accept_S1-D5-->MyIngressENTRY_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13506#MyIngressENTRY_accept_S1 [1899] MyIngressENTRY_accept_S1-->L259_accept_S1: Formula: (= v_standard_metadata.ingress_port_15 0)  InVars {standard_metadata.ingress_port=v_standard_metadata.ingress_port_15}  OutVars{standard_metadata.ingress_port=v_standard_metadata.ingress_port_15}  AuxVars[]  AssignedVars[] 13680#L259_accept_S1 [2134] L259_accept_S1-->L266_accept_S1: Formula: (not (= v_hdr.ipv4.dstAddr_21 2071690107))  InVars {hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_21}  OutVars{hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_21}  AuxVars[]  AssignedVars[] 13094#L266_accept_S1 [1485] L266_accept_S1-->L267_accept_S1: Formula: (and (not (= 281474976710655 v_hdr.ethernet.dstAddr_37)) (not (= v_hdr.ethernet.srcAddr_28 0)))  InVars {hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_28, hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_37}  OutVars{hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_28, hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_37}  AuxVars[]  AssignedVars[] 13020#L267_accept_S1 [1476] L267_accept_S1-->L267_accept_S1-D35: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 13079#L267_accept_S1-D35 [1596] L267_accept_S1-D35-->store_user_macENTRY_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13087#store_user_macENTRY_accept_S1 [1481] store_user_macENTRY_accept_S1-->store_user_macENTRY_accept_S1-D41: Formula: (and (= v_user_mac.write_indexInParam_1 0) (= v_hdr.ethernet.srcAddr_21 v_user_mac.write_valueInParam_1))  InVars {hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_21}  OutVars{user_mac.write_value=v_user_mac.write_valueInParam_1, user_mac.write_index=v_user_mac.write_indexInParam_1, hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_21}  AuxVars[]  AssignedVars[user_mac.write_value, user_mac.write_index]< 13088#store_user_macENTRY_accept_S1-D41 [1854] store_user_macENTRY_accept_S1-D41-->user_mac.writeENTRY_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13636#user_mac.writeENTRY_accept_S1 [1956] user_mac.writeENTRY_accept_S1-->user_mac.writeFINAL_accept_S1: Formula: (= v_user_mac_16 (store v_user_mac_17 v_user_mac.write_index_2 v_user_mac.write_value_2))  InVars {user_mac.write_value=v_user_mac.write_value_2, user_mac.write_index=v_user_mac.write_index_2, user_mac=v_user_mac_17}  OutVars{user_mac.write_value=v_user_mac.write_value_2, user_mac.write_index=v_user_mac.write_index_2, user_mac=v_user_mac_16}  AuxVars[]  AssignedVars[user_mac] 13666#user_mac.writeFINAL_accept_S1 [1889] user_mac.writeFINAL_accept_S1-->user_mac.writeEXIT_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13667#user_mac.writeEXIT_accept_S1 >[2314] user_mac.writeEXIT_accept_S1-->store_user_macFINAL-D63: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: (and (= v_user_mac.write_indexInParam_1 0) (= v_hdr.ethernet.srcAddr_21 v_user_mac.write_valueInParam_1))  InVars {hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_21}  OutVars{user_mac.write_value=v_user_mac.write_valueInParam_1, user_mac.write_index=v_user_mac.write_indexInParam_1, hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_21}  AuxVars[]  AssignedVars[user_mac.write_value, user_mac.write_index] 13019#store_user_macFINAL-D63 [1450] store_user_macFINAL-D63-->store_user_macFINAL_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13021#store_user_macFINAL_accept_S1 [2027] store_user_macFINAL_accept_S1-->store_user_macEXIT_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13431#store_user_macEXIT_accept_S1 >[2321] store_user_macEXIT_accept_S1-->L267-1-D67: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13262#L267-1-D67 [1574] L267-1-D67-->L267-1_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 12991#L267-1_accept_S1 [2228] L267-1_accept_S1-->L267-1_accept_S1-D3: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 13338#L267-1_accept_S1-D3 [1625] L267-1_accept_S1-D3-->read_esboxENTRY_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13305#read_esboxENTRY_accept_S1 [1601] read_esboxENTRY_accept_S1-->L683_accept_S1: Formula: (= (mod (div (+ (* (- 1) (mod 0 1)) v_hdr.tcp.sequence_62) 1) 256) v_tmp_0_13)  InVars {hdr.tcp.sequence=v_hdr.tcp.sequence_62}  OutVars{hdr.tcp.sequence=v_hdr.tcp.sequence_62, tmp_0=v_tmp_0_13}  AuxVars[]  AssignedVars[tmp_0] 13306#L683_accept_S1 [1903] L683_accept_S1-->L684_accept_S1: Formula: (= v_tmp_12 (select v_es_box_15 v_tmp_0_11))  InVars {es_box=v_es_box_15, tmp_0=v_tmp_0_11}  OutVars{tmp=v_tmp_12, es_box=v_es_box_15, tmp_0=v_tmp_0_11}  AuxVars[]  AssignedVars[tmp] 13619#L684_accept_S1 [1835] L684_accept_S1-->L685_accept_S1: Formula: (= (+ (* (- 1) (mod v_hdr.tcp.sequence_60 256)) (mod 0 1) v_hdr.tcp.sequence_60 v_tmp_13) v_hdr.tcp.sequence_59)  InVars {tmp=v_tmp_13, hdr.tcp.sequence=v_hdr.tcp.sequence_60}  OutVars{tmp=v_tmp_13, hdr.tcp.sequence=v_hdr.tcp.sequence_59}  AuxVars[]  AssignedVars[hdr.tcp.sequence] 13324#L685_accept_S1 [1613] L685_accept_S1-->L687_accept_S1: Formula: (= v_tmp_2_13 (mod (div (+ v_hdr.tcp.sequence_58 (* (- 1) (mod v_hdr.tcp.sequence_58 256))) 256) 256))  InVars {hdr.tcp.sequence=v_hdr.tcp.sequence_58}  OutVars{tmp_2=v_tmp_2_13, hdr.tcp.sequence=v_hdr.tcp.sequence_58}  AuxVars[]  AssignedVars[tmp_2] 13325#L687_accept_S1 [2174] L687_accept_S1-->L688_accept_S1: Formula: (= v_tmp_1_12 (select v_es_box_12 v_tmp_2_11))  InVars {es_box=v_es_box_12, tmp_2=v_tmp_2_11}  OutVars{tmp_2=v_tmp_2_11, es_box=v_es_box_12, tmp_1=v_tmp_1_12}  AuxVars[]  AssignedVars[tmp_1] 13835#L688_accept_S1 [2132] L688_accept_S1-->L689_accept_S1: Formula: (= v_hdr.tcp.sequence_54 (+ (mod v_hdr.tcp.sequence_55 256) (* (- 1) (mod v_hdr.tcp.sequence_55 65536)) v_hdr.tcp.sequence_55 (* 256 v_tmp_1_14)))  InVars {hdr.tcp.sequence=v_hdr.tcp.sequence_55, tmp_1=v_tmp_1_14}  OutVars{hdr.tcp.sequence=v_hdr.tcp.sequence_54, tmp_1=v_tmp_1_14}  AuxVars[]  AssignedVars[hdr.tcp.sequence] 13237#L689_accept_S1 [1560] L689_accept_S1-->L691_accept_S1: Formula: (= (mod (div (+ (* (- 1) (mod v_hdr.tcp.sequence_65 65536)) v_hdr.tcp.sequence_65) 65536) 256) v_tmp_4_14)  InVars {hdr.tcp.sequence=v_hdr.tcp.sequence_65}  OutVars{hdr.tcp.sequence=v_hdr.tcp.sequence_65, tmp_4=v_tmp_4_14}  AuxVars[]  AssignedVars[tmp_4] 13238#L691_accept_S1 [1782] L691_accept_S1-->L692_accept_S1: Formula: (= v_tmp_3_12 (select v_es_box_11 v_tmp_4_11))  InVars {es_box=v_es_box_11, tmp_4=v_tmp_4_11}  OutVars{tmp_3=v_tmp_3_12, tmp_4=v_tmp_4_11, es_box=v_es_box_11}  AuxVars[]  AssignedVars[tmp_3] 13567#L692_accept_S1 [1841] L692_accept_S1-->L693_accept_S1: Formula: (= (+ (* 65536 v_tmp_3_11) (mod v_hdr.tcp.sequence_46 65536) (* (- 1) (mod v_hdr.tcp.sequence_46 16777216)) v_hdr.tcp.sequence_46) v_hdr.tcp.sequence_45)  InVars {tmp_3=v_tmp_3_11, hdr.tcp.sequence=v_hdr.tcp.sequence_46}  OutVars{tmp_3=v_tmp_3_11, hdr.tcp.sequence=v_hdr.tcp.sequence_45}  AuxVars[]  AssignedVars[hdr.tcp.sequence] 13624#L693_accept_S1 [2003] L693_accept_S1-->L695_accept_S1: Formula: (= (mod (div (+ (* (- 1) (mod v_hdr.tcp.sequence_61 16777216)) v_hdr.tcp.sequence_61) 16777216) 256) v_tmp_6_12)  InVars {hdr.tcp.sequence=v_hdr.tcp.sequence_61}  OutVars{tmp_6=v_tmp_6_12, hdr.tcp.sequence=v_hdr.tcp.sequence_61}  AuxVars[]  AssignedVars[tmp_6] 13174#L695_accept_S1 [1526] L695_accept_S1-->L696_accept_S1: Formula: (= (select v_es_box_23 v_tmp_6_13) v_tmp_5_13)  InVars {es_box=v_es_box_23, tmp_6=v_tmp_6_13}  OutVars{tmp_5=v_tmp_5_13, es_box=v_es_box_23, tmp_6=v_tmp_6_13}  AuxVars[]  AssignedVars[tmp_5] 13128#L696_accept_S1 [1502] L696_accept_S1-->L697_accept_S1: Formula: (= (+ (mod v_hdr.tcp.sequence_67 16777216) (* (- 1) (mod v_hdr.tcp.sequence_67 4294967296)) v_hdr.tcp.sequence_67 (* 16777216 v_tmp_5_14)) v_hdr.tcp.sequence_66)  InVars {tmp_5=v_tmp_5_14, hdr.tcp.sequence=v_hdr.tcp.sequence_67}  OutVars{tmp_5=v_tmp_5_14, hdr.tcp.sequence=v_hdr.tcp.sequence_66}  AuxVars[]  AssignedVars[hdr.tcp.sequence] 13129#L697_accept_S1 [1914] L697_accept_S1-->L699_accept_S1: Formula: (= v_tmp_8_11 (mod (div (+ v_hdr.tcp.ackseq_46 (* (- 1) (mod 0 1))) 1) 256))  InVars {hdr.tcp.ackseq=v_hdr.tcp.ackseq_46}  OutVars{hdr.tcp.ackseq=v_hdr.tcp.ackseq_46, tmp_8=v_tmp_8_11}  AuxVars[]  AssignedVars[tmp_8] 13112#L699_accept_S1 [1496] L699_accept_S1-->L700_accept_S1: Formula: (= v_tmp_7_12 (select v_es_box_19 v_tmp_8_13))  InVars {es_box=v_es_box_19, tmp_8=v_tmp_8_13}  OutVars{tmp_7=v_tmp_7_12, es_box=v_es_box_19, tmp_8=v_tmp_8_13}  AuxVars[]  AssignedVars[tmp_7] 13113#L700_accept_S1 [1569] L700_accept_S1-->L701_accept_S1: Formula: (= v_hdr.tcp.ackseq_55 (+ v_hdr.tcp.ackseq_56 v_tmp_7_13 (mod 0 1) (* (- 1) (mod v_hdr.tcp.ackseq_56 256))))  InVars {tmp_7=v_tmp_7_13, hdr.tcp.ackseq=v_hdr.tcp.ackseq_56}  OutVars{tmp_7=v_tmp_7_13, hdr.tcp.ackseq=v_hdr.tcp.ackseq_55}  AuxVars[]  AssignedVars[hdr.tcp.ackseq] 12990#L701_accept_S1 [1437] L701_accept_S1-->L703_accept_S1: Formula: (= (mod (div (+ v_hdr.tcp.ackseq_52 (* (- 1) (mod v_hdr.tcp.ackseq_52 256))) 256) 256) v_tmp_10_13)  InVars {hdr.tcp.ackseq=v_hdr.tcp.ackseq_52}  OutVars{hdr.tcp.ackseq=v_hdr.tcp.ackseq_52, tmp_10=v_tmp_10_13}  AuxVars[]  AssignedVars[tmp_10] 12992#L703_accept_S1 [1938] L703_accept_S1-->L704_accept_S1: Formula: (= (select v_es_box_22 v_tmp_10_12) v_tmp_9_12)  InVars {es_box=v_es_box_22, tmp_10=v_tmp_10_12}  OutVars{tmp_10=v_tmp_10_12, es_box=v_es_box_22, tmp_9=v_tmp_9_12}  AuxVars[]  AssignedVars[tmp_9] 13195#L704_accept_S1 [1535] L704_accept_S1-->L705_accept_S1: Formula: (= v_hdr.tcp.ackseq_67 (+ v_hdr.tcp.ackseq_68 (* 256 v_tmp_9_14) (* (- 1) (mod v_hdr.tcp.ackseq_68 65536)) (mod v_hdr.tcp.ackseq_68 256)))  InVars {hdr.tcp.ackseq=v_hdr.tcp.ackseq_68, tmp_9=v_tmp_9_14}  OutVars{hdr.tcp.ackseq=v_hdr.tcp.ackseq_67, tmp_9=v_tmp_9_14}  AuxVars[]  AssignedVars[hdr.tcp.ackseq] 13196#L705_accept_S1 [1909] L705_accept_S1-->L707_accept_S1: Formula: (= (mod (div (+ v_hdr.tcp.ackseq_47 (* (- 1) (mod v_hdr.tcp.ackseq_47 65536))) 65536) 256) v_tmp_12_12)  InVars {hdr.tcp.ackseq=v_hdr.tcp.ackseq_47}  OutVars{hdr.tcp.ackseq=v_hdr.tcp.ackseq_47, tmp_12=v_tmp_12_12}  AuxVars[]  AssignedVars[tmp_12] 13265#L707_accept_S1 [1577] L707_accept_S1-->L708_accept_S1: Formula: (= (select v_es_box_21 v_tmp_12_13) v_tmp_11_12)  InVars {es_box=v_es_box_21, tmp_12=v_tmp_12_13}  OutVars{tmp_11=v_tmp_11_12, tmp_12=v_tmp_12_13, es_box=v_es_box_21}  AuxVars[]  AssignedVars[tmp_11] 13266#L708_accept_S1 [1868] L708_accept_S1-->L709_accept_S1: Formula: (= v_hdr.tcp.ackseq_57 (+ v_hdr.tcp.ackseq_58 (mod v_hdr.tcp.ackseq_58 65536) (* (- 1) (mod v_hdr.tcp.ackseq_58 16777216)) (* 65536 v_tmp_11_13)))  InVars {tmp_11=v_tmp_11_13, hdr.tcp.ackseq=v_hdr.tcp.ackseq_58}  OutVars{tmp_11=v_tmp_11_13, hdr.tcp.ackseq=v_hdr.tcp.ackseq_57}  AuxVars[]  AssignedVars[hdr.tcp.ackseq] 13647#L709_accept_S1 [2030] L709_accept_S1-->L711_accept_S1: Formula: (= (mod (div (+ v_hdr.tcp.ackseq_48 (* (- 1) (mod v_hdr.tcp.ackseq_48 16777216))) 16777216) 256) v_tmp_14_13)  InVars {hdr.tcp.ackseq=v_hdr.tcp.ackseq_48}  OutVars{hdr.tcp.ackseq=v_hdr.tcp.ackseq_48, tmp_14=v_tmp_14_13}  AuxVars[]  AssignedVars[tmp_14] 13422#L711_accept_S1 [1673] L711_accept_S1-->L712_accept_S1: Formula: (= (select v_es_box_20 v_tmp_14_12) v_tmp_13_11)  InVars {es_box=v_es_box_20, tmp_14=v_tmp_14_12}  OutVars{es_box=v_es_box_20, tmp_13=v_tmp_13_11, tmp_14=v_tmp_14_12}  AuxVars[]  AssignedVars[tmp_13] 13423#L712_accept_S1 [1844] L712_accept_S1-->read_esboxFINAL_accept_S1: Formula: (= v_hdr.tcp.ackseq_63 (+ v_hdr.tcp.ackseq_64 (* (- 1) (mod v_hdr.tcp.ackseq_64 4294967296)) (mod v_hdr.tcp.ackseq_64 16777216) (* 16777216 v_tmp_13_13)))  InVars {hdr.tcp.ackseq=v_hdr.tcp.ackseq_64, tmp_13=v_tmp_13_13}  OutVars{hdr.tcp.ackseq=v_hdr.tcp.ackseq_63, tmp_13=v_tmp_13_13}  AuxVars[]  AssignedVars[hdr.tcp.ackseq] 13626#read_esboxFINAL_accept_S1 [2137] read_esboxFINAL_accept_S1-->read_esboxEXIT_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13743#read_esboxEXIT_accept_S1 >[2290] read_esboxEXIT_accept_S1-->L268-D81: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13487#L268-D81 [1719] L268-D81-->L268_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13290#L268_accept_S1 [1979] L268_accept_S1-->L268_accept_S1-D27: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 13289#L268_accept_S1-D27 [1592] L268_accept_S1-D27-->do_read_countENTRY_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13291#do_read_countENTRY_accept_S1 [2107] do_read_countENTRY_accept_S1-->do_read_countFINAL_accept_S1: Formula: (= (select v_count_16 0) v_temp_0_28)  InVars {count=v_count_16}  OutVars{count=v_count_16, temp_0=v_temp_0_28}  AuxVars[]  AssignedVars[temp_0] 13756#do_read_countFINAL_accept_S1 [1987] do_read_countFINAL_accept_S1-->do_read_countEXIT_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13292#do_read_countEXIT_accept_S1 >[2257] do_read_countEXIT_accept_S1-->L269-D83: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13293#L269-D83 [1687] L269-D83-->L269_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13447#L269_accept_S1 [2201] L269_accept_S1-->L270-1_accept_S1: Formula: (not (= v_temp_0_19 0))  InVars {temp_0=v_temp_0_19}  OutVars{temp_0=v_temp_0_19}  AuxVars[]  AssignedVars[] 13412#L270-1_accept_S1 [1668] L270-1_accept_S1-->L278-1_accept_S1: Formula: (not (= v_temp_0_21 1))  InVars {temp_0=v_temp_0_21}  OutVars{temp_0=v_temp_0_21}  AuxVars[]  AssignedVars[] 13413#L278-1_accept_S1 [2072] L278-1_accept_S1-->L287_accept_S1: Formula: (= v_temp_0_16 2)  InVars {temp_0=v_temp_0_16}  OutVars{temp_0=v_temp_0_16}  AuxVars[]  AssignedVars[] 13178#L287_accept_S1 [2226] L287_accept_S1-->L287_accept_S1-D9: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 13921#L287_accept_S1-D9 [2156] L287_accept_S1-D9-->creatipv6_2ENTRY_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13935#creatipv6_2ENTRY_accept_S1 [1501] creatipv6_2ENTRY_accept_S1-->L362_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13934#L362_accept_S1 [1729] L362_accept_S1-->L364_accept_S1: Formula: (= 6 v_hdr.ipv6.version_24)  InVars {}  OutVars{hdr.ipv6.version=v_hdr.ipv6.version_24}  AuxVars[]  AssignedVars[hdr.ipv6.version] 13933#L364_accept_S1 [2122] L364_accept_S1-->L365_accept_S1: Formula: (= v_hdr.ipv6.payloadlen_23 v_hdr.ipv4.totalLen_23)  InVars {hdr.ipv4.totalLen=v_hdr.ipv4.totalLen_23}  OutVars{hdr.ipv4.totalLen=v_hdr.ipv4.totalLen_23, hdr.ipv6.payloadlen=v_hdr.ipv6.payloadlen_23}  AuxVars[]  AssignedVars[hdr.ipv6.payloadlen] 13731#L365_accept_S1 [1957] L365_accept_S1-->L366_accept_S1: Formula: (= v_hdr.ipv6.nextheader_29 65)  InVars {}  OutVars{hdr.ipv6.nextheader=v_hdr.ipv6.nextheader_29}  AuxVars[]  AssignedVars[hdr.ipv6.nextheader] 13177#L366_accept_S1 [1528] L366_accept_S1-->L367_accept_S1: Formula: (= 64 v_hdr.ipv6.hoplimit_23)  InVars {}  OutVars{hdr.ipv6.hoplimit=v_hdr.ipv6.hoplimit_23}  AuxVars[]  AssignedVars[hdr.ipv6.hoplimit] 13179#L367_accept_S1 [1678] L367_accept_S1-->L368_accept_S1: Formula: (= v_hdr.ethernet.etherType_30 34525)  InVars {}  OutVars{hdr.ethernet.etherType=v_hdr.ethernet.etherType_30}  AuxVars[]  AssignedVars[hdr.ethernet.etherType] 13432#L368_accept_S1 [1558] L368_accept_S1-->L369_accept_S1: Formula: (= v_hdr.ipv6.srcAddr_21 42556065052551447243435947914287906818)  InVars {}  OutVars{hdr.ipv6.srcAddr=v_hdr.ipv6.srcAddr_21}  AuxVars[]  AssignedVars[hdr.ipv6.srcAddr] 13926#L369_accept_S1 [1911] L369_accept_S1-->L370_accept_S1: Formula: (= v_hdr.ipv6.dstAddr_21 42540765144257160172006968799218772358)  InVars {}  OutVars{hdr.ipv6.dstAddr=v_hdr.ipv6.dstAddr_21}  AuxVars[]  AssignedVars[hdr.ipv6.dstAddr] 13925#L370_accept_S1 [2113] L370_accept_S1-->L371_accept_S1: Formula: (= 33595163910409 v_hdr.ethernet.srcAddr_35)  InVars {}  OutVars{hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_35}  AuxVars[]  AssignedVars[hdr.ethernet.srcAddr] 13924#L371_accept_S1 [2040] L371_accept_S1-->creatipv6_2FINAL_accept_S1: Formula: (= v_hdr.ethernet.dstAddr_44 20159709288469)  InVars {}  OutVars{hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_44}  AuxVars[]  AssignedVars[hdr.ethernet.dstAddr] 13923#creatipv6_2FINAL_accept_S1 [1749] creatipv6_2FINAL_accept_S1-->creatipv6_2EXIT_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13920#creatipv6_2EXIT_accept_S1 >[2240] creatipv6_2EXIT_accept_S1-->L287-1-D95: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13919#L287-1-D95 [1829] L287-1-D95-->L287-1_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13916#L287-1_accept_S1 [1442] L287-1_accept_S1-->L287-1_accept_S1-D23: Formula: (and (= v_count.write_indexInParam_3 0) (= v_count.write_valueInParam_3 0))  InVars {}  OutVars{count.write_index=v_count.write_indexInParam_3, count.write_value=v_count.write_valueInParam_3}  AuxVars[]  AssignedVars[count.write_index, count.write_value]< 13918#L287-1_accept_S1-D23 [1664] L287-1_accept_S1-D23-->count.writeENTRY_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13622#count.writeENTRY_accept_S1 [1796] count.writeENTRY_accept_S1-->count.writeFINAL_accept_S1: Formula: (= (store v_count_19 v_count.write_index_2 v_count.write_value_2) v_count_18)  InVars {count=v_count_19, count.write_index=v_count.write_index_2, count.write_value=v_count.write_value_2}  OutVars{count=v_count_18, count.write_index=v_count.write_index_2, count.write_value=v_count.write_value_2}  AuxVars[]  AssignedVars[count] 13917#count.writeFINAL_accept_S1 [1751] count.writeFINAL_accept_S1-->count.writeEXIT_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13915#count.writeEXIT_accept_S1 >[2262] count.writeEXIT_accept_S1-->L289-D101: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: (and (= v_count.write_indexInParam_3 0) (= v_count.write_valueInParam_3 0))  InVars {}  OutVars{count.write_index=v_count.write_indexInParam_3, count.write_value=v_count.write_valueInParam_3}  AuxVars[]  AssignedVars[count.write_index, count.write_value] 13450#L289-D101 [1922] L289-D101-->L289_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13699#L289_accept_S1 [2222] L289_accept_S1-->L291_accept_S1: Formula: (= 3 v_standard_metadata.egress_spec_22)  InVars {}  OutVars{standard_metadata.egress_spec=v_standard_metadata.egress_spec_22}  AuxVars[]  AssignedVars[standard_metadata.egress_spec] 13372#L291_accept_S1 [1644] L291_accept_S1-->L292_accept_S1: Formula: (= 3 v_standard_metadata.egress_port_27)  InVars {}  OutVars{standard_metadata.egress_port=v_standard_metadata.egress_port_27}  AuxVars[]  AssignedVars[standard_metadata.egress_port] 13373#L292_accept_S1 [2052] L292_accept_S1-->L258_accept_S1: Formula: v_forward_20  InVars {}  OutVars{forward=v_forward_20}  AuxVars[]  AssignedVars[forward] 13794#L258_accept_S1 [1869] L258_accept_S1-->MyIngressEXIT_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14293#MyIngressEXIT_accept_S1 >[2343] MyIngressEXIT_accept_S1-->L562-D107: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14292#L562-D107 [1992] L562-D107-->L562_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14290#L562_accept_S1 [2153] L562_accept_S1-->L562_accept_S1-D49: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 14291#L562_accept_S1-D49 [2198] L562_accept_S1-D49-->MyEgressENTRY_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14295#MyEgressENTRY_accept_S1 [1505] MyEgressENTRY_accept_S1-->L249_accept_S1: Formula: (or (not v_hdr.tcp.valid_34) (not (= 0 v_standard_metadata.egress_port_36)))  InVars {standard_metadata.egress_port=v_standard_metadata.egress_port_36, hdr.tcp.valid=v_hdr.tcp.valid_34}  OutVars{standard_metadata.egress_port=v_standard_metadata.egress_port_36, hdr.tcp.valid=v_hdr.tcp.valid_34}  AuxVars[]  AssignedVars[] 14294#L249_accept_S1 [1553] L249_accept_S1-->MyEgressEXIT_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14289#MyEgressEXIT_accept_S1 >[2276] MyEgressEXIT_accept_S1-->L563-D89: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14288#L563-D89 [1774] L563-D89-->L563_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14208#L563_accept_S1 [2161] L563_accept_S1-->L563_accept_S1-D31: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 14287#L563_accept_S1-D31 [1990] L563_accept_S1-D31-->MyComputeChecksumFINAL_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14207#MyComputeChecksumFINAL_accept_S1 [1810] MyComputeChecksumFINAL_accept_S1-->MyComputeChecksumEXIT_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14209#MyComputeChecksumEXIT_accept_S1 >[2305] MyComputeChecksumEXIT_accept_S1-->L564-D109: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14286#L564-D109 [1915] L564-D109-->L564_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14284#L564_accept_S1 [1985] L564_accept_S1-->L565-1_accept_S1: Formula: v_forward_32  InVars {forward=v_forward_32}  OutVars{forward=v_forward_32}  AuxVars[]  AssignedVars[] 14283#L565-1_accept_S1 [2058] L565-1_accept_S1-->L569_accept_S1: Formula: (let ((.cse0 (= v__old_hdr.ethernet.srcAddr_15 0))) (or (and .cse0 (not v__p4ltl_0_7)) (and v__p4ltl_0_7 (not .cse0))))  InVars {_old_hdr.ethernet.srcAddr=v__old_hdr.ethernet.srcAddr_15}  OutVars{_p4ltl_0=v__p4ltl_0_7, _old_hdr.ethernet.srcAddr=v__old_hdr.ethernet.srcAddr_15}  AuxVars[]  AssignedVars[_p4ltl_0] 14282#L569_accept_S1 [1627] L569_accept_S1-->L570_accept_S1: Formula: (let ((.cse0 (= 2071690107 v__old_hdr.ipv4.dstAddr_15))) (or (and v__p4ltl_1_7 (not .cse0)) (and .cse0 (not v__p4ltl_1_7))))  InVars {_old_hdr.ipv4.dstAddr=v__old_hdr.ipv4.dstAddr_15}  OutVars{_old_hdr.ipv4.dstAddr=v__old_hdr.ipv4.dstAddr_15, _p4ltl_1=v__p4ltl_1_7}  AuxVars[]  AssignedVars[_p4ltl_1] 14281#L570_accept_S1 [2010] L570_accept_S1-->L571_accept_S1: Formula: (let ((.cse0 (= 281474976710655 v__old_hdr.ethernet.dstAddr_14))) (or (and v__p4ltl_2_6 (not .cse0)) (and .cse0 (not v__p4ltl_2_6))))  InVars {_old_hdr.ethernet.dstAddr=v__old_hdr.ethernet.dstAddr_14}  OutVars{_p4ltl_2=v__p4ltl_2_6, _old_hdr.ethernet.dstAddr=v__old_hdr.ethernet.dstAddr_14}  AuxVars[]  AssignedVars[_p4ltl_2] 14280#L571_accept_S1 [2046] L571_accept_S1-->mainFINAL_accept_S1: Formula: (let ((.cse0 (= v_standard_metadata.ingress_port_20 0))) (or (and (not v__p4ltl_3_7) (not .cse0)) (and v__p4ltl_3_7 .cse0)))  InVars {standard_metadata.ingress_port=v_standard_metadata.ingress_port_20}  OutVars{standard_metadata.ingress_port=v_standard_metadata.ingress_port_20, _p4ltl_3=v__p4ltl_3_7}  AuxVars[]  AssignedVars[_p4ltl_3] 14279#mainFINAL_accept_S1 [1800] mainFINAL_accept_S1-->mainEXIT_accept_S1: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14278#mainEXIT_accept_S1 >[2336] mainEXIT_accept_S1-->L577-1-D71: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14277#L577-1-D71 [1432] L577-1-D71-->L577-1_T0_init: Formula: (or (not v__p4ltl_2_10) (= 1 v_standard_metadata.egress_port_31) (not v__p4ltl_0_10) (not v__p4ltl_1_10) (not v__p4ltl_3_10))  InVars {_p4ltl_2=v__p4ltl_2_10, standard_metadata.egress_port=v_standard_metadata.egress_port_31, _p4ltl_3=v__p4ltl_3_10, _p4ltl_0=v__p4ltl_0_10, _p4ltl_1=v__p4ltl_1_10}  OutVars{_p4ltl_2=v__p4ltl_2_10, standard_metadata.egress_port=v_standard_metadata.egress_port_31, _p4ltl_3=v__p4ltl_3_10, _p4ltl_0=v__p4ltl_0_10, _p4ltl_1=v__p4ltl_1_10}  AuxVars[]  AssignedVars[] 13120#L577-1_T0_init [1466] L577-1_T0_init-->L577_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13898#L577_T0_init [2074] L577_T0_init-->L577_T0_init-D54: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 13952#L577_T0_init-D54 [1959] L577_T0_init-D54-->mainENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13945#mainENTRY_T0_init [1819] mainENTRY_T0_init-->mainENTRY_T0_init-D40: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 13946#mainENTRY_T0_init-D40 [1649] mainENTRY_T0_init-D40-->havocProcedureENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14148#havocProcedureENTRY_T0_init [1641] havocProcedureENTRY_T0_init-->L421_T0_init: Formula: (not v_drop_12)  InVars {}  OutVars{drop=v_drop_12}  AuxVars[]  AssignedVars[drop] 14147#L421_T0_init [2158] L421_T0_init-->L422_T0_init: Formula: (not v_forward_17)  InVars {}  OutVars{forward=v_forward_17}  AuxVars[]  AssignedVars[forward] 14146#L422_T0_init [2104] L422_T0_init-->L423_T0_init: Formula: (= v_standard_metadata.ingress_port_14 0)  InVars {}  OutVars{standard_metadata.ingress_port=v_standard_metadata.ingress_port_14}  AuxVars[]  AssignedVars[standard_metadata.ingress_port] 14145#L423_T0_init [1901] L423_T0_init-->L424_T0_init: Formula: (= v_standard_metadata.egress_spec_15 0)  InVars {}  OutVars{standard_metadata.egress_spec=v_standard_metadata.egress_spec_15}  AuxVars[]  AssignedVars[standard_metadata.egress_spec] 14144#L424_T0_init [1962] L424_T0_init-->L425_T0_init: Formula: (= 0 v_standard_metadata.egress_port_18)  InVars {}  OutVars{standard_metadata.egress_port=v_standard_metadata.egress_port_18}  AuxVars[]  AssignedVars[standard_metadata.egress_port] 14143#L425_T0_init [1951] L425_T0_init-->L426_T0_init: Formula: (= v_standard_metadata.instance_type_9 0)  InVars {}  OutVars{standard_metadata.instance_type=v_standard_metadata.instance_type_9}  AuxVars[]  AssignedVars[standard_metadata.instance_type] 14142#L426_T0_init [1709] L426_T0_init-->L427_T0_init: Formula: (= v_standard_metadata.packet_length_8 0)  InVars {}  OutVars{standard_metadata.packet_length=v_standard_metadata.packet_length_8}  AuxVars[]  AssignedVars[standard_metadata.packet_length] 14141#L427_T0_init [1453] L427_T0_init-->L428_T0_init: Formula: (= v_standard_metadata.enq_timestamp_9 0)  InVars {}  OutVars{standard_metadata.enq_timestamp=v_standard_metadata.enq_timestamp_9}  AuxVars[]  AssignedVars[standard_metadata.enq_timestamp] 14140#L428_T0_init [1578] L428_T0_init-->L429_T0_init: Formula: (= v_standard_metadata.enq_qdepth_9 0)  InVars {}  OutVars{standard_metadata.enq_qdepth=v_standard_metadata.enq_qdepth_9}  AuxVars[]  AssignedVars[standard_metadata.enq_qdepth] 14139#L429_T0_init [1855] L429_T0_init-->L430_T0_init: Formula: (= v_standard_metadata.deq_timedelta_9 0)  InVars {}  OutVars{standard_metadata.deq_timedelta=v_standard_metadata.deq_timedelta_9}  AuxVars[]  AssignedVars[standard_metadata.deq_timedelta] 14138#L430_T0_init [1521] L430_T0_init-->L431_T0_init: Formula: (= v_standard_metadata.deq_qdepth_8 0)  InVars {}  OutVars{standard_metadata.deq_qdepth=v_standard_metadata.deq_qdepth_8}  AuxVars[]  AssignedVars[standard_metadata.deq_qdepth] 14137#L431_T0_init [1609] L431_T0_init-->L432_T0_init: Formula: (= v_standard_metadata.ingress_global_timestamp_8 0)  InVars {}  OutVars{standard_metadata.ingress_global_timestamp=v_standard_metadata.ingress_global_timestamp_8}  AuxVars[]  AssignedVars[standard_metadata.ingress_global_timestamp] 14136#L432_T0_init [2111] L432_T0_init-->L433_T0_init: Formula: (= v_standard_metadata.egress_global_timestamp_9 0)  InVars {}  OutVars{standard_metadata.egress_global_timestamp=v_standard_metadata.egress_global_timestamp_9}  AuxVars[]  AssignedVars[standard_metadata.egress_global_timestamp] 14135#L433_T0_init [1775] L433_T0_init-->L434_T0_init: Formula: (= 0 v_standard_metadata.mcast_grp_9)  InVars {}  OutVars{standard_metadata.mcast_grp=v_standard_metadata.mcast_grp_9}  AuxVars[]  AssignedVars[standard_metadata.mcast_grp] 14134#L434_T0_init [2007] L434_T0_init-->L435_T0_init: Formula: (= v_standard_metadata.egress_rid_9 0)  InVars {}  OutVars{standard_metadata.egress_rid=v_standard_metadata.egress_rid_9}  AuxVars[]  AssignedVars[standard_metadata.egress_rid] 14133#L435_T0_init [1510] L435_T0_init-->L436_T0_init: Formula: (= v_standard_metadata.checksum_error_8 0)  InVars {}  OutVars{standard_metadata.checksum_error=v_standard_metadata.checksum_error_8}  AuxVars[]  AssignedVars[standard_metadata.checksum_error] 14132#L436_T0_init [2011] L436_T0_init-->L437_T0_init: Formula: (= v_standard_metadata.priority_9 0)  InVars {}  OutVars{standard_metadata.priority=v_standard_metadata.priority_9}  AuxVars[]  AssignedVars[standard_metadata.priority] 14131#L437_T0_init [1628] L437_T0_init-->L438_T0_init: Formula: (not v_hdr.ethernet.valid_14)  InVars {}  OutVars{hdr.ethernet.valid=v_hdr.ethernet.valid_14}  AuxVars[]  AssignedVars[hdr.ethernet.valid] 14130#L438_T0_init [1593] L438_T0_init-->L439_T0_init: Formula: (= v_emit_41 (store v_emit_42 v_hdr.ethernet_3 false))  InVars {emit=v_emit_42, hdr.ethernet=v_hdr.ethernet_3}  OutVars{emit=v_emit_41, hdr.ethernet=v_hdr.ethernet_3}  AuxVars[]  AssignedVars[emit] 14129#L439_T0_init [2186] L439_T0_init-->L440_T0_init: Formula: true  InVars {}  OutVars{hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_28}  AuxVars[]  AssignedVars[hdr.ethernet.dstAddr] 14128#L440_T0_init [1464] L440_T0_init-->L441_T0_init: Formula: (= v_hdr.ethernet.dstAddr_29 v__old_hdr.ethernet.dstAddr_12)  InVars {hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_29}  OutVars{_old_hdr.ethernet.dstAddr=v__old_hdr.ethernet.dstAddr_12, hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_29}  AuxVars[]  AssignedVars[_old_hdr.ethernet.dstAddr] 14127#L441_T0_init [1474] L441_T0_init-->L442_T0_init: Formula: (= v_hdr.ethernet.dstAddr_26 v__old_hdr.ethernet.dstAddr_10)  InVars {hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_26}  OutVars{_old_hdr.ethernet.dstAddr=v__old_hdr.ethernet.dstAddr_10, hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_26}  AuxVars[]  AssignedVars[_old_hdr.ethernet.dstAddr] 14126#L442_T0_init [1747] L442_T0_init-->L443_T0_init: Formula: true  InVars {}  OutVars{hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_26}  AuxVars[]  AssignedVars[hdr.ethernet.srcAddr] 14125#L443_T0_init [1848] L443_T0_init-->L444_T0_init: Formula: (= v_hdr.ethernet.srcAddr_23 v__old_hdr.ethernet.srcAddr_10)  InVars {hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_23}  OutVars{hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_23, _old_hdr.ethernet.srcAddr=v__old_hdr.ethernet.srcAddr_10}  AuxVars[]  AssignedVars[_old_hdr.ethernet.srcAddr] 14124#L444_T0_init [1686] L444_T0_init-->L445_T0_init: Formula: (= v_hdr.ethernet.srcAddr_25 v__old_hdr.ethernet.srcAddr_12)  InVars {hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_25}  OutVars{hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_25, _old_hdr.ethernet.srcAddr=v__old_hdr.ethernet.srcAddr_12}  AuxVars[]  AssignedVars[_old_hdr.ethernet.srcAddr] 14123#L445_T0_init [2211] L445_T0_init-->L446_T0_init: Formula: true  InVars {}  OutVars{hdr.ethernet.etherType=v_hdr.ethernet.etherType_24}  AuxVars[]  AssignedVars[hdr.ethernet.etherType] 14122#L446_T0_init [2078] L446_T0_init-->L447_T0_init: Formula: (and (<= 0 v_hdr.ethernet.etherType_22) (<= v_hdr.ethernet.etherType_22 65536))  InVars {hdr.ethernet.etherType=v_hdr.ethernet.etherType_22}  OutVars{hdr.ethernet.etherType=v_hdr.ethernet.etherType_22}  AuxVars[]  AssignedVars[] 14121#L447_T0_init [1735] L447_T0_init-->L448_T0_init: Formula: (not v_hdr.ipv6.valid_18)  InVars {}  OutVars{hdr.ipv6.valid=v_hdr.ipv6.valid_18}  AuxVars[]  AssignedVars[hdr.ipv6.valid] 14120#L448_T0_init [1792] L448_T0_init-->L449_T0_init: Formula: (= v_emit_27 (store v_emit_28 v_hdr.ipv6_10 false))  InVars {emit=v_emit_28, hdr.ipv6=v_hdr.ipv6_10}  OutVars{emit=v_emit_27, hdr.ipv6=v_hdr.ipv6_10}  AuxVars[]  AssignedVars[emit] 14119#L449_T0_init [2175] L449_T0_init-->L450_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv6.version=v_hdr.ipv6.version_19}  AuxVars[]  AssignedVars[hdr.ipv6.version] 14118#L450_T0_init [1676] L450_T0_init-->L451_T0_init: Formula: (and (<= v_hdr.ipv6.version_20 16) (<= 0 v_hdr.ipv6.version_20))  InVars {hdr.ipv6.version=v_hdr.ipv6.version_20}  OutVars{hdr.ipv6.version=v_hdr.ipv6.version_20}  AuxVars[]  AssignedVars[] 14117#L451_T0_init [2109] L451_T0_init-->L452_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv6.trafclass=v_hdr.ipv6.trafclass_9}  AuxVars[]  AssignedVars[hdr.ipv6.trafclass] 14116#L452_T0_init [1912] L452_T0_init-->L453_T0_init: Formula: (and (<= v_hdr.ipv6.trafclass_12 256) (<= 0 v_hdr.ipv6.trafclass_12))  InVars {hdr.ipv6.trafclass=v_hdr.ipv6.trafclass_12}  OutVars{hdr.ipv6.trafclass=v_hdr.ipv6.trafclass_12}  AuxVars[]  AssignedVars[] 14115#L453_T0_init [1908] L453_T0_init-->L454_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv6.flowlabel=v_hdr.ipv6.flowlabel_11}  AuxVars[]  AssignedVars[hdr.ipv6.flowlabel] 14114#L454_T0_init [1734] L454_T0_init-->L455_T0_init: Formula: (and (<= 0 v_hdr.ipv6.flowlabel_12) (<= v_hdr.ipv6.flowlabel_12 1048576))  InVars {hdr.ipv6.flowlabel=v_hdr.ipv6.flowlabel_12}  OutVars{hdr.ipv6.flowlabel=v_hdr.ipv6.flowlabel_12}  AuxVars[]  AssignedVars[] 14113#L455_T0_init [1825] L455_T0_init-->L456_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv6.payloadlen=v_hdr.ipv6.payloadlen_20}  AuxVars[]  AssignedVars[hdr.ipv6.payloadlen] 14112#L456_T0_init [2079] L456_T0_init-->L457_T0_init: Formula: (and (<= v_hdr.ipv6.payloadlen_17 65536) (<= 0 v_hdr.ipv6.payloadlen_17))  InVars {hdr.ipv6.payloadlen=v_hdr.ipv6.payloadlen_17}  OutVars{hdr.ipv6.payloadlen=v_hdr.ipv6.payloadlen_17}  AuxVars[]  AssignedVars[] 14111#L457_T0_init [1849] L457_T0_init-->L458_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv6.nextheader=v_hdr.ipv6.nextheader_22}  AuxVars[]  AssignedVars[hdr.ipv6.nextheader] 14110#L458_T0_init [1763] L458_T0_init-->L459_T0_init: Formula: (and (<= v_hdr.ipv6.nextheader_20 256) (<= 0 v_hdr.ipv6.nextheader_20))  InVars {hdr.ipv6.nextheader=v_hdr.ipv6.nextheader_20}  OutVars{hdr.ipv6.nextheader=v_hdr.ipv6.nextheader_20}  AuxVars[]  AssignedVars[] 14109#L459_T0_init [1982] L459_T0_init-->L460_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv6.hoplimit=v_hdr.ipv6.hoplimit_17}  AuxVars[]  AssignedVars[hdr.ipv6.hoplimit] 14108#L460_T0_init [1564] L460_T0_init-->L461_T0_init: Formula: (and (<= v_hdr.ipv6.hoplimit_20 256) (<= 0 v_hdr.ipv6.hoplimit_20))  InVars {hdr.ipv6.hoplimit=v_hdr.ipv6.hoplimit_20}  OutVars{hdr.ipv6.hoplimit=v_hdr.ipv6.hoplimit_20}  AuxVars[]  AssignedVars[] 14107#L461_T0_init [1517] L461_T0_init-->L462_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv6.srcAddr=v_hdr.ipv6.srcAddr_17}  AuxVars[]  AssignedVars[hdr.ipv6.srcAddr] 14106#L462_T0_init [1621] L462_T0_init-->L463_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv6.dstAddr=v_hdr.ipv6.dstAddr_16}  AuxVars[]  AssignedVars[hdr.ipv6.dstAddr] 14105#L463_T0_init [1462] L463_T0_init-->L464_T0_init: Formula: (not v_hdr.ipv4_tunnel.valid_20)  InVars {}  OutVars{hdr.ipv4_tunnel.valid=v_hdr.ipv4_tunnel.valid_20}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.valid] 14104#L464_T0_init [1506] L464_T0_init-->L465_T0_init: Formula: (= v_emit_29 (store v_emit_30 v_hdr.ipv4_tunnel_8 false))  InVars {emit=v_emit_30, hdr.ipv4_tunnel=v_hdr.ipv4_tunnel_8}  OutVars{emit=v_emit_29, hdr.ipv4_tunnel=v_hdr.ipv4_tunnel_8}  AuxVars[]  AssignedVars[emit] 14103#L465_T0_init [1653] L465_T0_init-->L466_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.version=v_hdr.ipv4_tunnel.version_16}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.version] 14102#L466_T0_init [1724] L466_T0_init-->L467_T0_init: Formula: (and (<= v_hdr.ipv4_tunnel.version_17 16) (<= 0 v_hdr.ipv4_tunnel.version_17))  InVars {hdr.ipv4_tunnel.version=v_hdr.ipv4_tunnel.version_17}  OutVars{hdr.ipv4_tunnel.version=v_hdr.ipv4_tunnel.version_17}  AuxVars[]  AssignedVars[] 14101#L467_T0_init [1706] L467_T0_init-->L468_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.ihl=v_hdr.ipv4_tunnel.ihl_14}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.ihl] 14100#L468_T0_init [1799] L468_T0_init-->L469_T0_init: Formula: (and (<= 0 v_hdr.ipv4_tunnel.ihl_16) (<= v_hdr.ipv4_tunnel.ihl_16 16))  InVars {hdr.ipv4_tunnel.ihl=v_hdr.ipv4_tunnel.ihl_16}  OutVars{hdr.ipv4_tunnel.ihl=v_hdr.ipv4_tunnel.ihl_16}  AuxVars[]  AssignedVars[] 14099#L469_T0_init [1860] L469_T0_init-->L470_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.diffserv=v_hdr.ipv4_tunnel.diffserv_15}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.diffserv] 14098#L470_T0_init [2116] L470_T0_init-->L471_T0_init: Formula: (and (<= v_hdr.ipv4_tunnel.diffserv_14 256) (<= 0 v_hdr.ipv4_tunnel.diffserv_14))  InVars {hdr.ipv4_tunnel.diffserv=v_hdr.ipv4_tunnel.diffserv_14}  OutVars{hdr.ipv4_tunnel.diffserv=v_hdr.ipv4_tunnel.diffserv_14}  AuxVars[]  AssignedVars[] 14097#L471_T0_init [1436] L471_T0_init-->L472_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.totalLen=v_hdr.ipv4_tunnel.totalLen_14}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.totalLen] 14096#L472_T0_init [1696] L472_T0_init-->L473_T0_init: Formula: (and (<= v_hdr.ipv4_tunnel.totalLen_15 65536) (<= 0 v_hdr.ipv4_tunnel.totalLen_15))  InVars {hdr.ipv4_tunnel.totalLen=v_hdr.ipv4_tunnel.totalLen_15}  OutVars{hdr.ipv4_tunnel.totalLen=v_hdr.ipv4_tunnel.totalLen_15}  AuxVars[]  AssignedVars[] 14095#L473_T0_init [1549] L473_T0_init-->L474_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.identification=v_hdr.ipv4_tunnel.identification_17}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.identification] 14094#L474_T0_init [1537] L474_T0_init-->L475_T0_init: Formula: (and (<= v_hdr.ipv4_tunnel.identification_16 65536) (<= 0 v_hdr.ipv4_tunnel.identification_16))  InVars {hdr.ipv4_tunnel.identification=v_hdr.ipv4_tunnel.identification_16}  OutVars{hdr.ipv4_tunnel.identification=v_hdr.ipv4_tunnel.identification_16}  AuxVars[]  AssignedVars[] 14093#L475_T0_init [1776] L475_T0_init-->L476_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.flags=v_hdr.ipv4_tunnel.flags_17}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.flags] 14092#L476_T0_init [1837] L476_T0_init-->L477_T0_init: Formula: (and (<= v_hdr.ipv4_tunnel.flags_14 8) (<= 0 v_hdr.ipv4_tunnel.flags_14))  InVars {hdr.ipv4_tunnel.flags=v_hdr.ipv4_tunnel.flags_14}  OutVars{hdr.ipv4_tunnel.flags=v_hdr.ipv4_tunnel.flags_14}  AuxVars[]  AssignedVars[] 14091#L477_T0_init [1435] L477_T0_init-->L478_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.fragOffset=v_hdr.ipv4_tunnel.fragOffset_17}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.fragOffset] 14090#L478_T0_init [1711] L478_T0_init-->L479_T0_init: Formula: (and (<= 0 v_hdr.ipv4_tunnel.fragOffset_15) (<= v_hdr.ipv4_tunnel.fragOffset_15 8192))  InVars {hdr.ipv4_tunnel.fragOffset=v_hdr.ipv4_tunnel.fragOffset_15}  OutVars{hdr.ipv4_tunnel.fragOffset=v_hdr.ipv4_tunnel.fragOffset_15}  AuxVars[]  AssignedVars[] 14089#L479_T0_init [1633] L479_T0_init-->L480_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.ttl=v_hdr.ipv4_tunnel.ttl_15}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.ttl] 14088#L480_T0_init [1566] L480_T0_init-->L481_T0_init: Formula: (and (<= 0 v_hdr.ipv4_tunnel.ttl_14) (<= v_hdr.ipv4_tunnel.ttl_14 256))  InVars {hdr.ipv4_tunnel.ttl=v_hdr.ipv4_tunnel.ttl_14}  OutVars{hdr.ipv4_tunnel.ttl=v_hdr.ipv4_tunnel.ttl_14}  AuxVars[]  AssignedVars[] 14087#L481_T0_init [2223] L481_T0_init-->L482_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.protocol=v_hdr.ipv4_tunnel.protocol_19}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.protocol] 14086#L482_T0_init [1685] L482_T0_init-->L483_T0_init: Formula: (and (<= 0 v_hdr.ipv4_tunnel.protocol_17) (<= v_hdr.ipv4_tunnel.protocol_17 256))  InVars {hdr.ipv4_tunnel.protocol=v_hdr.ipv4_tunnel.protocol_17}  OutVars{hdr.ipv4_tunnel.protocol=v_hdr.ipv4_tunnel.protocol_17}  AuxVars[]  AssignedVars[] 14085#L483_T0_init [1783] L483_T0_init-->L484_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.hdrChecksum=v_hdr.ipv4_tunnel.hdrChecksum_11}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.hdrChecksum] 14084#L484_T0_init [1857] L484_T0_init-->L485_T0_init: Formula: (and (<= v_hdr.ipv4_tunnel.hdrChecksum_10 65536) (<= 0 v_hdr.ipv4_tunnel.hdrChecksum_10))  InVars {hdr.ipv4_tunnel.hdrChecksum=v_hdr.ipv4_tunnel.hdrChecksum_10}  OutVars{hdr.ipv4_tunnel.hdrChecksum=v_hdr.ipv4_tunnel.hdrChecksum_10}  AuxVars[]  AssignedVars[] 14083#L485_T0_init [1614] L485_T0_init-->L486_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.srcAddr=v_hdr.ipv4_tunnel.srcAddr_14}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.srcAddr] 14082#L486_T0_init [1851] L486_T0_init-->L487_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4_tunnel.dstAddr=v_hdr.ipv4_tunnel.dstAddr_14}  AuxVars[]  AssignedVars[hdr.ipv4_tunnel.dstAddr] 14081#L487_T0_init [2051] L487_T0_init-->L488_T0_init: Formula: (not v_hdr.ipv4.valid_26)  InVars {}  OutVars{hdr.ipv4.valid=v_hdr.ipv4.valid_26}  AuxVars[]  AssignedVars[hdr.ipv4.valid] 14080#L488_T0_init [2112] L488_T0_init-->L489_T0_init: Formula: (= (store v_emit_26 v_hdr.ipv4_2 false) v_emit_25)  InVars {hdr.ipv4=v_hdr.ipv4_2, emit=v_emit_26}  OutVars{hdr.ipv4=v_hdr.ipv4_2, emit=v_emit_25}  AuxVars[]  AssignedVars[emit] 14079#L489_T0_init [2038] L489_T0_init-->L490_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.version=v_hdr.ipv4.version_12}  AuxVars[]  AssignedVars[hdr.ipv4.version] 14078#L490_T0_init [1465] L490_T0_init-->L491_T0_init: Formula: (and (<= 0 v_hdr.ipv4.version_10) (<= v_hdr.ipv4.version_10 16))  InVars {hdr.ipv4.version=v_hdr.ipv4.version_10}  OutVars{hdr.ipv4.version=v_hdr.ipv4.version_10}  AuxVars[]  AssignedVars[] 14077#L491_T0_init [2181] L491_T0_init-->L492_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.ihl=v_hdr.ipv4.ihl_10}  AuxVars[]  AssignedVars[hdr.ipv4.ihl] 14076#L492_T0_init [2179] L492_T0_init-->L493_T0_init: Formula: (and (<= v_hdr.ipv4.ihl_11 16) (<= 0 v_hdr.ipv4.ihl_11))  InVars {hdr.ipv4.ihl=v_hdr.ipv4.ihl_11}  OutVars{hdr.ipv4.ihl=v_hdr.ipv4.ihl_11}  AuxVars[]  AssignedVars[] 14075#L493_T0_init [2233] L493_T0_init-->L494_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.diffserv=v_hdr.ipv4.diffserv_12}  AuxVars[]  AssignedVars[hdr.ipv4.diffserv] 14074#L494_T0_init [2082] L494_T0_init-->L495_T0_init: Formula: (and (<= v_hdr.ipv4.diffserv_11 256) (<= 0 v_hdr.ipv4.diffserv_11))  InVars {hdr.ipv4.diffserv=v_hdr.ipv4.diffserv_11}  OutVars{hdr.ipv4.diffserv=v_hdr.ipv4.diffserv_11}  AuxVars[]  AssignedVars[] 14073#L495_T0_init [1471] L495_T0_init-->L496_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.totalLen=v_hdr.ipv4.totalLen_13}  AuxVars[]  AssignedVars[hdr.ipv4.totalLen] 14072#L496_T0_init [1495] L496_T0_init-->L497_T0_init: Formula: (and (<= 0 v_hdr.ipv4.totalLen_15) (<= v_hdr.ipv4.totalLen_15 65536))  InVars {hdr.ipv4.totalLen=v_hdr.ipv4.totalLen_15}  OutVars{hdr.ipv4.totalLen=v_hdr.ipv4.totalLen_15}  AuxVars[]  AssignedVars[] 14071#L497_T0_init [1755] L497_T0_init-->L498_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.identification=v_hdr.ipv4.identification_11}  AuxVars[]  AssignedVars[hdr.ipv4.identification] 14070#L498_T0_init [2076] L498_T0_init-->L499_T0_init: Formula: (and (<= 0 v_hdr.ipv4.identification_13) (<= v_hdr.ipv4.identification_13 65536))  InVars {hdr.ipv4.identification=v_hdr.ipv4.identification_13}  OutVars{hdr.ipv4.identification=v_hdr.ipv4.identification_13}  AuxVars[]  AssignedVars[] 14069#L499_T0_init [1671] L499_T0_init-->L500_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.flags=v_hdr.ipv4.flags_11}  AuxVars[]  AssignedVars[hdr.ipv4.flags] 14068#L500_T0_init [1997] L500_T0_init-->L501_T0_init: Formula: (and (<= 0 v_hdr.ipv4.flags_10) (<= v_hdr.ipv4.flags_10 8))  InVars {hdr.ipv4.flags=v_hdr.ipv4.flags_10}  OutVars{hdr.ipv4.flags=v_hdr.ipv4.flags_10}  AuxVars[]  AssignedVars[] 14067#L501_T0_init [2095] L501_T0_init-->L502_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.fragOffset=v_hdr.ipv4.fragOffset_11}  AuxVars[]  AssignedVars[hdr.ipv4.fragOffset] 14066#L502_T0_init [2022] L502_T0_init-->L503_T0_init: Formula: (and (<= 0 v_hdr.ipv4.fragOffset_12) (<= v_hdr.ipv4.fragOffset_12 8192))  InVars {hdr.ipv4.fragOffset=v_hdr.ipv4.fragOffset_12}  OutVars{hdr.ipv4.fragOffset=v_hdr.ipv4.fragOffset_12}  AuxVars[]  AssignedVars[] 14065#L503_T0_init [1964] L503_T0_init-->L504_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.ttl=v_hdr.ipv4.ttl_12}  AuxVars[]  AssignedVars[hdr.ipv4.ttl] 14064#L504_T0_init [1828] L504_T0_init-->L505_T0_init: Formula: (and (<= v_hdr.ipv4.ttl_11 256) (<= 0 v_hdr.ipv4.ttl_11))  InVars {hdr.ipv4.ttl=v_hdr.ipv4.ttl_11}  OutVars{hdr.ipv4.ttl=v_hdr.ipv4.ttl_11}  AuxVars[]  AssignedVars[] 14063#L505_T0_init [1463] L505_T0_init-->L506_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.protocol=v_hdr.ipv4.protocol_13}  AuxVars[]  AssignedVars[hdr.ipv4.protocol] 14062#L506_T0_init [2080] L506_T0_init-->L507_T0_init: Formula: (and (<= 0 v_hdr.ipv4.protocol_12) (<= v_hdr.ipv4.protocol_12 256))  InVars {hdr.ipv4.protocol=v_hdr.ipv4.protocol_12}  OutVars{hdr.ipv4.protocol=v_hdr.ipv4.protocol_12}  AuxVars[]  AssignedVars[] 14061#L507_T0_init [1861] L507_T0_init-->L508_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.hdrChecksum=v_hdr.ipv4.hdrChecksum_11}  AuxVars[]  AssignedVars[hdr.ipv4.hdrChecksum] 14060#L508_T0_init [2008] L508_T0_init-->L509_T0_init: Formula: (and (<= 0 v_hdr.ipv4.hdrChecksum_9) (<= v_hdr.ipv4.hdrChecksum_9 65536))  InVars {hdr.ipv4.hdrChecksum=v_hdr.ipv4.hdrChecksum_9}  OutVars{hdr.ipv4.hdrChecksum=v_hdr.ipv4.hdrChecksum_9}  AuxVars[]  AssignedVars[] 14059#L509_T0_init [2205] L509_T0_init-->L510_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.srcAddr=v_hdr.ipv4.srcAddr_10}  AuxVars[]  AssignedVars[hdr.ipv4.srcAddr] 14058#L510_T0_init [1507] L510_T0_init-->L511_T0_init: Formula: true  InVars {}  OutVars{hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_14}  AuxVars[]  AssignedVars[hdr.ipv4.dstAddr] 14057#L511_T0_init [1777] L511_T0_init-->L512_T0_init: Formula: (= v_hdr.ipv4.dstAddr_13 v__old_hdr.ipv4.dstAddr_11)  InVars {hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_13}  OutVars{_old_hdr.ipv4.dstAddr=v__old_hdr.ipv4.dstAddr_11, hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_13}  AuxVars[]  AssignedVars[_old_hdr.ipv4.dstAddr] 14056#L512_T0_init [1579] L512_T0_init-->L513_T0_init: Formula: (= v_hdr.ipv4.dstAddr_12 v__old_hdr.ipv4.dstAddr_10)  InVars {hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_12}  OutVars{_old_hdr.ipv4.dstAddr=v__old_hdr.ipv4.dstAddr_10, hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_12}  AuxVars[]  AssignedVars[_old_hdr.ipv4.dstAddr] 14055#L513_T0_init [1986] L513_T0_init-->L514_T0_init: Formula: (not v_hdr.tcp.valid_29)  InVars {}  OutVars{hdr.tcp.valid=v_hdr.tcp.valid_29}  AuxVars[]  AssignedVars[hdr.tcp.valid] 14054#L514_T0_init [1682] L514_T0_init-->L515_T0_init: Formula: (= v_emit_33 (store v_emit_34 v_hdr.tcp_2 false))  InVars {hdr.tcp=v_hdr.tcp_2, emit=v_emit_34}  OutVars{hdr.tcp=v_hdr.tcp_2, emit=v_emit_33}  AuxVars[]  AssignedVars[emit] 14053#L515_T0_init [1741] L515_T0_init-->L516_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.srcport=v_hdr.tcp.srcport_12}  AuxVars[]  AssignedVars[hdr.tcp.srcport] 14052#L516_T0_init [2063] L516_T0_init-->L517_T0_init: Formula: (and (<= v_hdr.tcp.srcport_9 65536) (<= 0 v_hdr.tcp.srcport_9))  InVars {hdr.tcp.srcport=v_hdr.tcp.srcport_9}  OutVars{hdr.tcp.srcport=v_hdr.tcp.srcport_9}  AuxVars[]  AssignedVars[] 14051#L517_T0_init [1801] L517_T0_init-->L518_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.dstport=v_hdr.tcp.dstport_9}  AuxVars[]  AssignedVars[hdr.tcp.dstport] 14050#L518_T0_init [1879] L518_T0_init-->L519_T0_init: Formula: (and (<= v_hdr.tcp.dstport_10 65536) (<= 0 v_hdr.tcp.dstport_10))  InVars {hdr.tcp.dstport=v_hdr.tcp.dstport_10}  OutVars{hdr.tcp.dstport=v_hdr.tcp.dstport_10}  AuxVars[]  AssignedVars[] 14049#L519_T0_init [1683] L519_T0_init-->L520_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.sequence=v_hdr.tcp.sequence_43}  AuxVars[]  AssignedVars[hdr.tcp.sequence] 14048#L520_T0_init [1541] L520_T0_init-->L521_T0_init: Formula: (and (<= v_hdr.tcp.sequence_44 4294967296) (<= 0 v_hdr.tcp.sequence_44))  InVars {hdr.tcp.sequence=v_hdr.tcp.sequence_44}  OutVars{hdr.tcp.sequence=v_hdr.tcp.sequence_44}  AuxVars[]  AssignedVars[] 14047#L521_T0_init [1694] L521_T0_init-->L522_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.ackseq=v_hdr.tcp.ackseq_43}  AuxVars[]  AssignedVars[hdr.tcp.ackseq] 14046#L522_T0_init [2020] L522_T0_init-->L523_T0_init: Formula: (and (<= v_hdr.tcp.ackseq_44 4294967296) (<= 0 v_hdr.tcp.ackseq_44))  InVars {hdr.tcp.ackseq=v_hdr.tcp.ackseq_44}  OutVars{hdr.tcp.ackseq=v_hdr.tcp.ackseq_44}  AuxVars[]  AssignedVars[] 14045#L523_T0_init [1588] L523_T0_init-->L524_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.headerlength=v_hdr.tcp.headerlength_11}  AuxVars[]  AssignedVars[hdr.tcp.headerlength] 14044#L524_T0_init [1434] L524_T0_init-->L525_T0_init: Formula: (and (<= v_hdr.tcp.headerlength_10 16) (<= 0 v_hdr.tcp.headerlength_10))  InVars {hdr.tcp.headerlength=v_hdr.tcp.headerlength_10}  OutVars{hdr.tcp.headerlength=v_hdr.tcp.headerlength_10}  AuxVars[]  AssignedVars[] 14043#L525_T0_init [1536] L525_T0_init-->L526_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.reservation=v_hdr.tcp.reservation_12}  AuxVars[]  AssignedVars[hdr.tcp.reservation] 14042#L526_T0_init [1832] L526_T0_init-->L527_T0_init: Formula: (and (<= v_hdr.tcp.reservation_9 64) (<= 0 v_hdr.tcp.reservation_9))  InVars {hdr.tcp.reservation=v_hdr.tcp.reservation_9}  OutVars{hdr.tcp.reservation=v_hdr.tcp.reservation_9}  AuxVars[]  AssignedVars[] 14041#L527_T0_init [1700] L527_T0_init-->L528_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.URG=v_hdr.tcp.URG_9}  AuxVars[]  AssignedVars[hdr.tcp.URG] 14040#L528_T0_init [1797] L528_T0_init-->L529_T0_init: Formula: (and (<= v_hdr.tcp.URG_12 2) (<= 0 v_hdr.tcp.URG_12))  InVars {hdr.tcp.URG=v_hdr.tcp.URG_12}  OutVars{hdr.tcp.URG=v_hdr.tcp.URG_12}  AuxVars[]  AssignedVars[] 14039#L529_T0_init [1892] L529_T0_init-->L530_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.ACK=v_hdr.tcp.ACK_11}  AuxVars[]  AssignedVars[hdr.tcp.ACK] 14038#L530_T0_init [1584] L530_T0_init-->L531_T0_init: Formula: (and (<= 0 v_hdr.tcp.ACK_9) (<= v_hdr.tcp.ACK_9 2))  InVars {hdr.tcp.ACK=v_hdr.tcp.ACK_9}  OutVars{hdr.tcp.ACK=v_hdr.tcp.ACK_9}  AuxVars[]  AssignedVars[] 14037#L531_T0_init [1458] L531_T0_init-->L532_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.PSH=v_hdr.tcp.PSH_11}  AuxVars[]  AssignedVars[hdr.tcp.PSH] 14036#L532_T0_init [2203] L532_T0_init-->L533_T0_init: Formula: (and (<= 0 v_hdr.tcp.PSH_9) (<= v_hdr.tcp.PSH_9 2))  InVars {hdr.tcp.PSH=v_hdr.tcp.PSH_9}  OutVars{hdr.tcp.PSH=v_hdr.tcp.PSH_9}  AuxVars[]  AssignedVars[] 14035#L533_T0_init [2141] L533_T0_init-->L534_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.RST=v_hdr.tcp.RST_9}  AuxVars[]  AssignedVars[hdr.tcp.RST] 14034#L534_T0_init [1587] L534_T0_init-->L535_T0_init: Formula: (and (<= 0 v_hdr.tcp.RST_11) (<= v_hdr.tcp.RST_11 2))  InVars {hdr.tcp.RST=v_hdr.tcp.RST_11}  OutVars{hdr.tcp.RST=v_hdr.tcp.RST_11}  AuxVars[]  AssignedVars[] 14033#L535_T0_init [2154] L535_T0_init-->L536_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.SYN=v_hdr.tcp.SYN_9}  AuxVars[]  AssignedVars[hdr.tcp.SYN] 14032#L536_T0_init [1620] L536_T0_init-->L537_T0_init: Formula: (and (<= 0 v_hdr.tcp.SYN_11) (<= v_hdr.tcp.SYN_11 2))  InVars {hdr.tcp.SYN=v_hdr.tcp.SYN_11}  OutVars{hdr.tcp.SYN=v_hdr.tcp.SYN_11}  AuxVars[]  AssignedVars[] 14031#L537_T0_init [1893] L537_T0_init-->L538_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.FIN=v_hdr.tcp.FIN_9}  AuxVars[]  AssignedVars[hdr.tcp.FIN] 14030#L538_T0_init [1895] L538_T0_init-->L539_T0_init: Formula: (and (<= 0 v_hdr.tcp.FIN_10) (<= v_hdr.tcp.FIN_10 2))  InVars {hdr.tcp.FIN=v_hdr.tcp.FIN_10}  OutVars{hdr.tcp.FIN=v_hdr.tcp.FIN_10}  AuxVars[]  AssignedVars[] 14027#L539_T0_init [2212] L539_T0_init-->L540_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.windowsize=v_hdr.tcp.windowsize_10}  AuxVars[]  AssignedVars[hdr.tcp.windowsize] 14026#L540_T0_init [1939] L540_T0_init-->L541_T0_init: Formula: (and (<= v_hdr.tcp.windowsize_12 65536) (<= 0 v_hdr.tcp.windowsize_12))  InVars {hdr.tcp.windowsize=v_hdr.tcp.windowsize_12}  OutVars{hdr.tcp.windowsize=v_hdr.tcp.windowsize_12}  AuxVars[]  AssignedVars[] 14021#L541_T0_init [2096] L541_T0_init-->L542_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.checksum=v_hdr.tcp.checksum_10}  AuxVars[]  AssignedVars[hdr.tcp.checksum] 14015#L542_T0_init [2083] L542_T0_init-->L543_T0_init: Formula: (and (<= 0 v_hdr.tcp.checksum_12) (<= v_hdr.tcp.checksum_12 65536))  InVars {hdr.tcp.checksum=v_hdr.tcp.checksum_12}  OutVars{hdr.tcp.checksum=v_hdr.tcp.checksum_12}  AuxVars[]  AssignedVars[] 14010#L543_T0_init [2088] L543_T0_init-->L544_T0_init: Formula: true  InVars {}  OutVars{hdr.tcp.pointer=v_hdr.tcp.pointer_11}  AuxVars[]  AssignedVars[hdr.tcp.pointer] 14006#L544_T0_init [2119] L544_T0_init-->L545_T0_init: Formula: (and (<= 0 v_hdr.tcp.pointer_10) (<= v_hdr.tcp.pointer_10 65536))  InVars {hdr.tcp.pointer=v_hdr.tcp.pointer_10}  OutVars{hdr.tcp.pointer=v_hdr.tcp.pointer_10}  AuxVars[]  AssignedVars[] 14000#L545_T0_init [1935] L545_T0_init-->L546_T0_init: Formula: (not v_hdr.udp_tunnel.valid_20)  InVars {}  OutVars{hdr.udp_tunnel.valid=v_hdr.udp_tunnel.valid_20}  AuxVars[]  AssignedVars[hdr.udp_tunnel.valid] 13994#L546_T0_init [2229] L546_T0_init-->L547_T0_init: Formula: (= v_emit_31 (store v_emit_32 v_hdr.udp_tunnel_9 false))  InVars {emit=v_emit_32, hdr.udp_tunnel=v_hdr.udp_tunnel_9}  OutVars{emit=v_emit_31, hdr.udp_tunnel=v_hdr.udp_tunnel_9}  AuxVars[]  AssignedVars[emit] 13989#L547_T0_init [1949] L547_T0_init-->L548_T0_init: Formula: true  InVars {}  OutVars{hdr.udp_tunnel.srcport=v_hdr.udp_tunnel.srcport_16}  AuxVars[]  AssignedVars[hdr.udp_tunnel.srcport] 13982#L548_T0_init [1790] L548_T0_init-->L549_T0_init: Formula: (and (<= 0 v_hdr.udp_tunnel.srcport_14) (<= v_hdr.udp_tunnel.srcport_14 65536))  InVars {hdr.udp_tunnel.srcport=v_hdr.udp_tunnel.srcport_14}  OutVars{hdr.udp_tunnel.srcport=v_hdr.udp_tunnel.srcport_14}  AuxVars[]  AssignedVars[] 13977#L549_T0_init [2166] L549_T0_init-->L550_T0_init: Formula: true  InVars {}  OutVars{hdr.udp_tunnel.dstport=v_hdr.udp_tunnel.dstport_14}  AuxVars[]  AssignedVars[hdr.udp_tunnel.dstport] 13975#L550_T0_init [2155] L550_T0_init-->L551_T0_init: Formula: (and (<= 0 v_hdr.udp_tunnel.dstport_15) (<= v_hdr.udp_tunnel.dstport_15 65536))  InVars {hdr.udp_tunnel.dstport=v_hdr.udp_tunnel.dstport_15}  OutVars{hdr.udp_tunnel.dstport=v_hdr.udp_tunnel.dstport_15}  AuxVars[]  AssignedVars[] 13973#L551_T0_init [1802] L551_T0_init-->L552_T0_init: Formula: true  InVars {}  OutVars{hdr.udp_tunnel.userlength=v_hdr.udp_tunnel.userlength_16}  AuxVars[]  AssignedVars[hdr.udp_tunnel.userlength] 13969#L552_T0_init [1494] L552_T0_init-->L553_T0_init: Formula: (and (<= 0 v_hdr.udp_tunnel.userlength_17) (<= v_hdr.udp_tunnel.userlength_17 65536))  InVars {hdr.udp_tunnel.userlength=v_hdr.udp_tunnel.userlength_17}  OutVars{hdr.udp_tunnel.userlength=v_hdr.udp_tunnel.userlength_17}  AuxVars[]  AssignedVars[] 13961#L553_T0_init [1607] L553_T0_init-->L554_T0_init: Formula: true  InVars {}  OutVars{hdr.udp_tunnel.checksum=v_hdr.udp_tunnel.checksum_15}  AuxVars[]  AssignedVars[hdr.udp_tunnel.checksum] 13955#L554_T0_init [1482] L554_T0_init-->havocProcedureFINAL_T0_init: Formula: (and (<= v_hdr.udp_tunnel.checksum_14 65536) (<= 0 v_hdr.udp_tunnel.checksum_14))  InVars {hdr.udp_tunnel.checksum=v_hdr.udp_tunnel.checksum_14}  OutVars{hdr.udp_tunnel.checksum=v_hdr.udp_tunnel.checksum_14}  AuxVars[]  AssignedVars[] 13951#havocProcedureFINAL_T0_init [2184] havocProcedureFINAL_T0_init-->havocProcedureEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13944#havocProcedureEXIT_T0_init >[2294] havocProcedureEXIT_T0_init-->L559-D56: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13941#L559-D56 [1645] L559-D56-->L559_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13937#L559_T0_init [1563] L559_T0_init-->L559_T0_init-D22: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 13938#L559_T0_init-D22 [1934] L559_T0_init-D22-->_parser_MyParserENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13949#_parser_MyParserENTRY_T0_init [1580] _parser_MyParserENTRY_T0_init-->_parser_MyParserENTRY_T0_init-D14: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 13950#_parser_MyParserENTRY_T0_init-D14 [1461] _parser_MyParserENTRY_T0_init-D14-->startENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13972#startENTRY_T0_init [1983] startENTRY_T0_init-->L727_T0_init: Formula: v_hdr.ethernet.valid_16  InVars {}  OutVars{hdr.ethernet.valid=v_hdr.ethernet.valid_16}  AuxVars[]  AssignedVars[hdr.ethernet.valid] 13968#L727_T0_init [1961] L727_T0_init-->L730_T0_init: Formula: (not (= v_hdr.ethernet.etherType_35 34525))  InVars {hdr.ethernet.etherType=v_hdr.ethernet.etherType_35}  OutVars{hdr.ethernet.etherType=v_hdr.ethernet.etherType_35}  AuxVars[]  AssignedVars[] 13959#L730_T0_init [2005] L730_T0_init-->L730-1_T0_init: Formula: (not (= v_hdr.ethernet.etherType_37 2048))  InVars {hdr.ethernet.etherType=v_hdr.ethernet.etherType_37}  OutVars{hdr.ethernet.etherType=v_hdr.ethernet.etherType_37}  AuxVars[]  AssignedVars[] 13954#L730-1_T0_init [1883] L730-1_T0_init-->startEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13948#startEXIT_T0_init >[2245] startEXIT_T0_init-->_parser_MyParserFINAL-D66: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13943#_parser_MyParserFINAL-D66 [1638] _parser_MyParserFINAL-D66-->_parser_MyParserFINAL_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13940#_parser_MyParserFINAL_T0_init [1963] _parser_MyParserFINAL_T0_init-->_parser_MyParserEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13936#_parser_MyParserEXIT_T0_init >[2284] _parser_MyParserEXIT_T0_init-->L560-D104: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13928#L560-D104 [2220] L560-D104-->L560_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13904#L560_T0_init [1530] L560_T0_init-->L560_T0_init-D16: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 13905#L560_T0_init-D16 [1972] L560_T0_init-D16-->MyVerifyChecksumFINAL_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13906#MyVerifyChecksumFINAL_T0_init [1885] MyVerifyChecksumFINAL_T0_init-->MyVerifyChecksumEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13903#MyVerifyChecksumEXIT_T0_init >[2283] MyVerifyChecksumEXIT_T0_init-->L561-D74: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13902#L561-D74 [1833] L561-D74-->L561_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13135#L561_T0_init [1771] L561_T0_init-->L561_T0_init-D6: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 13896#L561_T0_init-D6 [1680] L561_T0_init-D6-->MyIngressENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13893#MyIngressENTRY_T0_init [1639] MyIngressENTRY_T0_init-->L259_T0_init: Formula: (= v_standard_metadata.ingress_port_17 0)  InVars {standard_metadata.ingress_port=v_standard_metadata.ingress_port_17}  OutVars{standard_metadata.ingress_port=v_standard_metadata.ingress_port_17}  AuxVars[]  AssignedVars[] 13891#L259_T0_init [1794] L259_T0_init-->L266_T0_init: Formula: (not (= v_hdr.ipv4.dstAddr_19 2071690107))  InVars {hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_19}  OutVars{hdr.ipv4.dstAddr=v_hdr.ipv4.dstAddr_19}  AuxVars[]  AssignedVars[] 13889#L266_T0_init [2048] L266_T0_init-->L267_T0_init: Formula: (and (not (= v_hdr.ethernet.srcAddr_30 0)) (not (= 281474976710655 v_hdr.ethernet.dstAddr_39)))  InVars {hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_30, hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_39}  OutVars{hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_30, hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_39}  AuxVars[]  AssignedVars[] 13887#L267_T0_init [1661] L267_T0_init-->L267_T0_init-D36: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 13888#L267_T0_init-D36 [2084] L267_T0_init-D36-->store_user_macENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13900#store_user_macENTRY_T0_init [1551] store_user_macENTRY_T0_init-->store_user_macENTRY_T0_init-D42: Formula: (and (= v_user_mac.write_indexInParam_1 0) (= v_hdr.ethernet.srcAddr_21 v_user_mac.write_valueInParam_1))  InVars {hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_21}  OutVars{user_mac.write_value=v_user_mac.write_valueInParam_1, user_mac.write_index=v_user_mac.write_indexInParam_1, hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_21}  AuxVars[]  AssignedVars[user_mac.write_value, user_mac.write_index]< 13901#store_user_macENTRY_T0_init-D42 [1622] store_user_macENTRY_T0_init-D42-->user_mac.writeENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13908#user_mac.writeENTRY_T0_init [1456] user_mac.writeENTRY_T0_init-->user_mac.writeFINAL_T0_init: Formula: (= v_user_mac_18 (store v_user_mac_19 v_user_mac.write_index_3 v_user_mac.write_value_3))  InVars {user_mac.write_value=v_user_mac.write_value_3, user_mac.write_index=v_user_mac.write_index_3, user_mac=v_user_mac_19}  OutVars{user_mac.write_value=v_user_mac.write_value_3, user_mac.write_index=v_user_mac.write_index_3, user_mac=v_user_mac_18}  AuxVars[]  AssignedVars[user_mac] 13907#user_mac.writeFINAL_T0_init [2176] user_mac.writeFINAL_T0_init-->user_mac.writeEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13899#user_mac.writeEXIT_T0_init >[2291] user_mac.writeEXIT_T0_init-->store_user_macFINAL-D64: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: (and (= v_user_mac.write_indexInParam_1 0) (= v_hdr.ethernet.srcAddr_21 v_user_mac.write_valueInParam_1))  InVars {hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_21}  OutVars{user_mac.write_value=v_user_mac.write_valueInParam_1, user_mac.write_index=v_user_mac.write_indexInParam_1, hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_21}  AuxVars[]  AssignedVars[user_mac.write_value, user_mac.write_index] 13897#store_user_macFINAL-D64 [1999] store_user_macFINAL-D64-->store_user_macFINAL_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13895#store_user_macFINAL_T0_init [1944] store_user_macFINAL_T0_init-->store_user_macEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13886#store_user_macEXIT_T0_init >[2329] store_user_macEXIT_T0_init-->L267-1-D68: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13884#L267-1-D68 [2170] L267-1-D68-->L267-1_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13881#L267-1_T0_init [2117] L267-1_T0_init-->L267-1_T0_init-D4: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 13882#L267-1_T0_init-D4 [1675] L267-1_T0_init-D4-->read_esboxENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14022#read_esboxENTRY_T0_init [1695] read_esboxENTRY_T0_init-->L683_T0_init: Formula: (= (mod (div (+ (* (- 1) (mod 0 1)) v_hdr.tcp.sequence_53) 1) 256) v_tmp_0_12)  InVars {hdr.tcp.sequence=v_hdr.tcp.sequence_53}  OutVars{hdr.tcp.sequence=v_hdr.tcp.sequence_53, tmp_0=v_tmp_0_12}  AuxVars[]  AssignedVars[tmp_0] 14016#L683_T0_init [1852] L683_T0_init-->L684_T0_init: Formula: (= (select v_es_box_26 v_tmp_0_14) v_tmp_14)  InVars {es_box=v_es_box_26, tmp_0=v_tmp_0_14}  OutVars{tmp=v_tmp_14, es_box=v_es_box_26, tmp_0=v_tmp_0_14}  AuxVars[]  AssignedVars[tmp] 14011#L684_T0_init [1441] L684_T0_init-->L685_T0_init: Formula: (= (+ (* (- 1) (mod v_hdr.tcp.sequence_50 256)) (mod 0 1) v_hdr.tcp.sequence_50 v_tmp_11) v_hdr.tcp.sequence_49)  InVars {tmp=v_tmp_11, hdr.tcp.sequence=v_hdr.tcp.sequence_50}  OutVars{tmp=v_tmp_11, hdr.tcp.sequence=v_hdr.tcp.sequence_49}  AuxVars[]  AssignedVars[hdr.tcp.sequence] 14007#L685_T0_init [1795] L685_T0_init-->L687_T0_init: Formula: (= v_tmp_2_14 (mod (div (+ v_hdr.tcp.sequence_64 (* (- 1) (mod v_hdr.tcp.sequence_64 256))) 256) 256))  InVars {hdr.tcp.sequence=v_hdr.tcp.sequence_64}  OutVars{tmp_2=v_tmp_2_14, hdr.tcp.sequence=v_hdr.tcp.sequence_64}  AuxVars[]  AssignedVars[tmp_2] 14001#L687_T0_init [1522] L687_T0_init-->L688_T0_init: Formula: (= v_tmp_1_13 (select v_es_box_16 v_tmp_2_12))  InVars {es_box=v_es_box_16, tmp_2=v_tmp_2_12}  OutVars{tmp_2=v_tmp_2_12, es_box=v_es_box_16, tmp_1=v_tmp_1_13}  AuxVars[]  AssignedVars[tmp_1] 13995#L688_T0_init [1770] L688_T0_init-->L689_T0_init: Formula: (= v_hdr.tcp.sequence_47 (+ (mod v_hdr.tcp.sequence_48 256) (* 256 v_tmp_1_11) (* (- 1) (mod v_hdr.tcp.sequence_48 65536)) v_hdr.tcp.sequence_48))  InVars {hdr.tcp.sequence=v_hdr.tcp.sequence_48, tmp_1=v_tmp_1_11}  OutVars{hdr.tcp.sequence=v_hdr.tcp.sequence_47, tmp_1=v_tmp_1_11}  AuxVars[]  AssignedVars[hdr.tcp.sequence] 13990#L689_T0_init [2206] L689_T0_init-->L691_T0_init: Formula: (= (mod (div (+ (* (mod v_hdr.tcp.sequence_63 65536) (- 1)) v_hdr.tcp.sequence_63) 65536) 256) v_tmp_4_12)  InVars {hdr.tcp.sequence=v_hdr.tcp.sequence_63}  OutVars{hdr.tcp.sequence=v_hdr.tcp.sequence_63, tmp_4=v_tmp_4_12}  AuxVars[]  AssignedVars[tmp_4] 13983#L691_T0_init [1512] L691_T0_init-->L692_T0_init: Formula: (= (select v_es_box_24 v_tmp_4_13) v_tmp_3_14)  InVars {es_box=v_es_box_24, tmp_4=v_tmp_4_13}  OutVars{tmp_3=v_tmp_3_14, tmp_4=v_tmp_4_13, es_box=v_es_box_24}  AuxVars[]  AssignedVars[tmp_3] 13978#L692_T0_init [1693] L692_T0_init-->L693_T0_init: Formula: (= (+ (* (- 1) (mod v_hdr.tcp.sequence_57 16777216)) (* 65536 v_tmp_3_13) v_hdr.tcp.sequence_57 (mod v_hdr.tcp.sequence_57 65536)) v_hdr.tcp.sequence_56)  InVars {tmp_3=v_tmp_3_13, hdr.tcp.sequence=v_hdr.tcp.sequence_57}  OutVars{tmp_3=v_tmp_3_13, hdr.tcp.sequence=v_hdr.tcp.sequence_56}  AuxVars[]  AssignedVars[hdr.tcp.sequence] 13976#L693_T0_init [1977] L693_T0_init-->L695_T0_init: Formula: (= v_tmp_6_14 (mod (div (+ (* (- 1) (mod v_hdr.tcp.sequence_68 16777216)) v_hdr.tcp.sequence_68) 16777216) 256))  InVars {hdr.tcp.sequence=v_hdr.tcp.sequence_68}  OutVars{tmp_6=v_tmp_6_14, hdr.tcp.sequence=v_hdr.tcp.sequence_68}  AuxVars[]  AssignedVars[tmp_6] 13974#L695_T0_init [1779] L695_T0_init-->L696_T0_init: Formula: (= v_tmp_5_12 (select v_es_box_17 v_tmp_6_11))  InVars {es_box=v_es_box_17, tmp_6=v_tmp_6_11}  OutVars{tmp_5=v_tmp_5_12, es_box=v_es_box_17, tmp_6=v_tmp_6_11}  AuxVars[]  AssignedVars[tmp_5] 13970#L696_T0_init [1811] L696_T0_init-->L697_T0_init: Formula: (= (+ (* 16777216 v_tmp_5_11) v_hdr.tcp.sequence_52 (mod v_hdr.tcp.sequence_52 16777216) (* (- 1) (mod v_hdr.tcp.sequence_52 4294967296))) v_hdr.tcp.sequence_51)  InVars {tmp_5=v_tmp_5_11, hdr.tcp.sequence=v_hdr.tcp.sequence_52}  OutVars{tmp_5=v_tmp_5_11, hdr.tcp.sequence=v_hdr.tcp.sequence_51}  AuxVars[]  AssignedVars[hdr.tcp.sequence] 13962#L697_T0_init [1780] L697_T0_init-->L699_T0_init: Formula: (= v_tmp_8_14 (mod (div (+ v_hdr.tcp.ackseq_62 (* (- 1) (mod 0 1))) 1) 256))  InVars {hdr.tcp.ackseq=v_hdr.tcp.ackseq_62}  OutVars{hdr.tcp.ackseq=v_hdr.tcp.ackseq_62, tmp_8=v_tmp_8_14}  AuxVars[]  AssignedVars[tmp_8] 13956#L699_T0_init [2014] L699_T0_init-->L700_T0_init: Formula: (= v_tmp_7_11 (select v_es_box_14 v_tmp_8_12))  InVars {es_box=v_es_box_14, tmp_8=v_tmp_8_12}  OutVars{tmp_7=v_tmp_7_11, es_box=v_es_box_14, tmp_8=v_tmp_8_12}  AuxVars[]  AssignedVars[tmp_7] 13953#L700_T0_init [1630] L700_T0_init-->L701_T0_init: Formula: (= v_hdr.tcp.ackseq_65 (+ v_hdr.tcp.ackseq_66 v_tmp_7_14 (* (- 1) (mod v_hdr.tcp.ackseq_66 256)) (mod 0 1)))  InVars {tmp_7=v_tmp_7_14, hdr.tcp.ackseq=v_hdr.tcp.ackseq_66}  OutVars{tmp_7=v_tmp_7_14, hdr.tcp.ackseq=v_hdr.tcp.ackseq_65}  AuxVars[]  AssignedVars[hdr.tcp.ackseq] 13947#L701_T0_init [1750] L701_T0_init-->L703_T0_init: Formula: (= (mod (div (+ v_hdr.tcp.ackseq_61 (* (mod v_hdr.tcp.ackseq_61 256) (- 1))) 256) 256) v_tmp_10_14)  InVars {hdr.tcp.ackseq=v_hdr.tcp.ackseq_61}  OutVars{hdr.tcp.ackseq=v_hdr.tcp.ackseq_61, tmp_10=v_tmp_10_14}  AuxVars[]  AssignedVars[tmp_10] 13942#L703_T0_init [1493] L703_T0_init-->L704_T0_init: Formula: (= v_tmp_9_11 (select v_es_box_18 v_tmp_10_11))  InVars {es_box=v_es_box_18, tmp_10=v_tmp_10_11}  OutVars{tmp_10=v_tmp_10_11, es_box=v_es_box_18, tmp_9=v_tmp_9_11}  AuxVars[]  AssignedVars[tmp_9] 13939#L704_T0_init [1581] L704_T0_init-->L705_T0_init: Formula: (= v_hdr.tcp.ackseq_53 (+ v_hdr.tcp.ackseq_54 (mod v_hdr.tcp.ackseq_54 256) (* 256 v_tmp_9_13) (* (- 1) (mod v_hdr.tcp.ackseq_54 65536))))  InVars {hdr.tcp.ackseq=v_hdr.tcp.ackseq_54, tmp_9=v_tmp_9_13}  OutVars{hdr.tcp.ackseq=v_hdr.tcp.ackseq_53, tmp_9=v_tmp_9_13}  AuxVars[]  AssignedVars[hdr.tcp.ackseq] 13927#L705_T0_init [2193] L705_T0_init-->L707_T0_init: Formula: (= (mod (div (+ v_hdr.tcp.ackseq_51 (* (mod v_hdr.tcp.ackseq_51 65536) (- 1))) 65536) 256) v_tmp_12_14)  InVars {hdr.tcp.ackseq=v_hdr.tcp.ackseq_51}  OutVars{hdr.tcp.ackseq=v_hdr.tcp.ackseq_51, tmp_12=v_tmp_12_14}  AuxVars[]  AssignedVars[tmp_12] 13914#L707_T0_init [1469] L707_T0_init-->L708_T0_init: Formula: (= (select v_es_box_13 v_tmp_12_11) v_tmp_11_11)  InVars {es_box=v_es_box_13, tmp_12=v_tmp_12_11}  OutVars{tmp_11=v_tmp_11_11, tmp_12=v_tmp_12_11, es_box=v_es_box_13}  AuxVars[]  AssignedVars[tmp_11] 13913#L708_T0_init [1727] L708_T0_init-->L709_T0_init: Formula: (= v_hdr.tcp.ackseq_59 (+ v_hdr.tcp.ackseq_60 (* 65536 v_tmp_11_14) (* (- 1) (mod v_hdr.tcp.ackseq_60 16777216)) (mod v_hdr.tcp.ackseq_60 65536)))  InVars {tmp_11=v_tmp_11_14, hdr.tcp.ackseq=v_hdr.tcp.ackseq_60}  OutVars{tmp_11=v_tmp_11_14, hdr.tcp.ackseq=v_hdr.tcp.ackseq_59}  AuxVars[]  AssignedVars[hdr.tcp.ackseq] 13912#L709_T0_init [2127] L709_T0_init-->L711_T0_init: Formula: (= (mod (div (+ (* (- 1) (mod v_hdr.tcp.ackseq_45 16777216)) v_hdr.tcp.ackseq_45) 16777216) 256) v_tmp_14_11)  InVars {hdr.tcp.ackseq=v_hdr.tcp.ackseq_45}  OutVars{hdr.tcp.ackseq=v_hdr.tcp.ackseq_45, tmp_14=v_tmp_14_11}  AuxVars[]  AssignedVars[tmp_14] 13911#L711_T0_init [1451] L711_T0_init-->L712_T0_init: Formula: (= (select v_es_box_25 v_tmp_14_14) v_tmp_13_14)  InVars {es_box=v_es_box_25, tmp_14=v_tmp_14_14}  OutVars{es_box=v_es_box_25, tmp_13=v_tmp_13_14, tmp_14=v_tmp_14_14}  AuxVars[]  AssignedVars[tmp_13] 13910#L712_T0_init [1652] L712_T0_init-->read_esboxFINAL_T0_init: Formula: (= v_hdr.tcp.ackseq_49 (+ (* (- 1) (mod v_hdr.tcp.ackseq_50 4294967296)) (mod v_hdr.tcp.ackseq_50 16777216) v_hdr.tcp.ackseq_50 (* 16777216 v_tmp_13_12)))  InVars {hdr.tcp.ackseq=v_hdr.tcp.ackseq_50, tmp_13=v_tmp_13_12}  OutVars{hdr.tcp.ackseq=v_hdr.tcp.ackseq_49, tmp_13=v_tmp_13_12}  AuxVars[]  AssignedVars[hdr.tcp.ackseq] 13909#read_esboxFINAL_T0_init [1969] read_esboxFINAL_T0_init-->read_esboxEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13880#read_esboxEXIT_T0_init >[2263] read_esboxEXIT_T0_init-->L268-D82: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13879#L268-D82 [1920] L268-D82-->L268_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13877#L268_T0_init [2221] L268_T0_init-->L268_T0_init-D28: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 13878#L268_T0_init-D28 [1954] L268_T0_init-D28-->do_read_countENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13885#do_read_countENTRY_T0_init [1812] do_read_countENTRY_T0_init-->do_read_countFINAL_T0_init: Formula: (= v_temp_0_29 (select v_count_17 0))  InVars {count=v_count_17}  OutVars{count=v_count_17, temp_0=v_temp_0_29}  AuxVars[]  AssignedVars[temp_0] 13883#do_read_countFINAL_T0_init [1717] do_read_countFINAL_T0_init-->do_read_countEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13876#do_read_countEXIT_T0_init >[2338] do_read_countEXIT_T0_init-->L269-D84: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13875#L269-D84 [1996] L269-D84-->L269_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13873#L269_T0_init [2164] L269_T0_init-->L271_T0_init: Formula: (= v_temp_0_24 0)  InVars {temp_0=v_temp_0_24}  OutVars{temp_0=v_temp_0_24}  AuxVars[]  AssignedVars[] 13287#L271_T0_init [2139] L271_T0_init-->L271_T0_init-D8: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 13823#L271_T0_init-D8 [2098] L271_T0_init-D8-->creatipv6_1ENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13773#creatipv6_1ENTRY_T0_init [2009] creatipv6_1ENTRY_T0_init-->L346_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13774#L346_T0_init [2061] L346_T0_init-->L348_T0_init: Formula: (= 6 v_hdr.ipv6.version_21)  InVars {}  OutVars{hdr.ipv6.version=v_hdr.ipv6.version_21}  AuxVars[]  AssignedVars[hdr.ipv6.version] 13707#L348_T0_init [1929] L348_T0_init-->L349_T0_init: Formula: (= v_hdr.ipv6.payloadlen_22 v_hdr.ipv4.totalLen_22)  InVars {hdr.ipv4.totalLen=v_hdr.ipv4.totalLen_22}  OutVars{hdr.ipv4.totalLen=v_hdr.ipv4.totalLen_22, hdr.ipv6.payloadlen=v_hdr.ipv6.payloadlen_22}  AuxVars[]  AssignedVars[hdr.ipv6.payloadlen] 13492#L349_T0_init [1726] L349_T0_init-->L350_T0_init: Formula: (= v_hdr.ipv6.nextheader_28 65)  InVars {}  OutVars{hdr.ipv6.nextheader=v_hdr.ipv6.nextheader_28}  AuxVars[]  AssignedVars[hdr.ipv6.nextheader] 13493#L350_T0_init [2189] L350_T0_init-->L351_T0_init: Formula: (= 64 v_hdr.ipv6.hoplimit_22)  InVars {}  OutVars{hdr.ipv6.hoplimit=v_hdr.ipv6.hoplimit_22}  AuxVars[]  AssignedVars[hdr.ipv6.hoplimit] 13795#L351_T0_init [2055] L351_T0_init-->L352_T0_init: Formula: (= v_hdr.ethernet.etherType_28 34525)  InVars {}  OutVars{hdr.ethernet.etherType=v_hdr.ethernet.etherType_28}  AuxVars[]  AssignedVars[hdr.ethernet.etherType] 13796#L352_T0_init [2075] L352_T0_init-->L353_T0_init: Formula: (= v_hdr.ipv6.srcAddr_19 42545680458834377588178886921629466626)  InVars {}  OutVars{hdr.ipv6.srcAddr=v_hdr.ipv6.srcAddr_19}  AuxVars[]  AssignedVars[hdr.ipv6.srcAddr] 13370#L353_T0_init [1643] L353_T0_init-->L354_T0_init: Formula: (= v_hdr.ipv6.dstAddr_18 42540765144257160172006968799218772356)  InVars {}  OutVars{hdr.ipv6.dstAddr=v_hdr.ipv6.dstAddr_18}  AuxVars[]  AssignedVars[hdr.ipv6.dstAddr] 13371#L354_T0_init [1773] L354_T0_init-->L355_T0_init: Formula: (= v_hdr.ethernet.srcAddr_33 19799850608873)  InVars {}  OutVars{hdr.ethernet.srcAddr=v_hdr.ethernet.srcAddr_33}  AuxVars[]  AssignedVars[hdr.ethernet.srcAddr] 13555#L355_T0_init [1881] L355_T0_init-->creatipv6_1FINAL_T0_init: Formula: (= 174219185552744 v_hdr.ethernet.dstAddr_41)  InVars {}  OutVars{hdr.ethernet.dstAddr=v_hdr.ethernet.dstAddr_41}  AuxVars[]  AssignedVars[hdr.ethernet.dstAddr] 13286#creatipv6_1FINAL_T0_init [1590] creatipv6_1FINAL_T0_init-->creatipv6_1EXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13288#creatipv6_1EXIT_T0_init >[2246] creatipv6_1EXIT_T0_init-->L271-1-D62: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13538#L271-1-D62 [1760] L271-1-D62-->L271-1_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13539#L271-1_T0_init [1814] L271-1_T0_init-->L271-1_T0_init-D34: Formula: (and (= v_count.write_indexInParam_1 0) (= v_count.write_valueInParam_1 1))  InVars {}  OutVars{count.write_index=v_count.write_indexInParam_1, count.write_value=v_count.write_valueInParam_1}  AuxVars[]  AssignedVars[count.write_index, count.write_value]< 13597#L271-1_T0_init-D34 [1818] L271-1_T0_init-D34-->count.writeENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13600#count.writeENTRY_T0_init [2103] count.writeENTRY_T0_init-->count.writeFINAL_T0_init: Formula: (= v_count_20 (store v_count_21 v_count.write_index_3 v_count.write_value_3))  InVars {count=v_count_21, count.write_index=v_count.write_index_3, count.write_value=v_count.write_value_3}  OutVars{count=v_count_20, count.write_index=v_count.write_index_3, count.write_value=v_count.write_value_3}  AuxVars[]  AssignedVars[count] 13930#count.writeFINAL_T0_init [1688] count.writeFINAL_T0_init-->count.writeEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13929#count.writeEXIT_T0_init >[2295] count.writeEXIT_T0_init-->L273-D98: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: (and (= v_count.write_indexInParam_1 0) (= v_count.write_valueInParam_1 1))  InVars {}  OutVars{count.write_index=v_count.write_indexInParam_1, count.write_value=v_count.write_valueInParam_1}  AuxVars[]  AssignedVars[count.write_index, count.write_value] 13852#L273-D98 [2157] L273-D98-->L273_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 13646#L273_T0_init [1867] L273_T0_init-->L275_T0_init: Formula: (= v_standard_metadata.egress_spec_24 1)  InVars {}  OutVars{standard_metadata.egress_spec=v_standard_metadata.egress_spec_24}  AuxVars[]  AssignedVars[standard_metadata.egress_spec] 13172#L275_T0_init [1525] L275_T0_init-->L276_T0_init: Formula: (= 1 v_standard_metadata.egress_port_25)  InVars {}  OutVars{standard_metadata.egress_port=v_standard_metadata.egress_port_25}  AuxVars[]  AssignedVars[standard_metadata.egress_port] 13173#L276_T0_init [1761] L276_T0_init-->L270-1_T0_init: Formula: v_forward_24  InVars {}  OutVars{forward=v_forward_24}  AuxVars[]  AssignedVars[forward] 13540#L270-1_T0_init [1943] L270-1_T0_init-->L278-1_T0_init: Formula: (not (= v_temp_0_27 1))  InVars {temp_0=v_temp_0_27}  OutVars{temp_0=v_temp_0_27}  AuxVars[]  AssignedVars[] 14179#L278-1_T0_init [1611] L278-1_T0_init-->L258_T0_init: Formula: (not (= v_temp_0_23 2))  InVars {temp_0=v_temp_0_23}  OutVars{temp_0=v_temp_0_23}  AuxVars[]  AssignedVars[] 14178#L258_T0_init [2204] L258_T0_init-->MyIngressEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14177#MyIngressEXIT_T0_init >[2287] MyIngressEXIT_T0_init-->L562-D108: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14174#L562-D108 [1699] L562-D108-->L562_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14171#L562_T0_init [1989] L562_T0_init-->L562_T0_init-D50: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 14172#L562_T0_init-D50 [1602] L562_T0_init-D50-->MyEgressENTRY_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14175#MyEgressENTRY_T0_init [1617] MyEgressENTRY_T0_init-->L249_T0_init: Formula: (or (not (= 0 v_standard_metadata.egress_port_34)) (not v_hdr.tcp.valid_32))  InVars {standard_metadata.egress_port=v_standard_metadata.egress_port_34, hdr.tcp.valid=v_hdr.tcp.valid_32}  OutVars{standard_metadata.egress_port=v_standard_metadata.egress_port_34, hdr.tcp.valid=v_hdr.tcp.valid_32}  AuxVars[]  AssignedVars[] 14173#L249_T0_init [1619] L249_T0_init-->MyEgressEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14170#MyEgressEXIT_T0_init >[2308] MyEgressEXIT_T0_init-->L563-D90: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14169#L563-D90 [1623] L563-D90-->L563_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14166#L563_T0_init [1840] L563_T0_init-->L563_T0_init-D32: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[]< 14167#L563_T0_init-D32 [2149] L563_T0_init-D32-->MyComputeChecksumFINAL_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14168#MyComputeChecksumFINAL_T0_init [1927] MyComputeChecksumFINAL_T0_init-->MyComputeChecksumEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14165#MyComputeChecksumEXIT_T0_init >[2341] MyComputeChecksumEXIT_T0_init-->L564-D110: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14164#L564-D110 [1498] L564-D110-->L564_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14163#L564_T0_init [1919] L564_T0_init-->L565-1_T0_init: Formula: v_forward_30  InVars {forward=v_forward_30}  OutVars{forward=v_forward_30}  AuxVars[]  AssignedVars[] 14161#L565-1_T0_init [1928] L565-1_T0_init-->L569_T0_init: Formula: (let ((.cse0 (= v__old_hdr.ethernet.srcAddr_14 0))) (or (and v__p4ltl_0_6 (not .cse0)) (and (not v__p4ltl_0_6) .cse0)))  InVars {_old_hdr.ethernet.srcAddr=v__old_hdr.ethernet.srcAddr_14}  OutVars{_p4ltl_0=v__p4ltl_0_6, _old_hdr.ethernet.srcAddr=v__old_hdr.ethernet.srcAddr_14}  AuxVars[]  AssignedVars[_p4ltl_0] 14160#L569_T0_init [1772] L569_T0_init-->L570_T0_init: Formula: (let ((.cse0 (= 2071690107 v__old_hdr.ipv4.dstAddr_14))) (or (and v__p4ltl_1_6 (not .cse0)) (and .cse0 (not v__p4ltl_1_6))))  InVars {_old_hdr.ipv4.dstAddr=v__old_hdr.ipv4.dstAddr_14}  OutVars{_old_hdr.ipv4.dstAddr=v__old_hdr.ipv4.dstAddr_14, _p4ltl_1=v__p4ltl_1_6}  AuxVars[]  AssignedVars[_p4ltl_1] 14159#L570_T0_init [1440] L570_T0_init-->L571_T0_init: Formula: (let ((.cse0 (= 281474976710655 v__old_hdr.ethernet.dstAddr_15))) (or (and v__p4ltl_2_7 (not .cse0)) (and (not v__p4ltl_2_7) .cse0)))  InVars {_old_hdr.ethernet.dstAddr=v__old_hdr.ethernet.dstAddr_15}  OutVars{_p4ltl_2=v__p4ltl_2_7, _old_hdr.ethernet.dstAddr=v__old_hdr.ethernet.dstAddr_15}  AuxVars[]  AssignedVars[_p4ltl_2] 14158#L571_T0_init [1910] L571_T0_init-->mainFINAL_T0_init: Formula: (let ((.cse0 (= v_standard_metadata.ingress_port_19 0))) (or (and v__p4ltl_3_6 .cse0) (and (not .cse0) (not v__p4ltl_3_6))))  InVars {standard_metadata.ingress_port=v_standard_metadata.ingress_port_19}  OutVars{standard_metadata.ingress_port=v_standard_metadata.ingress_port_19, _p4ltl_3=v__p4ltl_3_6}  AuxVars[]  AssignedVars[_p4ltl_3] 14157#mainFINAL_T0_init [2017] mainFINAL_T0_init-->mainEXIT_T0_init: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14156#mainEXIT_T0_init >[2277] mainEXIT_T0_init-->L577-1-D72: AOR: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] LVA: Formula: true  InVars {}  OutVars{}  AuxVars[]  AssignedVars[] 14149#L577-1-D72 [1809] L577-1-D72-->L577-1_accept_S1: Formula: (and v__p4ltl_1_9 v__p4ltl_0_9 v__p4ltl_3_9 v__p4ltl_2_9 (or (not v__p4ltl_3_9) (not v__p4ltl_1_9) (= 1 v_standard_metadata.egress_port_30) (not v__p4ltl_2_9) (not v__p4ltl_0_9)))  InVars {_p4ltl_2=v__p4ltl_2_9, standard_metadata.egress_port=v_standard_metadata.egress_port_30, _p4ltl_3=v__p4ltl_3_9, _p4ltl_0=v__p4ltl_0_9, _p4ltl_1=v__p4ltl_1_9}  OutVars{_p4ltl_2=v__p4ltl_2_9, standard_metadata.egress_port=v_standard_metadata.egress_port_30, _p4ltl_3=v__p4ltl_3_9, _p4ltl_0=v__p4ltl_0_9, _p4ltl_1=v__p4ltl_1_9}  AuxVars[]  AssignedVars[] 13099#L577-1_accept_S1 
[2023-01-16 05:55:54,866 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2023-01-16 05:55:54,866 INFO  L85        PathProgramCache]: Analyzing trace with hash -1107163318, now seen corresponding path program 2 times
[2023-01-16 05:55:54,867 INFO  L118   FreeRefinementEngine]: Executing refinement strategy CAMEL
[2023-01-16 05:55:54,867 INFO  L333   FreeRefinementEngine]: Using trace check IpTcStrategyModuleSmtInterpolCraig [1574120559]
[2023-01-16 05:55:54,867 INFO  L95    rtionOrderModulation]: Keeping assertion order NOT_INCREMENTALLY
[2023-01-16 05:55:54,867 INFO  L127          SolverBuilder]: Constructing new instance of SMTInterpol with explicit timeout -1 ms and remaining time -1 ms
[2023-01-16 05:55:54,896 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is sat
[2023-01-16 05:55:54,897 INFO  L352             TraceCheck]: Trace is feasible, we will do another trace check, this time with branch encoders.
[2023-01-16 05:55:54,923 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is sat
[2023-01-16 05:55:55,086 INFO  L130   FreeRefinementEngine]: Strategy CAMEL found a feasible trace
[2023-01-16 05:55:55,087 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2023-01-16 05:55:55,087 INFO  L85        PathProgramCache]: Analyzing trace with hash -516440100, now seen corresponding path program 1 times
[2023-01-16 05:55:55,087 INFO  L118   FreeRefinementEngine]: Executing refinement strategy CAMEL
[2023-01-16 05:55:55,087 INFO  L333   FreeRefinementEngine]: Using trace check IpTcStrategyModuleSmtInterpolCraig [2049606445]
[2023-01-16 05:55:55,087 INFO  L95    rtionOrderModulation]: Keeping assertion order NOT_INCREMENTALLY
[2023-01-16 05:55:55,088 INFO  L127          SolverBuilder]: Constructing new instance of SMTInterpol with explicit timeout -1 ms and remaining time -1 ms
[2023-01-16 05:55:55,117 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-01-16 05:55:55,265 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 1
[2023-01-16 05:55:55,286 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-01-16 05:55:55,429 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 1
[2023-01-16 05:55:55,441 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-01-16 05:55:55,491 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 141
[2023-01-16 05:55:55,494 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-01-16 05:55:55,503 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 1
[2023-01-16 05:55:55,504 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-01-16 05:55:55,505 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 154
[2023-01-16 05:55:55,506 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-01-16 05:55:55,549 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 159
[2023-01-16 05:55:55,560 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-01-16 05:55:55,642 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 4
[2023-01-16 05:55:55,644 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-01-16 05:55:55,646 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 1
[2023-01-16 05:55:55,647 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-01-16 05:55:55,666 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 15
[2023-01-16 05:55:55,670 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-01-16 05:55:55,686 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 44
[2023-01-16 05:55:55,687 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-01-16 05:55:55,703 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 53
[2023-01-16 05:55:55,706 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-01-16 05:55:55,719 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 68
[2023-01-16 05:55:55,722 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-01-16 05:55:55,747 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 240
[2023-01-16 05:55:55,751 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-01-16 05:55:55,753 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 246
[2023-01-16 05:55:55,755 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-01-16 05:55:55,759 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 262
[2023-01-16 05:55:55,782 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-01-16 05:55:55,807 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 1
[2023-01-16 05:55:55,815 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-01-16 05:55:55,873 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 141
[2023-01-16 05:55:55,874 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-01-16 05:55:55,875 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 1
[2023-01-16 05:55:55,876 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-01-16 05:55:55,877 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 154
[2023-01-16 05:55:55,877 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-01-16 05:55:55,878 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 159
[2023-01-16 05:55:55,881 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-01-16 05:55:55,884 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 4
[2023-01-16 05:55:55,885 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-01-16 05:55:55,886 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 1
[2023-01-16 05:55:55,886 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-01-16 05:55:55,887 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 15
[2023-01-16 05:55:55,889 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-01-16 05:55:55,893 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 44
[2023-01-16 05:55:55,894 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-01-16 05:55:55,895 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 51
[2023-01-16 05:55:55,896 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-01-16 05:55:55,897 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 66
[2023-01-16 05:55:55,897 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-01-16 05:55:55,899 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 240
[2023-01-16 05:55:55,900 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-01-16 05:55:55,901 INFO  L376   atingTraceCheckCraig]: Compute interpolants for subsequence at non-pending call position 246
[2023-01-16 05:55:55,902 INFO  L136    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2023-01-16 05:55:55,904 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2023-01-16 05:55:55,904 INFO  L136   FreeRefinementEngine]: Strategy CAMEL found an infeasible trace
[2023-01-16 05:55:55,904 INFO  L333   FreeRefinementEngine]: Using interpolant generator IpTcStrategyModuleSmtInterpolCraig [2049606445]
[2023-01-16 05:55:55,904 INFO  L157   FreeRefinementEngine]: IpTcStrategyModuleSmtInterpolCraig [2049606445] provided 1 perfect and 0 imperfect interpolant sequences
[2023-01-16 05:55:55,904 INFO  L184   FreeRefinementEngine]: Found 1 perfect and 0 imperfect interpolant sequences.
[2023-01-16 05:55:55,904 INFO  L197   FreeRefinementEngine]: Number of different interpolants: perfect sequences [27] imperfect sequences [] total 27
[2023-01-16 05:55:55,905 INFO  L121   tionRefinementEngine]: Using interpolant automaton builder IpAbStrategyModuleStraightlineAll [565313181]
[2023-01-16 05:55:55,905 INFO  L85    oduleStraightlineAll]: Using 1 perfect interpolants to construct interpolant automaton
[2023-01-16 05:55:55,906 INFO  L769   eck$LassoCheckResult]: loop already infeasible
[2023-01-16 05:55:55,906 INFO  L100   FreeRefinementEngine]: Using predicate unifier PredicateUnifier provided by strategy CAMEL
[2023-01-16 05:55:55,906 INFO  L143   InterpolantAutomaton]: Constructing interpolant automaton starting with 27 interpolants.
[2023-01-16 05:55:55,906 INFO  L145   InterpolantAutomaton]: CoverageRelationStatistics Valid=91, Invalid=611, Unknown=0, NotChecked=0, Total=702
[2023-01-16 05:55:55,907 INFO  L87              Difference]: Start difference. First operand 2029 states and 2148 transitions. cyclomatic complexity: 120 Second operand  has 27 states, 27 states have (on average 17.25925925925926) internal successors, (466), 16 states have internal predecessors, (466), 5 states have call successors, (28), 12 states have call predecessors, (28), 4 states have return successors, (28), 6 states have call predecessors, (28), 5 states have call successors, (28)
[2023-01-16 05:56:03,046 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2023-01-16 05:56:03,046 INFO  L93              Difference]: Finished difference Result 2047 states and 2185 transitions.
[2023-01-16 05:56:03,047 INFO  L141   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 54 states. 
[2023-01-16 05:56:03,047 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2047 states and 2185 transitions.
[2023-01-16 05:56:03,053 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2023-01-16 05:56:03,053 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2047 states to 0 states and 0 transitions.
[2023-01-16 05:56:03,053 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2023-01-16 05:56:03,053 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2023-01-16 05:56:03,054 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2023-01-16 05:56:03,054 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2023-01-16 05:56:03,054 INFO  L369   hiAutomatonCegarLoop]: Abstraction has 0 states and 0 transitions.
[2023-01-16 05:56:03,054 INFO  L392   hiAutomatonCegarLoop]: Abstraction has 0 states and 0 transitions.
[2023-01-16 05:56:03,054 INFO  L399   stractBuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2023-01-16 05:56:03,054 INFO  L287   stractBuchiCegarLoop]: ======== Iteration 6 ============
[2023-01-16 05:56:03,054 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2023-01-16 05:56:03,054 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2023-01-16 05:56:03,054 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2023-01-16 05:56:03,063 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 16.01 05:56:03 BasicIcfg
[2023-01-16 05:56:03,063 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2023-01-16 05:56:03,064 INFO  L158              Benchmark]: Toolchain (without parser) took 37527.31ms. Allocated memory was 60.8MB in the beginning and 1.1GB in the end (delta: 1.0GB). Free memory was 29.6MB in the beginning and 972.1MB in the end (delta: -942.5MB). Peak memory consumption was 72.9MB. Max. memory is 4.3GB.
[2023-01-16 05:56:03,064 INFO  L158              Benchmark]: Boogie PL CUP Parser took 0.11ms. Allocated memory is still 60.8MB. Free memory is still 32.6MB. There was no memory consumed. Max. memory is 4.3GB.
[2023-01-16 05:56:03,064 INFO  L158              Benchmark]: Boogie Preprocessor took 70.46ms. Allocated memory is still 60.8MB. Free memory was 29.5MB in the beginning and 43.3MB in the end (delta: -13.8MB). Peak memory consumption was 4.9MB. Max. memory is 4.3GB.
[2023-01-16 05:56:03,065 INFO  L158              Benchmark]: ThufvSpecLang took 46.14ms. Allocated memory is still 60.8MB. Free memory was 43.3MB in the beginning and 41.1MB in the end (delta: 2.2MB). Peak memory consumption was 2.1MB. Max. memory is 4.3GB.
[2023-01-16 05:56:03,065 INFO  L158              Benchmark]: RCFGBuilder took 614.22ms. Allocated memory is still 60.8MB. Free memory was 41.0MB in the beginning and 39.0MB in the end (delta: 2.0MB). Peak memory consumption was 21.3MB. Max. memory is 4.3GB.
[2023-01-16 05:56:03,065 INFO  L158              Benchmark]: ThufvLTL2Aut took 76.21ms. Allocated memory is still 60.8MB. Free memory was 39.0MB in the beginning and 36.1MB in the end (delta: 2.9MB). Peak memory consumption was 3.1MB. Max. memory is 4.3GB.
[2023-01-16 05:56:03,066 INFO  L158              Benchmark]: BÃ¼chi Program Product took 612.87ms. Allocated memory was 60.8MB in the beginning and 112.2MB in the end (delta: 51.4MB). Free memory was 36.1MB in the beginning and 80.4MB in the end (delta: -44.3MB). Peak memory consumption was 34.4MB. Max. memory is 4.3GB.
[2023-01-16 05:56:03,066 INFO  L158              Benchmark]: BlockEncodingV2 took 87.38ms. Allocated memory is still 112.2MB. Free memory was 80.4MB in the beginning and 67.8MB in the end (delta: 12.6MB). Peak memory consumption was 12.6MB. Max. memory is 4.3GB.
[2023-01-16 05:56:03,066 INFO  L158              Benchmark]: BuchiAutomizer took 36013.00ms. Allocated memory was 112.2MB in the beginning and 1.1GB in the end (delta: 963.6MB). Free memory was 67.8MB in the beginning and 972.1MB in the end (delta: -904.3MB). Peak memory consumption was 59.3MB. Max. memory is 4.3GB.
[2023-01-16 05:56:03,068 INFO  L339   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    813 locations, 910 edges
  - StatisticsResult: Encoded RCFG
    805 locations, 899 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.11ms. Allocated memory is still 60.8MB. Free memory is still 32.6MB. There was no memory consumed. Max. memory is 4.3GB.
 * Boogie Preprocessor took 70.46ms. Allocated memory is still 60.8MB. Free memory was 29.5MB in the beginning and 43.3MB in the end (delta: -13.8MB). Peak memory consumption was 4.9MB. Max. memory is 4.3GB.
 * ThufvSpecLang took 46.14ms. Allocated memory is still 60.8MB. Free memory was 43.3MB in the beginning and 41.1MB in the end (delta: 2.2MB). Peak memory consumption was 2.1MB. Max. memory is 4.3GB.
 * RCFGBuilder took 614.22ms. Allocated memory is still 60.8MB. Free memory was 41.0MB in the beginning and 39.0MB in the end (delta: 2.0MB). Peak memory consumption was 21.3MB. Max. memory is 4.3GB.
 * ThufvLTL2Aut took 76.21ms. Allocated memory is still 60.8MB. Free memory was 39.0MB in the beginning and 36.1MB in the end (delta: 2.9MB). Peak memory consumption was 3.1MB. Max. memory is 4.3GB.
 * BÃ¼chi Program Product took 612.87ms. Allocated memory was 60.8MB in the beginning and 112.2MB in the end (delta: 51.4MB). Free memory was 36.1MB in the beginning and 80.4MB in the end (delta: -44.3MB). Peak memory consumption was 34.4MB. Max. memory is 4.3GB.
 * BlockEncodingV2 took 87.38ms. Allocated memory is still 112.2MB. Free memory was 80.4MB in the beginning and 67.8MB in the end (delta: 12.6MB). Peak memory consumption was 12.6MB. Max. memory is 4.3GB.
 * BuchiAutomizer took 36013.00ms. Allocated memory was 112.2MB in the beginning and 1.1GB in the end (delta: 963.6MB). Free memory was 67.8MB in the beginning and 972.1MB in the end (delta: -904.3MB). Peak memory consumption was 59.3MB. Max. memory is 4.3GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 4 edges
  - StatisticsResult: Initial RCFG
    353 locations, 400 edges
  - StatisticsResult: BuchiProgram size
    813 locations, 910 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 5 terminating modules (5 trivial, 0 deterministic, 0 nondeterministic). 5 modules have a trivial ranking function, the largest among these consists of 27 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 35.9s and 6 iterations.  TraceHistogramMax:1. Analysis of lassos took 4.8s. Construction of modules took 15.3s. BÃ¼chi inclusion checks took 15.3s. Highest rank in rank-based complementation 0. Minimization of det autom 5. Minimization of nondet autom 0. Automata minimization 0.1s AutomataMinimizationTime, 4 MinimizatonAttempts, 1120 StatesRemovedByMinimization, 4 NontrivialMinimizations. Non-live state removal took 0.0s Buchi closure took 0.0s. Biggest automaton had -1 states and ocurred in iteration -1.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 0 mSolverCounterUnknown, 19111 SdHoareTripleChecker+Valid, 17.3s IncrementalHoareTripleChecker+Time, 0 mSdLazyCounter, 19044 mSDsluCounter, 8075 SdHoareTripleChecker+Invalid, 15.3s Time, 0 mProtectedAction, 0 SdHoareTripleChecker+Unchecked, 0 IncrementalHoareTripleChecker+Unchecked, 3473 mSDsCounter, 4238 IncrementalHoareTripleChecker+Valid, 0 mProtectedPredicate, 31567 IncrementalHoareTripleChecker+Invalid, 35805 SdHoareTripleChecker+Unknown, 0 mSolverCounterNotChecked, 4238 mSolverCounterUnsat, 4602 mSDtfsCounter, 31567 mSolverCounterSat, 0.4s SdHoareTripleChecker+Time, 0 IncrementalHoareTripleChecker+Unknown	LassoAnalysisResults: nont0 unkn0 SFLI1 SFLT0 conc1 concLT0 SILN0 SILU3 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	InitialAbstractionConstructionTime: 0.0s
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property !(( [](( <>((((_p4ltl_3 == true && _p4ltl_2 == true) && _p4ltl_1 == true) && _p4ltl_0 == true)) )) )) || ( ( !(( []((((_p4ltl_3 == true && _p4ltl_2 == true) && _p4ltl_1 == true) && _p4ltl_0 == true ==> standard_metadata.egress_port == 1)) )) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
