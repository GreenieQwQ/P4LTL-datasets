 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    3302 locations, 5330 edges
  - StatisticsResult: Encoded RCFG
    3285 locations, 5304 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.21ms. Allocated memory is still 23.1MB. Free memory was 7.8MB in the beginning and 7.8MB in the end (delta: 28.0kB). There was no memory consumed. Max. memory is 4.3GB.
 * Boogie Preprocessor took 172.83ms. Allocated memory is still 32.5MB. Free memory was 15.3MB in the beginning and 13.1MB in the end (delta: 2.2MB). Peak memory consumption was 7.4MB. Max. memory is 4.3GB.
 * ThufvSpecLang took 358.75ms. Allocated memory is still 32.5MB. Free memory was 13.1MB in the beginning and 15.1MB in the end (delta: -2.0MB). Peak memory consumption was 2.6MB. Max. memory is 4.3GB.
 * RCFGBuilder took 2285.86ms. Allocated memory was 32.5MB in the beginning and 39.8MB in the end (delta: 7.3MB). Free memory was 15.1MB in the beginning and 19.1MB in the end (delta: -4.0MB). Peak memory consumption was 13.5MB. Max. memory is 4.3GB.
 * ThufvLTL2Aut took 573.52ms. Allocated memory is still 39.8MB. Free memory was 19.0MB in the beginning and 15.9MB in the end (delta: 3.1MB). Peak memory consumption was 3.1MB. Max. memory is 4.3GB.
 * Büchi Program Product took 1829.68ms. Allocated memory was 39.8MB in the beginning and 97.5MB in the end (delta: 57.7MB). Free memory was 15.9MB in the beginning and 36.9MB in the end (delta: -21.1MB). Peak memory consumption was 59.7MB. Max. memory is 4.3GB.
 * BlockEncodingV2 took 520.39ms. Allocated memory was 97.5MB in the beginning and 170.9MB in the end (delta: 73.4MB). Free memory was 36.9MB in the beginning and 51.0MB in the end (delta: -14.0MB). Peak memory consumption was 59.4MB. Max. memory is 4.3GB.
 * BuchiAutomizer took 2331528.83ms. Allocated memory was 170.9MB in the beginning and 1.3GB in the end (delta: 1.1GB). Free memory was 132.4MB in the beginning and 193.6MB in the end (delta: -61.2MB). Peak memory consumption was 1.3GB. Max. memory is 4.3GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    5 locations, 14 edges
  - StatisticsResult: Initial RCFG
    513 locations, 688 edges
  - StatisticsResult: BuchiProgram size
    3302 locations, 5330 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 7 terminating modules (7 trivial, 0 deterministic, 0 nondeterministic) and one nonterminating remainder module.7 modules have a trivial ranking function, the largest among these consists of 15 locations. The remainder module has 3210 locations.
  - StatisticsResult: Timing statistics
    BüchiAutomizer plugin needed 2331.2s and 8 iterations.  TraceHistogramMax:1. Analysis of lassos took 2231.2s. Construction of modules took 84.2s. Büchi inclusion checks took 13.9s. Highest rank in rank-based complementation 0. Minimization of det autom 7. Minimization of nondet autom 0. Automata minimization 0.6s AutomataMinimizationTime, 7 MinimizatonAttempts, 4447 StatesRemovedByMinimization, 7 NontrivialMinimizations. Non-live state removal took 0.2s Buchi closure took 0.0s. Biggest automaton had -1 states and ocurred in iteration -1.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 0 mSolverCounterUnknown, 80710 SdHoareTripleChecker+Valid, 90.6s IncrementalHoareTripleChecker+Time, 0 mSdLazyCounter, 80248 mSDsluCounter, 50741 SdHoareTripleChecker+Invalid, 84.3s Time, 0 mProtectedAction, 0 SdHoareTripleChecker+Unchecked, 0 IncrementalHoareTripleChecker+Unchecked, 26300 mSDsCounter, 25927 IncrementalHoareTripleChecker+Valid, 0 mProtectedPredicate, 83963 IncrementalHoareTripleChecker+Invalid, 109890 SdHoareTripleChecker+Unknown, 0 mSolverCounterNotChecked, 25927 mSolverCounterUnsat, 24860 mSDtfsCounter, 83963 mSolverCounterSat, 0.8s SdHoareTripleChecker+Time, 0 IncrementalHoareTripleChecker+Unknown	LassoAnalysisResults: nont1 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU7 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	InitialAbstractionConstructionTime: 0.0s
  - LTLInfiniteCounterExampleResult [Line: 1128]: Violation of LTL property !(( [](((hdr.tcp.valid == true && _p4ltl_13 == true) && _p4ltl_12 == true)) )) || ( ( [](( (_p4ltl_11 == true && _p4ltl_10 == true) ==> ( ( []((_p4ltl_9 == true ==> _p4ltl_6 == true)) ) || ( (_p4ltl_5 == true ==> _p4ltl_2 == true) U (_p4ltl_1 == true && _p4ltl_0 == true) ) ) )) ))
    Found an infinite, lasso-shaped execution that violates the LTL property !(( [](((hdr.tcp.valid == true && _p4ltl_13 == true) && _p4ltl_12 == true)) )) || ( ( [](( (_p4ltl_11 == true && _p4ltl_10 == true) ==> ( ( []((_p4ltl_9 == true ==> _p4ltl_6 == true)) ) || ( (_p4ltl_5 == true ==> _p4ltl_2 == true) U (_p4ltl_1 == true && _p4ltl_0 == true) ) ) )) )).
Stem:
[L399]         CALL        call mainProcedure();
[L1127]        COND TRUE   true
[L1128]        CALL        call main();
[L1094]        CALL        call havocProcedure();
[L503]                     drop := false;
[L504]                     forward := false;
[L505]                     standard_metadata.ingress_port := 0;
[L506]                     standard_metadata.egress_spec := 0;
[L507]                     standard_metadata.egress_port := 0;
[L508]                     standard_metadata.instance_type := 0;
[L509]                     standard_metadata.packet_length := 0;
[L510]                     standard_metadata.enq_timestamp := 0;
[L511]                     standard_metadata.enq_qdepth := 0;
[L512]                     standard_metadata.deq_timedelta := 0;
[L513]                     standard_metadata.deq_qdepth := 0;
[L514]                     standard_metadata.ingress_global_timestamp := 0;
[L515]                     standard_metadata.egress_global_timestamp := 0;
[L516]                     standard_metadata.mcast_grp := 0;
[L517]                     standard_metadata.egress_rid := 0;
[L518]                     standard_metadata.checksum_error := 0;
[L519]                     standard_metadata.priority := 0;
[L520]                     hdr.ethernet.valid := false;
[L521]                     emit[hdr.ethernet] := false;
[L522]                     havoc hdr.ethernet.dstAddr;
[L523]                     havoc hdr.ethernet.srcAddr;
[L524]                     havoc hdr.ethernet.etherType;
[L525]                     assume 0 <= hdr.ethernet.etherType && hdr.ethernet.etherType <= 65536;
[L526]                     hdr.ipv4_icmp.valid := false;
[L527]                     emit[hdr.ipv4_icmp] := false;
[L528]                     havoc hdr.ipv4_icmp.version;
[L529]                     assume 0 <= hdr.ipv4_icmp.version && hdr.ipv4_icmp.version <= 16;
[L530]                     havoc hdr.ipv4_icmp.ihl;
[L531]                     assume 0 <= hdr.ipv4_icmp.ihl && hdr.ipv4_icmp.ihl <= 16;
[L532]                     havoc hdr.ipv4_icmp.dscp;
[L533]                     assume 0 <= hdr.ipv4_icmp.dscp && hdr.ipv4_icmp.dscp <= 64;
[L534]                     havoc hdr.ipv4_icmp.ecn;
[L535]                     assume 0 <= hdr.ipv4_icmp.ecn && hdr.ipv4_icmp.ecn <= 4;
[L536]                     havoc hdr.ipv4_icmp.totalLen;
[L537]                     assume 0 <= hdr.ipv4_icmp.totalLen && hdr.ipv4_icmp.totalLen <= 65536;
[L538]                     havoc hdr.ipv4_icmp.identification;
[L539]                     assume 0 <= hdr.ipv4_icmp.identification && hdr.ipv4_icmp.identification <= 65536;
[L540]                     havoc hdr.ipv4_icmp.flags;
[L541]                     assume 0 <= hdr.ipv4_icmp.flags && hdr.ipv4_icmp.flags <= 8;
[L542]                     havoc hdr.ipv4_icmp.fragOffset;
[L543]                     assume 0 <= hdr.ipv4_icmp.fragOffset && hdr.ipv4_icmp.fragOffset <= 8192;
[L544]                     havoc hdr.ipv4_icmp.ttl;
[L545]                     assume 0 <= hdr.ipv4_icmp.ttl && hdr.ipv4_icmp.ttl <= 256;
[L546]                     havoc hdr.ipv4_icmp.protocol;
[L547]                     assume 0 <= hdr.ipv4_icmp.protocol && hdr.ipv4_icmp.protocol <= 256;
[L548]                     havoc hdr.ipv4_icmp.hdrChecksum;
[L549]                     assume 0 <= hdr.ipv4_icmp.hdrChecksum && hdr.ipv4_icmp.hdrChecksum <= 65536;
[L550]                     havoc hdr.ipv4_icmp.srcAddr;
[L551]                     havoc hdr.ipv4_icmp.dstAddr;
[L552]                     hdr.icmp.valid := false;
[L553]                     emit[hdr.icmp] := false;
[L554]                     havoc hdr.icmp.type;
[L555]                     assume 0 <= hdr.icmp.type && hdr.icmp.type <= 256;
[L556]                     havoc hdr.icmp.code;
[L557]                     assume 0 <= hdr.icmp.code && hdr.icmp.code <= 256;
[L558]                     havoc hdr.icmp.checksum;
[L559]                     assume 0 <= hdr.icmp.checksum && hdr.icmp.checksum <= 65536;
[L560]                     havoc hdr.icmp.unused;
[L561]                     assume 0 <= hdr.icmp.unused && hdr.icmp.unused <= 4294967296;
[L562]                     hdr.ipv4.valid := false;
[L563]                     emit[hdr.ipv4] := false;
[L564]                     havoc hdr.ipv4.version;
[L565]                     assume 0 <= hdr.ipv4.version && hdr.ipv4.version <= 16;
[L566]                     havoc hdr.ipv4.ihl;
[L567]                     assume 0 <= hdr.ipv4.ihl && hdr.ipv4.ihl <= 16;
[L568]                     havoc hdr.ipv4.dscp;
[L569]                     assume 0 <= hdr.ipv4.dscp && hdr.ipv4.dscp <= 64;
[L570]                     havoc hdr.ipv4.ecn;
[L571]                     assume 0 <= hdr.ipv4.ecn && hdr.ipv4.ecn <= 4;
[L572]                     havoc hdr.ipv4.totalLen;
[L573]                     assume 0 <= hdr.ipv4.totalLen && hdr.ipv4.totalLen <= 65536;
[L574]                     havoc hdr.ipv4.identification;
[L575]                     assume 0 <= hdr.ipv4.identification && hdr.ipv4.identification <= 65536;
[L576]                     havoc hdr.ipv4.flags;
[L577]                     assume 0 <= hdr.ipv4.flags && hdr.ipv4.flags <= 8;
[L578]                     havoc hdr.ipv4.fragOffset;
[L579]                     assume 0 <= hdr.ipv4.fragOffset && hdr.ipv4.fragOffset <= 8192;
[L580]                     havoc hdr.ipv4.ttl;
[L581]                     assume 0 <= hdr.ipv4.ttl && hdr.ipv4.ttl <= 256;
[L582]                     havoc hdr.ipv4.protocol;
[L583]                     assume 0 <= hdr.ipv4.protocol && hdr.ipv4.protocol <= 256;
[L584]                     havoc hdr.ipv4.hdrChecksum;
[L585]                     assume 0 <= hdr.ipv4.hdrChecksum && hdr.ipv4.hdrChecksum <= 65536;
[L586]                     havoc hdr.ipv4.srcAddr;
[L587]                     havoc hdr.ipv4.dstAddr;
[L588]                     hdr.tcp.valid := false;
[L589]                     emit[hdr.tcp] := false;
[L590]                     havoc hdr.tcp.srcPort;
[L591]                     assume 0 <= hdr.tcp.srcPort && hdr.tcp.srcPort <= 65536;
[L592]                     havoc hdr.tcp.dstPort;
[L593]                     assume 0 <= hdr.tcp.dstPort && hdr.tcp.dstPort <= 65536;
[L594]                     havoc hdr.tcp.seqNo;
[L595]                     assume 0 <= hdr.tcp.seqNo && hdr.tcp.seqNo <= 4294967296;
[L596]                     havoc hdr.tcp.ackNo;
[L597]                     assume 0 <= hdr.tcp.ackNo && hdr.tcp.ackNo <= 4294967296;
[L598]                     havoc hdr.tcp.dataOffset;
[L599]                     assume 0 <= hdr.tcp.dataOffset && hdr.tcp.dataOffset <= 16;
[L600]                     havoc hdr.tcp.res;
[L601]                     assume 0 <= hdr.tcp.res && hdr.tcp.res <= 16;
[L602]                     havoc hdr.tcp.cwr;
[L603]                     assume 0 <= hdr.tcp.cwr && hdr.tcp.cwr <= 2;
[L604]                     havoc hdr.tcp.ece;
[L605]                     assume 0 <= hdr.tcp.ece && hdr.tcp.ece <= 2;
[L606]                     havoc hdr.tcp.urg;
[L607]                     assume 0 <= hdr.tcp.urg && hdr.tcp.urg <= 2;
[L608]                     havoc hdr.tcp.ack;
[L609]                     assume 0 <= hdr.tcp.ack && hdr.tcp.ack <= 2;
[L610]                     havoc hdr.tcp.psh;
[L611]                     assume 0 <= hdr.tcp.psh && hdr.tcp.psh <= 2;
[L612]                     havoc hdr.tcp.rst;
[L613]                     assume 0 <= hdr.tcp.rst && hdr.tcp.rst <= 2;
[L614]                     havoc hdr.tcp.syn;
[L615]                     assume 0 <= hdr.tcp.syn && hdr.tcp.syn <= 2;
[L616]                     havoc hdr.tcp.fin;
[L617]                     assume 0 <= hdr.tcp.fin && hdr.tcp.fin <= 2;
[L618]                     havoc hdr.tcp.window;
[L619]                     assume 0 <= hdr.tcp.window && hdr.tcp.window <= 65536;
[L620]                     havoc hdr.tcp.checksum;
[L621]                     assume 0 <= hdr.tcp.checksum && hdr.tcp.checksum <= 65536;
[L622]                     havoc hdr.tcp.urgentPtr;
[L623]                     assume 0 <= hdr.tcp.urgentPtr && hdr.tcp.urgentPtr <= 65536;
[L624]                     meta.id := 0;
[L625]                     meta.use_blink := 0;
[L626]                     meta.is_retransmission := 0;
[L627]                     meta.next_hop_port := 0;
[L628]                     meta.tcp_payload_len := 0;
[L629]                     meta.ingress_timestamp_second := 0;
[L630]                     meta.ingress_timestamp_millisecond := 0;
[L631]                     meta.flowselector_cellid := 0;
[L632]                     meta.selected := 0;
[L633]                     meta.bgp_ngh_type := 0;
[L634]                     havoc _p4ltl_free_a;
[L1094]        RET         call havocProcedure();
[L1097]        CALL        call _parser_ParserImpl();
[L420]         CALL        call start();
[L1266]                    hdr.ethernet.valid := true;
[L1267]        COND TRUE   hdr.ethernet.etherType == 2048
[L1268]        CALL        call parse_ipv4();
[L1191]                    hdr.ipv4.valid := true;
[L1192]        COND TRUE   hdr.ipv4.protocol == 6
[L1193]        CALL        call parse_tcp();
[L1201]                    hdr.tcp.valid := true;
[L1202]        CALL        call accept();
[L1202]        RET         call accept();
[L1193]        RET         call parse_tcp();
[L1268]        RET         call parse_ipv4();
[L420]         RET         call start();
[L1097]        RET         call _parser_ParserImpl();
[L1098]        CALL        call verifyChecksum();
[L1098]        RET         call verifyChecksum();
[L1099]        CALL        call ingress();
[L642]                     ts_tmp_0 := timestamp_reference_0[0];
[L643-L646]                assume !((281474976710656 + standard_metadata.ingress_global_timestamp % 281474976710656 - ts_tmp_0 % 281474976710656) % 281474976710656 > 500000000);
[L648]                     ts_tmp_0 := timestamp_reference_0[0];
[L649]                     meta.ingress_timestamp_second := ((281474976710656 + standard_metadata.ingress_global_timestamp % 281474976710656 - ts_tmp_0 % 281474976710656) % 281474976710656 - (281474976710656 + standard_metadata.ingress_global_timestamp % 281474976710656 - ts_tmp_0 % 281474976710656) % 281474976710656 % 1048576) / 1048576 % 512;
[L650]                     meta.ingress_timestamp_millisecond := ((281474976710656 + standard_metadata.ingress_global_timestamp % 281474976710656 - ts_tmp_0 % 281474976710656) % 281474976710656 - (281474976710656 + standard_metadata.ingress_global_timestamp % 281474976710656 - ts_tmp_0 % 281474976710656) % 281474976710656 % 1024) / 1024 % 524288;
[L651]         CALL        call bgp_tag_0.apply();
[L435]         COND TRUE   bgp_tag_0.action_run == bgp_tag_0.action.set_bgp_tag
[L436]         CALL        call set_bgp_tag(set_bgp_tag.neighbor_bgp_type);
[L1238]                    meta.bgp_ngh_type := neighbor_bgp_type;
[L436]         RET         call set_bgp_tag(set_bgp_tag.neighbor_bgp_type);
[L651]         RET         call bgp_tag_0.apply();
[L652]         CALL        call meta_fwtable_0.apply();
[L1146]        COND TRUE   meta_fwtable_0.action_run == meta_fwtable_0.action.set_meta
[L1147]        CALL        call set_meta(set_meta.id, set_meta.use_blink, set_meta.default_nexthop_port);
[L1245]                    meta.id := id;
[L1246]                    meta.use_blink := use_blink;
[L1247]                    meta.next_hop_port := default_nexthop_port;
[L1147]        RET         call set_meta(set_meta.id, set_meta.use_blink, set_meta.default_nexthop_port);
[L652]         RET         call meta_fwtable_0.apply();
[L653]         COND FALSE  !((hdr.ipv4.valid && hdr.tcp.valid) && hdr.ipv4.ttl == 1)
[L675]                     threshold_tmp_0 := threshold_registers_0[meta.id];
[L676]         COND TRUE   hdr.tcp.valid && meta.use_blink == 1
[L677]         COND FALSE  !(hdr.tcp.syn == 1 || hdr.tcp.fin == 1)
[L681]                     meta.tcp_payload_len := (65536 + (65536 + hdr.ipv4.totalLen % 65536 - hdr.ipv4.ihl * 4 % 4 % 65536) % 65536 % 65536 - hdr.tcp.dataOffset * 4 % 4 % 65536) % 65536;
[L683-L980]                assume !(meta.tcp_payload_len > 0);
[L982]         COND TRUE   meta.use_blink == 1
[L984]                     nh_avaibility_1_tmp_0 := nh_avaibility_1[meta.id];
[L986]                     nh_avaibility_2_tmp_0 := nh_avaibility_2[meta.id];
[L988]                     nh_avaibility_3_tmp_0 := nh_avaibility_3[meta.id];
[L990]                     rerouting_ts_tmp_0 := rerouting_ts_0[meta.id];
[L991-L1072]               assume !((meta.selected == 1 && rerouting_ts_tmp_0 > 0) && (524288 + meta.ingress_timestamp_millisecond % 524288 - rerouting_ts_tmp_0 % 524288) % 524288 < 976);
[L1052]        COND TRUE   nh_avaibility_1_tmp_0 == 0
[L1054]                    meta.next_hop_port := next_hops_port_0[meta.id % 4294967296 * (3 % 4294967296) % 4294967296];
[L1073-L1086]              assume !(rerouting_ts_tmp_0 > 0 && (524288 + meta.ingress_timestamp_millisecond % 524288 - rerouting_ts_tmp_0 % 524288) % 524288 > 976);
[L1088]        CALL        call send_0.apply();
[L1225]        COND TRUE   send_0.action_run == send_0.action.set_nh
[L1226]        CALL        call set_nh(set_nh.port, set_nh.smac, set_nh.dmac);
[L1254]                    standard_metadata.egress_spec := port;
[L1255]                    standard_metadata.egress_port := port;
[L1256]                    forward := true;
[L1257]                    hdr.ethernet.srcAddr := smac;
[L1258]                    hdr.ethernet.dstAddr := dmac;
[L1259]                    hdr.ipv4.ttl := (hdr.ipv4.ttl % 256 + 255 % 256) % 256;
[L1226]        RET         call set_nh(set_nh.port, set_nh.smac, set_nh.dmac);
[L1088]        RET         call send_0.apply();
[L1099]        RET         call ingress();
[L1100]        CALL        call egress();
[L1100]        RET         call egress();
[L1101]        CALL        call computeChecksum();
[L1101]        RET         call computeChecksum();
[L1102]        COND FALSE  !(forward == false)
[L1105]                    _p4ltl_0 := sw_sum_0[_p4ltl_free_a] > threshold_registers_0[_p4ltl_free_a];
[L1106]                    _p4ltl_1 := meta.id == _p4ltl_free_a;
[L1107]                    _p4ltl_4 := _p4ltl_free_a + _p4ltl_free_a;
[L1108]                    _p4ltl_3 := _p4ltl_4 + _p4ltl_free_a;
[L1109]                    _p4ltl_2 := meta.next_hop_port == next_hops_port_0[_p4ltl_3];
[L1110]                    _p4ltl_5 := meta.id == _p4ltl_free_a;
[L1111]                    _p4ltl_8 := _p4ltl_free_a + _p4ltl_free_a;
[L1112]                    _p4ltl_7 := _p4ltl_8 + _p4ltl_free_a;
[L1113]                    _p4ltl_6 := meta.next_hop_port == next_hops_port_0[_p4ltl_7];
[L1114]                    _p4ltl_9 := meta.id == _p4ltl_free_a;
[L1115]                    _p4ltl_10 := nh_avaibility_1[_p4ltl_free_a] == 0;
[L1116]                    _p4ltl_11 := meta.id == _p4ltl_free_a;
[L1117]                    _p4ltl_12 := hdr.ipv4.ttl != 1;
[L1118]                    _p4ltl_13 := meta.use_blink == 1;
[L1128]        RET         call main();
Loop:
[L1127]        COND TRUE   true
[L1128]        CALL        call main();
[L1094]        CALL        call havocProcedure();
[L503]                     drop := false;
[L504]                     forward := false;
[L505]                     standard_metadata.ingress_port := 0;
[L506]                     standard_metadata.egress_spec := 0;
[L507]                     standard_metadata.egress_port := 0;
[L508]                     standard_metadata.instance_type := 0;
[L509]                     standard_metadata.packet_length := 0;
[L510]                     standard_metadata.enq_timestamp := 0;
[L511]                     standard_metadata.enq_qdepth := 0;
[L512]                     standard_metadata.deq_timedelta := 0;
[L513]                     standard_metadata.deq_qdepth := 0;
[L514]                     standard_metadata.ingress_global_timestamp := 0;
[L515]                     standard_metadata.egress_global_timestamp := 0;
[L516]                     standard_metadata.mcast_grp := 0;
[L517]                     standard_metadata.egress_rid := 0;
[L518]                     standard_metadata.checksum_error := 0;
[L519]                     standard_metadata.priority := 0;
[L520]                     hdr.ethernet.valid := false;
[L521]                     emit[hdr.ethernet] := false;
[L522]                     havoc hdr.ethernet.dstAddr;
[L523]                     havoc hdr.ethernet.srcAddr;
[L524]                     havoc hdr.ethernet.etherType;
[L525]                     assume 0 <= hdr.ethernet.etherType && hdr.ethernet.etherType <= 65536;
[L526]                     hdr.ipv4_icmp.valid := false;
[L527]                     emit[hdr.ipv4_icmp] := false;
[L528]                     havoc hdr.ipv4_icmp.version;
[L529]                     assume 0 <= hdr.ipv4_icmp.version && hdr.ipv4_icmp.version <= 16;
[L530]                     havoc hdr.ipv4_icmp.ihl;
[L531]                     assume 0 <= hdr.ipv4_icmp.ihl && hdr.ipv4_icmp.ihl <= 16;
[L532]                     havoc hdr.ipv4_icmp.dscp;
[L533]                     assume 0 <= hdr.ipv4_icmp.dscp && hdr.ipv4_icmp.dscp <= 64;
[L534]                     havoc hdr.ipv4_icmp.ecn;
[L535]                     assume 0 <= hdr.ipv4_icmp.ecn && hdr.ipv4_icmp.ecn <= 4;
[L536]                     havoc hdr.ipv4_icmp.totalLen;
[L537]                     assume 0 <= hdr.ipv4_icmp.totalLen && hdr.ipv4_icmp.totalLen <= 65536;
[L538]                     havoc hdr.ipv4_icmp.identification;
[L539]                     assume 0 <= hdr.ipv4_icmp.identification && hdr.ipv4_icmp.identification <= 65536;
[L540]                     havoc hdr.ipv4_icmp.flags;
[L541]                     assume 0 <= hdr.ipv4_icmp.flags && hdr.ipv4_icmp.flags <= 8;
[L542]                     havoc hdr.ipv4_icmp.fragOffset;
[L543]                     assume 0 <= hdr.ipv4_icmp.fragOffset && hdr.ipv4_icmp.fragOffset <= 8192;
[L544]                     havoc hdr.ipv4_icmp.ttl;
[L545]                     assume 0 <= hdr.ipv4_icmp.ttl && hdr.ipv4_icmp.ttl <= 256;
[L546]                     havoc hdr.ipv4_icmp.protocol;
[L547]                     assume 0 <= hdr.ipv4_icmp.protocol && hdr.ipv4_icmp.protocol <= 256;
[L548]                     havoc hdr.ipv4_icmp.hdrChecksum;
[L549]                     assume 0 <= hdr.ipv4_icmp.hdrChecksum && hdr.ipv4_icmp.hdrChecksum <= 65536;
[L550]                     havoc hdr.ipv4_icmp.srcAddr;
[L551]                     havoc hdr.ipv4_icmp.dstAddr;
[L552]                     hdr.icmp.valid := false;
[L553]                     emit[hdr.icmp] := false;
[L554]                     havoc hdr.icmp.type;
[L555]                     assume 0 <= hdr.icmp.type && hdr.icmp.type <= 256;
[L556]                     havoc hdr.icmp.code;
[L557]                     assume 0 <= hdr.icmp.code && hdr.icmp.code <= 256;
[L558]                     havoc hdr.icmp.checksum;
[L559]                     assume 0 <= hdr.icmp.checksum && hdr.icmp.checksum <= 65536;
[L560]                     havoc hdr.icmp.unused;
[L561]                     assume 0 <= hdr.icmp.unused && hdr.icmp.unused <= 4294967296;
[L562]                     hdr.ipv4.valid := false;
[L563]                     emit[hdr.ipv4] := false;
[L564]                     havoc hdr.ipv4.version;
[L565]                     assume 0 <= hdr.ipv4.version && hdr.ipv4.version <= 16;
[L566]                     havoc hdr.ipv4.ihl;
[L567]                     assume 0 <= hdr.ipv4.ihl && hdr.ipv4.ihl <= 16;
[L568]                     havoc hdr.ipv4.dscp;
[L569]                     assume 0 <= hdr.ipv4.dscp && hdr.ipv4.dscp <= 64;
[L570]                     havoc hdr.ipv4.ecn;
[L571]                     assume 0 <= hdr.ipv4.ecn && hdr.ipv4.ecn <= 4;
[L572]                     havoc hdr.ipv4.totalLen;
[L573]                     assume 0 <= hdr.ipv4.totalLen && hdr.ipv4.totalLen <= 65536;
[L574]                     havoc hdr.ipv4.identification;
[L575]                     assume 0 <= hdr.ipv4.identification && hdr.ipv4.identification <= 65536;
[L576]                     havoc hdr.ipv4.flags;
[L577]                     assume 0 <= hdr.ipv4.flags && hdr.ipv4.flags <= 8;
[L578]                     havoc hdr.ipv4.fragOffset;
[L579]                     assume 0 <= hdr.ipv4.fragOffset && hdr.ipv4.fragOffset <= 8192;
[L580]                     havoc hdr.ipv4.ttl;
[L581]                     assume 0 <= hdr.ipv4.ttl && hdr.ipv4.ttl <= 256;
[L582]                     havoc hdr.ipv4.protocol;
[L583]                     assume 0 <= hdr.ipv4.protocol && hdr.ipv4.protocol <= 256;
[L584]                     havoc hdr.ipv4.hdrChecksum;
[L585]                     assume 0 <= hdr.ipv4.hdrChecksum && hdr.ipv4.hdrChecksum <= 65536;
[L586]                     havoc hdr.ipv4.srcAddr;
[L587]                     havoc hdr.ipv4.dstAddr;
[L588]                     hdr.tcp.valid := false;
[L589]                     emit[hdr.tcp] := false;
[L590]                     havoc hdr.tcp.srcPort;
[L591]                     assume 0 <= hdr.tcp.srcPort && hdr.tcp.srcPort <= 65536;
[L592]                     havoc hdr.tcp.dstPort;
[L593]                     assume 0 <= hdr.tcp.dstPort && hdr.tcp.dstPort <= 65536;
[L594]                     havoc hdr.tcp.seqNo;
[L595]                     assume 0 <= hdr.tcp.seqNo && hdr.tcp.seqNo <= 4294967296;
[L596]                     havoc hdr.tcp.ackNo;
[L597]                     assume 0 <= hdr.tcp.ackNo && hdr.tcp.ackNo <= 4294967296;
[L598]                     havoc hdr.tcp.dataOffset;
[L599]                     assume 0 <= hdr.tcp.dataOffset && hdr.tcp.dataOffset <= 16;
[L600]                     havoc hdr.tcp.res;
[L601]                     assume 0 <= hdr.tcp.res && hdr.tcp.res <= 16;
[L602]                     havoc hdr.tcp.cwr;
[L603]                     assume 0 <= hdr.tcp.cwr && hdr.tcp.cwr <= 2;
[L604]                     havoc hdr.tcp.ece;
[L605]                     assume 0 <= hdr.tcp.ece && hdr.tcp.ece <= 2;
[L606]                     havoc hdr.tcp.urg;
[L607]                     assume 0 <= hdr.tcp.urg && hdr.tcp.urg <= 2;
[L608]                     havoc hdr.tcp.ack;
[L609]                     assume 0 <= hdr.tcp.ack && hdr.tcp.ack <= 2;
[L610]                     havoc hdr.tcp.psh;
[L611]                     assume 0 <= hdr.tcp.psh && hdr.tcp.psh <= 2;
[L612]                     havoc hdr.tcp.rst;
[L613]                     assume 0 <= hdr.tcp.rst && hdr.tcp.rst <= 2;
[L614]                     havoc hdr.tcp.syn;
[L615]                     assume 0 <= hdr.tcp.syn && hdr.tcp.syn <= 2;
[L616]                     havoc hdr.tcp.fin;
[L617]                     assume 0 <= hdr.tcp.fin && hdr.tcp.fin <= 2;
[L618]                     havoc hdr.tcp.window;
[L619]                     assume 0 <= hdr.tcp.window && hdr.tcp.window <= 65536;
[L620]                     havoc hdr.tcp.checksum;
[L621]                     assume 0 <= hdr.tcp.checksum && hdr.tcp.checksum <= 65536;
[L622]                     havoc hdr.tcp.urgentPtr;
[L623]                     assume 0 <= hdr.tcp.urgentPtr && hdr.tcp.urgentPtr <= 65536;
[L624]                     meta.id := 0;
[L625]                     meta.use_blink := 0;
[L626]                     meta.is_retransmission := 0;
[L627]                     meta.next_hop_port := 0;
[L628]                     meta.tcp_payload_len := 0;
[L629]                     meta.ingress_timestamp_second := 0;
[L630]                     meta.ingress_timestamp_millisecond := 0;
[L631]                     meta.flowselector_cellid := 0;
[L632]                     meta.selected := 0;
[L633]                     meta.bgp_ngh_type := 0;
[L634]                     havoc _p4ltl_free_a;
[L1094]        RET         call havocProcedure();
[L1097]        CALL        call _parser_ParserImpl();
[L420]         CALL        call start();
[L1266]                    hdr.ethernet.valid := true;
[L1267]        COND TRUE   hdr.ethernet.etherType == 2048
[L1268]        CALL        call parse_ipv4();
[L1191]                    hdr.ipv4.valid := true;
[L1192]        COND TRUE   hdr.ipv4.protocol == 6
[L1193]        CALL        call parse_tcp();
[L1201]                    hdr.tcp.valid := true;
[L1202]        CALL        call accept();
[L1202]        RET         call accept();
[L1193]        RET         call parse_tcp();
[L1268]        RET         call parse_ipv4();
[L420]         RET         call start();
[L1097]        RET         call _parser_ParserImpl();
[L1098]        CALL        call verifyChecksum();
[L1098]        RET         call verifyChecksum();
[L1099]        CALL        call ingress();
[L642]                     ts_tmp_0 := timestamp_reference_0[0];
[L643-L646]                assume !((281474976710656 + standard_metadata.ingress_global_timestamp % 281474976710656 - ts_tmp_0 % 281474976710656) % 281474976710656 > 500000000);
[L648]                     ts_tmp_0 := timestamp_reference_0[0];
[L649]                     meta.ingress_timestamp_second := ((281474976710656 + standard_metadata.ingress_global_timestamp % 281474976710656 - ts_tmp_0 % 281474976710656) % 281474976710656 - (281474976710656 + standard_metadata.ingress_global_timestamp % 281474976710656 - ts_tmp_0 % 281474976710656) % 281474976710656 % 1048576) / 1048576 % 512;
[L650]                     meta.ingress_timestamp_millisecond := ((281474976710656 + standard_metadata.ingress_global_timestamp % 281474976710656 - ts_tmp_0 % 281474976710656) % 281474976710656 - (281474976710656 + standard_metadata.ingress_global_timestamp % 281474976710656 - ts_tmp_0 % 281474976710656) % 281474976710656 % 1024) / 1024 % 524288;
[L651]         CALL        call bgp_tag_0.apply();
[L435]         COND TRUE   bgp_tag_0.action_run == bgp_tag_0.action.set_bgp_tag
[L436]         CALL        call set_bgp_tag(set_bgp_tag.neighbor_bgp_type);
[L1238]                    meta.bgp_ngh_type := neighbor_bgp_type;
[L436]         RET         call set_bgp_tag(set_bgp_tag.neighbor_bgp_type);
[L651]         RET         call bgp_tag_0.apply();
[L652]         CALL        call meta_fwtable_0.apply();
[L1146]        COND TRUE   meta_fwtable_0.action_run == meta_fwtable_0.action.set_meta
[L1147]        CALL        call set_meta(set_meta.id, set_meta.use_blink, set_meta.default_nexthop_port);
[L1245]                    meta.id := id;
[L1246]                    meta.use_blink := use_blink;
[L1247]                    meta.next_hop_port := default_nexthop_port;
[L1147]        RET         call set_meta(set_meta.id, set_meta.use_blink, set_meta.default_nexthop_port);
[L652]         RET         call meta_fwtable_0.apply();
[L653]         COND FALSE  !((hdr.ipv4.valid && hdr.tcp.valid) && hdr.ipv4.ttl == 1)
[L675]                     threshold_tmp_0 := threshold_registers_0[meta.id];
[L676]         COND TRUE   hdr.tcp.valid && meta.use_blink == 1
[L677]         COND FALSE  !(hdr.tcp.syn == 1 || hdr.tcp.fin == 1)
[L681]                     meta.tcp_payload_len := (65536 + (65536 + hdr.ipv4.totalLen % 65536 - hdr.ipv4.ihl * 4 % 4 % 65536) % 65536 % 65536 - hdr.tcp.dataOffset * 4 % 4 % 65536) % 65536;
[L683-L980]                assume !(meta.tcp_payload_len > 0);
[L982]         COND TRUE   meta.use_blink == 1
[L984]                     nh_avaibility_1_tmp_0 := nh_avaibility_1[meta.id];
[L986]                     nh_avaibility_2_tmp_0 := nh_avaibility_2[meta.id];
[L988]                     nh_avaibility_3_tmp_0 := nh_avaibility_3[meta.id];
[L990]                     rerouting_ts_tmp_0 := rerouting_ts_0[meta.id];
[L991-L1072]               assume !((meta.selected == 1 && rerouting_ts_tmp_0 > 0) && (524288 + meta.ingress_timestamp_millisecond % 524288 - rerouting_ts_tmp_0 % 524288) % 524288 < 976);
[L1052]        COND TRUE   nh_avaibility_1_tmp_0 == 0
[L1054]                    meta.next_hop_port := next_hops_port_0[meta.id % 4294967296 * (3 % 4294967296) % 4294967296];
[L1073-L1086]              assume !(rerouting_ts_tmp_0 > 0 && (524288 + meta.ingress_timestamp_millisecond % 524288 - rerouting_ts_tmp_0 % 524288) % 524288 > 976);
[L1088]        CALL        call send_0.apply();
[L1225]        COND TRUE   send_0.action_run == send_0.action.set_nh
[L1226]        CALL        call set_nh(set_nh.port, set_nh.smac, set_nh.dmac);
[L1254]                    standard_metadata.egress_spec := port;
[L1255]                    standard_metadata.egress_port := port;
[L1256]                    forward := true;
[L1257]                    hdr.ethernet.srcAddr := smac;
[L1258]                    hdr.ethernet.dstAddr := dmac;
[L1259]                    hdr.ipv4.ttl := (hdr.ipv4.ttl % 256 + 255 % 256) % 256;
[L1226]        RET         call set_nh(set_nh.port, set_nh.smac, set_nh.dmac);
[L1088]        RET         call send_0.apply();
[L1099]        RET         call ingress();
[L1100]        CALL        call egress();
[L1100]        RET         call egress();
[L1101]        CALL        call computeChecksum();
[L1101]        RET         call computeChecksum();
[L1102]        COND FALSE  !(forward == false)
[L1105]                    _p4ltl_0 := sw_sum_0[_p4ltl_free_a] > threshold_registers_0[_p4ltl_free_a];
[L1106]                    _p4ltl_1 := meta.id == _p4ltl_free_a;
[L1107]                    _p4ltl_4 := _p4ltl_free_a + _p4ltl_free_a;
[L1108]                    _p4ltl_3 := _p4ltl_4 + _p4ltl_free_a;
[L1109]                    _p4ltl_2 := meta.next_hop_port == next_hops_port_0[_p4ltl_3];
[L1110]                    _p4ltl_5 := meta.id == _p4ltl_free_a;
[L1111]                    _p4ltl_8 := _p4ltl_free_a + _p4ltl_free_a;
[L1112]                    _p4ltl_7 := _p4ltl_8 + _p4ltl_free_a;
[L1113]                    _p4ltl_6 := meta.next_hop_port == next_hops_port_0[_p4ltl_7];
[L1114]                    _p4ltl_9 := meta.id == _p4ltl_free_a;
[L1115]                    _p4ltl_10 := nh_avaibility_1[_p4ltl_free_a] == 0;
[L1116]                    _p4ltl_11 := meta.id == _p4ltl_free_a;
[L1117]                    _p4ltl_12 := hdr.ipv4.ttl != 1;
[L1118]                    _p4ltl_13 := meta.use_blink == 1;
[L1128]        RET         call main();
End of lasso representation.
RESULT: Ultimate proved your program to be incorrect!
Received shutdown request...
