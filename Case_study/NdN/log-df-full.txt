 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    3901 locations, 5574 edges
  - StatisticsResult: Encoded RCFG
    3884 locations, 5548 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.17ms. Allocated memory is still 49.3MB. Free memory was 25.1MB in the beginning and 25.0MB in the end (delta: 38.6kB). Peak memory consumption was 1.0MB. Max. memory is 4.3GB.
 * Boogie Preprocessor took 109.02ms. Allocated memory is still 49.3MB. Free memory was 30.7MB in the beginning and 19.4MB in the end (delta: 11.3MB). Peak memory consumption was 10.5MB. Max. memory is 4.3GB.
 * ThufvSpecLang took 53.55ms. Allocated memory is still 49.3MB. Free memory was 19.3MB in the beginning and 16.6MB in the end (delta: 2.8MB). Peak memory consumption was 2.1MB. Max. memory is 4.3GB.
 * RCFGBuilder took 996.88ms. Allocated memory was 49.3MB in the beginning and 68.2MB in the end (delta: 18.9MB). Free memory was 16.5MB in the beginning and 40.8MB in the end (delta: -24.3MB). Peak memory consumption was 10.5MB. Max. memory is 4.3GB.
 * ThufvLTL2Aut took 67.24ms. Allocated memory is still 68.2MB. Free memory was 40.8MB in the beginning and 37.2MB in the end (delta: 3.5MB). Peak memory consumption was 3.1MB. Max. memory is 4.3GB.
 * Büchi Program Product took 1658.19ms. Allocated memory was 68.2MB in the beginning and 111.1MB in the end (delta: 43.0MB). Free memory was 37.2MB in the beginning and 40.0MB in the end (delta: -2.8MB). Peak memory consumption was 53.8MB. Max. memory is 4.3GB.
 * BlockEncodingV2 took 428.16ms. Allocated memory was 111.1MB in the beginning and 205.5MB in the end (delta: 94.4MB). Free memory was 40.0MB in the beginning and 141.0MB in the end (delta: -101.0MB). Peak memory consumption was 23.2MB. Max. memory is 4.3GB.
 * BuchiAutomizer took 4202714.94ms. Allocated memory was 205.5MB in the beginning and 2.7GB in the end (delta: 2.5GB). Free memory was 140.5MB in the beginning and 870.4MB in the end (delta: -729.9MB). Peak memory consumption was 3.5GB. Max. memory is 4.3GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    5 locations, 14 edges
  - StatisticsResult: Initial RCFG
    654 locations, 771 edges
  - StatisticsResult: BuchiProgram size
    3901 locations, 5574 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 6 terminating modules (6 trivial, 0 deterministic, 0 nondeterministic) and one nonterminating remainder module.6 modules have a trivial ranking function, the largest among these consists of 16 locations. The remainder module has 60359 locations.
  - StatisticsResult: Timing statistics
    BüchiAutomizer plugin needed 4202.6s and 7 iterations.  TraceHistogramMax:1. Analysis of lassos took 547.1s. Construction of modules took 3457.9s. Büchi inclusion checks took 192.8s. Highest rank in rank-based complementation 0. Minimization of det autom 6. Minimization of nondet autom 0. Automata minimization 2.4s AutomataMinimizationTime, 6 MinimizatonAttempts, 7102 StatesRemovedByMinimization, 6 NontrivialMinimizations. Non-live state removal took 1.1s Buchi closure took 0.0s. Biggest automaton had -1 states and ocurred in iteration -1.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 0 mSolverCounterUnknown, 108982 SdHoareTripleChecker+Valid, 3485.5s IncrementalHoareTripleChecker+Time, 0 mSdLazyCounter, 108713 mSDsluCounter, 49318 SdHoareTripleChecker+Invalid, 3458.0s Time, 0 mProtectedAction, 0 SdHoareTripleChecker+Unchecked, 0 IncrementalHoareTripleChecker+Unchecked, 12240 mSDsCounter, 38979 IncrementalHoareTripleChecker+Valid, 0 mProtectedPredicate, 175488 IncrementalHoareTripleChecker+Invalid, 214467 SdHoareTripleChecker+Unknown, 0 mSolverCounterNotChecked, 38979 mSolverCounterUnsat, 37611 mSDtfsCounter, 175488 mSolverCounterSat, 3.0s SdHoareTripleChecker+Time, 0 IncrementalHoareTripleChecker+Unknown	LassoAnalysisResults: nont1 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU6 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	InitialAbstractionConstructionTime: 0.0s
  - LTLInfiniteCounterExampleResult [Line: 1268]: Violation of LTL property !(( []((_p4ltl_7 == true)) )) || ( ( [](( (_p4ltl_6 == true) ==> ( ( [](((_p4ltl_5 == true && _p4ltl_4 == true) && drop)) ) || ( ((_p4ltl_3 == true && _p4ltl_2 == true) && drop) U (_p4ltl_1 == true && _p4ltl_0 == true) ) ) )) ))
    Found an infinite, lasso-shaped execution that violates the LTL property !(( []((_p4ltl_7 == true)) )) || ( ( [](( (_p4ltl_6 == true) ==> ( ( [](((_p4ltl_5 == true && _p4ltl_4 == true) && drop)) ) || ( ((_p4ltl_3 == true && _p4ltl_2 == true) && drop) U (_p4ltl_1 == true && _p4ltl_0 == true) ) ) )) )).
Stem:
[L723]   CALL        call mainProcedure();
[L1267]  COND TRUE   true
[L1268]  CALL        call main();
[L1239]  CALL        call havocProcedure();
[L894]               hdr.big_content.valid := false;
[L895]               emit[hdr.big_content] := false;
[L896]               havoc hdr.big_content.tl_code;
[L897]               assume 0 <= hdr.big_content.tl_code && hdr.big_content.tl_code <= 256;
[L898]               _old_hdr.big_content.tl_code := hdr.big_content.tl_code;
[L899]               havoc hdr.big_content.tl_len_code;
[L900]               assume 0 <= hdr.big_content.tl_len_code && hdr.big_content.tl_len_code <= 256;
[L901]               _old_hdr.big_content.tl_len_code := hdr.big_content.tl_len_code;
[L902]               havoc hdr.big_content.tl_length;
[L903]               assume 0 <= hdr.big_content.tl_length && hdr.big_content.tl_length <= 4294967296;
[L904]               _old_hdr.big_content.tl_length := hdr.big_content.tl_length;
[L905]               hdr.big_name.valid := false;
[L906]               emit[hdr.big_name] := false;
[L907]               havoc hdr.big_name.tl_code;
[L908]               assume 0 <= hdr.big_name.tl_code && hdr.big_name.tl_code <= 256;
[L909]               _old_hdr.big_name.tl_code := hdr.big_name.tl_code;
[L910]               havoc hdr.big_name.tl_len_code;
[L911]               assume 0 <= hdr.big_name.tl_len_code && hdr.big_name.tl_len_code <= 256;
[L912]               _old_hdr.big_name.tl_len_code := hdr.big_name.tl_len_code;
[L913]               havoc hdr.big_name.tl_length;
[L914]               assume 0 <= hdr.big_name.tl_length && hdr.big_name.tl_length <= 4294967296;
[L915]               _old_hdr.big_name.tl_length := hdr.big_name.tl_length;
[L916]               hdr.big_tlv0.valid := false;
[L917]               emit[hdr.big_tlv0] := false;
[L918]               havoc hdr.big_tlv0.tl_code;
[L919]               assume 0 <= hdr.big_tlv0.tl_code && hdr.big_tlv0.tl_code <= 256;
[L920]               _old_hdr.big_tlv0.tl_code := hdr.big_tlv0.tl_code;
[L921]               havoc hdr.big_tlv0.tl_len_code;
[L922]               assume 0 <= hdr.big_tlv0.tl_len_code && hdr.big_tlv0.tl_len_code <= 256;
[L923]               _old_hdr.big_tlv0.tl_len_code := hdr.big_tlv0.tl_len_code;
[L924]               havoc hdr.big_tlv0.tl_length;
[L925]               assume 0 <= hdr.big_tlv0.tl_length && hdr.big_tlv0.tl_length <= 4294967296;
[L926]               _old_hdr.big_tlv0.tl_length := hdr.big_tlv0.tl_length;
[L927]               hdr.ethernet.valid := false;
[L928]               emit[hdr.ethernet] := false;
[L929]               havoc hdr.ethernet.dstAddr;
[L930]               assume 0 <= hdr.ethernet.dstAddr && hdr.ethernet.dstAddr <= 281474976710656;
[L931]               _old_hdr.ethernet.dstAddr := hdr.ethernet.dstAddr;
[L932]               havoc hdr.ethernet.srcAddr;
[L933]               assume 0 <= hdr.ethernet.srcAddr && hdr.ethernet.srcAddr <= 281474976710656;
[L934]               _old_hdr.ethernet.srcAddr := hdr.ethernet.srcAddr;
[L935]               havoc hdr.ethernet.etherType;
[L936]               assume 0 <= hdr.ethernet.etherType && hdr.ethernet.etherType <= 65536;
[L937]               _old_hdr.ethernet.etherType := hdr.ethernet.etherType;
[L938]               hdr.huge_content.valid := false;
[L939]               emit[hdr.huge_content] := false;
[L940]               havoc hdr.huge_content.tl_code;
[L941]               assume 0 <= hdr.huge_content.tl_code && hdr.huge_content.tl_code <= 256;
[L942]               _old_hdr.huge_content.tl_code := hdr.huge_content.tl_code;
[L943]               havoc hdr.huge_content.tl_len_code;
[L944]               assume 0 <= hdr.huge_content.tl_len_code && hdr.huge_content.tl_len_code <= 256;
[L945]               _old_hdr.huge_content.tl_len_code := hdr.huge_content.tl_len_code;
[L946]               havoc hdr.huge_content.tl_length;
[L947]               assume 0 <= hdr.huge_content.tl_length && hdr.huge_content.tl_length <= 1125899906842624 * 16384;
[L948]               _old_hdr.huge_content.tl_length := hdr.huge_content.tl_length;
[L949]               hdr.huge_name.valid := false;
[L950]               emit[hdr.huge_name] := false;
[L951]               havoc hdr.huge_name.tl_code;
[L952]               assume 0 <= hdr.huge_name.tl_code && hdr.huge_name.tl_code <= 256;
[L953]               _old_hdr.huge_name.tl_code := hdr.huge_name.tl_code;
[L954]               havoc hdr.huge_name.tl_len_code;
[L955]               assume 0 <= hdr.huge_name.tl_len_code && hdr.huge_name.tl_len_code <= 256;
[L956]               _old_hdr.huge_name.tl_len_code := hdr.huge_name.tl_len_code;
[L957]               havoc hdr.huge_name.tl_length;
[L958]               assume 0 <= hdr.huge_name.tl_length && hdr.huge_name.tl_length <= 1125899906842624 * 16384;
[L959]               _old_hdr.huge_name.tl_length := hdr.huge_name.tl_length;
[L960]               hdr.huge_tlv0.valid := false;
[L961]               emit[hdr.huge_tlv0] := false;
[L962]               havoc hdr.huge_tlv0.tl_code;
[L963]               assume 0 <= hdr.huge_tlv0.tl_code && hdr.huge_tlv0.tl_code <= 256;
[L964]               _old_hdr.huge_tlv0.tl_code := hdr.huge_tlv0.tl_code;
[L965]               havoc hdr.huge_tlv0.tl_len_code;
[L966]               assume 0 <= hdr.huge_tlv0.tl_len_code && hdr.huge_tlv0.tl_len_code <= 256;
[L967]               _old_hdr.huge_tlv0.tl_len_code := hdr.huge_tlv0.tl_len_code;
[L968]               havoc hdr.huge_tlv0.tl_length;
[L969]               assume 0 <= hdr.huge_tlv0.tl_length && hdr.huge_tlv0.tl_length <= 1125899906842624 * 16384;
[L970]               _old_hdr.huge_tlv0.tl_length := hdr.huge_tlv0.tl_length;
[L971]               hdr.isha256.valid := false;
[L972]               emit[hdr.isha256] := false;
[L973]               havoc hdr.isha256.tlv_code;
[L974]               assume 0 <= hdr.isha256.tlv_code && hdr.isha256.tlv_code <= 256;
[L975]               _old_hdr.isha256.tlv_code := hdr.isha256.tlv_code;
[L976]               havoc hdr.isha256.tlv_length;
[L977]               assume 0 <= hdr.isha256.tlv_length && hdr.isha256.tlv_length <= 256;
[L978]               _old_hdr.isha256.tlv_length := hdr.isha256.tlv_length;
[L979]               havoc hdr.isha256.tlv_value;
[L980]               _old_hdr.isha256.tlv_value := hdr.isha256.tlv_value;
[L981]               hdr.lifetime.valid := false;
[L982]               emit[hdr.lifetime] := false;
[L983]               havoc hdr.lifetime.tlv_code;
[L984]               assume 0 <= hdr.lifetime.tlv_code && hdr.lifetime.tlv_code <= 256;
[L985]               _old_hdr.lifetime.tlv_code := hdr.lifetime.tlv_code;
[L986]               havoc hdr.lifetime.tlv_length;
[L987]               assume 0 <= hdr.lifetime.tlv_length && hdr.lifetime.tlv_length <= 256;
[L988]               _old_hdr.lifetime.tlv_length := hdr.lifetime.tlv_length;
[L989]               havoc hdr.lifetime.tlv_value;
[L990]               _old_hdr.lifetime.tlv_value := hdr.lifetime.tlv_value;
[L991]               hdr.medium_content.valid := false;
[L992]               emit[hdr.medium_content] := false;
[L993]               havoc hdr.medium_content.tl_code;
[L994]               assume 0 <= hdr.medium_content.tl_code && hdr.medium_content.tl_code <= 256;
[L995]               _old_hdr.medium_content.tl_code := hdr.medium_content.tl_code;
[L996]               havoc hdr.medium_content.tl_len_code;
[L997]               assume 0 <= hdr.medium_content.tl_len_code && hdr.medium_content.tl_len_code <= 256;
[L998]               _old_hdr.medium_content.tl_len_code := hdr.medium_content.tl_len_code;
[L999]               havoc hdr.medium_content.tl_length;
[L1000]              assume 0 <= hdr.medium_content.tl_length && hdr.medium_content.tl_length <= 65536;
[L1001]              _old_hdr.medium_content.tl_length := hdr.medium_content.tl_length;
[L1002]              hdr.medium_name.valid := false;
[L1003]              emit[hdr.medium_name] := false;
[L1004]              havoc hdr.medium_name.tl_code;
[L1005]              assume 0 <= hdr.medium_name.tl_code && hdr.medium_name.tl_code <= 256;
[L1006]              _old_hdr.medium_name.tl_code := hdr.medium_name.tl_code;
[L1007]              havoc hdr.medium_name.tl_len_code;
[L1008]              assume 0 <= hdr.medium_name.tl_len_code && hdr.medium_name.tl_len_code <= 256;
[L1009]              _old_hdr.medium_name.tl_len_code := hdr.medium_name.tl_len_code;
[L1010]              havoc hdr.medium_name.tl_length;
[L1011]              assume 0 <= hdr.medium_name.tl_length && hdr.medium_name.tl_length <= 65536;
[L1012]              _old_hdr.medium_name.tl_length := hdr.medium_name.tl_length;
[L1013]              hdr.medium_ndnlp.valid := false;
[L1014]              emit[hdr.medium_ndnlp] := false;
[L1015]              havoc hdr.medium_ndnlp.total;
[L1016]              assume 0 <= hdr.medium_ndnlp.total && hdr.medium_ndnlp.total <= 1125899906842624 * 1125899906842624 * 17592186044416;
[L1017]              _old_hdr.medium_ndnlp.total := hdr.medium_ndnlp.total;
[L1018]              hdr.medium_tlv0.valid := false;
[L1019]              emit[hdr.medium_tlv0] := false;
[L1020]              havoc hdr.medium_tlv0.tl_code;
[L1021]              assume 0 <= hdr.medium_tlv0.tl_code && hdr.medium_tlv0.tl_code <= 256;
[L1022]              _old_hdr.medium_tlv0.tl_code := hdr.medium_tlv0.tl_code;
[L1023]              havoc hdr.medium_tlv0.tl_len_code;
[L1024]              assume 0 <= hdr.medium_tlv0.tl_len_code && hdr.medium_tlv0.tl_len_code <= 256;
[L1025]              _old_hdr.medium_tlv0.tl_len_code := hdr.medium_tlv0.tl_len_code;
[L1026]              havoc hdr.medium_tlv0.tl_length;
[L1027]              assume 0 <= hdr.medium_tlv0.tl_length && hdr.medium_tlv0.tl_length <= 65536;
[L1028]              _old_hdr.medium_tlv0.tl_length := hdr.medium_tlv0.tl_length;
[L1029]              hdr.metainfo.valid := false;
[L1030]              emit[hdr.metainfo] := false;
[L1031]              havoc hdr.metainfo.tlv_code;
[L1032]              assume 0 <= hdr.metainfo.tlv_code && hdr.metainfo.tlv_code <= 256;
[L1033]              _old_hdr.metainfo.tlv_code := hdr.metainfo.tlv_code;
[L1034]              havoc hdr.metainfo.tlv_length;
[L1035]              assume 0 <= hdr.metainfo.tlv_length && hdr.metainfo.tlv_length <= 256;
[L1036]              _old_hdr.metainfo.tlv_length := hdr.metainfo.tlv_length;
[L1037]              havoc hdr.metainfo.tlv_value;
[L1038]              _old_hdr.metainfo.tlv_value := hdr.metainfo.tlv_value;
[L1039]              hdr.nonce.valid := false;
[L1040]              emit[hdr.nonce] := false;
[L1041]              havoc hdr.nonce.tlv_code;
[L1042]              assume 0 <= hdr.nonce.tlv_code && hdr.nonce.tlv_code <= 256;
[L1043]              _old_hdr.nonce.tlv_code := hdr.nonce.tlv_code;
[L1044]              havoc hdr.nonce.tlv_length;
[L1045]              assume 0 <= hdr.nonce.tlv_length && hdr.nonce.tlv_length <= 256;
[L1046]              _old_hdr.nonce.tlv_length := hdr.nonce.tlv_length;
[L1047]              havoc hdr.nonce.tlv_value;
[L1048]              _old_hdr.nonce.tlv_value := hdr.nonce.tlv_value;
[L1049]              hdr.signature_info.valid := false;
[L1050]              emit[hdr.signature_info] := false;
[L1051]              havoc hdr.signature_info.tlv_code;
[L1052]              assume 0 <= hdr.signature_info.tlv_code && hdr.signature_info.tlv_code <= 256;
[L1053]              _old_hdr.signature_info.tlv_code := hdr.signature_info.tlv_code;
[L1054]              havoc hdr.signature_info.tlv_length;
[L1055]              assume 0 <= hdr.signature_info.tlv_length && hdr.signature_info.tlv_length <= 256;
[L1056]              _old_hdr.signature_info.tlv_length := hdr.signature_info.tlv_length;
[L1057]              havoc hdr.signature_info.tlv_value;
[L1058]              _old_hdr.signature_info.tlv_value := hdr.signature_info.tlv_value;
[L1059]              hdr.signature_value.valid := false;
[L1060]              emit[hdr.signature_value] := false;
[L1061]              havoc hdr.signature_value.tlv_code;
[L1062]              assume 0 <= hdr.signature_value.tlv_code && hdr.signature_value.tlv_code <= 256;
[L1063]              _old_hdr.signature_value.tlv_code := hdr.signature_value.tlv_code;
[L1064]              havoc hdr.signature_value.tlv_length;
[L1065]              assume 0 <= hdr.signature_value.tlv_length && hdr.signature_value.tlv_length <= 256;
[L1066]              _old_hdr.signature_value.tlv_length := hdr.signature_value.tlv_length;
[L1067]              havoc hdr.signature_value.tlv_value;
[L1068]              _old_hdr.signature_value.tlv_value := hdr.signature_value.tlv_value;
[L1069]              hdr.small_content.valid := false;
[L1070]              emit[hdr.small_content] := false;
[L1071]              havoc hdr.small_content.tl_code;
[L1072]              assume 0 <= hdr.small_content.tl_code && hdr.small_content.tl_code <= 256;
[L1073]              _old_hdr.small_content.tl_code := hdr.small_content.tl_code;
[L1074]              havoc hdr.small_content.tl_length;
[L1075]              assume 0 <= hdr.small_content.tl_length && hdr.small_content.tl_length <= 256;
[L1076]              _old_hdr.small_content.tl_length := hdr.small_content.tl_length;
[L1077]              hdr.small_name.valid := false;
[L1078]              emit[hdr.small_name] := false;
[L1079]              havoc hdr.small_name.tl_code;
[L1080]              assume 0 <= hdr.small_name.tl_code && hdr.small_name.tl_code <= 256;
[L1081]              _old_hdr.small_name.tl_code := hdr.small_name.tl_code;
[L1082]              havoc hdr.small_name.tl_length;
[L1083]              assume 0 <= hdr.small_name.tl_length && hdr.small_name.tl_length <= 256;
[L1084]              _old_hdr.small_name.tl_length := hdr.small_name.tl_length;
[L1085]              hdr.small_ndnlp.valid := false;
[L1086]              emit[hdr.small_ndnlp] := false;
[L1087]              havoc hdr.small_ndnlp.total;
[L1088]              assume 0 <= hdr.small_ndnlp.total && hdr.small_ndnlp.total <= 1125899906842624 * 1125899906842624 * 4096;
[L1089]              _old_hdr.small_ndnlp.total := hdr.small_ndnlp.total;
[L1090]              hdr.small_tlv0.valid := false;
[L1091]              emit[hdr.small_tlv0] := false;
[L1092]              havoc hdr.small_tlv0.tl_code;
[L1093]              assume 0 <= hdr.small_tlv0.tl_code && hdr.small_tlv0.tl_code <= 256;
[L1094]              _old_hdr.small_tlv0.tl_code := hdr.small_tlv0.tl_code;
[L1095]              havoc hdr.small_tlv0.tl_length;
[L1096]              assume 0 <= hdr.small_tlv0.tl_length && hdr.small_tlv0.tl_length <= 256;
[L1097]              _old_hdr.small_tlv0.tl_length := hdr.small_tlv0.tl_length;
[L1098]              hdr.components.last.valid := false;
[L1099]              emit[hdr.components.last] := false;
[L1100]              havoc hdr.components.last.tlv_code;
[L1101]              assume 0 <= hdr.components.last.tlv_code && hdr.components.last.tlv_code <= 256;
[L1102]              _old_hdr.components.last.tlv_code := hdr.components.last.tlv_code;
[L1103]              havoc hdr.components.last.tlv_length;
[L1104]              assume 0 <= hdr.components.last.tlv_length && hdr.components.last.tlv_length <= 256;
[L1105]              _old_hdr.components.last.tlv_length := hdr.components.last.tlv_length;
[L1106]              havoc hdr.components.last.tlv_value;
[L1107]              _old_hdr.components.last.tlv_value := hdr.components.last.tlv_value;
[L1108]              hdr.components.0.valid := false;
[L1109]              emit[hdr.components.0] := false;
[L1110]              havoc hdr.components.0.tlv_code;
[L1111]              assume 0 <= hdr.components.0.tlv_code && hdr.components.0.tlv_code <= 256;
[L1112]              _old_hdr.components.0.tlv_code := hdr.components.0.tlv_code;
[L1113]              havoc hdr.components.0.tlv_length;
[L1114]              assume 0 <= hdr.components.0.tlv_length && hdr.components.0.tlv_length <= 256;
[L1115]              _old_hdr.components.0.tlv_length := hdr.components.0.tlv_length;
[L1116]              havoc hdr.components.0.tlv_value;
[L1117]              _old_hdr.components.0.tlv_value := hdr.components.0.tlv_value;
[L1118]              hdr.components.1.valid := false;
[L1119]              emit[hdr.components.1] := false;
[L1120]              havoc hdr.components.1.tlv_code;
[L1121]              assume 0 <= hdr.components.1.tlv_code && hdr.components.1.tlv_code <= 256;
[L1122]              _old_hdr.components.1.tlv_code := hdr.components.1.tlv_code;
[L1123]              havoc hdr.components.1.tlv_length;
[L1124]              assume 0 <= hdr.components.1.tlv_length && hdr.components.1.tlv_length <= 256;
[L1125]              _old_hdr.components.1.tlv_length := hdr.components.1.tlv_length;
[L1126]              havoc hdr.components.1.tlv_value;
[L1127]              _old_hdr.components.1.tlv_value := hdr.components.1.tlv_value;
[L1128]              hdr.components.2.valid := false;
[L1129]              emit[hdr.components.2] := false;
[L1130]              havoc hdr.components.2.tlv_code;
[L1131]              assume 0 <= hdr.components.2.tlv_code && hdr.components.2.tlv_code <= 256;
[L1132]              _old_hdr.components.2.tlv_code := hdr.components.2.tlv_code;
[L1133]              havoc hdr.components.2.tlv_length;
[L1134]              assume 0 <= hdr.components.2.tlv_length && hdr.components.2.tlv_length <= 256;
[L1135]              _old_hdr.components.2.tlv_length := hdr.components.2.tlv_length;
[L1136]              havoc hdr.components.2.tlv_value;
[L1137]              _old_hdr.components.2.tlv_value := hdr.components.2.tlv_value;
[L1138]              hdr.components.3.valid := false;
[L1139]              emit[hdr.components.3] := false;
[L1140]              havoc hdr.components.3.tlv_code;
[L1141]              assume 0 <= hdr.components.3.tlv_code && hdr.components.3.tlv_code <= 256;
[L1142]              _old_hdr.components.3.tlv_code := hdr.components.3.tlv_code;
[L1143]              havoc hdr.components.3.tlv_length;
[L1144]              assume 0 <= hdr.components.3.tlv_length && hdr.components.3.tlv_length <= 256;
[L1145]              _old_hdr.components.3.tlv_length := hdr.components.3.tlv_length;
[L1146]              havoc hdr.components.3.tlv_value;
[L1147]              _old_hdr.components.3.tlv_value := hdr.components.3.tlv_value;
[L1148]              hdr.components.4.valid := false;
[L1149]              emit[hdr.components.4] := false;
[L1150]              havoc hdr.components.4.tlv_code;
[L1151]              assume 0 <= hdr.components.4.tlv_code && hdr.components.4.tlv_code <= 256;
[L1152]              _old_hdr.components.4.tlv_code := hdr.components.4.tlv_code;
[L1153]              havoc hdr.components.4.tlv_length;
[L1154]              assume 0 <= hdr.components.4.tlv_length && hdr.components.4.tlv_length <= 256;
[L1155]              _old_hdr.components.4.tlv_length := hdr.components.4.tlv_length;
[L1156]              havoc hdr.components.4.tlv_value;
[L1157]              _old_hdr.components.4.tlv_value := hdr.components.4.tlv_value;
[L1158]              tmp_hdr_6.valid := false;
[L1159]              emit[tmp_hdr_6] := false;
[L1160]              havoc tmp_hdr_6.tlv_code;
[L1161]              assume 0 <= tmp_hdr_6.tlv_code && tmp_hdr_6.tlv_code <= 256;
[L1162]              _old_tmp_hdr_6.tlv_code := tmp_hdr_6.tlv_code;
[L1163]              havoc tmp_hdr_6.tlv_length;
[L1164]              assume 0 <= tmp_hdr_6.tlv_length && tmp_hdr_6.tlv_length <= 256;
[L1165]              _old_tmp_hdr_6.tlv_length := tmp_hdr_6.tlv_length;
[L1166]              tmp_hdr_7.valid := false;
[L1167]              emit[tmp_hdr_7] := false;
[L1168]              havoc tmp_hdr_7.tlv_code;
[L1169]              assume 0 <= tmp_hdr_7.tlv_code && tmp_hdr_7.tlv_code <= 256;
[L1170]              _old_tmp_hdr_7.tlv_code := tmp_hdr_7.tlv_code;
[L1171]              havoc tmp_hdr_7.tlv_length;
[L1172]              assume 0 <= tmp_hdr_7.tlv_length && tmp_hdr_7.tlv_length <= 256;
[L1173]              _old_tmp_hdr_7.tlv_length := tmp_hdr_7.tlv_length;
[L1174]              tmp_hdr_8.valid := false;
[L1175]              emit[tmp_hdr_8] := false;
[L1176]              havoc tmp_hdr_8.tlv_code;
[L1177]              assume 0 <= tmp_hdr_8.tlv_code && tmp_hdr_8.tlv_code <= 256;
[L1178]              _old_tmp_hdr_8.tlv_code := tmp_hdr_8.tlv_code;
[L1179]              havoc tmp_hdr_8.tlv_length;
[L1180]              assume 0 <= tmp_hdr_8.tlv_length && tmp_hdr_8.tlv_length <= 256;
[L1181]              _old_tmp_hdr_8.tlv_length := tmp_hdr_8.tlv_length;
[L1182]              tmp_hdr_9.valid := false;
[L1183]              emit[tmp_hdr_9] := false;
[L1184]              havoc tmp_hdr_9.tlv_code;
[L1185]              assume 0 <= tmp_hdr_9.tlv_code && tmp_hdr_9.tlv_code <= 256;
[L1186]              _old_tmp_hdr_9.tlv_code := tmp_hdr_9.tlv_code;
[L1187]              havoc tmp_hdr_9.tlv_length;
[L1188]              assume 0 <= tmp_hdr_9.tlv_length && tmp_hdr_9.tlv_length <= 256;
[L1189]              _old_tmp_hdr_9.tlv_length := tmp_hdr_9.tlv_length;
[L1190]              tmp_hdr_10.valid := false;
[L1191]              emit[tmp_hdr_10] := false;
[L1192]              havoc tmp_hdr_10.tlv_code;
[L1193]              assume 0 <= tmp_hdr_10.tlv_code && tmp_hdr_10.tlv_code <= 256;
[L1194]              _old_tmp_hdr_10.tlv_code := tmp_hdr_10.tlv_code;
[L1195]              havoc tmp_hdr_10.tlv_length;
[L1196]              assume 0 <= tmp_hdr_10.tlv_length && tmp_hdr_10.tlv_length <= 256;
[L1197]              _old_tmp_hdr_10.tlv_length := tmp_hdr_10.tlv_length;
[L1198]              tmp_hdr_11.valid := false;
[L1199]              emit[tmp_hdr_11] := false;
[L1200]              havoc tmp_hdr_11.tlv_code;
[L1201]              assume 0 <= tmp_hdr_11.tlv_code && tmp_hdr_11.tlv_code <= 256;
[L1202]              _old_tmp_hdr_11.tlv_code := tmp_hdr_11.tlv_code;
[L1203]              havoc tmp_hdr_11.tlv_length;
[L1204]              assume 0 <= tmp_hdr_11.tlv_length && tmp_hdr_11.tlv_length <= 256;
[L1205]              _old_tmp_hdr_11.tlv_length := tmp_hdr_11.tlv_length;
[L1206]              tmp_hdr_12.valid := false;
[L1207]              emit[tmp_hdr_12] := false;
[L1208]              havoc tmp_hdr_12.tlv_code;
[L1209]              assume 0 <= tmp_hdr_12.tlv_code && tmp_hdr_12.tlv_code <= 256;
[L1210]              _old_tmp_hdr_12.tlv_code := tmp_hdr_12.tlv_code;
[L1211]              havoc tmp_hdr_12.tlv_length;
[L1212]              assume 0 <= tmp_hdr_12.tlv_length && tmp_hdr_12.tlv_length <= 256;
[L1213]              _old_tmp_hdr_12.tlv_length := tmp_hdr_12.tlv_length;
[L1214]              havoc _p4ltl_free_a;
[L1239]  RET         call havocProcedure();
[L1242]  CALL        call _parser_ParserImpl();
[L758]   CALL        call start();
[L1716]  CALL        call parse_ethernet();
[L1348]              hdr.ethernet.valid := true;
[L1349]              tmp_5 := hdr.ethernet.etherType;
[L1350]              havoc tmp_7;
[L1351]              tmp_6 := tmp_7;
[L1352]  COND FALSE  !(tmp_5 % 65535 == 34340 && tmp_6 % 255 == 80)
[L1355]  COND FALSE  !(tmp_5 % 65535 == 34340 && true)
[L1716]  RET         call parse_ethernet();
[L758]   RET         call start();
[L1242]  RET         call _parser_ParserImpl();
[L1243]  CALL        call verifyChecksum();
[L1243]  RET         call verifyChecksum();
[L1244]  CALL        call ingress();
[L1221]  CALL        call count_table_0.apply();
[L819]   COND TRUE   count_table_0.action_run == count_table_0.action.storeNumOfComponents
[L820]   CALL        call storeNumOfComponents(storeNumOfComponents.total);
[L1723]              meta.name_metadata.components := total;
[L820]   RET         call storeNumOfComponents(storeNumOfComponents.total);
[L824]   COND FALSE  !(count_table_0.action_run == count_table_0.action._drop)
[L1221]  RET         call count_table_0.apply();
[L1222]  COND TRUE   meta.name_metadata.components != 0
[L1223]  CALL        call hashName_table_0.apply();
[L881]   COND TRUE   hashName_table_0.action_run == hashName_table_0.action.computeStoreTablesIndex
[L882]   CALL        call computeStoreTablesIndex();
[L790]               assume meta.name_metadata.name_hash >= 0 && 65536 >= meta.name_metadata.name_hash;
[L791]               havoc meta.name_metadata.name_hash;
[L793]               assume meta.comp_metadata.c1 >= 0 && 65536 >= meta.comp_metadata.c1;
[L794]               havoc meta.comp_metadata.c1;
[L796]               assume meta.comp_metadata.c2 >= 0 && 65536 >= meta.comp_metadata.c2;
[L797]               havoc meta.comp_metadata.c2;
[L799]               assume meta.comp_metadata.c3 >= 0 && 65536 >= meta.comp_metadata.c3;
[L800]               havoc meta.comp_metadata.c3;
[L802]               assume meta.comp_metadata.c4 >= 0 && 65536 >= meta.comp_metadata.c4;
[L803]               havoc meta.comp_metadata.c4;
[L882]   RET         call computeStoreTablesIndex();
[L1223]  RET         call hashName_table_0.apply();
[L1224]  CALL        call pit_table_0.apply();
[L1599]  COND TRUE   pit_table_0.action_run == pit_table_0.action.readPitEntry
[L1600]  CALL        call readPitEntry();
[L1620]              meta.flow_metadata.isInPIT := pit_r[meta.name_metadata.name_hash];
[L1600]  RET         call readPitEntry();
[L1604]  COND FALSE  !(pit_table_0.action_run == pit_table_0.action.cleanPitEntry)
[L1224]  RET         call pit_table_0.apply();
[L1225]  COND FALSE  !(meta.flow_metadata.packetType == 5)
[L1232]  CALL        call routeData_table_0.apply();
[L1639]  COND FALSE  !(routeData_table_0.action_run == routeData_table_0.action.setOutputIface)
[L1644]  COND TRUE   routeData_table_0.action_run == routeData_table_0.action._drop_5
[L1645]  CALL        call _drop_5();
[L1645]  RET         call _drop_5();
[L1232]  RET         call routeData_table_0.apply();
[L1244]  RET         call ingress();
[L1245]  CALL        call egress();
[L1245]  RET         call egress();
[L1246]  CALL        call computeChecksum();
[L1246]  RET         call computeChecksum();
[L1247]              _p4ltl_0 := meta.flow_metadata.packetType % 256 == 5 % 256;
[L1248]              _p4ltl_1 := meta.name_metadata.name_hash % 65536 == _p4ltl_free_a % 65536;
[L1249]              _p4ltl_2 := meta.flow_metadata.packetType % 256 == 6 % 256;
[L1250]              _p4ltl_3 := meta.name_metadata.name_hash % 65536 == _p4ltl_free_a % 65536;
[L1251]              _p4ltl_4 := meta.flow_metadata.packetType % 256 == 6 % 256;
[L1252]              _p4ltl_5 := meta.name_metadata.name_hash % 65536 == _p4ltl_free_a % 65536;
[L1253]              _p4ltl_6 := pit_r[_p4ltl_free_a] == 0;
[L1254]              _p4ltl_7 := meta.name_metadata.components % 256 != 0 % 256;
[L1268]  RET         call main();
Loop:
[L1267]  COND TRUE   true
[L1268]  CALL        call main();
[L1239]  CALL        call havocProcedure();
[L894]               hdr.big_content.valid := false;
[L895]               emit[hdr.big_content] := false;
[L896]               havoc hdr.big_content.tl_code;
[L897]               assume 0 <= hdr.big_content.tl_code && hdr.big_content.tl_code <= 256;
[L898]               _old_hdr.big_content.tl_code := hdr.big_content.tl_code;
[L899]               havoc hdr.big_content.tl_len_code;
[L900]               assume 0 <= hdr.big_content.tl_len_code && hdr.big_content.tl_len_code <= 256;
[L901]               _old_hdr.big_content.tl_len_code := hdr.big_content.tl_len_code;
[L902]               havoc hdr.big_content.tl_length;
[L903]               assume 0 <= hdr.big_content.tl_length && hdr.big_content.tl_length <= 4294967296;
[L904]               _old_hdr.big_content.tl_length := hdr.big_content.tl_length;
[L905]               hdr.big_name.valid := false;
[L906]               emit[hdr.big_name] := false;
[L907]               havoc hdr.big_name.tl_code;
[L908]               assume 0 <= hdr.big_name.tl_code && hdr.big_name.tl_code <= 256;
[L909]               _old_hdr.big_name.tl_code := hdr.big_name.tl_code;
[L910]               havoc hdr.big_name.tl_len_code;
[L911]               assume 0 <= hdr.big_name.tl_len_code && hdr.big_name.tl_len_code <= 256;
[L912]               _old_hdr.big_name.tl_len_code := hdr.big_name.tl_len_code;
[L913]               havoc hdr.big_name.tl_length;
[L914]               assume 0 <= hdr.big_name.tl_length && hdr.big_name.tl_length <= 4294967296;
[L915]               _old_hdr.big_name.tl_length := hdr.big_name.tl_length;
[L916]               hdr.big_tlv0.valid := false;
[L917]               emit[hdr.big_tlv0] := false;
[L918]               havoc hdr.big_tlv0.tl_code;
[L919]               assume 0 <= hdr.big_tlv0.tl_code && hdr.big_tlv0.tl_code <= 256;
[L920]               _old_hdr.big_tlv0.tl_code := hdr.big_tlv0.tl_code;
[L921]               havoc hdr.big_tlv0.tl_len_code;
[L922]               assume 0 <= hdr.big_tlv0.tl_len_code && hdr.big_tlv0.tl_len_code <= 256;
[L923]               _old_hdr.big_tlv0.tl_len_code := hdr.big_tlv0.tl_len_code;
[L924]               havoc hdr.big_tlv0.tl_length;
[L925]               assume 0 <= hdr.big_tlv0.tl_length && hdr.big_tlv0.tl_length <= 4294967296;
[L926]               _old_hdr.big_tlv0.tl_length := hdr.big_tlv0.tl_length;
[L927]               hdr.ethernet.valid := false;
[L928]               emit[hdr.ethernet] := false;
[L929]               havoc hdr.ethernet.dstAddr;
[L930]               assume 0 <= hdr.ethernet.dstAddr && hdr.ethernet.dstAddr <= 281474976710656;
[L931]               _old_hdr.ethernet.dstAddr := hdr.ethernet.dstAddr;
[L932]               havoc hdr.ethernet.srcAddr;
[L933]               assume 0 <= hdr.ethernet.srcAddr && hdr.ethernet.srcAddr <= 281474976710656;
[L934]               _old_hdr.ethernet.srcAddr := hdr.ethernet.srcAddr;
[L935]               havoc hdr.ethernet.etherType;
[L936]               assume 0 <= hdr.ethernet.etherType && hdr.ethernet.etherType <= 65536;
[L937]               _old_hdr.ethernet.etherType := hdr.ethernet.etherType;
[L938]               hdr.huge_content.valid := false;
[L939]               emit[hdr.huge_content] := false;
[L940]               havoc hdr.huge_content.tl_code;
[L941]               assume 0 <= hdr.huge_content.tl_code && hdr.huge_content.tl_code <= 256;
[L942]               _old_hdr.huge_content.tl_code := hdr.huge_content.tl_code;
[L943]               havoc hdr.huge_content.tl_len_code;
[L944]               assume 0 <= hdr.huge_content.tl_len_code && hdr.huge_content.tl_len_code <= 256;
[L945]               _old_hdr.huge_content.tl_len_code := hdr.huge_content.tl_len_code;
[L946]               havoc hdr.huge_content.tl_length;
[L947]               assume 0 <= hdr.huge_content.tl_length && hdr.huge_content.tl_length <= 1125899906842624 * 16384;
[L948]               _old_hdr.huge_content.tl_length := hdr.huge_content.tl_length;
[L949]               hdr.huge_name.valid := false;
[L950]               emit[hdr.huge_name] := false;
[L951]               havoc hdr.huge_name.tl_code;
[L952]               assume 0 <= hdr.huge_name.tl_code && hdr.huge_name.tl_code <= 256;
[L953]               _old_hdr.huge_name.tl_code := hdr.huge_name.tl_code;
[L954]               havoc hdr.huge_name.tl_len_code;
[L955]               assume 0 <= hdr.huge_name.tl_len_code && hdr.huge_name.tl_len_code <= 256;
[L956]               _old_hdr.huge_name.tl_len_code := hdr.huge_name.tl_len_code;
[L957]               havoc hdr.huge_name.tl_length;
[L958]               assume 0 <= hdr.huge_name.tl_length && hdr.huge_name.tl_length <= 1125899906842624 * 16384;
[L959]               _old_hdr.huge_name.tl_length := hdr.huge_name.tl_length;
[L960]               hdr.huge_tlv0.valid := false;
[L961]               emit[hdr.huge_tlv0] := false;
[L962]               havoc hdr.huge_tlv0.tl_code;
[L963]               assume 0 <= hdr.huge_tlv0.tl_code && hdr.huge_tlv0.tl_code <= 256;
[L964]               _old_hdr.huge_tlv0.tl_code := hdr.huge_tlv0.tl_code;
[L965]               havoc hdr.huge_tlv0.tl_len_code;
[L966]               assume 0 <= hdr.huge_tlv0.tl_len_code && hdr.huge_tlv0.tl_len_code <= 256;
[L967]               _old_hdr.huge_tlv0.tl_len_code := hdr.huge_tlv0.tl_len_code;
[L968]               havoc hdr.huge_tlv0.tl_length;
[L969]               assume 0 <= hdr.huge_tlv0.tl_length && hdr.huge_tlv0.tl_length <= 1125899906842624 * 16384;
[L970]               _old_hdr.huge_tlv0.tl_length := hdr.huge_tlv0.tl_length;
[L971]               hdr.isha256.valid := false;
[L972]               emit[hdr.isha256] := false;
[L973]               havoc hdr.isha256.tlv_code;
[L974]               assume 0 <= hdr.isha256.tlv_code && hdr.isha256.tlv_code <= 256;
[L975]               _old_hdr.isha256.tlv_code := hdr.isha256.tlv_code;
[L976]               havoc hdr.isha256.tlv_length;
[L977]               assume 0 <= hdr.isha256.tlv_length && hdr.isha256.tlv_length <= 256;
[L978]               _old_hdr.isha256.tlv_length := hdr.isha256.tlv_length;
[L979]               havoc hdr.isha256.tlv_value;
[L980]               _old_hdr.isha256.tlv_value := hdr.isha256.tlv_value;
[L981]               hdr.lifetime.valid := false;
[L982]               emit[hdr.lifetime] := false;
[L983]               havoc hdr.lifetime.tlv_code;
[L984]               assume 0 <= hdr.lifetime.tlv_code && hdr.lifetime.tlv_code <= 256;
[L985]               _old_hdr.lifetime.tlv_code := hdr.lifetime.tlv_code;
[L986]               havoc hdr.lifetime.tlv_length;
[L987]               assume 0 <= hdr.lifetime.tlv_length && hdr.lifetime.tlv_length <= 256;
[L988]               _old_hdr.lifetime.tlv_length := hdr.lifetime.tlv_length;
[L989]               havoc hdr.lifetime.tlv_value;
[L990]               _old_hdr.lifetime.tlv_value := hdr.lifetime.tlv_value;
[L991]               hdr.medium_content.valid := false;
[L992]               emit[hdr.medium_content] := false;
[L993]               havoc hdr.medium_content.tl_code;
[L994]               assume 0 <= hdr.medium_content.tl_code && hdr.medium_content.tl_code <= 256;
[L995]               _old_hdr.medium_content.tl_code := hdr.medium_content.tl_code;
[L996]               havoc hdr.medium_content.tl_len_code;
[L997]               assume 0 <= hdr.medium_content.tl_len_code && hdr.medium_content.tl_len_code <= 256;
[L998]               _old_hdr.medium_content.tl_len_code := hdr.medium_content.tl_len_code;
[L999]               havoc hdr.medium_content.tl_length;
[L1000]              assume 0 <= hdr.medium_content.tl_length && hdr.medium_content.tl_length <= 65536;
[L1001]              _old_hdr.medium_content.tl_length := hdr.medium_content.tl_length;
[L1002]              hdr.medium_name.valid := false;
[L1003]              emit[hdr.medium_name] := false;
[L1004]              havoc hdr.medium_name.tl_code;
[L1005]              assume 0 <= hdr.medium_name.tl_code && hdr.medium_name.tl_code <= 256;
[L1006]              _old_hdr.medium_name.tl_code := hdr.medium_name.tl_code;
[L1007]              havoc hdr.medium_name.tl_len_code;
[L1008]              assume 0 <= hdr.medium_name.tl_len_code && hdr.medium_name.tl_len_code <= 256;
[L1009]              _old_hdr.medium_name.tl_len_code := hdr.medium_name.tl_len_code;
[L1010]              havoc hdr.medium_name.tl_length;
[L1011]              assume 0 <= hdr.medium_name.tl_length && hdr.medium_name.tl_length <= 65536;
[L1012]              _old_hdr.medium_name.tl_length := hdr.medium_name.tl_length;
[L1013]              hdr.medium_ndnlp.valid := false;
[L1014]              emit[hdr.medium_ndnlp] := false;
[L1015]              havoc hdr.medium_ndnlp.total;
[L1016]              assume 0 <= hdr.medium_ndnlp.total && hdr.medium_ndnlp.total <= 1125899906842624 * 1125899906842624 * 17592186044416;
[L1017]              _old_hdr.medium_ndnlp.total := hdr.medium_ndnlp.total;
[L1018]              hdr.medium_tlv0.valid := false;
[L1019]              emit[hdr.medium_tlv0] := false;
[L1020]              havoc hdr.medium_tlv0.tl_code;
[L1021]              assume 0 <= hdr.medium_tlv0.tl_code && hdr.medium_tlv0.tl_code <= 256;
[L1022]              _old_hdr.medium_tlv0.tl_code := hdr.medium_tlv0.tl_code;
[L1023]              havoc hdr.medium_tlv0.tl_len_code;
[L1024]              assume 0 <= hdr.medium_tlv0.tl_len_code && hdr.medium_tlv0.tl_len_code <= 256;
[L1025]              _old_hdr.medium_tlv0.tl_len_code := hdr.medium_tlv0.tl_len_code;
[L1026]              havoc hdr.medium_tlv0.tl_length;
[L1027]              assume 0 <= hdr.medium_tlv0.tl_length && hdr.medium_tlv0.tl_length <= 65536;
[L1028]              _old_hdr.medium_tlv0.tl_length := hdr.medium_tlv0.tl_length;
[L1029]              hdr.metainfo.valid := false;
[L1030]              emit[hdr.metainfo] := false;
[L1031]              havoc hdr.metainfo.tlv_code;
[L1032]              assume 0 <= hdr.metainfo.tlv_code && hdr.metainfo.tlv_code <= 256;
[L1033]              _old_hdr.metainfo.tlv_code := hdr.metainfo.tlv_code;
[L1034]              havoc hdr.metainfo.tlv_length;
[L1035]              assume 0 <= hdr.metainfo.tlv_length && hdr.metainfo.tlv_length <= 256;
[L1036]              _old_hdr.metainfo.tlv_length := hdr.metainfo.tlv_length;
[L1037]              havoc hdr.metainfo.tlv_value;
[L1038]              _old_hdr.metainfo.tlv_value := hdr.metainfo.tlv_value;
[L1039]              hdr.nonce.valid := false;
[L1040]              emit[hdr.nonce] := false;
[L1041]              havoc hdr.nonce.tlv_code;
[L1042]              assume 0 <= hdr.nonce.tlv_code && hdr.nonce.tlv_code <= 256;
[L1043]              _old_hdr.nonce.tlv_code := hdr.nonce.tlv_code;
[L1044]              havoc hdr.nonce.tlv_length;
[L1045]              assume 0 <= hdr.nonce.tlv_length && hdr.nonce.tlv_length <= 256;
[L1046]              _old_hdr.nonce.tlv_length := hdr.nonce.tlv_length;
[L1047]              havoc hdr.nonce.tlv_value;
[L1048]              _old_hdr.nonce.tlv_value := hdr.nonce.tlv_value;
[L1049]              hdr.signature_info.valid := false;
[L1050]              emit[hdr.signature_info] := false;
[L1051]              havoc hdr.signature_info.tlv_code;
[L1052]              assume 0 <= hdr.signature_info.tlv_code && hdr.signature_info.tlv_code <= 256;
[L1053]              _old_hdr.signature_info.tlv_code := hdr.signature_info.tlv_code;
[L1054]              havoc hdr.signature_info.tlv_length;
[L1055]              assume 0 <= hdr.signature_info.tlv_length && hdr.signature_info.tlv_length <= 256;
[L1056]              _old_hdr.signature_info.tlv_length := hdr.signature_info.tlv_length;
[L1057]              havoc hdr.signature_info.tlv_value;
[L1058]              _old_hdr.signature_info.tlv_value := hdr.signature_info.tlv_value;
[L1059]              hdr.signature_value.valid := false;
[L1060]              emit[hdr.signature_value] := false;
[L1061]              havoc hdr.signature_value.tlv_code;
[L1062]              assume 0 <= hdr.signature_value.tlv_code && hdr.signature_value.tlv_code <= 256;
[L1063]              _old_hdr.signature_value.tlv_code := hdr.signature_value.tlv_code;
[L1064]              havoc hdr.signature_value.tlv_length;
[L1065]              assume 0 <= hdr.signature_value.tlv_length && hdr.signature_value.tlv_length <= 256;
[L1066]              _old_hdr.signature_value.tlv_length := hdr.signature_value.tlv_length;
[L1067]              havoc hdr.signature_value.tlv_value;
[L1068]              _old_hdr.signature_value.tlv_value := hdr.signature_value.tlv_value;
[L1069]              hdr.small_content.valid := false;
[L1070]              emit[hdr.small_content] := false;
[L1071]              havoc hdr.small_content.tl_code;
[L1072]              assume 0 <= hdr.small_content.tl_code && hdr.small_content.tl_code <= 256;
[L1073]              _old_hdr.small_content.tl_code := hdr.small_content.tl_code;
[L1074]              havoc hdr.small_content.tl_length;
[L1075]              assume 0 <= hdr.small_content.tl_length && hdr.small_content.tl_length <= 256;
[L1076]              _old_hdr.small_content.tl_length := hdr.small_content.tl_length;
[L1077]              hdr.small_name.valid := false;
[L1078]              emit[hdr.small_name] := false;
[L1079]              havoc hdr.small_name.tl_code;
[L1080]              assume 0 <= hdr.small_name.tl_code && hdr.small_name.tl_code <= 256;
[L1081]              _old_hdr.small_name.tl_code := hdr.small_name.tl_code;
[L1082]              havoc hdr.small_name.tl_length;
[L1083]              assume 0 <= hdr.small_name.tl_length && hdr.small_name.tl_length <= 256;
[L1084]              _old_hdr.small_name.tl_length := hdr.small_name.tl_length;
[L1085]              hdr.small_ndnlp.valid := false;
[L1086]              emit[hdr.small_ndnlp] := false;
[L1087]              havoc hdr.small_ndnlp.total;
[L1088]              assume 0 <= hdr.small_ndnlp.total && hdr.small_ndnlp.total <= 1125899906842624 * 1125899906842624 * 4096;
[L1089]              _old_hdr.small_ndnlp.total := hdr.small_ndnlp.total;
[L1090]              hdr.small_tlv0.valid := false;
[L1091]              emit[hdr.small_tlv0] := false;
[L1092]              havoc hdr.small_tlv0.tl_code;
[L1093]              assume 0 <= hdr.small_tlv0.tl_code && hdr.small_tlv0.tl_code <= 256;
[L1094]              _old_hdr.small_tlv0.tl_code := hdr.small_tlv0.tl_code;
[L1095]              havoc hdr.small_tlv0.tl_length;
[L1096]              assume 0 <= hdr.small_tlv0.tl_length && hdr.small_tlv0.tl_length <= 256;
[L1097]              _old_hdr.small_tlv0.tl_length := hdr.small_tlv0.tl_length;
[L1098]              hdr.components.last.valid := false;
[L1099]              emit[hdr.components.last] := false;
[L1100]              havoc hdr.components.last.tlv_code;
[L1101]              assume 0 <= hdr.components.last.tlv_code && hdr.components.last.tlv_code <= 256;
[L1102]              _old_hdr.components.last.tlv_code := hdr.components.last.tlv_code;
[L1103]              havoc hdr.components.last.tlv_length;
[L1104]              assume 0 <= hdr.components.last.tlv_length && hdr.components.last.tlv_length <= 256;
[L1105]              _old_hdr.components.last.tlv_length := hdr.components.last.tlv_length;
[L1106]              havoc hdr.components.last.tlv_value;
[L1107]              _old_hdr.components.last.tlv_value := hdr.components.last.tlv_value;
[L1108]              hdr.components.0.valid := false;
[L1109]              emit[hdr.components.0] := false;
[L1110]              havoc hdr.components.0.tlv_code;
[L1111]              assume 0 <= hdr.components.0.tlv_code && hdr.components.0.tlv_code <= 256;
[L1112]              _old_hdr.components.0.tlv_code := hdr.components.0.tlv_code;
[L1113]              havoc hdr.components.0.tlv_length;
[L1114]              assume 0 <= hdr.components.0.tlv_length && hdr.components.0.tlv_length <= 256;
[L1115]              _old_hdr.components.0.tlv_length := hdr.components.0.tlv_length;
[L1116]              havoc hdr.components.0.tlv_value;
[L1117]              _old_hdr.components.0.tlv_value := hdr.components.0.tlv_value;
[L1118]              hdr.components.1.valid := false;
[L1119]              emit[hdr.components.1] := false;
[L1120]              havoc hdr.components.1.tlv_code;
[L1121]              assume 0 <= hdr.components.1.tlv_code && hdr.components.1.tlv_code <= 256;
[L1122]              _old_hdr.components.1.tlv_code := hdr.components.1.tlv_code;
[L1123]              havoc hdr.components.1.tlv_length;
[L1124]              assume 0 <= hdr.components.1.tlv_length && hdr.components.1.tlv_length <= 256;
[L1125]              _old_hdr.components.1.tlv_length := hdr.components.1.tlv_length;
[L1126]              havoc hdr.components.1.tlv_value;
[L1127]              _old_hdr.components.1.tlv_value := hdr.components.1.tlv_value;
[L1128]              hdr.components.2.valid := false;
[L1129]              emit[hdr.components.2] := false;
[L1130]              havoc hdr.components.2.tlv_code;
[L1131]              assume 0 <= hdr.components.2.tlv_code && hdr.components.2.tlv_code <= 256;
[L1132]              _old_hdr.components.2.tlv_code := hdr.components.2.tlv_code;
[L1133]              havoc hdr.components.2.tlv_length;
[L1134]              assume 0 <= hdr.components.2.tlv_length && hdr.components.2.tlv_length <= 256;
[L1135]              _old_hdr.components.2.tlv_length := hdr.components.2.tlv_length;
[L1136]              havoc hdr.components.2.tlv_value;
[L1137]              _old_hdr.components.2.tlv_value := hdr.components.2.tlv_value;
[L1138]              hdr.components.3.valid := false;
[L1139]              emit[hdr.components.3] := false;
[L1140]              havoc hdr.components.3.tlv_code;
[L1141]              assume 0 <= hdr.components.3.tlv_code && hdr.components.3.tlv_code <= 256;
[L1142]              _old_hdr.components.3.tlv_code := hdr.components.3.tlv_code;
[L1143]              havoc hdr.components.3.tlv_length;
[L1144]              assume 0 <= hdr.components.3.tlv_length && hdr.components.3.tlv_length <= 256;
[L1145]              _old_hdr.components.3.tlv_length := hdr.components.3.tlv_length;
[L1146]              havoc hdr.components.3.tlv_value;
[L1147]              _old_hdr.components.3.tlv_value := hdr.components.3.tlv_value;
[L1148]              hdr.components.4.valid := false;
[L1149]              emit[hdr.components.4] := false;
[L1150]              havoc hdr.components.4.tlv_code;
[L1151]              assume 0 <= hdr.components.4.tlv_code && hdr.components.4.tlv_code <= 256;
[L1152]              _old_hdr.components.4.tlv_code := hdr.components.4.tlv_code;
[L1153]              havoc hdr.components.4.tlv_length;
[L1154]              assume 0 <= hdr.components.4.tlv_length && hdr.components.4.tlv_length <= 256;
[L1155]              _old_hdr.components.4.tlv_length := hdr.components.4.tlv_length;
[L1156]              havoc hdr.components.4.tlv_value;
[L1157]              _old_hdr.components.4.tlv_value := hdr.components.4.tlv_value;
[L1158]              tmp_hdr_6.valid := false;
[L1159]              emit[tmp_hdr_6] := false;
[L1160]              havoc tmp_hdr_6.tlv_code;
[L1161]              assume 0 <= tmp_hdr_6.tlv_code && tmp_hdr_6.tlv_code <= 256;
[L1162]              _old_tmp_hdr_6.tlv_code := tmp_hdr_6.tlv_code;
[L1163]              havoc tmp_hdr_6.tlv_length;
[L1164]              assume 0 <= tmp_hdr_6.tlv_length && tmp_hdr_6.tlv_length <= 256;
[L1165]              _old_tmp_hdr_6.tlv_length := tmp_hdr_6.tlv_length;
[L1166]              tmp_hdr_7.valid := false;
[L1167]              emit[tmp_hdr_7] := false;
[L1168]              havoc tmp_hdr_7.tlv_code;
[L1169]              assume 0 <= tmp_hdr_7.tlv_code && tmp_hdr_7.tlv_code <= 256;
[L1170]              _old_tmp_hdr_7.tlv_code := tmp_hdr_7.tlv_code;
[L1171]              havoc tmp_hdr_7.tlv_length;
[L1172]              assume 0 <= tmp_hdr_7.tlv_length && tmp_hdr_7.tlv_length <= 256;
[L1173]              _old_tmp_hdr_7.tlv_length := tmp_hdr_7.tlv_length;
[L1174]              tmp_hdr_8.valid := false;
[L1175]              emit[tmp_hdr_8] := false;
[L1176]              havoc tmp_hdr_8.tlv_code;
[L1177]              assume 0 <= tmp_hdr_8.tlv_code && tmp_hdr_8.tlv_code <= 256;
[L1178]              _old_tmp_hdr_8.tlv_code := tmp_hdr_8.tlv_code;
[L1179]              havoc tmp_hdr_8.tlv_length;
[L1180]              assume 0 <= tmp_hdr_8.tlv_length && tmp_hdr_8.tlv_length <= 256;
[L1181]              _old_tmp_hdr_8.tlv_length := tmp_hdr_8.tlv_length;
[L1182]              tmp_hdr_9.valid := false;
[L1183]              emit[tmp_hdr_9] := false;
[L1184]              havoc tmp_hdr_9.tlv_code;
[L1185]              assume 0 <= tmp_hdr_9.tlv_code && tmp_hdr_9.tlv_code <= 256;
[L1186]              _old_tmp_hdr_9.tlv_code := tmp_hdr_9.tlv_code;
[L1187]              havoc tmp_hdr_9.tlv_length;
[L1188]              assume 0 <= tmp_hdr_9.tlv_length && tmp_hdr_9.tlv_length <= 256;
[L1189]              _old_tmp_hdr_9.tlv_length := tmp_hdr_9.tlv_length;
[L1190]              tmp_hdr_10.valid := false;
[L1191]              emit[tmp_hdr_10] := false;
[L1192]              havoc tmp_hdr_10.tlv_code;
[L1193]              assume 0 <= tmp_hdr_10.tlv_code && tmp_hdr_10.tlv_code <= 256;
[L1194]              _old_tmp_hdr_10.tlv_code := tmp_hdr_10.tlv_code;
[L1195]              havoc tmp_hdr_10.tlv_length;
[L1196]              assume 0 <= tmp_hdr_10.tlv_length && tmp_hdr_10.tlv_length <= 256;
[L1197]              _old_tmp_hdr_10.tlv_length := tmp_hdr_10.tlv_length;
[L1198]              tmp_hdr_11.valid := false;
[L1199]              emit[tmp_hdr_11] := false;
[L1200]              havoc tmp_hdr_11.tlv_code;
[L1201]              assume 0 <= tmp_hdr_11.tlv_code && tmp_hdr_11.tlv_code <= 256;
[L1202]              _old_tmp_hdr_11.tlv_code := tmp_hdr_11.tlv_code;
[L1203]              havoc tmp_hdr_11.tlv_length;
[L1204]              assume 0 <= tmp_hdr_11.tlv_length && tmp_hdr_11.tlv_length <= 256;
[L1205]              _old_tmp_hdr_11.tlv_length := tmp_hdr_11.tlv_length;
[L1206]              tmp_hdr_12.valid := false;
[L1207]              emit[tmp_hdr_12] := false;
[L1208]              havoc tmp_hdr_12.tlv_code;
[L1209]              assume 0 <= tmp_hdr_12.tlv_code && tmp_hdr_12.tlv_code <= 256;
[L1210]              _old_tmp_hdr_12.tlv_code := tmp_hdr_12.tlv_code;
[L1211]              havoc tmp_hdr_12.tlv_length;
[L1212]              assume 0 <= tmp_hdr_12.tlv_length && tmp_hdr_12.tlv_length <= 256;
[L1213]              _old_tmp_hdr_12.tlv_length := tmp_hdr_12.tlv_length;
[L1214]              havoc _p4ltl_free_a;
[L1239]  RET         call havocProcedure();
[L1242]  CALL        call _parser_ParserImpl();
[L758]   CALL        call start();
[L1716]  CALL        call parse_ethernet();
[L1348]              hdr.ethernet.valid := true;
[L1349]              tmp_5 := hdr.ethernet.etherType;
[L1350]              havoc tmp_7;
[L1351]              tmp_6 := tmp_7;
[L1352]  COND FALSE  !(tmp_5 % 65535 == 34340 && tmp_6 % 255 == 80)
[L1355]  COND FALSE  !(tmp_5 % 65535 == 34340 && true)
[L1716]  RET         call parse_ethernet();
[L758]   RET         call start();
[L1242]  RET         call _parser_ParserImpl();
[L1243]  CALL        call verifyChecksum();
[L1243]  RET         call verifyChecksum();
[L1244]  CALL        call ingress();
[L1221]  CALL        call count_table_0.apply();
[L819]   COND TRUE   count_table_0.action_run == count_table_0.action.storeNumOfComponents
[L820]   CALL        call storeNumOfComponents(storeNumOfComponents.total);
[L1723]              meta.name_metadata.components := total;
[L820]   RET         call storeNumOfComponents(storeNumOfComponents.total);
[L824]   COND FALSE  !(count_table_0.action_run == count_table_0.action._drop)
[L1221]  RET         call count_table_0.apply();
[L1222]  COND TRUE   meta.name_metadata.components != 0
[L1223]  CALL        call hashName_table_0.apply();
[L881]   COND TRUE   hashName_table_0.action_run == hashName_table_0.action.computeStoreTablesIndex
[L882]   CALL        call computeStoreTablesIndex();
[L790]               assume meta.name_metadata.name_hash >= 0 && 65536 >= meta.name_metadata.name_hash;
[L791]               havoc meta.name_metadata.name_hash;
[L793]               assume meta.comp_metadata.c1 >= 0 && 65536 >= meta.comp_metadata.c1;
[L794]               havoc meta.comp_metadata.c1;
[L796]               assume meta.comp_metadata.c2 >= 0 && 65536 >= meta.comp_metadata.c2;
[L797]               havoc meta.comp_metadata.c2;
[L799]               assume meta.comp_metadata.c3 >= 0 && 65536 >= meta.comp_metadata.c3;
[L800]               havoc meta.comp_metadata.c3;
[L802]               assume meta.comp_metadata.c4 >= 0 && 65536 >= meta.comp_metadata.c4;
[L803]               havoc meta.comp_metadata.c4;
[L882]   RET         call computeStoreTablesIndex();
[L1223]  RET         call hashName_table_0.apply();
[L1224]  CALL        call pit_table_0.apply();
[L1599]  COND TRUE   pit_table_0.action_run == pit_table_0.action.readPitEntry
[L1600]  CALL        call readPitEntry();
[L1620]              meta.flow_metadata.isInPIT := pit_r[meta.name_metadata.name_hash];
[L1600]  RET         call readPitEntry();
[L1604]  COND FALSE  !(pit_table_0.action_run == pit_table_0.action.cleanPitEntry)
[L1224]  RET         call pit_table_0.apply();
[L1225]  COND FALSE  !(meta.flow_metadata.packetType == 5)
[L1232]  CALL        call routeData_table_0.apply();
[L1639]  COND FALSE  !(routeData_table_0.action_run == routeData_table_0.action.setOutputIface)
[L1644]  COND TRUE   routeData_table_0.action_run == routeData_table_0.action._drop_5
[L1645]  CALL        call _drop_5();
[L1645]  RET         call _drop_5();
[L1232]  RET         call routeData_table_0.apply();
[L1244]  RET         call ingress();
[L1245]  CALL        call egress();
[L1245]  RET         call egress();
[L1246]  CALL        call computeChecksum();
[L1246]  RET         call computeChecksum();
[L1247]              _p4ltl_0 := meta.flow_metadata.packetType % 256 == 5 % 256;
[L1248]              _p4ltl_1 := meta.name_metadata.name_hash % 65536 == _p4ltl_free_a % 65536;
[L1249]              _p4ltl_2 := meta.flow_metadata.packetType % 256 == 6 % 256;
[L1250]              _p4ltl_3 := meta.name_metadata.name_hash % 65536 == _p4ltl_free_a % 65536;
[L1251]              _p4ltl_4 := meta.flow_metadata.packetType % 256 == 6 % 256;
[L1252]              _p4ltl_5 := meta.name_metadata.name_hash % 65536 == _p4ltl_free_a % 65536;
[L1253]              _p4ltl_6 := pit_r[_p4ltl_free_a] == 0;
[L1254]              _p4ltl_7 := meta.name_metadata.components % 256 != 0 % 256;
[L1268]  RET         call main();
End of lasso representation.
RESULT: Ultimate proved your program to be incorrect!
Received shutdown request...
