 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    3891 locations, 5564 edges
  - StatisticsResult: Encoded RCFG
    3874 locations, 5538 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.43ms. Allocated memory is still 72.4MB. Free memory is still 47.8MB. There was no memory consumed. Max. memory is 4.3GB.
 * Boogie Preprocessor took 132.53ms. Allocated memory is still 72.4MB. Free memory was 41.9MB in the beginning and 33.1MB in the end (delta: 8.8MB). Peak memory consumption was 8.4MB. Max. memory is 4.3GB.
 * ThufvSpecLang took 61.22ms. Allocated memory is still 72.4MB. Free memory was 33.1MB in the beginning and 50.0MB in the end (delta: -16.9MB). Peak memory consumption was 6.2MB. Max. memory is 4.3GB.
 * RCFGBuilder took 795.31ms. Allocated memory is still 72.4MB. Free memory was 50.0MB in the beginning and 25.4MB in the end (delta: 24.6MB). Peak memory consumption was 26.2MB. Max. memory is 4.3GB.
 * ThufvLTL2Aut took 95.40ms. Allocated memory is still 72.4MB. Free memory was 25.4MB in the beginning and 21.8MB in the end (delta: 3.6MB). Peak memory consumption was 3.1MB. Max. memory is 4.3GB.
 * Büchi Program Product took 2201.02ms. Allocated memory was 72.4MB in the beginning and 117.4MB in the end (delta: 45.1MB). Free memory was 21.8MB in the beginning and 43.4MB in the end (delta: -21.6MB). Peak memory consumption was 24.9MB. Max. memory is 4.3GB.
 * BlockEncodingV2 took 435.36ms. Allocated memory is still 117.4MB. Free memory was 43.4MB in the beginning and 52.3MB in the end (delta: -8.9MB). Peak memory consumption was 25.2MB. Max. memory is 4.3GB.
 * BuchiAutomizer took 1071356.38ms. Allocated memory was 117.4MB in the beginning and 2.2GB in the end (delta: 2.1GB). Free memory was 51.8MB in the beginning and 315.8MB in the end (delta: -264.1MB). Peak memory consumption was 3.0GB. Max. memory is 4.3GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    5 locations, 14 edges
  - StatisticsResult: Initial RCFG
    652 locations, 769 edges
  - StatisticsResult: BuchiProgram size
    3891 locations, 5564 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 6 terminating modules (6 trivial, 0 deterministic, 0 nondeterministic) and one nonterminating remainder module.6 modules have a trivial ranking function, the largest among these consists of 16 locations. The remainder module has 60279 locations.
  - StatisticsResult: Timing statistics
    BüchiAutomizer plugin needed 1071.2s and 7 iterations.  TraceHistogramMax:1. Analysis of lassos took 574.5s. Construction of modules took 296.7s. Büchi inclusion checks took 195.0s. Highest rank in rank-based complementation 0. Minimization of det autom 6. Minimization of nondet autom 0. Automata minimization 2.5s AutomataMinimizationTime, 6 MinimizatonAttempts, 7112 StatesRemovedByMinimization, 6 NontrivialMinimizations. Non-live state removal took 1.2s Buchi closure took 0.0s. Biggest automaton had -1 states and ocurred in iteration -1.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 0 mSolverCounterUnknown, 116849 SdHoareTripleChecker+Valid, 321.5s IncrementalHoareTripleChecker+Time, 0 mSdLazyCounter, 116583 mSDsluCounter, 47840 SdHoareTripleChecker+Invalid, 296.7s Time, 0 mProtectedAction, 0 SdHoareTripleChecker+Unchecked, 0 IncrementalHoareTripleChecker+Unchecked, 10713 mSDsCounter, 40695 IncrementalHoareTripleChecker+Valid, 0 mProtectedPredicate, 142169 IncrementalHoareTripleChecker+Invalid, 182864 SdHoareTripleChecker+Unknown, 0 mSolverCounterNotChecked, 40695 mSolverCounterUnsat, 37598 mSDtfsCounter, 142169 mSolverCounterSat, 2.7s SdHoareTripleChecker+Time, 0 IncrementalHoareTripleChecker+Unknown	LassoAnalysisResults: nont1 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU6 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	InitialAbstractionConstructionTime: 0.0s
  - LTLInfiniteCounterExampleResult [Line: 1225]: Violation of LTL property !(( []((_p4ltl_7 == true)) )) || ( ( [](( (_p4ltl_6 == true) ==> ( ( [](((_p4ltl_5 == true && _p4ltl_4 == true) && drop)) ) || ( ((_p4ltl_3 == true && _p4ltl_2 == true) && drop) U (_p4ltl_1 == true && _p4ltl_0 == true) ) ) )) ))
    Found an infinite, lasso-shaped execution that violates the LTL property !(( []((_p4ltl_7 == true)) )) || ( ( [](( (_p4ltl_6 == true) ==> ( ( [](((_p4ltl_5 == true && _p4ltl_4 == true) && drop)) ) || ( ((_p4ltl_3 == true && _p4ltl_2 == true) && drop) U (_p4ltl_1 == true && _p4ltl_0 == true) ) ) )) )).
Stem:
[L680]   CALL        call mainProcedure();
[L1224]  COND TRUE   true
[L1225]  CALL        call main();
[L1196]  CALL        call havocProcedure();
[L851]               hdr.big_content.valid := false;
[L852]               emit[hdr.big_content] := false;
[L853]               havoc hdr.big_content.tl_code;
[L854]               assume 0 <= hdr.big_content.tl_code && hdr.big_content.tl_code <= 256;
[L855]               _old_hdr.big_content.tl_code := hdr.big_content.tl_code;
[L856]               havoc hdr.big_content.tl_len_code;
[L857]               assume 0 <= hdr.big_content.tl_len_code && hdr.big_content.tl_len_code <= 256;
[L858]               _old_hdr.big_content.tl_len_code := hdr.big_content.tl_len_code;
[L859]               havoc hdr.big_content.tl_length;
[L860]               assume 0 <= hdr.big_content.tl_length && hdr.big_content.tl_length <= 4294967296;
[L861]               _old_hdr.big_content.tl_length := hdr.big_content.tl_length;
[L862]               hdr.big_name.valid := false;
[L863]               emit[hdr.big_name] := false;
[L864]               havoc hdr.big_name.tl_code;
[L865]               assume 0 <= hdr.big_name.tl_code && hdr.big_name.tl_code <= 256;
[L866]               _old_hdr.big_name.tl_code := hdr.big_name.tl_code;
[L867]               havoc hdr.big_name.tl_len_code;
[L868]               assume 0 <= hdr.big_name.tl_len_code && hdr.big_name.tl_len_code <= 256;
[L869]               _old_hdr.big_name.tl_len_code := hdr.big_name.tl_len_code;
[L870]               havoc hdr.big_name.tl_length;
[L871]               assume 0 <= hdr.big_name.tl_length && hdr.big_name.tl_length <= 4294967296;
[L872]               _old_hdr.big_name.tl_length := hdr.big_name.tl_length;
[L873]               hdr.big_tlv0.valid := false;
[L874]               emit[hdr.big_tlv0] := false;
[L875]               havoc hdr.big_tlv0.tl_code;
[L876]               assume 0 <= hdr.big_tlv0.tl_code && hdr.big_tlv0.tl_code <= 256;
[L877]               _old_hdr.big_tlv0.tl_code := hdr.big_tlv0.tl_code;
[L878]               havoc hdr.big_tlv0.tl_len_code;
[L879]               assume 0 <= hdr.big_tlv0.tl_len_code && hdr.big_tlv0.tl_len_code <= 256;
[L880]               _old_hdr.big_tlv0.tl_len_code := hdr.big_tlv0.tl_len_code;
[L881]               havoc hdr.big_tlv0.tl_length;
[L882]               assume 0 <= hdr.big_tlv0.tl_length && hdr.big_tlv0.tl_length <= 4294967296;
[L883]               _old_hdr.big_tlv0.tl_length := hdr.big_tlv0.tl_length;
[L884]               hdr.ethernet.valid := false;
[L885]               emit[hdr.ethernet] := false;
[L886]               havoc hdr.ethernet.dstAddr;
[L887]               assume 0 <= hdr.ethernet.dstAddr && hdr.ethernet.dstAddr <= 281474976710656;
[L888]               _old_hdr.ethernet.dstAddr := hdr.ethernet.dstAddr;
[L889]               havoc hdr.ethernet.srcAddr;
[L890]               assume 0 <= hdr.ethernet.srcAddr && hdr.ethernet.srcAddr <= 281474976710656;
[L891]               _old_hdr.ethernet.srcAddr := hdr.ethernet.srcAddr;
[L892]               havoc hdr.ethernet.etherType;
[L893]               assume 0 <= hdr.ethernet.etherType && hdr.ethernet.etherType <= 65536;
[L894]               _old_hdr.ethernet.etherType := hdr.ethernet.etherType;
[L895]               hdr.huge_content.valid := false;
[L896]               emit[hdr.huge_content] := false;
[L897]               havoc hdr.huge_content.tl_code;
[L898]               assume 0 <= hdr.huge_content.tl_code && hdr.huge_content.tl_code <= 256;
[L899]               _old_hdr.huge_content.tl_code := hdr.huge_content.tl_code;
[L900]               havoc hdr.huge_content.tl_len_code;
[L901]               assume 0 <= hdr.huge_content.tl_len_code && hdr.huge_content.tl_len_code <= 256;
[L902]               _old_hdr.huge_content.tl_len_code := hdr.huge_content.tl_len_code;
[L903]               havoc hdr.huge_content.tl_length;
[L904]               assume 0 <= hdr.huge_content.tl_length && hdr.huge_content.tl_length <= 1125899906842624 * 16384;
[L905]               _old_hdr.huge_content.tl_length := hdr.huge_content.tl_length;
[L906]               hdr.huge_name.valid := false;
[L907]               emit[hdr.huge_name] := false;
[L908]               havoc hdr.huge_name.tl_code;
[L909]               assume 0 <= hdr.huge_name.tl_code && hdr.huge_name.tl_code <= 256;
[L910]               _old_hdr.huge_name.tl_code := hdr.huge_name.tl_code;
[L911]               havoc hdr.huge_name.tl_len_code;
[L912]               assume 0 <= hdr.huge_name.tl_len_code && hdr.huge_name.tl_len_code <= 256;
[L913]               _old_hdr.huge_name.tl_len_code := hdr.huge_name.tl_len_code;
[L914]               havoc hdr.huge_name.tl_length;
[L915]               assume 0 <= hdr.huge_name.tl_length && hdr.huge_name.tl_length <= 1125899906842624 * 16384;
[L916]               _old_hdr.huge_name.tl_length := hdr.huge_name.tl_length;
[L917]               hdr.huge_tlv0.valid := false;
[L918]               emit[hdr.huge_tlv0] := false;
[L919]               havoc hdr.huge_tlv0.tl_code;
[L920]               assume 0 <= hdr.huge_tlv0.tl_code && hdr.huge_tlv0.tl_code <= 256;
[L921]               _old_hdr.huge_tlv0.tl_code := hdr.huge_tlv0.tl_code;
[L922]               havoc hdr.huge_tlv0.tl_len_code;
[L923]               assume 0 <= hdr.huge_tlv0.tl_len_code && hdr.huge_tlv0.tl_len_code <= 256;
[L924]               _old_hdr.huge_tlv0.tl_len_code := hdr.huge_tlv0.tl_len_code;
[L925]               havoc hdr.huge_tlv0.tl_length;
[L926]               assume 0 <= hdr.huge_tlv0.tl_length && hdr.huge_tlv0.tl_length <= 1125899906842624 * 16384;
[L927]               _old_hdr.huge_tlv0.tl_length := hdr.huge_tlv0.tl_length;
[L928]               hdr.isha256.valid := false;
[L929]               emit[hdr.isha256] := false;
[L930]               havoc hdr.isha256.tlv_code;
[L931]               assume 0 <= hdr.isha256.tlv_code && hdr.isha256.tlv_code <= 256;
[L932]               _old_hdr.isha256.tlv_code := hdr.isha256.tlv_code;
[L933]               havoc hdr.isha256.tlv_length;
[L934]               assume 0 <= hdr.isha256.tlv_length && hdr.isha256.tlv_length <= 256;
[L935]               _old_hdr.isha256.tlv_length := hdr.isha256.tlv_length;
[L936]               havoc hdr.isha256.tlv_value;
[L937]               _old_hdr.isha256.tlv_value := hdr.isha256.tlv_value;
[L938]               hdr.lifetime.valid := false;
[L939]               emit[hdr.lifetime] := false;
[L940]               havoc hdr.lifetime.tlv_code;
[L941]               assume 0 <= hdr.lifetime.tlv_code && hdr.lifetime.tlv_code <= 256;
[L942]               _old_hdr.lifetime.tlv_code := hdr.lifetime.tlv_code;
[L943]               havoc hdr.lifetime.tlv_length;
[L944]               assume 0 <= hdr.lifetime.tlv_length && hdr.lifetime.tlv_length <= 256;
[L945]               _old_hdr.lifetime.tlv_length := hdr.lifetime.tlv_length;
[L946]               havoc hdr.lifetime.tlv_value;
[L947]               _old_hdr.lifetime.tlv_value := hdr.lifetime.tlv_value;
[L948]               hdr.medium_content.valid := false;
[L949]               emit[hdr.medium_content] := false;
[L950]               havoc hdr.medium_content.tl_code;
[L951]               assume 0 <= hdr.medium_content.tl_code && hdr.medium_content.tl_code <= 256;
[L952]               _old_hdr.medium_content.tl_code := hdr.medium_content.tl_code;
[L953]               havoc hdr.medium_content.tl_len_code;
[L954]               assume 0 <= hdr.medium_content.tl_len_code && hdr.medium_content.tl_len_code <= 256;
[L955]               _old_hdr.medium_content.tl_len_code := hdr.medium_content.tl_len_code;
[L956]               havoc hdr.medium_content.tl_length;
[L957]               assume 0 <= hdr.medium_content.tl_length && hdr.medium_content.tl_length <= 65536;
[L958]               _old_hdr.medium_content.tl_length := hdr.medium_content.tl_length;
[L959]               hdr.medium_name.valid := false;
[L960]               emit[hdr.medium_name] := false;
[L961]               havoc hdr.medium_name.tl_code;
[L962]               assume 0 <= hdr.medium_name.tl_code && hdr.medium_name.tl_code <= 256;
[L963]               _old_hdr.medium_name.tl_code := hdr.medium_name.tl_code;
[L964]               havoc hdr.medium_name.tl_len_code;
[L965]               assume 0 <= hdr.medium_name.tl_len_code && hdr.medium_name.tl_len_code <= 256;
[L966]               _old_hdr.medium_name.tl_len_code := hdr.medium_name.tl_len_code;
[L967]               havoc hdr.medium_name.tl_length;
[L968]               assume 0 <= hdr.medium_name.tl_length && hdr.medium_name.tl_length <= 65536;
[L969]               _old_hdr.medium_name.tl_length := hdr.medium_name.tl_length;
[L970]               hdr.medium_ndnlp.valid := false;
[L971]               emit[hdr.medium_ndnlp] := false;
[L972]               havoc hdr.medium_ndnlp.total;
[L973]               assume 0 <= hdr.medium_ndnlp.total && hdr.medium_ndnlp.total <= 1125899906842624 * 1125899906842624 * 17592186044416;
[L974]               _old_hdr.medium_ndnlp.total := hdr.medium_ndnlp.total;
[L975]               hdr.medium_tlv0.valid := false;
[L976]               emit[hdr.medium_tlv0] := false;
[L977]               havoc hdr.medium_tlv0.tl_code;
[L978]               assume 0 <= hdr.medium_tlv0.tl_code && hdr.medium_tlv0.tl_code <= 256;
[L979]               _old_hdr.medium_tlv0.tl_code := hdr.medium_tlv0.tl_code;
[L980]               havoc hdr.medium_tlv0.tl_len_code;
[L981]               assume 0 <= hdr.medium_tlv0.tl_len_code && hdr.medium_tlv0.tl_len_code <= 256;
[L982]               _old_hdr.medium_tlv0.tl_len_code := hdr.medium_tlv0.tl_len_code;
[L983]               havoc hdr.medium_tlv0.tl_length;
[L984]               assume 0 <= hdr.medium_tlv0.tl_length && hdr.medium_tlv0.tl_length <= 65536;
[L985]               _old_hdr.medium_tlv0.tl_length := hdr.medium_tlv0.tl_length;
[L986]               hdr.metainfo.valid := false;
[L987]               emit[hdr.metainfo] := false;
[L988]               havoc hdr.metainfo.tlv_code;
[L989]               assume 0 <= hdr.metainfo.tlv_code && hdr.metainfo.tlv_code <= 256;
[L990]               _old_hdr.metainfo.tlv_code := hdr.metainfo.tlv_code;
[L991]               havoc hdr.metainfo.tlv_length;
[L992]               assume 0 <= hdr.metainfo.tlv_length && hdr.metainfo.tlv_length <= 256;
[L993]               _old_hdr.metainfo.tlv_length := hdr.metainfo.tlv_length;
[L994]               havoc hdr.metainfo.tlv_value;
[L995]               _old_hdr.metainfo.tlv_value := hdr.metainfo.tlv_value;
[L996]               hdr.nonce.valid := false;
[L997]               emit[hdr.nonce] := false;
[L998]               havoc hdr.nonce.tlv_code;
[L999]               assume 0 <= hdr.nonce.tlv_code && hdr.nonce.tlv_code <= 256;
[L1000]              _old_hdr.nonce.tlv_code := hdr.nonce.tlv_code;
[L1001]              havoc hdr.nonce.tlv_length;
[L1002]              assume 0 <= hdr.nonce.tlv_length && hdr.nonce.tlv_length <= 256;
[L1003]              _old_hdr.nonce.tlv_length := hdr.nonce.tlv_length;
[L1004]              havoc hdr.nonce.tlv_value;
[L1005]              _old_hdr.nonce.tlv_value := hdr.nonce.tlv_value;
[L1006]              hdr.signature_info.valid := false;
[L1007]              emit[hdr.signature_info] := false;
[L1008]              havoc hdr.signature_info.tlv_code;
[L1009]              assume 0 <= hdr.signature_info.tlv_code && hdr.signature_info.tlv_code <= 256;
[L1010]              _old_hdr.signature_info.tlv_code := hdr.signature_info.tlv_code;
[L1011]              havoc hdr.signature_info.tlv_length;
[L1012]              assume 0 <= hdr.signature_info.tlv_length && hdr.signature_info.tlv_length <= 256;
[L1013]              _old_hdr.signature_info.tlv_length := hdr.signature_info.tlv_length;
[L1014]              havoc hdr.signature_info.tlv_value;
[L1015]              _old_hdr.signature_info.tlv_value := hdr.signature_info.tlv_value;
[L1016]              hdr.signature_value.valid := false;
[L1017]              emit[hdr.signature_value] := false;
[L1018]              havoc hdr.signature_value.tlv_code;
[L1019]              assume 0 <= hdr.signature_value.tlv_code && hdr.signature_value.tlv_code <= 256;
[L1020]              _old_hdr.signature_value.tlv_code := hdr.signature_value.tlv_code;
[L1021]              havoc hdr.signature_value.tlv_length;
[L1022]              assume 0 <= hdr.signature_value.tlv_length && hdr.signature_value.tlv_length <= 256;
[L1023]              _old_hdr.signature_value.tlv_length := hdr.signature_value.tlv_length;
[L1024]              havoc hdr.signature_value.tlv_value;
[L1025]              _old_hdr.signature_value.tlv_value := hdr.signature_value.tlv_value;
[L1026]              hdr.small_content.valid := false;
[L1027]              emit[hdr.small_content] := false;
[L1028]              havoc hdr.small_content.tl_code;
[L1029]              assume 0 <= hdr.small_content.tl_code && hdr.small_content.tl_code <= 256;
[L1030]              _old_hdr.small_content.tl_code := hdr.small_content.tl_code;
[L1031]              havoc hdr.small_content.tl_length;
[L1032]              assume 0 <= hdr.small_content.tl_length && hdr.small_content.tl_length <= 256;
[L1033]              _old_hdr.small_content.tl_length := hdr.small_content.tl_length;
[L1034]              hdr.small_name.valid := false;
[L1035]              emit[hdr.small_name] := false;
[L1036]              havoc hdr.small_name.tl_code;
[L1037]              assume 0 <= hdr.small_name.tl_code && hdr.small_name.tl_code <= 256;
[L1038]              _old_hdr.small_name.tl_code := hdr.small_name.tl_code;
[L1039]              havoc hdr.small_name.tl_length;
[L1040]              assume 0 <= hdr.small_name.tl_length && hdr.small_name.tl_length <= 256;
[L1041]              _old_hdr.small_name.tl_length := hdr.small_name.tl_length;
[L1042]              hdr.small_ndnlp.valid := false;
[L1043]              emit[hdr.small_ndnlp] := false;
[L1044]              havoc hdr.small_ndnlp.total;
[L1045]              assume 0 <= hdr.small_ndnlp.total && hdr.small_ndnlp.total <= 1125899906842624 * 1125899906842624 * 4096;
[L1046]              _old_hdr.small_ndnlp.total := hdr.small_ndnlp.total;
[L1047]              hdr.small_tlv0.valid := false;
[L1048]              emit[hdr.small_tlv0] := false;
[L1049]              havoc hdr.small_tlv0.tl_code;
[L1050]              assume 0 <= hdr.small_tlv0.tl_code && hdr.small_tlv0.tl_code <= 256;
[L1051]              _old_hdr.small_tlv0.tl_code := hdr.small_tlv0.tl_code;
[L1052]              havoc hdr.small_tlv0.tl_length;
[L1053]              assume 0 <= hdr.small_tlv0.tl_length && hdr.small_tlv0.tl_length <= 256;
[L1054]              _old_hdr.small_tlv0.tl_length := hdr.small_tlv0.tl_length;
[L1055]              hdr.components.last.valid := false;
[L1056]              emit[hdr.components.last] := false;
[L1057]              havoc hdr.components.last.tlv_code;
[L1058]              assume 0 <= hdr.components.last.tlv_code && hdr.components.last.tlv_code <= 256;
[L1059]              _old_hdr.components.last.tlv_code := hdr.components.last.tlv_code;
[L1060]              havoc hdr.components.last.tlv_length;
[L1061]              assume 0 <= hdr.components.last.tlv_length && hdr.components.last.tlv_length <= 256;
[L1062]              _old_hdr.components.last.tlv_length := hdr.components.last.tlv_length;
[L1063]              havoc hdr.components.last.tlv_value;
[L1064]              _old_hdr.components.last.tlv_value := hdr.components.last.tlv_value;
[L1065]              hdr.components.0.valid := false;
[L1066]              emit[hdr.components.0] := false;
[L1067]              havoc hdr.components.0.tlv_code;
[L1068]              assume 0 <= hdr.components.0.tlv_code && hdr.components.0.tlv_code <= 256;
[L1069]              _old_hdr.components.0.tlv_code := hdr.components.0.tlv_code;
[L1070]              havoc hdr.components.0.tlv_length;
[L1071]              assume 0 <= hdr.components.0.tlv_length && hdr.components.0.tlv_length <= 256;
[L1072]              _old_hdr.components.0.tlv_length := hdr.components.0.tlv_length;
[L1073]              havoc hdr.components.0.tlv_value;
[L1074]              _old_hdr.components.0.tlv_value := hdr.components.0.tlv_value;
[L1075]              hdr.components.1.valid := false;
[L1076]              emit[hdr.components.1] := false;
[L1077]              havoc hdr.components.1.tlv_code;
[L1078]              assume 0 <= hdr.components.1.tlv_code && hdr.components.1.tlv_code <= 256;
[L1079]              _old_hdr.components.1.tlv_code := hdr.components.1.tlv_code;
[L1080]              havoc hdr.components.1.tlv_length;
[L1081]              assume 0 <= hdr.components.1.tlv_length && hdr.components.1.tlv_length <= 256;
[L1082]              _old_hdr.components.1.tlv_length := hdr.components.1.tlv_length;
[L1083]              havoc hdr.components.1.tlv_value;
[L1084]              _old_hdr.components.1.tlv_value := hdr.components.1.tlv_value;
[L1085]              hdr.components.2.valid := false;
[L1086]              emit[hdr.components.2] := false;
[L1087]              havoc hdr.components.2.tlv_code;
[L1088]              assume 0 <= hdr.components.2.tlv_code && hdr.components.2.tlv_code <= 256;
[L1089]              _old_hdr.components.2.tlv_code := hdr.components.2.tlv_code;
[L1090]              havoc hdr.components.2.tlv_length;
[L1091]              assume 0 <= hdr.components.2.tlv_length && hdr.components.2.tlv_length <= 256;
[L1092]              _old_hdr.components.2.tlv_length := hdr.components.2.tlv_length;
[L1093]              havoc hdr.components.2.tlv_value;
[L1094]              _old_hdr.components.2.tlv_value := hdr.components.2.tlv_value;
[L1095]              hdr.components.3.valid := false;
[L1096]              emit[hdr.components.3] := false;
[L1097]              havoc hdr.components.3.tlv_code;
[L1098]              assume 0 <= hdr.components.3.tlv_code && hdr.components.3.tlv_code <= 256;
[L1099]              _old_hdr.components.3.tlv_code := hdr.components.3.tlv_code;
[L1100]              havoc hdr.components.3.tlv_length;
[L1101]              assume 0 <= hdr.components.3.tlv_length && hdr.components.3.tlv_length <= 256;
[L1102]              _old_hdr.components.3.tlv_length := hdr.components.3.tlv_length;
[L1103]              havoc hdr.components.3.tlv_value;
[L1104]              _old_hdr.components.3.tlv_value := hdr.components.3.tlv_value;
[L1105]              hdr.components.4.valid := false;
[L1106]              emit[hdr.components.4] := false;
[L1107]              havoc hdr.components.4.tlv_code;
[L1108]              assume 0 <= hdr.components.4.tlv_code && hdr.components.4.tlv_code <= 256;
[L1109]              _old_hdr.components.4.tlv_code := hdr.components.4.tlv_code;
[L1110]              havoc hdr.components.4.tlv_length;
[L1111]              assume 0 <= hdr.components.4.tlv_length && hdr.components.4.tlv_length <= 256;
[L1112]              _old_hdr.components.4.tlv_length := hdr.components.4.tlv_length;
[L1113]              havoc hdr.components.4.tlv_value;
[L1114]              _old_hdr.components.4.tlv_value := hdr.components.4.tlv_value;
[L1115]              tmp_hdr_6.valid := false;
[L1116]              emit[tmp_hdr_6] := false;
[L1117]              havoc tmp_hdr_6.tlv_code;
[L1118]              assume 0 <= tmp_hdr_6.tlv_code && tmp_hdr_6.tlv_code <= 256;
[L1119]              _old_tmp_hdr_6.tlv_code := tmp_hdr_6.tlv_code;
[L1120]              havoc tmp_hdr_6.tlv_length;
[L1121]              assume 0 <= tmp_hdr_6.tlv_length && tmp_hdr_6.tlv_length <= 256;
[L1122]              _old_tmp_hdr_6.tlv_length := tmp_hdr_6.tlv_length;
[L1123]              tmp_hdr_7.valid := false;
[L1124]              emit[tmp_hdr_7] := false;
[L1125]              havoc tmp_hdr_7.tlv_code;
[L1126]              assume 0 <= tmp_hdr_7.tlv_code && tmp_hdr_7.tlv_code <= 256;
[L1127]              _old_tmp_hdr_7.tlv_code := tmp_hdr_7.tlv_code;
[L1128]              havoc tmp_hdr_7.tlv_length;
[L1129]              assume 0 <= tmp_hdr_7.tlv_length && tmp_hdr_7.tlv_length <= 256;
[L1130]              _old_tmp_hdr_7.tlv_length := tmp_hdr_7.tlv_length;
[L1131]              tmp_hdr_8.valid := false;
[L1132]              emit[tmp_hdr_8] := false;
[L1133]              havoc tmp_hdr_8.tlv_code;
[L1134]              assume 0 <= tmp_hdr_8.tlv_code && tmp_hdr_8.tlv_code <= 256;
[L1135]              _old_tmp_hdr_8.tlv_code := tmp_hdr_8.tlv_code;
[L1136]              havoc tmp_hdr_8.tlv_length;
[L1137]              assume 0 <= tmp_hdr_8.tlv_length && tmp_hdr_8.tlv_length <= 256;
[L1138]              _old_tmp_hdr_8.tlv_length := tmp_hdr_8.tlv_length;
[L1139]              tmp_hdr_9.valid := false;
[L1140]              emit[tmp_hdr_9] := false;
[L1141]              havoc tmp_hdr_9.tlv_code;
[L1142]              assume 0 <= tmp_hdr_9.tlv_code && tmp_hdr_9.tlv_code <= 256;
[L1143]              _old_tmp_hdr_9.tlv_code := tmp_hdr_9.tlv_code;
[L1144]              havoc tmp_hdr_9.tlv_length;
[L1145]              assume 0 <= tmp_hdr_9.tlv_length && tmp_hdr_9.tlv_length <= 256;
[L1146]              _old_tmp_hdr_9.tlv_length := tmp_hdr_9.tlv_length;
[L1147]              tmp_hdr_10.valid := false;
[L1148]              emit[tmp_hdr_10] := false;
[L1149]              havoc tmp_hdr_10.tlv_code;
[L1150]              assume 0 <= tmp_hdr_10.tlv_code && tmp_hdr_10.tlv_code <= 256;
[L1151]              _old_tmp_hdr_10.tlv_code := tmp_hdr_10.tlv_code;
[L1152]              havoc tmp_hdr_10.tlv_length;
[L1153]              assume 0 <= tmp_hdr_10.tlv_length && tmp_hdr_10.tlv_length <= 256;
[L1154]              _old_tmp_hdr_10.tlv_length := tmp_hdr_10.tlv_length;
[L1155]              tmp_hdr_11.valid := false;
[L1156]              emit[tmp_hdr_11] := false;
[L1157]              havoc tmp_hdr_11.tlv_code;
[L1158]              assume 0 <= tmp_hdr_11.tlv_code && tmp_hdr_11.tlv_code <= 256;
[L1159]              _old_tmp_hdr_11.tlv_code := tmp_hdr_11.tlv_code;
[L1160]              havoc tmp_hdr_11.tlv_length;
[L1161]              assume 0 <= tmp_hdr_11.tlv_length && tmp_hdr_11.tlv_length <= 256;
[L1162]              _old_tmp_hdr_11.tlv_length := tmp_hdr_11.tlv_length;
[L1163]              tmp_hdr_12.valid := false;
[L1164]              emit[tmp_hdr_12] := false;
[L1165]              havoc tmp_hdr_12.tlv_code;
[L1166]              assume 0 <= tmp_hdr_12.tlv_code && tmp_hdr_12.tlv_code <= 256;
[L1167]              _old_tmp_hdr_12.tlv_code := tmp_hdr_12.tlv_code;
[L1168]              havoc tmp_hdr_12.tlv_length;
[L1169]              assume 0 <= tmp_hdr_12.tlv_length && tmp_hdr_12.tlv_length <= 256;
[L1170]              _old_tmp_hdr_12.tlv_length := tmp_hdr_12.tlv_length;
[L1171]              havoc _p4ltl_free_a;
[L1196]  RET         call havocProcedure();
[L1199]  CALL        call _parser_ParserImpl();
[L715]   CALL        call start();
[L1673]  CALL        call parse_ethernet();
[L1305]              hdr.ethernet.valid := true;
[L1306]              tmp_5 := hdr.ethernet.etherType;
[L1307]              havoc tmp_7;
[L1308]              tmp_6 := tmp_7;
[L1309]  COND FALSE  !(tmp_5 % 65535 == 34340 && tmp_6 % 255 == 80)
[L1312]  COND FALSE  !(tmp_5 % 65535 == 34340 && true)
[L1673]  RET         call parse_ethernet();
[L715]   RET         call start();
[L1199]  RET         call _parser_ParserImpl();
[L1200]  CALL        call verifyChecksum();
[L1200]  RET         call verifyChecksum();
[L1201]  CALL        call ingress();
[L1178]  CALL        call count_table_0.apply();
[L776]   COND TRUE   count_table_0.action_run == count_table_0.action.storeNumOfComponents
[L777]   CALL        call storeNumOfComponents(storeNumOfComponents.total);
[L1680]              meta.name_metadata.components := total;
[L777]   RET         call storeNumOfComponents(storeNumOfComponents.total);
[L781]   COND FALSE  !(count_table_0.action_run == count_table_0.action._drop)
[L1178]  RET         call count_table_0.apply();
[L1179]  COND TRUE   meta.name_metadata.components != 0
[L1180]  CALL        call hashName_table_0.apply();
[L838]   COND TRUE   hashName_table_0.action_run == hashName_table_0.action.computeStoreTablesIndex
[L839]   CALL        call computeStoreTablesIndex();
[L747]               assume meta.name_metadata.name_hash >= 0 && 65536 >= meta.name_metadata.name_hash;
[L748]               havoc meta.name_metadata.name_hash;
[L750]               assume meta.comp_metadata.c1 >= 0 && 65536 >= meta.comp_metadata.c1;
[L751]               havoc meta.comp_metadata.c1;
[L753]               assume meta.comp_metadata.c2 >= 0 && 65536 >= meta.comp_metadata.c2;
[L754]               havoc meta.comp_metadata.c2;
[L756]               assume meta.comp_metadata.c3 >= 0 && 65536 >= meta.comp_metadata.c3;
[L757]               havoc meta.comp_metadata.c3;
[L759]               assume meta.comp_metadata.c4 >= 0 && 65536 >= meta.comp_metadata.c4;
[L760]               havoc meta.comp_metadata.c4;
[L839]   RET         call computeStoreTablesIndex();
[L1180]  RET         call hashName_table_0.apply();
[L1181]  CALL        call pit_table_0.apply();
[L1556]  COND TRUE   pit_table_0.action_run == pit_table_0.action.readPitEntry
[L1557]  CALL        call readPitEntry();
[L1577]              meta.flow_metadata.isInPIT := pit_r[meta.name_metadata.name_hash];
[L1557]  RET         call readPitEntry();
[L1561]  COND FALSE  !(pit_table_0.action_run == pit_table_0.action.cleanPitEntry)
[L1181]  RET         call pit_table_0.apply();
[L1182]  COND FALSE  !(meta.flow_metadata.packetType == 5)
[L1189]  CALL        call routeData_table_0.apply();
[L1596]  COND FALSE  !(routeData_table_0.action_run == routeData_table_0.action.setOutputIface)
[L1601]  COND TRUE   routeData_table_0.action_run == routeData_table_0.action._drop_5
[L1602]  CALL        call _drop_5();
[L1602]  RET         call _drop_5();
[L1189]  RET         call routeData_table_0.apply();
[L1201]  RET         call ingress();
[L1202]  CALL        call egress();
[L1202]  RET         call egress();
[L1203]  CALL        call computeChecksum();
[L1203]  RET         call computeChecksum();
[L1204]              _p4ltl_0 := meta.flow_metadata.packetType % 256 == 5 % 256;
[L1205]              _p4ltl_1 := meta.name_metadata.name_hash % 65536 == _p4ltl_free_a % 65536;
[L1206]              _p4ltl_2 := meta.flow_metadata.packetType % 256 == 6 % 256;
[L1207]              _p4ltl_3 := meta.name_metadata.name_hash % 65536 == _p4ltl_free_a % 65536;
[L1208]              _p4ltl_4 := meta.flow_metadata.packetType % 256 == 6 % 256;
[L1209]              _p4ltl_5 := meta.name_metadata.name_hash % 65536 == _p4ltl_free_a % 65536;
[L1210]              _p4ltl_6 := pit_r[_p4ltl_free_a] == 0;
[L1211]              _p4ltl_7 := meta.name_metadata.components % 256 != 0 % 256;
[L1225]  RET         call main();
Loop:
[L1224]  COND TRUE   true
[L1225]  CALL        call main();
[L1196]  CALL        call havocProcedure();
[L851]               hdr.big_content.valid := false;
[L852]               emit[hdr.big_content] := false;
[L853]               havoc hdr.big_content.tl_code;
[L854]               assume 0 <= hdr.big_content.tl_code && hdr.big_content.tl_code <= 256;
[L855]               _old_hdr.big_content.tl_code := hdr.big_content.tl_code;
[L856]               havoc hdr.big_content.tl_len_code;
[L857]               assume 0 <= hdr.big_content.tl_len_code && hdr.big_content.tl_len_code <= 256;
[L858]               _old_hdr.big_content.tl_len_code := hdr.big_content.tl_len_code;
[L859]               havoc hdr.big_content.tl_length;
[L860]               assume 0 <= hdr.big_content.tl_length && hdr.big_content.tl_length <= 4294967296;
[L861]               _old_hdr.big_content.tl_length := hdr.big_content.tl_length;
[L862]               hdr.big_name.valid := false;
[L863]               emit[hdr.big_name] := false;
[L864]               havoc hdr.big_name.tl_code;
[L865]               assume 0 <= hdr.big_name.tl_code && hdr.big_name.tl_code <= 256;
[L866]               _old_hdr.big_name.tl_code := hdr.big_name.tl_code;
[L867]               havoc hdr.big_name.tl_len_code;
[L868]               assume 0 <= hdr.big_name.tl_len_code && hdr.big_name.tl_len_code <= 256;
[L869]               _old_hdr.big_name.tl_len_code := hdr.big_name.tl_len_code;
[L870]               havoc hdr.big_name.tl_length;
[L871]               assume 0 <= hdr.big_name.tl_length && hdr.big_name.tl_length <= 4294967296;
[L872]               _old_hdr.big_name.tl_length := hdr.big_name.tl_length;
[L873]               hdr.big_tlv0.valid := false;
[L874]               emit[hdr.big_tlv0] := false;
[L875]               havoc hdr.big_tlv0.tl_code;
[L876]               assume 0 <= hdr.big_tlv0.tl_code && hdr.big_tlv0.tl_code <= 256;
[L877]               _old_hdr.big_tlv0.tl_code := hdr.big_tlv0.tl_code;
[L878]               havoc hdr.big_tlv0.tl_len_code;
[L879]               assume 0 <= hdr.big_tlv0.tl_len_code && hdr.big_tlv0.tl_len_code <= 256;
[L880]               _old_hdr.big_tlv0.tl_len_code := hdr.big_tlv0.tl_len_code;
[L881]               havoc hdr.big_tlv0.tl_length;
[L882]               assume 0 <= hdr.big_tlv0.tl_length && hdr.big_tlv0.tl_length <= 4294967296;
[L883]               _old_hdr.big_tlv0.tl_length := hdr.big_tlv0.tl_length;
[L884]               hdr.ethernet.valid := false;
[L885]               emit[hdr.ethernet] := false;
[L886]               havoc hdr.ethernet.dstAddr;
[L887]               assume 0 <= hdr.ethernet.dstAddr && hdr.ethernet.dstAddr <= 281474976710656;
[L888]               _old_hdr.ethernet.dstAddr := hdr.ethernet.dstAddr;
[L889]               havoc hdr.ethernet.srcAddr;
[L890]               assume 0 <= hdr.ethernet.srcAddr && hdr.ethernet.srcAddr <= 281474976710656;
[L891]               _old_hdr.ethernet.srcAddr := hdr.ethernet.srcAddr;
[L892]               havoc hdr.ethernet.etherType;
[L893]               assume 0 <= hdr.ethernet.etherType && hdr.ethernet.etherType <= 65536;
[L894]               _old_hdr.ethernet.etherType := hdr.ethernet.etherType;
[L895]               hdr.huge_content.valid := false;
[L896]               emit[hdr.huge_content] := false;
[L897]               havoc hdr.huge_content.tl_code;
[L898]               assume 0 <= hdr.huge_content.tl_code && hdr.huge_content.tl_code <= 256;
[L899]               _old_hdr.huge_content.tl_code := hdr.huge_content.tl_code;
[L900]               havoc hdr.huge_content.tl_len_code;
[L901]               assume 0 <= hdr.huge_content.tl_len_code && hdr.huge_content.tl_len_code <= 256;
[L902]               _old_hdr.huge_content.tl_len_code := hdr.huge_content.tl_len_code;
[L903]               havoc hdr.huge_content.tl_length;
[L904]               assume 0 <= hdr.huge_content.tl_length && hdr.huge_content.tl_length <= 1125899906842624 * 16384;
[L905]               _old_hdr.huge_content.tl_length := hdr.huge_content.tl_length;
[L906]               hdr.huge_name.valid := false;
[L907]               emit[hdr.huge_name] := false;
[L908]               havoc hdr.huge_name.tl_code;
[L909]               assume 0 <= hdr.huge_name.tl_code && hdr.huge_name.tl_code <= 256;
[L910]               _old_hdr.huge_name.tl_code := hdr.huge_name.tl_code;
[L911]               havoc hdr.huge_name.tl_len_code;
[L912]               assume 0 <= hdr.huge_name.tl_len_code && hdr.huge_name.tl_len_code <= 256;
[L913]               _old_hdr.huge_name.tl_len_code := hdr.huge_name.tl_len_code;
[L914]               havoc hdr.huge_name.tl_length;
[L915]               assume 0 <= hdr.huge_name.tl_length && hdr.huge_name.tl_length <= 1125899906842624 * 16384;
[L916]               _old_hdr.huge_name.tl_length := hdr.huge_name.tl_length;
[L917]               hdr.huge_tlv0.valid := false;
[L918]               emit[hdr.huge_tlv0] := false;
[L919]               havoc hdr.huge_tlv0.tl_code;
[L920]               assume 0 <= hdr.huge_tlv0.tl_code && hdr.huge_tlv0.tl_code <= 256;
[L921]               _old_hdr.huge_tlv0.tl_code := hdr.huge_tlv0.tl_code;
[L922]               havoc hdr.huge_tlv0.tl_len_code;
[L923]               assume 0 <= hdr.huge_tlv0.tl_len_code && hdr.huge_tlv0.tl_len_code <= 256;
[L924]               _old_hdr.huge_tlv0.tl_len_code := hdr.huge_tlv0.tl_len_code;
[L925]               havoc hdr.huge_tlv0.tl_length;
[L926]               assume 0 <= hdr.huge_tlv0.tl_length && hdr.huge_tlv0.tl_length <= 1125899906842624 * 16384;
[L927]               _old_hdr.huge_tlv0.tl_length := hdr.huge_tlv0.tl_length;
[L928]               hdr.isha256.valid := false;
[L929]               emit[hdr.isha256] := false;
[L930]               havoc hdr.isha256.tlv_code;
[L931]               assume 0 <= hdr.isha256.tlv_code && hdr.isha256.tlv_code <= 256;
[L932]               _old_hdr.isha256.tlv_code := hdr.isha256.tlv_code;
[L933]               havoc hdr.isha256.tlv_length;
[L934]               assume 0 <= hdr.isha256.tlv_length && hdr.isha256.tlv_length <= 256;
[L935]               _old_hdr.isha256.tlv_length := hdr.isha256.tlv_length;
[L936]               havoc hdr.isha256.tlv_value;
[L937]               _old_hdr.isha256.tlv_value := hdr.isha256.tlv_value;
[L938]               hdr.lifetime.valid := false;
[L939]               emit[hdr.lifetime] := false;
[L940]               havoc hdr.lifetime.tlv_code;
[L941]               assume 0 <= hdr.lifetime.tlv_code && hdr.lifetime.tlv_code <= 256;
[L942]               _old_hdr.lifetime.tlv_code := hdr.lifetime.tlv_code;
[L943]               havoc hdr.lifetime.tlv_length;
[L944]               assume 0 <= hdr.lifetime.tlv_length && hdr.lifetime.tlv_length <= 256;
[L945]               _old_hdr.lifetime.tlv_length := hdr.lifetime.tlv_length;
[L946]               havoc hdr.lifetime.tlv_value;
[L947]               _old_hdr.lifetime.tlv_value := hdr.lifetime.tlv_value;
[L948]               hdr.medium_content.valid := false;
[L949]               emit[hdr.medium_content] := false;
[L950]               havoc hdr.medium_content.tl_code;
[L951]               assume 0 <= hdr.medium_content.tl_code && hdr.medium_content.tl_code <= 256;
[L952]               _old_hdr.medium_content.tl_code := hdr.medium_content.tl_code;
[L953]               havoc hdr.medium_content.tl_len_code;
[L954]               assume 0 <= hdr.medium_content.tl_len_code && hdr.medium_content.tl_len_code <= 256;
[L955]               _old_hdr.medium_content.tl_len_code := hdr.medium_content.tl_len_code;
[L956]               havoc hdr.medium_content.tl_length;
[L957]               assume 0 <= hdr.medium_content.tl_length && hdr.medium_content.tl_length <= 65536;
[L958]               _old_hdr.medium_content.tl_length := hdr.medium_content.tl_length;
[L959]               hdr.medium_name.valid := false;
[L960]               emit[hdr.medium_name] := false;
[L961]               havoc hdr.medium_name.tl_code;
[L962]               assume 0 <= hdr.medium_name.tl_code && hdr.medium_name.tl_code <= 256;
[L963]               _old_hdr.medium_name.tl_code := hdr.medium_name.tl_code;
[L964]               havoc hdr.medium_name.tl_len_code;
[L965]               assume 0 <= hdr.medium_name.tl_len_code && hdr.medium_name.tl_len_code <= 256;
[L966]               _old_hdr.medium_name.tl_len_code := hdr.medium_name.tl_len_code;
[L967]               havoc hdr.medium_name.tl_length;
[L968]               assume 0 <= hdr.medium_name.tl_length && hdr.medium_name.tl_length <= 65536;
[L969]               _old_hdr.medium_name.tl_length := hdr.medium_name.tl_length;
[L970]               hdr.medium_ndnlp.valid := false;
[L971]               emit[hdr.medium_ndnlp] := false;
[L972]               havoc hdr.medium_ndnlp.total;
[L973]               assume 0 <= hdr.medium_ndnlp.total && hdr.medium_ndnlp.total <= 1125899906842624 * 1125899906842624 * 17592186044416;
[L974]               _old_hdr.medium_ndnlp.total := hdr.medium_ndnlp.total;
[L975]               hdr.medium_tlv0.valid := false;
[L976]               emit[hdr.medium_tlv0] := false;
[L977]               havoc hdr.medium_tlv0.tl_code;
[L978]               assume 0 <= hdr.medium_tlv0.tl_code && hdr.medium_tlv0.tl_code <= 256;
[L979]               _old_hdr.medium_tlv0.tl_code := hdr.medium_tlv0.tl_code;
[L980]               havoc hdr.medium_tlv0.tl_len_code;
[L981]               assume 0 <= hdr.medium_tlv0.tl_len_code && hdr.medium_tlv0.tl_len_code <= 256;
[L982]               _old_hdr.medium_tlv0.tl_len_code := hdr.medium_tlv0.tl_len_code;
[L983]               havoc hdr.medium_tlv0.tl_length;
[L984]               assume 0 <= hdr.medium_tlv0.tl_length && hdr.medium_tlv0.tl_length <= 65536;
[L985]               _old_hdr.medium_tlv0.tl_length := hdr.medium_tlv0.tl_length;
[L986]               hdr.metainfo.valid := false;
[L987]               emit[hdr.metainfo] := false;
[L988]               havoc hdr.metainfo.tlv_code;
[L989]               assume 0 <= hdr.metainfo.tlv_code && hdr.metainfo.tlv_code <= 256;
[L990]               _old_hdr.metainfo.tlv_code := hdr.metainfo.tlv_code;
[L991]               havoc hdr.metainfo.tlv_length;
[L992]               assume 0 <= hdr.metainfo.tlv_length && hdr.metainfo.tlv_length <= 256;
[L993]               _old_hdr.metainfo.tlv_length := hdr.metainfo.tlv_length;
[L994]               havoc hdr.metainfo.tlv_value;
[L995]               _old_hdr.metainfo.tlv_value := hdr.metainfo.tlv_value;
[L996]               hdr.nonce.valid := false;
[L997]               emit[hdr.nonce] := false;
[L998]               havoc hdr.nonce.tlv_code;
[L999]               assume 0 <= hdr.nonce.tlv_code && hdr.nonce.tlv_code <= 256;
[L1000]              _old_hdr.nonce.tlv_code := hdr.nonce.tlv_code;
[L1001]              havoc hdr.nonce.tlv_length;
[L1002]              assume 0 <= hdr.nonce.tlv_length && hdr.nonce.tlv_length <= 256;
[L1003]              _old_hdr.nonce.tlv_length := hdr.nonce.tlv_length;
[L1004]              havoc hdr.nonce.tlv_value;
[L1005]              _old_hdr.nonce.tlv_value := hdr.nonce.tlv_value;
[L1006]              hdr.signature_info.valid := false;
[L1007]              emit[hdr.signature_info] := false;
[L1008]              havoc hdr.signature_info.tlv_code;
[L1009]              assume 0 <= hdr.signature_info.tlv_code && hdr.signature_info.tlv_code <= 256;
[L1010]              _old_hdr.signature_info.tlv_code := hdr.signature_info.tlv_code;
[L1011]              havoc hdr.signature_info.tlv_length;
[L1012]              assume 0 <= hdr.signature_info.tlv_length && hdr.signature_info.tlv_length <= 256;
[L1013]              _old_hdr.signature_info.tlv_length := hdr.signature_info.tlv_length;
[L1014]              havoc hdr.signature_info.tlv_value;
[L1015]              _old_hdr.signature_info.tlv_value := hdr.signature_info.tlv_value;
[L1016]              hdr.signature_value.valid := false;
[L1017]              emit[hdr.signature_value] := false;
[L1018]              havoc hdr.signature_value.tlv_code;
[L1019]              assume 0 <= hdr.signature_value.tlv_code && hdr.signature_value.tlv_code <= 256;
[L1020]              _old_hdr.signature_value.tlv_code := hdr.signature_value.tlv_code;
[L1021]              havoc hdr.signature_value.tlv_length;
[L1022]              assume 0 <= hdr.signature_value.tlv_length && hdr.signature_value.tlv_length <= 256;
[L1023]              _old_hdr.signature_value.tlv_length := hdr.signature_value.tlv_length;
[L1024]              havoc hdr.signature_value.tlv_value;
[L1025]              _old_hdr.signature_value.tlv_value := hdr.signature_value.tlv_value;
[L1026]              hdr.small_content.valid := false;
[L1027]              emit[hdr.small_content] := false;
[L1028]              havoc hdr.small_content.tl_code;
[L1029]              assume 0 <= hdr.small_content.tl_code && hdr.small_content.tl_code <= 256;
[L1030]              _old_hdr.small_content.tl_code := hdr.small_content.tl_code;
[L1031]              havoc hdr.small_content.tl_length;
[L1032]              assume 0 <= hdr.small_content.tl_length && hdr.small_content.tl_length <= 256;
[L1033]              _old_hdr.small_content.tl_length := hdr.small_content.tl_length;
[L1034]              hdr.small_name.valid := false;
[L1035]              emit[hdr.small_name] := false;
[L1036]              havoc hdr.small_name.tl_code;
[L1037]              assume 0 <= hdr.small_name.tl_code && hdr.small_name.tl_code <= 256;
[L1038]              _old_hdr.small_name.tl_code := hdr.small_name.tl_code;
[L1039]              havoc hdr.small_name.tl_length;
[L1040]              assume 0 <= hdr.small_name.tl_length && hdr.small_name.tl_length <= 256;
[L1041]              _old_hdr.small_name.tl_length := hdr.small_name.tl_length;
[L1042]              hdr.small_ndnlp.valid := false;
[L1043]              emit[hdr.small_ndnlp] := false;
[L1044]              havoc hdr.small_ndnlp.total;
[L1045]              assume 0 <= hdr.small_ndnlp.total && hdr.small_ndnlp.total <= 1125899906842624 * 1125899906842624 * 4096;
[L1046]              _old_hdr.small_ndnlp.total := hdr.small_ndnlp.total;
[L1047]              hdr.small_tlv0.valid := false;
[L1048]              emit[hdr.small_tlv0] := false;
[L1049]              havoc hdr.small_tlv0.tl_code;
[L1050]              assume 0 <= hdr.small_tlv0.tl_code && hdr.small_tlv0.tl_code <= 256;
[L1051]              _old_hdr.small_tlv0.tl_code := hdr.small_tlv0.tl_code;
[L1052]              havoc hdr.small_tlv0.tl_length;
[L1053]              assume 0 <= hdr.small_tlv0.tl_length && hdr.small_tlv0.tl_length <= 256;
[L1054]              _old_hdr.small_tlv0.tl_length := hdr.small_tlv0.tl_length;
[L1055]              hdr.components.last.valid := false;
[L1056]              emit[hdr.components.last] := false;
[L1057]              havoc hdr.components.last.tlv_code;
[L1058]              assume 0 <= hdr.components.last.tlv_code && hdr.components.last.tlv_code <= 256;
[L1059]              _old_hdr.components.last.tlv_code := hdr.components.last.tlv_code;
[L1060]              havoc hdr.components.last.tlv_length;
[L1061]              assume 0 <= hdr.components.last.tlv_length && hdr.components.last.tlv_length <= 256;
[L1062]              _old_hdr.components.last.tlv_length := hdr.components.last.tlv_length;
[L1063]              havoc hdr.components.last.tlv_value;
[L1064]              _old_hdr.components.last.tlv_value := hdr.components.last.tlv_value;
[L1065]              hdr.components.0.valid := false;
[L1066]              emit[hdr.components.0] := false;
[L1067]              havoc hdr.components.0.tlv_code;
[L1068]              assume 0 <= hdr.components.0.tlv_code && hdr.components.0.tlv_code <= 256;
[L1069]              _old_hdr.components.0.tlv_code := hdr.components.0.tlv_code;
[L1070]              havoc hdr.components.0.tlv_length;
[L1071]              assume 0 <= hdr.components.0.tlv_length && hdr.components.0.tlv_length <= 256;
[L1072]              _old_hdr.components.0.tlv_length := hdr.components.0.tlv_length;
[L1073]              havoc hdr.components.0.tlv_value;
[L1074]              _old_hdr.components.0.tlv_value := hdr.components.0.tlv_value;
[L1075]              hdr.components.1.valid := false;
[L1076]              emit[hdr.components.1] := false;
[L1077]              havoc hdr.components.1.tlv_code;
[L1078]              assume 0 <= hdr.components.1.tlv_code && hdr.components.1.tlv_code <= 256;
[L1079]              _old_hdr.components.1.tlv_code := hdr.components.1.tlv_code;
[L1080]              havoc hdr.components.1.tlv_length;
[L1081]              assume 0 <= hdr.components.1.tlv_length && hdr.components.1.tlv_length <= 256;
[L1082]              _old_hdr.components.1.tlv_length := hdr.components.1.tlv_length;
[L1083]              havoc hdr.components.1.tlv_value;
[L1084]              _old_hdr.components.1.tlv_value := hdr.components.1.tlv_value;
[L1085]              hdr.components.2.valid := false;
[L1086]              emit[hdr.components.2] := false;
[L1087]              havoc hdr.components.2.tlv_code;
[L1088]              assume 0 <= hdr.components.2.tlv_code && hdr.components.2.tlv_code <= 256;
[L1089]              _old_hdr.components.2.tlv_code := hdr.components.2.tlv_code;
[L1090]              havoc hdr.components.2.tlv_length;
[L1091]              assume 0 <= hdr.components.2.tlv_length && hdr.components.2.tlv_length <= 256;
[L1092]              _old_hdr.components.2.tlv_length := hdr.components.2.tlv_length;
[L1093]              havoc hdr.components.2.tlv_value;
[L1094]              _old_hdr.components.2.tlv_value := hdr.components.2.tlv_value;
[L1095]              hdr.components.3.valid := false;
[L1096]              emit[hdr.components.3] := false;
[L1097]              havoc hdr.components.3.tlv_code;
[L1098]              assume 0 <= hdr.components.3.tlv_code && hdr.components.3.tlv_code <= 256;
[L1099]              _old_hdr.components.3.tlv_code := hdr.components.3.tlv_code;
[L1100]              havoc hdr.components.3.tlv_length;
[L1101]              assume 0 <= hdr.components.3.tlv_length && hdr.components.3.tlv_length <= 256;
[L1102]              _old_hdr.components.3.tlv_length := hdr.components.3.tlv_length;
[L1103]              havoc hdr.components.3.tlv_value;
[L1104]              _old_hdr.components.3.tlv_value := hdr.components.3.tlv_value;
[L1105]              hdr.components.4.valid := false;
[L1106]              emit[hdr.components.4] := false;
[L1107]              havoc hdr.components.4.tlv_code;
[L1108]              assume 0 <= hdr.components.4.tlv_code && hdr.components.4.tlv_code <= 256;
[L1109]              _old_hdr.components.4.tlv_code := hdr.components.4.tlv_code;
[L1110]              havoc hdr.components.4.tlv_length;
[L1111]              assume 0 <= hdr.components.4.tlv_length && hdr.components.4.tlv_length <= 256;
[L1112]              _old_hdr.components.4.tlv_length := hdr.components.4.tlv_length;
[L1113]              havoc hdr.components.4.tlv_value;
[L1114]              _old_hdr.components.4.tlv_value := hdr.components.4.tlv_value;
[L1115]              tmp_hdr_6.valid := false;
[L1116]              emit[tmp_hdr_6] := false;
[L1117]              havoc tmp_hdr_6.tlv_code;
[L1118]              assume 0 <= tmp_hdr_6.tlv_code && tmp_hdr_6.tlv_code <= 256;
[L1119]              _old_tmp_hdr_6.tlv_code := tmp_hdr_6.tlv_code;
[L1120]              havoc tmp_hdr_6.tlv_length;
[L1121]              assume 0 <= tmp_hdr_6.tlv_length && tmp_hdr_6.tlv_length <= 256;
[L1122]              _old_tmp_hdr_6.tlv_length := tmp_hdr_6.tlv_length;
[L1123]              tmp_hdr_7.valid := false;
[L1124]              emit[tmp_hdr_7] := false;
[L1125]              havoc tmp_hdr_7.tlv_code;
[L1126]              assume 0 <= tmp_hdr_7.tlv_code && tmp_hdr_7.tlv_code <= 256;
[L1127]              _old_tmp_hdr_7.tlv_code := tmp_hdr_7.tlv_code;
[L1128]              havoc tmp_hdr_7.tlv_length;
[L1129]              assume 0 <= tmp_hdr_7.tlv_length && tmp_hdr_7.tlv_length <= 256;
[L1130]              _old_tmp_hdr_7.tlv_length := tmp_hdr_7.tlv_length;
[L1131]              tmp_hdr_8.valid := false;
[L1132]              emit[tmp_hdr_8] := false;
[L1133]              havoc tmp_hdr_8.tlv_code;
[L1134]              assume 0 <= tmp_hdr_8.tlv_code && tmp_hdr_8.tlv_code <= 256;
[L1135]              _old_tmp_hdr_8.tlv_code := tmp_hdr_8.tlv_code;
[L1136]              havoc tmp_hdr_8.tlv_length;
[L1137]              assume 0 <= tmp_hdr_8.tlv_length && tmp_hdr_8.tlv_length <= 256;
[L1138]              _old_tmp_hdr_8.tlv_length := tmp_hdr_8.tlv_length;
[L1139]              tmp_hdr_9.valid := false;
[L1140]              emit[tmp_hdr_9] := false;
[L1141]              havoc tmp_hdr_9.tlv_code;
[L1142]              assume 0 <= tmp_hdr_9.tlv_code && tmp_hdr_9.tlv_code <= 256;
[L1143]              _old_tmp_hdr_9.tlv_code := tmp_hdr_9.tlv_code;
[L1144]              havoc tmp_hdr_9.tlv_length;
[L1145]              assume 0 <= tmp_hdr_9.tlv_length && tmp_hdr_9.tlv_length <= 256;
[L1146]              _old_tmp_hdr_9.tlv_length := tmp_hdr_9.tlv_length;
[L1147]              tmp_hdr_10.valid := false;
[L1148]              emit[tmp_hdr_10] := false;
[L1149]              havoc tmp_hdr_10.tlv_code;
[L1150]              assume 0 <= tmp_hdr_10.tlv_code && tmp_hdr_10.tlv_code <= 256;
[L1151]              _old_tmp_hdr_10.tlv_code := tmp_hdr_10.tlv_code;
[L1152]              havoc tmp_hdr_10.tlv_length;
[L1153]              assume 0 <= tmp_hdr_10.tlv_length && tmp_hdr_10.tlv_length <= 256;
[L1154]              _old_tmp_hdr_10.tlv_length := tmp_hdr_10.tlv_length;
[L1155]              tmp_hdr_11.valid := false;
[L1156]              emit[tmp_hdr_11] := false;
[L1157]              havoc tmp_hdr_11.tlv_code;
[L1158]              assume 0 <= tmp_hdr_11.tlv_code && tmp_hdr_11.tlv_code <= 256;
[L1159]              _old_tmp_hdr_11.tlv_code := tmp_hdr_11.tlv_code;
[L1160]              havoc tmp_hdr_11.tlv_length;
[L1161]              assume 0 <= tmp_hdr_11.tlv_length && tmp_hdr_11.tlv_length <= 256;
[L1162]              _old_tmp_hdr_11.tlv_length := tmp_hdr_11.tlv_length;
[L1163]              tmp_hdr_12.valid := false;
[L1164]              emit[tmp_hdr_12] := false;
[L1165]              havoc tmp_hdr_12.tlv_code;
[L1166]              assume 0 <= tmp_hdr_12.tlv_code && tmp_hdr_12.tlv_code <= 256;
[L1167]              _old_tmp_hdr_12.tlv_code := tmp_hdr_12.tlv_code;
[L1168]              havoc tmp_hdr_12.tlv_length;
[L1169]              assume 0 <= tmp_hdr_12.tlv_length && tmp_hdr_12.tlv_length <= 256;
[L1170]              _old_tmp_hdr_12.tlv_length := tmp_hdr_12.tlv_length;
[L1171]              havoc _p4ltl_free_a;
[L1196]  RET         call havocProcedure();
[L1199]  CALL        call _parser_ParserImpl();
[L715]   CALL        call start();
[L1673]  CALL        call parse_ethernet();
[L1305]              hdr.ethernet.valid := true;
[L1306]              tmp_5 := hdr.ethernet.etherType;
[L1307]              havoc tmp_7;
[L1308]              tmp_6 := tmp_7;
[L1309]  COND FALSE  !(tmp_5 % 65535 == 34340 && tmp_6 % 255 == 80)
[L1312]  COND FALSE  !(tmp_5 % 65535 == 34340 && true)
[L1673]  RET         call parse_ethernet();
[L715]   RET         call start();
[L1199]  RET         call _parser_ParserImpl();
[L1200]  CALL        call verifyChecksum();
[L1200]  RET         call verifyChecksum();
[L1201]  CALL        call ingress();
[L1178]  CALL        call count_table_0.apply();
[L776]   COND TRUE   count_table_0.action_run == count_table_0.action.storeNumOfComponents
[L777]   CALL        call storeNumOfComponents(storeNumOfComponents.total);
[L1680]              meta.name_metadata.components := total;
[L777]   RET         call storeNumOfComponents(storeNumOfComponents.total);
[L781]   COND FALSE  !(count_table_0.action_run == count_table_0.action._drop)
[L1178]  RET         call count_table_0.apply();
[L1179]  COND TRUE   meta.name_metadata.components != 0
[L1180]  CALL        call hashName_table_0.apply();
[L838]   COND TRUE   hashName_table_0.action_run == hashName_table_0.action.computeStoreTablesIndex
[L839]   CALL        call computeStoreTablesIndex();
[L747]               assume meta.name_metadata.name_hash >= 0 && 65536 >= meta.name_metadata.name_hash;
[L748]               havoc meta.name_metadata.name_hash;
[L750]               assume meta.comp_metadata.c1 >= 0 && 65536 >= meta.comp_metadata.c1;
[L751]               havoc meta.comp_metadata.c1;
[L753]               assume meta.comp_metadata.c2 >= 0 && 65536 >= meta.comp_metadata.c2;
[L754]               havoc meta.comp_metadata.c2;
[L756]               assume meta.comp_metadata.c3 >= 0 && 65536 >= meta.comp_metadata.c3;
[L757]               havoc meta.comp_metadata.c3;
[L759]               assume meta.comp_metadata.c4 >= 0 && 65536 >= meta.comp_metadata.c4;
[L760]               havoc meta.comp_metadata.c4;
[L839]   RET         call computeStoreTablesIndex();
[L1180]  RET         call hashName_table_0.apply();
[L1181]  CALL        call pit_table_0.apply();
[L1556]  COND TRUE   pit_table_0.action_run == pit_table_0.action.readPitEntry
[L1557]  CALL        call readPitEntry();
[L1577]              meta.flow_metadata.isInPIT := pit_r[meta.name_metadata.name_hash];
[L1557]  RET         call readPitEntry();
[L1561]  COND FALSE  !(pit_table_0.action_run == pit_table_0.action.cleanPitEntry)
[L1181]  RET         call pit_table_0.apply();
[L1182]  COND FALSE  !(meta.flow_metadata.packetType == 5)
[L1189]  CALL        call routeData_table_0.apply();
[L1596]  COND FALSE  !(routeData_table_0.action_run == routeData_table_0.action.setOutputIface)
[L1601]  COND TRUE   routeData_table_0.action_run == routeData_table_0.action._drop_5
[L1602]  CALL        call _drop_5();
[L1602]  RET         call _drop_5();
[L1189]  RET         call routeData_table_0.apply();
[L1201]  RET         call ingress();
[L1202]  CALL        call egress();
[L1202]  RET         call egress();
[L1203]  CALL        call computeChecksum();
[L1203]  RET         call computeChecksum();
[L1204]              _p4ltl_0 := meta.flow_metadata.packetType % 256 == 5 % 256;
[L1205]              _p4ltl_1 := meta.name_metadata.name_hash % 65536 == _p4ltl_free_a % 65536;
[L1206]              _p4ltl_2 := meta.flow_metadata.packetType % 256 == 6 % 256;
[L1207]              _p4ltl_3 := meta.name_metadata.name_hash % 65536 == _p4ltl_free_a % 65536;
[L1208]              _p4ltl_4 := meta.flow_metadata.packetType % 256 == 6 % 256;
[L1209]              _p4ltl_5 := meta.name_metadata.name_hash % 65536 == _p4ltl_free_a % 65536;
[L1210]              _p4ltl_6 := pit_r[_p4ltl_free_a] == 0;
[L1211]              _p4ltl_7 := meta.name_metadata.components % 256 != 0 % 256;
[L1225]  RET         call main();
End of lasso representation.
RESULT: Ultimate proved your program to be incorrect!
Received shutdown request...
