 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    3709 locations, 5387 edges
  - StatisticsResult: Encoded RCFG
    3692 locations, 5361 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.16ms. Allocated memory is still 41.9MB. Free memory was 23.3MB in the beginning and 23.2MB in the end (delta: 35.4kB). There was no memory consumed. Max. memory is 4.3GB.
 * Boogie Preprocessor took 99.13ms. Allocated memory is still 41.9MB. Free memory was 17.2MB in the beginning and 16.8MB in the end (delta: 421.2kB). Peak memory consumption was 4.8MB. Max. memory is 4.3GB.
 * ThufvSpecLang took 789.10ms. Allocated memory was 41.9MB in the beginning and 69.2MB in the end (delta: 27.3MB). Free memory was 16.7MB in the beginning and 49.1MB in the end (delta: -32.3MB). Peak memory consumption was 4.6MB. Max. memory is 4.3GB.
 * RCFGBuilder took 1265.31ms. Allocated memory is still 69.2MB. Free memory was 49.1MB in the beginning and 35.3MB in the end (delta: 13.8MB). Peak memory consumption was 24.5MB. Max. memory is 4.3GB.
 * ThufvLTL2Aut took 261.48ms. Allocated memory is still 69.2MB. Free memory was 35.3MB in the beginning and 30.8MB in the end (delta: 4.5MB). Peak memory consumption was 4.2MB. Max. memory is 4.3GB.
 * Büchi Program Product took 43449.19ms. Allocated memory was 69.2MB in the beginning and 354.4MB in the end (delta: 285.2MB). Free memory was 30.8MB in the beginning and 299.4MB in the end (delta: -268.7MB). Peak memory consumption was 219.1MB. Max. memory is 4.3GB.
 * BlockEncodingV2 took 294.38ms. Allocated memory is still 354.4MB. Free memory was 299.4MB in the beginning and 214.0MB in the end (delta: 85.5MB). Peak memory consumption was 84.9MB. Max. memory is 4.3GB.
 * BuchiAutomizer took 632421.37ms. Allocated memory was 354.4MB in the beginning and 1.8GB in the end (delta: 1.4GB). Free memory was 214.0MB in the beginning and 401.0MB in the end (delta: -187.0MB). Peak memory consumption was 1.8GB. Max. memory is 4.3GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    5 locations, 14 edges
  - StatisticsResult: Initial RCFG
    614 locations, 732 edges
  - StatisticsResult: BuchiProgram size
    3709 locations, 5387 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 7 terminating modules (7 trivial, 0 deterministic, 0 nondeterministic) and one nonterminating remainder module.7 modules have a trivial ranking function, the largest among these consists of 18 locations. The remainder module has 21137 locations.
  - StatisticsResult: Timing statistics
    BüchiAutomizer plugin needed 632.2s and 8 iterations.  TraceHistogramMax:1. Analysis of lassos took 336.6s. Construction of modules took 228.3s. Büchi inclusion checks took 64.9s. Highest rank in rank-based complementation 0. Minimization of det autom 7. Minimization of nondet autom 0. Automata minimization 1.1s AutomataMinimizationTime, 7 MinimizatonAttempts, 5078 StatesRemovedByMinimization, 7 NontrivialMinimizations. Non-live state removal took 0.4s Buchi closure took 0.0s. Biggest automaton had -1 states and ocurred in iteration -1.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 0 mSolverCounterUnknown, 88398 SdHoareTripleChecker+Valid, 242.0s IncrementalHoareTripleChecker+Time, 0 mSdLazyCounter, 88152 mSDsluCounter, 79988 SdHoareTripleChecker+Invalid, 228.4s Time, 0 mProtectedAction, 0 SdHoareTripleChecker+Unchecked, 0 IncrementalHoareTripleChecker+Unchecked, 44664 mSDsCounter, 31719 IncrementalHoareTripleChecker+Valid, 0 mProtectedPredicate, 147994 IncrementalHoareTripleChecker+Invalid, 179713 SdHoareTripleChecker+Unknown, 0 mSolverCounterNotChecked, 31719 mSolverCounterUnsat, 35395 mSDtfsCounter, 147994 mSolverCounterSat, 2.0s SdHoareTripleChecker+Time, 0 IncrementalHoareTripleChecker+Unknown	LassoAnalysisResults: nont1 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU7 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	InitialAbstractionConstructionTime: 0.0s
  - LTLInfiniteCounterExampleResult [Line: 1171]: Violation of LTL property !((( []((_p4ltl_7 == true)) )) && (( ( ( ( ( ( []((pit_table_0.isApplied == true && _p4ltl_8 == true ==> pit_table_0.isApplied == true && readPit(updatePit_table_0.isApplied == true && _p4ltl_11 == true ==> updatePit_table_0.isApplied == true && _drop_6.isApplied == true)ntry.isApplied == true)) ) && ( []((pit_table_0.isApplied == true && _p4ltl_9 == true ==> pit_table_0.isApplied == true && cleanPit(updatePit_table_0.isApplied == true && _p4ltl_11 == true ==> updatePit_table_0.isApplied == true && _drop_6.isApplied == true)ntry.isApplied == true)) ) ) && ( []((updatePit_table_0.isApplied == true && _p4ltl_10 == true ==> updatePit_table_0.isApplied == true && updatePit_entry.isApplied == true)) ) ) && ( []((updatePit_table_0.isApplied == true && _p4ltl_11 == true ==> updatePit_table_0.isApplied == true && _drop_6.isApplied == true)) ) ) && ( []((routeData_table_0.isApplied == true && _p4ltl_13 == true ==> (routeData_table_0.isApplied == true && setOutput(routeData_table_0.isApplied == true && _p4ltl_15 == true ==> (routeData_table_0.isApplied == true && setOutputIface.isApplied == true) && _p4ltl_14 == true)face.isApplied == true) && _p4ltl_12 == true)) ) ) && ( []((routeData_table_0.isApplied == true && _p4ltl_15 == true ==> (routeData_table_0.isApplied == true && setOutputIface.isApplied == true) && _p4ltl_14 == true)) ) ))) || ( ( [](( (_p4ltl_6 == true) ==> ( ( [](((_p4ltl_5 == true && _p4ltl_4 == true) && drop)) ) || ( ((_p4ltl_3 == true && _p4ltl_2 == true) && drop) U (_p4ltl_1 == true && _p4ltl_0 == true) ) ) )) ))
    Found an infinite, lasso-shaped execution that violates the LTL property !((( []((_p4ltl_7 == true)) )) && (( ( ( ( ( ( []((pit_table_0.isApplied == true && _p4ltl_8 == true ==> pit_table_0.isApplied == true && readPit(updatePit_table_0.isApplied == true && _p4ltl_11 == true ==> updatePit_table_0.isApplied == true && _drop_6.isApplied == true)ntry.isApplied == true)) ) && ( []((pit_table_0.isApplied == true && _p4ltl_9 == true ==> pit_table_0.isApplied == true && cleanPit(updatePit_table_0.isApplied == true && _p4ltl_11 == true ==> updatePit_table_0.isApplied == true && _drop_6.isApplied == true)ntry.isApplied == true)) ) ) && ( []((updatePit_table_0.isApplied == true && _p4ltl_10 == true ==> updatePit_table_0.isApplied == true && updatePit_entry.isApplied == true)) ) ) && ( []((updatePit_table_0.isApplied == true && _p4ltl_11 == true ==> updatePit_table_0.isApplied == true && _drop_6.isApplied == true)) ) ) && ( []((routeData_table_0.isApplied == true && _p4ltl_13 == true ==> (routeData_table_0.isApplied == true && setOutput(routeData_table_0.isApplied == true && _p4ltl_15 == true ==> (routeData_table_0.isApplied == true && setOutputIface.isApplied == true) && _p4ltl_14 == true)face.isApplied == true) && _p4ltl_12 == true)) ) ) && ( []((routeData_table_0.isApplied == true && _p4ltl_15 == true ==> (routeData_table_0.isApplied == true && setOutputIface.isApplied == true) && _p4ltl_14 == true)) ) ))) || ( ( [](( (_p4ltl_6 == true) ==> ( ( [](((_p4ltl_5 == true && _p4ltl_4 == true) && drop)) ) || ( ((_p4ltl_3 == true && _p4ltl_2 == true) && drop) U (_p4ltl_1 == true && _p4ltl_0 == true) ) ) )) )).
Stem:
[L703]   CALL        call mainProcedure();
[L1170]  COND TRUE   true
[L1171]  CALL        call main();
[L1135]  CALL        call havocProcedure();
[L861]               drop := false;
[L862]               forward := false;
[L863]               standard_metadata.instance_type := 0;
[L864]               standard_metadata.packet_length := 0;
[L865]               standard_metadata.enq_timestamp := 0;
[L866]               standard_metadata.enq_qdepth := 0;
[L867]               standard_metadata.deq_timedelta := 0;
[L868]               standard_metadata.deq_qdepth := 0;
[L869]               standard_metadata.ingress_global_timestamp := 0;
[L870]               standard_metadata.egress_global_timestamp := 0;
[L871]               standard_metadata.mcast_grp := 0;
[L872]               standard_metadata.egress_rid := 0;
[L873]               standard_metadata.checksum_error := 0;
[L874]               standard_metadata.priority := 0;
[L875]               meta.comp_metadata.c1 := 0;
[L876]               meta.comp_metadata.c2 := 0;
[L877]               meta.comp_metadata.c3 := 0;
[L878]               meta.comp_metadata.c4 := 0;
[L879]               meta.flow_metadata.isInPIT := 0;
[L880]               meta.flow_metadata.hasFIBentry := 0;
[L881]               meta.flow_metadata.packetType := 0;
[L882]               meta.name_metadata.name_hash := 0;
[L883]               meta.name_metadata.namesize := 0;
[L884]               meta.name_metadata.namemask := 0;
[L885]               meta.name_metadata.tmp := 0;
[L886]               meta.name_metadata.components := 0;
[L887]               meta.pit_metadata.tmp := 0;
[L888]               hdr.big_content.valid := false;
[L889]               emit[hdr.big_content] := false;
[L890]               havoc hdr.big_content.tl_code;
[L891]               assume 0 <= hdr.big_content.tl_code && hdr.big_content.tl_code <= 256;
[L892]               havoc hdr.big_content.tl_len_code;
[L893]               assume 0 <= hdr.big_content.tl_len_code && hdr.big_content.tl_len_code <= 256;
[L894]               havoc hdr.big_content.tl_length;
[L895]               assume 0 <= hdr.big_content.tl_length && hdr.big_content.tl_length <= 4294967296;
[L896]               hdr.big_name.valid := false;
[L897]               emit[hdr.big_name] := false;
[L898]               havoc hdr.big_name.tl_code;
[L899]               assume 0 <= hdr.big_name.tl_code && hdr.big_name.tl_code <= 256;
[L900]               havoc hdr.big_name.tl_len_code;
[L901]               assume 0 <= hdr.big_name.tl_len_code && hdr.big_name.tl_len_code <= 256;
[L902]               havoc hdr.big_name.tl_length;
[L903]               assume 0 <= hdr.big_name.tl_length && hdr.big_name.tl_length <= 4294967296;
[L904]               hdr.big_tlv0.valid := false;
[L905]               emit[hdr.big_tlv0] := false;
[L906]               havoc hdr.big_tlv0.tl_code;
[L907]               assume 0 <= hdr.big_tlv0.tl_code && hdr.big_tlv0.tl_code <= 256;
[L908]               havoc hdr.big_tlv0.tl_len_code;
[L909]               assume 0 <= hdr.big_tlv0.tl_len_code && hdr.big_tlv0.tl_len_code <= 256;
[L910]               havoc hdr.big_tlv0.tl_length;
[L911]               assume 0 <= hdr.big_tlv0.tl_length && hdr.big_tlv0.tl_length <= 4294967296;
[L912]               hdr.ethernet.valid := false;
[L913]               emit[hdr.ethernet] := false;
[L914]               havoc hdr.ethernet.dstAddr;
[L915]               assume 0 <= hdr.ethernet.dstAddr && hdr.ethernet.dstAddr <= 281474976710656;
[L916]               havoc hdr.ethernet.srcAddr;
[L917]               assume 0 <= hdr.ethernet.srcAddr && hdr.ethernet.srcAddr <= 281474976710656;
[L918]               havoc hdr.ethernet.etherType;
[L919]               assume 0 <= hdr.ethernet.etherType && hdr.ethernet.etherType <= 65536;
[L920]               hdr.huge_content.valid := false;
[L921]               emit[hdr.huge_content] := false;
[L922]               havoc hdr.huge_content.tl_code;
[L923]               assume 0 <= hdr.huge_content.tl_code && hdr.huge_content.tl_code <= 256;
[L924]               havoc hdr.huge_content.tl_len_code;
[L925]               assume 0 <= hdr.huge_content.tl_len_code && hdr.huge_content.tl_len_code <= 256;
[L926]               havoc hdr.huge_content.tl_length;
[L927]               assume 0 <= hdr.huge_content.tl_length && hdr.huge_content.tl_length <= 1125899906842624 * 16384;
[L928]               hdr.huge_name.valid := false;
[L929]               emit[hdr.huge_name] := false;
[L930]               havoc hdr.huge_name.tl_code;
[L931]               assume 0 <= hdr.huge_name.tl_code && hdr.huge_name.tl_code <= 256;
[L932]               havoc hdr.huge_name.tl_len_code;
[L933]               assume 0 <= hdr.huge_name.tl_len_code && hdr.huge_name.tl_len_code <= 256;
[L934]               havoc hdr.huge_name.tl_length;
[L935]               assume 0 <= hdr.huge_name.tl_length && hdr.huge_name.tl_length <= 1125899906842624 * 16384;
[L936]               hdr.huge_tlv0.valid := false;
[L937]               emit[hdr.huge_tlv0] := false;
[L938]               havoc hdr.huge_tlv0.tl_code;
[L939]               assume 0 <= hdr.huge_tlv0.tl_code && hdr.huge_tlv0.tl_code <= 256;
[L940]               havoc hdr.huge_tlv0.tl_len_code;
[L941]               assume 0 <= hdr.huge_tlv0.tl_len_code && hdr.huge_tlv0.tl_len_code <= 256;
[L942]               havoc hdr.huge_tlv0.tl_length;
[L943]               assume 0 <= hdr.huge_tlv0.tl_length && hdr.huge_tlv0.tl_length <= 1125899906842624 * 16384;
[L944]               hdr.isha256.valid := false;
[L945]               emit[hdr.isha256] := false;
[L946]               havoc hdr.isha256.tlv_code;
[L947]               assume 0 <= hdr.isha256.tlv_code && hdr.isha256.tlv_code <= 256;
[L948]               havoc hdr.isha256.tlv_length;
[L949]               assume 0 <= hdr.isha256.tlv_length && hdr.isha256.tlv_length <= 256;
[L950]               havoc hdr.isha256.tlv_value;
[L951]               hdr.lifetime.valid := false;
[L952]               emit[hdr.lifetime] := false;
[L953]               havoc hdr.lifetime.tlv_code;
[L954]               assume 0 <= hdr.lifetime.tlv_code && hdr.lifetime.tlv_code <= 256;
[L955]               havoc hdr.lifetime.tlv_length;
[L956]               assume 0 <= hdr.lifetime.tlv_length && hdr.lifetime.tlv_length <= 256;
[L957]               havoc hdr.lifetime.tlv_value;
[L958]               hdr.medium_content.valid := false;
[L959]               emit[hdr.medium_content] := false;
[L960]               havoc hdr.medium_content.tl_code;
[L961]               assume 0 <= hdr.medium_content.tl_code && hdr.medium_content.tl_code <= 256;
[L962]               havoc hdr.medium_content.tl_len_code;
[L963]               assume 0 <= hdr.medium_content.tl_len_code && hdr.medium_content.tl_len_code <= 256;
[L964]               havoc hdr.medium_content.tl_length;
[L965]               assume 0 <= hdr.medium_content.tl_length && hdr.medium_content.tl_length <= 65536;
[L966]               hdr.medium_name.valid := false;
[L967]               emit[hdr.medium_name] := false;
[L968]               havoc hdr.medium_name.tl_code;
[L969]               assume 0 <= hdr.medium_name.tl_code && hdr.medium_name.tl_code <= 256;
[L970]               havoc hdr.medium_name.tl_len_code;
[L971]               assume 0 <= hdr.medium_name.tl_len_code && hdr.medium_name.tl_len_code <= 256;
[L972]               havoc hdr.medium_name.tl_length;
[L973]               assume 0 <= hdr.medium_name.tl_length && hdr.medium_name.tl_length <= 65536;
[L974]               hdr.medium_ndnlp.valid := false;
[L975]               emit[hdr.medium_ndnlp] := false;
[L976]               havoc hdr.medium_ndnlp.total;
[L977]               assume 0 <= hdr.medium_ndnlp.total && hdr.medium_ndnlp.total <= 1125899906842624 * 1125899906842624 * 17592186044416;
[L978]               hdr.medium_tlv0.valid := false;
[L979]               emit[hdr.medium_tlv0] := false;
[L980]               havoc hdr.medium_tlv0.tl_code;
[L981]               assume 0 <= hdr.medium_tlv0.tl_code && hdr.medium_tlv0.tl_code <= 256;
[L982]               havoc hdr.medium_tlv0.tl_len_code;
[L983]               assume 0 <= hdr.medium_tlv0.tl_len_code && hdr.medium_tlv0.tl_len_code <= 256;
[L984]               havoc hdr.medium_tlv0.tl_length;
[L985]               assume 0 <= hdr.medium_tlv0.tl_length && hdr.medium_tlv0.tl_length <= 65536;
[L986]               hdr.metainfo.valid := false;
[L987]               emit[hdr.metainfo] := false;
[L988]               havoc hdr.metainfo.tlv_code;
[L989]               assume 0 <= hdr.metainfo.tlv_code && hdr.metainfo.tlv_code <= 256;
[L990]               havoc hdr.metainfo.tlv_length;
[L991]               assume 0 <= hdr.metainfo.tlv_length && hdr.metainfo.tlv_length <= 256;
[L992]               havoc hdr.metainfo.tlv_value;
[L993]               hdr.nonce.valid := false;
[L994]               emit[hdr.nonce] := false;
[L995]               havoc hdr.nonce.tlv_code;
[L996]               assume 0 <= hdr.nonce.tlv_code && hdr.nonce.tlv_code <= 256;
[L997]               havoc hdr.nonce.tlv_length;
[L998]               assume 0 <= hdr.nonce.tlv_length && hdr.nonce.tlv_length <= 256;
[L999]               havoc hdr.nonce.tlv_value;
[L1000]              hdr.signature_info.valid := false;
[L1001]              emit[hdr.signature_info] := false;
[L1002]              havoc hdr.signature_info.tlv_code;
[L1003]              assume 0 <= hdr.signature_info.tlv_code && hdr.signature_info.tlv_code <= 256;
[L1004]              havoc hdr.signature_info.tlv_length;
[L1005]              assume 0 <= hdr.signature_info.tlv_length && hdr.signature_info.tlv_length <= 256;
[L1006]              havoc hdr.signature_info.tlv_value;
[L1007]              hdr.signature_value.valid := false;
[L1008]              emit[hdr.signature_value] := false;
[L1009]              havoc hdr.signature_value.tlv_code;
[L1010]              assume 0 <= hdr.signature_value.tlv_code && hdr.signature_value.tlv_code <= 256;
[L1011]              havoc hdr.signature_value.tlv_length;
[L1012]              assume 0 <= hdr.signature_value.tlv_length && hdr.signature_value.tlv_length <= 256;
[L1013]              havoc hdr.signature_value.tlv_value;
[L1014]              hdr.small_content.valid := false;
[L1015]              emit[hdr.small_content] := false;
[L1016]              havoc hdr.small_content.tl_code;
[L1017]              assume 0 <= hdr.small_content.tl_code && hdr.small_content.tl_code <= 256;
[L1018]              havoc hdr.small_content.tl_length;
[L1019]              assume 0 <= hdr.small_content.tl_length && hdr.small_content.tl_length <= 256;
[L1020]              hdr.small_name.valid := false;
[L1021]              emit[hdr.small_name] := false;
[L1022]              havoc hdr.small_name.tl_code;
[L1023]              assume 0 <= hdr.small_name.tl_code && hdr.small_name.tl_code <= 256;
[L1024]              havoc hdr.small_name.tl_length;
[L1025]              assume 0 <= hdr.small_name.tl_length && hdr.small_name.tl_length <= 256;
[L1026]              hdr.small_ndnlp.valid := false;
[L1027]              emit[hdr.small_ndnlp] := false;
[L1028]              havoc hdr.small_ndnlp.total;
[L1029]              assume 0 <= hdr.small_ndnlp.total && hdr.small_ndnlp.total <= 1125899906842624 * 1125899906842624 * 4096;
[L1030]              hdr.small_tlv0.valid := false;
[L1031]              emit[hdr.small_tlv0] := false;
[L1032]              havoc hdr.small_tlv0.tl_code;
[L1033]              assume 0 <= hdr.small_tlv0.tl_code && hdr.small_tlv0.tl_code <= 256;
[L1034]              havoc hdr.small_tlv0.tl_length;
[L1035]              assume 0 <= hdr.small_tlv0.tl_length && hdr.small_tlv0.tl_length <= 256;
[L1036]              hdr.components.last.valid := false;
[L1037]              emit[hdr.components.last] := false;
[L1038]              havoc hdr.components.last.tlv_code;
[L1039]              assume 0 <= hdr.components.last.tlv_code && hdr.components.last.tlv_code <= 256;
[L1040]              havoc hdr.components.last.tlv_length;
[L1041]              assume 0 <= hdr.components.last.tlv_length && hdr.components.last.tlv_length <= 256;
[L1042]              havoc hdr.components.last.tlv_value;
[L1043]              hdr.components.0.valid := false;
[L1044]              emit[hdr.components.0] := false;
[L1045]              havoc hdr.components.0.tlv_code;
[L1046]              assume 0 <= hdr.components.0.tlv_code && hdr.components.0.tlv_code <= 256;
[L1047]              havoc hdr.components.0.tlv_length;
[L1048]              assume 0 <= hdr.components.0.tlv_length && hdr.components.0.tlv_length <= 256;
[L1049]              havoc hdr.components.0.tlv_value;
[L1050]              hdr.components.1.valid := false;
[L1051]              emit[hdr.components.1] := false;
[L1052]              havoc hdr.components.1.tlv_code;
[L1053]              assume 0 <= hdr.components.1.tlv_code && hdr.components.1.tlv_code <= 256;
[L1054]              havoc hdr.components.1.tlv_length;
[L1055]              assume 0 <= hdr.components.1.tlv_length && hdr.components.1.tlv_length <= 256;
[L1056]              havoc hdr.components.1.tlv_value;
[L1057]              hdr.components.2.valid := false;
[L1058]              emit[hdr.components.2] := false;
[L1059]              havoc hdr.components.2.tlv_code;
[L1060]              assume 0 <= hdr.components.2.tlv_code && hdr.components.2.tlv_code <= 256;
[L1061]              havoc hdr.components.2.tlv_length;
[L1062]              assume 0 <= hdr.components.2.tlv_length && hdr.components.2.tlv_length <= 256;
[L1063]              havoc hdr.components.2.tlv_value;
[L1064]              hdr.components.3.valid := false;
[L1065]              emit[hdr.components.3] := false;
[L1066]              havoc hdr.components.3.tlv_code;
[L1067]              assume 0 <= hdr.components.3.tlv_code && hdr.components.3.tlv_code <= 256;
[L1068]              havoc hdr.components.3.tlv_length;
[L1069]              assume 0 <= hdr.components.3.tlv_length && hdr.components.3.tlv_length <= 256;
[L1070]              havoc hdr.components.3.tlv_value;
[L1071]              hdr.components.4.valid := false;
[L1072]              emit[hdr.components.4] := false;
[L1073]              havoc hdr.components.4.tlv_code;
[L1074]              assume 0 <= hdr.components.4.tlv_code && hdr.components.4.tlv_code <= 256;
[L1075]              havoc hdr.components.4.tlv_length;
[L1076]              assume 0 <= hdr.components.4.tlv_length && hdr.components.4.tlv_length <= 256;
[L1077]              havoc hdr.components.4.tlv_value;
[L1078]              tmp_hdr_6.valid := false;
[L1079]              tmp_hdr_7.valid := false;
[L1080]              tmp_hdr_8.valid := false;
[L1081]              tmp_hdr_9.valid := false;
[L1082]              tmp_hdr_10.valid := false;
[L1083]              tmp_hdr_11.valid := false;
[L1084]              tmp_hdr_12.valid := false;
[L1085]              NoAction_0.isApplied := false;
[L1086]              NoAction_7.isApplied := false;
[L1087]              NoAction_8.isApplied := false;
[L1088]              NoAction_9.isApplied := false;
[L1089]              NoAction_10.isApplied := false;
[L1090]              NoAction_11.isApplied := false;
[L1091]              storeNumOfComponents.isApplied := false;
[L1092]              _drop.isApplied := false;
[L1093]              _drop_4.isApplied := false;
[L1094]              _drop_5.isApplied := false;
[L1095]              _drop_6.isApplied := false;
[L1096]              set_egr.isApplied := false;
[L1097]              computeStoreTablesIndex.isApplied := false;
[L1098]              readPitEntry.isApplied := false;
[L1099]              cleanPitEntry.isApplied := false;
[L1100]              setOutputIface.isApplied := false;
[L1101]              updatePit_entry.isApplied := false;
[L1102]              count_table_0.isApplied := false;
[L1103]              havoc count_table_0.storeNumOfComponents.total;
[L1104]              fib_table_0.isApplied := false;
[L1105]              havoc fib_table_0.set_egr.egress_spec;
[L1106]              hashName_table_0.isApplied := false;
[L1107]              pit_table_0.isApplied := false;
[L1108]              routeData_table_0.isApplied := false;
[L1109]              havoc routeData_table_0.setOutputIface.out_iface;
[L1110]              updatePit_table_0.isApplied := false;
[L1135]  RET         call havocProcedure();
[L1136]  CALL        call _parser_ParserImpl();
[L746]   CALL        call start();
[L1606]  CALL        call parse_ethernet();
[L1251]              hdr.ethernet.valid := true;
[L1252]              tmp_5 := hdr.ethernet.etherType;
[L1253]              havoc tmp_7;
[L1254]              tmp_6 := tmp_7;
[L1255]  COND FALSE  !(tmp_5 % 65535 == 34340 && tmp_6 % 255 == 80)
[L1258]  COND FALSE  !(tmp_5 % 65535 == 34340 && true)
[L1606]  RET         call parse_ethernet();
[L746]   RET         call start();
[L1136]  RET         call _parser_ParserImpl();
[L1137]  CALL        call verifyChecksum();
[L1137]  RET         call verifyChecksum();
[L1138]  CALL        call ingress();
[L1117]  CALL        call count_table_0.apply();
[L800]               count_table_0.hdr.components.0.valid := hdr.components.0.valid;
[L801]               count_table_0.hdr.components.1.valid := hdr.components.1.valid;
[L802]               count_table_0.hdr.components.2.valid := hdr.components.2.valid;
[L803]               count_table_0.hdr.components.3.valid := hdr.components.3.valid;
[L804]               count_table_0.hdr.components.4.valid := hdr.components.4.valid;
[L806]               count_table_0.isApplied := true;
[L807]   COND TRUE   count_table_0.action_run == count_table_0.action.storeNumOfComponents
[L808]   CALL        call storeNumOfComponents(count_table_0.storeNumOfComponents.total);
[L1614]              storeNumOfComponents.isApplied := true;
[L1615]              meta.name_metadata.components := total;
[L808]   RET         call storeNumOfComponents(count_table_0.storeNumOfComponents.total);
[L1117]  RET         call count_table_0.apply();
[L1118]  COND TRUE   meta.name_metadata.components != 0
[L1119]  CALL        call hashName_table_0.apply();
[L853]               hashName_table_0.isApplied := true;
[L854]   COND TRUE   hashName_table_0.action_run == hashName_table_0.action.computeStoreTablesIndex
[L855]   CALL        call computeStoreTablesIndex();
[L774]               computeStoreTablesIndex.isApplied := true;
[L776]               havoc meta.name_metadata.name_hash;
[L777]               assume meta.name_metadata.name_hash >= 0 && 65536 >= meta.name_metadata.name_hash;
[L779]               havoc meta.comp_metadata.c1;
[L780]               assume meta.comp_metadata.c1 >= 0 && 65536 >= meta.comp_metadata.c1;
[L782]               havoc meta.comp_metadata.c2;
[L783]               assume meta.comp_metadata.c2 >= 0 && 65536 >= meta.comp_metadata.c2;
[L785]               havoc meta.comp_metadata.c3;
[L786]               assume meta.comp_metadata.c3 >= 0 && 65536 >= meta.comp_metadata.c3;
[L788]               havoc meta.comp_metadata.c4;
[L789]               assume meta.comp_metadata.c4 >= 0 && 65536 >= meta.comp_metadata.c4;
[L855]   RET         call computeStoreTablesIndex();
[L1119]  RET         call hashName_table_0.apply();
[L1120]  CALL        call pit_table_0.apply();
[L1498]              pit_table_0.meta.flow_metadata.packetType := meta.flow_metadata.packetType;
[L1500]              pit_table_0.isApplied := true;
[L1501]  COND TRUE   pit_table_0.action_run == pit_table_0.action.readPitEntry
[L1502]  CALL        call readPitEntry();
[L1514]              readPitEntry.isApplied := true;
[L1516]              meta.flow_metadata.isInPIT := pit_r[meta.name_metadata.name_hash];
[L1502]  RET         call readPitEntry();
[L1120]  RET         call pit_table_0.apply();
[L1121]  COND FALSE  !(meta.flow_metadata.packetType == 5)
[L1128]  CALL        call routeData_table_0.apply();
[L1530]              routeData_table_0.meta.flow_metadata.isInPIT := meta.flow_metadata.isInPIT;
[L1532]              routeData_table_0.isApplied := true;
[L1533]  COND TRUE   routeData_table_0.action_run == routeData_table_0.action.setOutputIface
[L1534]  CALL        call setOutputIface(routeData_table_0.setOutputIface.out_iface);
[L1549]              setOutputIface.isApplied := true;
[L1550]              standard_metadata.egress_spec := out_iface;
[L1551]              standard_metadata.egress_port := out_iface;
[L1552]              forward := true;
[L1534]  RET         call setOutputIface(routeData_table_0.setOutputIface.out_iface);
[L1128]  RET         call routeData_table_0.apply();
[L1138]  RET         call ingress();
[L1139]  CALL        call egress();
[L1139]  RET         call egress();
[L1140]  CALL        call computeChecksum();
[L1140]  RET         call computeChecksum();
[L1141]  COND FALSE  !(forward == false)
[L1144]              _p4ltl_0 := meta.flow_metadata.packetType == 5;
[L1145]              _p4ltl_1 := meta.name_metadata.name_hash == _p4ltl_free_a;
[L1146]              _p4ltl_2 := meta.flow_metadata.packetType == 6;
[L1147]              _p4ltl_3 := meta.name_metadata.name_hash == _p4ltl_free_a;
[L1148]              _p4ltl_4 := meta.flow_metadata.packetType == 6;
[L1149]              _p4ltl_5 := meta.name_metadata.name_hash == _p4ltl_free_a;
[L1150]              _p4ltl_6 := pit_r[_p4ltl_free_a] == 0;
[L1151]              _p4ltl_7 := meta.name_metadata.components != 0;
[L1152]              _p4ltl_8 := pit_table_0.meta.flow_metadata.packetType == 5;
[L1153]              _p4ltl_9 := pit_table_0.meta.flow_metadata.packetType == 6;
[L1154]              _p4ltl_10 := updatePit_table_0.meta.flow_metadata.hasFIBentry == 1;
[L1155]              _p4ltl_11 := updatePit_table_0.meta.flow_metadata.hasFIBentry == 1;
[L1156]              _p4ltl_12 := routeData_table_0.setOutputIface.out_iface == 0;
[L1157]              _p4ltl_13 := routeData_table_0.meta.flow_metadata.isInPIT == 2;
[L1158]              _p4ltl_14 := routeData_table_0.setOutputIface.out_iface == 1;
[L1159]              _p4ltl_15 := routeData_table_0.meta.flow_metadata.isInPIT == 1;
[L1171]  RET         call main();
Loop:
[L1170]  COND TRUE   true
[L1171]  CALL        call main();
[L1135]  CALL        call havocProcedure();
[L861]               drop := false;
[L862]               forward := false;
[L863]               standard_metadata.instance_type := 0;
[L864]               standard_metadata.packet_length := 0;
[L865]               standard_metadata.enq_timestamp := 0;
[L866]               standard_metadata.enq_qdepth := 0;
[L867]               standard_metadata.deq_timedelta := 0;
[L868]               standard_metadata.deq_qdepth := 0;
[L869]               standard_metadata.ingress_global_timestamp := 0;
[L870]               standard_metadata.egress_global_timestamp := 0;
[L871]               standard_metadata.mcast_grp := 0;
[L872]               standard_metadata.egress_rid := 0;
[L873]               standard_metadata.checksum_error := 0;
[L874]               standard_metadata.priority := 0;
[L875]               meta.comp_metadata.c1 := 0;
[L876]               meta.comp_metadata.c2 := 0;
[L877]               meta.comp_metadata.c3 := 0;
[L878]               meta.comp_metadata.c4 := 0;
[L879]               meta.flow_metadata.isInPIT := 0;
[L880]               meta.flow_metadata.hasFIBentry := 0;
[L881]               meta.flow_metadata.packetType := 0;
[L882]               meta.name_metadata.name_hash := 0;
[L883]               meta.name_metadata.namesize := 0;
[L884]               meta.name_metadata.namemask := 0;
[L885]               meta.name_metadata.tmp := 0;
[L886]               meta.name_metadata.components := 0;
[L887]               meta.pit_metadata.tmp := 0;
[L888]               hdr.big_content.valid := false;
[L889]               emit[hdr.big_content] := false;
[L890]               havoc hdr.big_content.tl_code;
[L891]               assume 0 <= hdr.big_content.tl_code && hdr.big_content.tl_code <= 256;
[L892]               havoc hdr.big_content.tl_len_code;
[L893]               assume 0 <= hdr.big_content.tl_len_code && hdr.big_content.tl_len_code <= 256;
[L894]               havoc hdr.big_content.tl_length;
[L895]               assume 0 <= hdr.big_content.tl_length && hdr.big_content.tl_length <= 4294967296;
[L896]               hdr.big_name.valid := false;
[L897]               emit[hdr.big_name] := false;
[L898]               havoc hdr.big_name.tl_code;
[L899]               assume 0 <= hdr.big_name.tl_code && hdr.big_name.tl_code <= 256;
[L900]               havoc hdr.big_name.tl_len_code;
[L901]               assume 0 <= hdr.big_name.tl_len_code && hdr.big_name.tl_len_code <= 256;
[L902]               havoc hdr.big_name.tl_length;
[L903]               assume 0 <= hdr.big_name.tl_length && hdr.big_name.tl_length <= 4294967296;
[L904]               hdr.big_tlv0.valid := false;
[L905]               emit[hdr.big_tlv0] := false;
[L906]               havoc hdr.big_tlv0.tl_code;
[L907]               assume 0 <= hdr.big_tlv0.tl_code && hdr.big_tlv0.tl_code <= 256;
[L908]               havoc hdr.big_tlv0.tl_len_code;
[L909]               assume 0 <= hdr.big_tlv0.tl_len_code && hdr.big_tlv0.tl_len_code <= 256;
[L910]               havoc hdr.big_tlv0.tl_length;
[L911]               assume 0 <= hdr.big_tlv0.tl_length && hdr.big_tlv0.tl_length <= 4294967296;
[L912]               hdr.ethernet.valid := false;
[L913]               emit[hdr.ethernet] := false;
[L914]               havoc hdr.ethernet.dstAddr;
[L915]               assume 0 <= hdr.ethernet.dstAddr && hdr.ethernet.dstAddr <= 281474976710656;
[L916]               havoc hdr.ethernet.srcAddr;
[L917]               assume 0 <= hdr.ethernet.srcAddr && hdr.ethernet.srcAddr <= 281474976710656;
[L918]               havoc hdr.ethernet.etherType;
[L919]               assume 0 <= hdr.ethernet.etherType && hdr.ethernet.etherType <= 65536;
[L920]               hdr.huge_content.valid := false;
[L921]               emit[hdr.huge_content] := false;
[L922]               havoc hdr.huge_content.tl_code;
[L923]               assume 0 <= hdr.huge_content.tl_code && hdr.huge_content.tl_code <= 256;
[L924]               havoc hdr.huge_content.tl_len_code;
[L925]               assume 0 <= hdr.huge_content.tl_len_code && hdr.huge_content.tl_len_code <= 256;
[L926]               havoc hdr.huge_content.tl_length;
[L927]               assume 0 <= hdr.huge_content.tl_length && hdr.huge_content.tl_length <= 1125899906842624 * 16384;
[L928]               hdr.huge_name.valid := false;
[L929]               emit[hdr.huge_name] := false;
[L930]               havoc hdr.huge_name.tl_code;
[L931]               assume 0 <= hdr.huge_name.tl_code && hdr.huge_name.tl_code <= 256;
[L932]               havoc hdr.huge_name.tl_len_code;
[L933]               assume 0 <= hdr.huge_name.tl_len_code && hdr.huge_name.tl_len_code <= 256;
[L934]               havoc hdr.huge_name.tl_length;
[L935]               assume 0 <= hdr.huge_name.tl_length && hdr.huge_name.tl_length <= 1125899906842624 * 16384;
[L936]               hdr.huge_tlv0.valid := false;
[L937]               emit[hdr.huge_tlv0] := false;
[L938]               havoc hdr.huge_tlv0.tl_code;
[L939]               assume 0 <= hdr.huge_tlv0.tl_code && hdr.huge_tlv0.tl_code <= 256;
[L940]               havoc hdr.huge_tlv0.tl_len_code;
[L941]               assume 0 <= hdr.huge_tlv0.tl_len_code && hdr.huge_tlv0.tl_len_code <= 256;
[L942]               havoc hdr.huge_tlv0.tl_length;
[L943]               assume 0 <= hdr.huge_tlv0.tl_length && hdr.huge_tlv0.tl_length <= 1125899906842624 * 16384;
[L944]               hdr.isha256.valid := false;
[L945]               emit[hdr.isha256] := false;
[L946]               havoc hdr.isha256.tlv_code;
[L947]               assume 0 <= hdr.isha256.tlv_code && hdr.isha256.tlv_code <= 256;
[L948]               havoc hdr.isha256.tlv_length;
[L949]               assume 0 <= hdr.isha256.tlv_length && hdr.isha256.tlv_length <= 256;
[L950]               havoc hdr.isha256.tlv_value;
[L951]               hdr.lifetime.valid := false;
[L952]               emit[hdr.lifetime] := false;
[L953]               havoc hdr.lifetime.tlv_code;
[L954]               assume 0 <= hdr.lifetime.tlv_code && hdr.lifetime.tlv_code <= 256;
[L955]               havoc hdr.lifetime.tlv_length;
[L956]               assume 0 <= hdr.lifetime.tlv_length && hdr.lifetime.tlv_length <= 256;
[L957]               havoc hdr.lifetime.tlv_value;
[L958]               hdr.medium_content.valid := false;
[L959]               emit[hdr.medium_content] := false;
[L960]               havoc hdr.medium_content.tl_code;
[L961]               assume 0 <= hdr.medium_content.tl_code && hdr.medium_content.tl_code <= 256;
[L962]               havoc hdr.medium_content.tl_len_code;
[L963]               assume 0 <= hdr.medium_content.tl_len_code && hdr.medium_content.tl_len_code <= 256;
[L964]               havoc hdr.medium_content.tl_length;
[L965]               assume 0 <= hdr.medium_content.tl_length && hdr.medium_content.tl_length <= 65536;
[L966]               hdr.medium_name.valid := false;
[L967]               emit[hdr.medium_name] := false;
[L968]               havoc hdr.medium_name.tl_code;
[L969]               assume 0 <= hdr.medium_name.tl_code && hdr.medium_name.tl_code <= 256;
[L970]               havoc hdr.medium_name.tl_len_code;
[L971]               assume 0 <= hdr.medium_name.tl_len_code && hdr.medium_name.tl_len_code <= 256;
[L972]               havoc hdr.medium_name.tl_length;
[L973]               assume 0 <= hdr.medium_name.tl_length && hdr.medium_name.tl_length <= 65536;
[L974]               hdr.medium_ndnlp.valid := false;
[L975]               emit[hdr.medium_ndnlp] := false;
[L976]               havoc hdr.medium_ndnlp.total;
[L977]               assume 0 <= hdr.medium_ndnlp.total && hdr.medium_ndnlp.total <= 1125899906842624 * 1125899906842624 * 17592186044416;
[L978]               hdr.medium_tlv0.valid := false;
[L979]               emit[hdr.medium_tlv0] := false;
[L980]               havoc hdr.medium_tlv0.tl_code;
[L981]               assume 0 <= hdr.medium_tlv0.tl_code && hdr.medium_tlv0.tl_code <= 256;
[L982]               havoc hdr.medium_tlv0.tl_len_code;
[L983]               assume 0 <= hdr.medium_tlv0.tl_len_code && hdr.medium_tlv0.tl_len_code <= 256;
[L984]               havoc hdr.medium_tlv0.tl_length;
[L985]               assume 0 <= hdr.medium_tlv0.tl_length && hdr.medium_tlv0.tl_length <= 65536;
[L986]               hdr.metainfo.valid := false;
[L987]               emit[hdr.metainfo] := false;
[L988]               havoc hdr.metainfo.tlv_code;
[L989]               assume 0 <= hdr.metainfo.tlv_code && hdr.metainfo.tlv_code <= 256;
[L990]               havoc hdr.metainfo.tlv_length;
[L991]               assume 0 <= hdr.metainfo.tlv_length && hdr.metainfo.tlv_length <= 256;
[L992]               havoc hdr.metainfo.tlv_value;
[L993]               hdr.nonce.valid := false;
[L994]               emit[hdr.nonce] := false;
[L995]               havoc hdr.nonce.tlv_code;
[L996]               assume 0 <= hdr.nonce.tlv_code && hdr.nonce.tlv_code <= 256;
[L997]               havoc hdr.nonce.tlv_length;
[L998]               assume 0 <= hdr.nonce.tlv_length && hdr.nonce.tlv_length <= 256;
[L999]               havoc hdr.nonce.tlv_value;
[L1000]              hdr.signature_info.valid := false;
[L1001]              emit[hdr.signature_info] := false;
[L1002]              havoc hdr.signature_info.tlv_code;
[L1003]              assume 0 <= hdr.signature_info.tlv_code && hdr.signature_info.tlv_code <= 256;
[L1004]              havoc hdr.signature_info.tlv_length;
[L1005]              assume 0 <= hdr.signature_info.tlv_length && hdr.signature_info.tlv_length <= 256;
[L1006]              havoc hdr.signature_info.tlv_value;
[L1007]              hdr.signature_value.valid := false;
[L1008]              emit[hdr.signature_value] := false;
[L1009]              havoc hdr.signature_value.tlv_code;
[L1010]              assume 0 <= hdr.signature_value.tlv_code && hdr.signature_value.tlv_code <= 256;
[L1011]              havoc hdr.signature_value.tlv_length;
[L1012]              assume 0 <= hdr.signature_value.tlv_length && hdr.signature_value.tlv_length <= 256;
[L1013]              havoc hdr.signature_value.tlv_value;
[L1014]              hdr.small_content.valid := false;
[L1015]              emit[hdr.small_content] := false;
[L1016]              havoc hdr.small_content.tl_code;
[L1017]              assume 0 <= hdr.small_content.tl_code && hdr.small_content.tl_code <= 256;
[L1018]              havoc hdr.small_content.tl_length;
[L1019]              assume 0 <= hdr.small_content.tl_length && hdr.small_content.tl_length <= 256;
[L1020]              hdr.small_name.valid := false;
[L1021]              emit[hdr.small_name] := false;
[L1022]              havoc hdr.small_name.tl_code;
[L1023]              assume 0 <= hdr.small_name.tl_code && hdr.small_name.tl_code <= 256;
[L1024]              havoc hdr.small_name.tl_length;
[L1025]              assume 0 <= hdr.small_name.tl_length && hdr.small_name.tl_length <= 256;
[L1026]              hdr.small_ndnlp.valid := false;
[L1027]              emit[hdr.small_ndnlp] := false;
[L1028]              havoc hdr.small_ndnlp.total;
[L1029]              assume 0 <= hdr.small_ndnlp.total && hdr.small_ndnlp.total <= 1125899906842624 * 1125899906842624 * 4096;
[L1030]              hdr.small_tlv0.valid := false;
[L1031]              emit[hdr.small_tlv0] := false;
[L1032]              havoc hdr.small_tlv0.tl_code;
[L1033]              assume 0 <= hdr.small_tlv0.tl_code && hdr.small_tlv0.tl_code <= 256;
[L1034]              havoc hdr.small_tlv0.tl_length;
[L1035]              assume 0 <= hdr.small_tlv0.tl_length && hdr.small_tlv0.tl_length <= 256;
[L1036]              hdr.components.last.valid := false;
[L1037]              emit[hdr.components.last] := false;
[L1038]              havoc hdr.components.last.tlv_code;
[L1039]              assume 0 <= hdr.components.last.tlv_code && hdr.components.last.tlv_code <= 256;
[L1040]              havoc hdr.components.last.tlv_length;
[L1041]              assume 0 <= hdr.components.last.tlv_length && hdr.components.last.tlv_length <= 256;
[L1042]              havoc hdr.components.last.tlv_value;
[L1043]              hdr.components.0.valid := false;
[L1044]              emit[hdr.components.0] := false;
[L1045]              havoc hdr.components.0.tlv_code;
[L1046]              assume 0 <= hdr.components.0.tlv_code && hdr.components.0.tlv_code <= 256;
[L1047]              havoc hdr.components.0.tlv_length;
[L1048]              assume 0 <= hdr.components.0.tlv_length && hdr.components.0.tlv_length <= 256;
[L1049]              havoc hdr.components.0.tlv_value;
[L1050]              hdr.components.1.valid := false;
[L1051]              emit[hdr.components.1] := false;
[L1052]              havoc hdr.components.1.tlv_code;
[L1053]              assume 0 <= hdr.components.1.tlv_code && hdr.components.1.tlv_code <= 256;
[L1054]              havoc hdr.components.1.tlv_length;
[L1055]              assume 0 <= hdr.components.1.tlv_length && hdr.components.1.tlv_length <= 256;
[L1056]              havoc hdr.components.1.tlv_value;
[L1057]              hdr.components.2.valid := false;
[L1058]              emit[hdr.components.2] := false;
[L1059]              havoc hdr.components.2.tlv_code;
[L1060]              assume 0 <= hdr.components.2.tlv_code && hdr.components.2.tlv_code <= 256;
[L1061]              havoc hdr.components.2.tlv_length;
[L1062]              assume 0 <= hdr.components.2.tlv_length && hdr.components.2.tlv_length <= 256;
[L1063]              havoc hdr.components.2.tlv_value;
[L1064]              hdr.components.3.valid := false;
[L1065]              emit[hdr.components.3] := false;
[L1066]              havoc hdr.components.3.tlv_code;
[L1067]              assume 0 <= hdr.components.3.tlv_code && hdr.components.3.tlv_code <= 256;
[L1068]              havoc hdr.components.3.tlv_length;
[L1069]              assume 0 <= hdr.components.3.tlv_length && hdr.components.3.tlv_length <= 256;
[L1070]              havoc hdr.components.3.tlv_value;
[L1071]              hdr.components.4.valid := false;
[L1072]              emit[hdr.components.4] := false;
[L1073]              havoc hdr.components.4.tlv_code;
[L1074]              assume 0 <= hdr.components.4.tlv_code && hdr.components.4.tlv_code <= 256;
[L1075]              havoc hdr.components.4.tlv_length;
[L1076]              assume 0 <= hdr.components.4.tlv_length && hdr.components.4.tlv_length <= 256;
[L1077]              havoc hdr.components.4.tlv_value;
[L1078]              tmp_hdr_6.valid := false;
[L1079]              tmp_hdr_7.valid := false;
[L1080]              tmp_hdr_8.valid := false;
[L1081]              tmp_hdr_9.valid := false;
[L1082]              tmp_hdr_10.valid := false;
[L1083]              tmp_hdr_11.valid := false;
[L1084]              tmp_hdr_12.valid := false;
[L1085]              NoAction_0.isApplied := false;
[L1086]              NoAction_7.isApplied := false;
[L1087]              NoAction_8.isApplied := false;
[L1088]              NoAction_9.isApplied := false;
[L1089]              NoAction_10.isApplied := false;
[L1090]              NoAction_11.isApplied := false;
[L1091]              storeNumOfComponents.isApplied := false;
[L1092]              _drop.isApplied := false;
[L1093]              _drop_4.isApplied := false;
[L1094]              _drop_5.isApplied := false;
[L1095]              _drop_6.isApplied := false;
[L1096]              set_egr.isApplied := false;
[L1097]              computeStoreTablesIndex.isApplied := false;
[L1098]              readPitEntry.isApplied := false;
[L1099]              cleanPitEntry.isApplied := false;
[L1100]              setOutputIface.isApplied := false;
[L1101]              updatePit_entry.isApplied := false;
[L1102]              count_table_0.isApplied := false;
[L1103]              havoc count_table_0.storeNumOfComponents.total;
[L1104]              fib_table_0.isApplied := false;
[L1105]              havoc fib_table_0.set_egr.egress_spec;
[L1106]              hashName_table_0.isApplied := false;
[L1107]              pit_table_0.isApplied := false;
[L1108]              routeData_table_0.isApplied := false;
[L1109]              havoc routeData_table_0.setOutputIface.out_iface;
[L1110]              updatePit_table_0.isApplied := false;
[L1135]  RET         call havocProcedure();
[L1136]  CALL        call _parser_ParserImpl();
[L746]   CALL        call start();
[L1606]  CALL        call parse_ethernet();
[L1251]              hdr.ethernet.valid := true;
[L1252]              tmp_5 := hdr.ethernet.etherType;
[L1253]              havoc tmp_7;
[L1254]              tmp_6 := tmp_7;
[L1255]  COND FALSE  !(tmp_5 % 65535 == 34340 && tmp_6 % 255 == 80)
[L1258]  COND FALSE  !(tmp_5 % 65535 == 34340 && true)
[L1606]  RET         call parse_ethernet();
[L746]   RET         call start();
[L1136]  RET         call _parser_ParserImpl();
[L1137]  CALL        call verifyChecksum();
[L1137]  RET         call verifyChecksum();
[L1138]  CALL        call ingress();
[L1117]  CALL        call count_table_0.apply();
[L800]               count_table_0.hdr.components.0.valid := hdr.components.0.valid;
[L801]               count_table_0.hdr.components.1.valid := hdr.components.1.valid;
[L802]               count_table_0.hdr.components.2.valid := hdr.components.2.valid;
[L803]               count_table_0.hdr.components.3.valid := hdr.components.3.valid;
[L804]               count_table_0.hdr.components.4.valid := hdr.components.4.valid;
[L806]               count_table_0.isApplied := true;
[L807]   COND TRUE   count_table_0.action_run == count_table_0.action.storeNumOfComponents
[L808]   CALL        call storeNumOfComponents(count_table_0.storeNumOfComponents.total);
[L1614]              storeNumOfComponents.isApplied := true;
[L1615]              meta.name_metadata.components := total;
[L808]   RET         call storeNumOfComponents(count_table_0.storeNumOfComponents.total);
[L1117]  RET         call count_table_0.apply();
[L1118]  COND TRUE   meta.name_metadata.components != 0
[L1119]  CALL        call hashName_table_0.apply();
[L853]               hashName_table_0.isApplied := true;
[L854]   COND TRUE   hashName_table_0.action_run == hashName_table_0.action.computeStoreTablesIndex
[L855]   CALL        call computeStoreTablesIndex();
[L774]               computeStoreTablesIndex.isApplied := true;
[L776]               havoc meta.name_metadata.name_hash;
[L777]               assume meta.name_metadata.name_hash >= 0 && 65536 >= meta.name_metadata.name_hash;
[L779]               havoc meta.comp_metadata.c1;
[L780]               assume meta.comp_metadata.c1 >= 0 && 65536 >= meta.comp_metadata.c1;
[L782]               havoc meta.comp_metadata.c2;
[L783]               assume meta.comp_metadata.c2 >= 0 && 65536 >= meta.comp_metadata.c2;
[L785]               havoc meta.comp_metadata.c3;
[L786]               assume meta.comp_metadata.c3 >= 0 && 65536 >= meta.comp_metadata.c3;
[L788]               havoc meta.comp_metadata.c4;
[L789]               assume meta.comp_metadata.c4 >= 0 && 65536 >= meta.comp_metadata.c4;
[L855]   RET         call computeStoreTablesIndex();
[L1119]  RET         call hashName_table_0.apply();
[L1120]  CALL        call pit_table_0.apply();
[L1498]              pit_table_0.meta.flow_metadata.packetType := meta.flow_metadata.packetType;
[L1500]              pit_table_0.isApplied := true;
[L1501]  COND TRUE   pit_table_0.action_run == pit_table_0.action.readPitEntry
[L1502]  CALL        call readPitEntry();
[L1514]              readPitEntry.isApplied := true;
[L1516]              meta.flow_metadata.isInPIT := pit_r[meta.name_metadata.name_hash];
[L1502]  RET         call readPitEntry();
[L1120]  RET         call pit_table_0.apply();
[L1121]  COND FALSE  !(meta.flow_metadata.packetType == 5)
[L1128]  CALL        call routeData_table_0.apply();
[L1530]              routeData_table_0.meta.flow_metadata.isInPIT := meta.flow_metadata.isInPIT;
[L1532]              routeData_table_0.isApplied := true;
[L1533]  COND TRUE   routeData_table_0.action_run == routeData_table_0.action.setOutputIface
[L1534]  CALL        call setOutputIface(routeData_table_0.setOutputIface.out_iface);
[L1549]              setOutputIface.isApplied := true;
[L1550]              standard_metadata.egress_spec := out_iface;
[L1551]              standard_metadata.egress_port := out_iface;
[L1552]              forward := true;
[L1534]  RET         call setOutputIface(routeData_table_0.setOutputIface.out_iface);
[L1128]  RET         call routeData_table_0.apply();
[L1138]  RET         call ingress();
[L1139]  CALL        call egress();
[L1139]  RET         call egress();
[L1140]  CALL        call computeChecksum();
[L1140]  RET         call computeChecksum();
[L1141]  COND FALSE  !(forward == false)
[L1144]              _p4ltl_0 := meta.flow_metadata.packetType == 5;
[L1145]              _p4ltl_1 := meta.name_metadata.name_hash == _p4ltl_free_a;
[L1146]              _p4ltl_2 := meta.flow_metadata.packetType == 6;
[L1147]              _p4ltl_3 := meta.name_metadata.name_hash == _p4ltl_free_a;
[L1148]              _p4ltl_4 := meta.flow_metadata.packetType == 6;
[L1149]              _p4ltl_5 := meta.name_metadata.name_hash == _p4ltl_free_a;
[L1150]              _p4ltl_6 := pit_r[_p4ltl_free_a] == 0;
[L1151]              _p4ltl_7 := meta.name_metadata.components != 0;
[L1152]              _p4ltl_8 := pit_table_0.meta.flow_metadata.packetType == 5;
[L1153]              _p4ltl_9 := pit_table_0.meta.flow_metadata.packetType == 6;
[L1154]              _p4ltl_10 := updatePit_table_0.meta.flow_metadata.hasFIBentry == 1;
[L1155]              _p4ltl_11 := updatePit_table_0.meta.flow_metadata.hasFIBentry == 1;
[L1156]              _p4ltl_12 := routeData_table_0.setOutputIface.out_iface == 0;
[L1157]              _p4ltl_13 := routeData_table_0.meta.flow_metadata.isInPIT == 2;
[L1158]              _p4ltl_14 := routeData_table_0.setOutputIface.out_iface == 1;
[L1159]              _p4ltl_15 := routeData_table_0.meta.flow_metadata.isInPIT == 1;
[L1171]  RET         call main();
End of lasso representation.
RESULT: Ultimate proved your program to be incorrect!
Received shutdown request...
