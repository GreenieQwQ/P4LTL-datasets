 * BuchiAutomizer took 2395904.72ms. Allocated memory was 448.8MB in the beginning and 2.1GB in the end (delta: 1.6GB). Free memory was 332.0MB in the beginning and 733.8MB in the end (delta: -401.8MB). Peak memory consumption was 2.3GB. Max. memory is 4.3GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    5 locations, 14 edges
  - StatisticsResult: Initial RCFG
    602 locations, 720 edges
  - StatisticsResult: BuchiProgram size
    3649 locations, 5327 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 11 terminating modules (11 trivial, 0 deterministic, 0 nondeterministic) and one nonterminating remainder module.11 modules have a trivial ranking function, the largest among these consists of 26 locations. The remainder module has 7638 locations.
  - StatisticsResult: Timing statistics
    BüchiAutomizer plugin needed 2395.8s and 12 iterations.  TraceHistogramMax:1. Analysis of lassos took 352.9s. Construction of modules took 1916.5s. Büchi inclusion checks took 122.8s. Highest rank in rank-based complementation 0. Minimization of det autom 11. Minimization of nondet autom 0. Automata minimization 1.5s AutomataMinimizationTime, 11 MinimizatonAttempts, 31749 StatesRemovedByMinimization, 11 NontrivialMinimizations. Non-live state removal took 0.9s Buchi closure took 0.1s. Biggest automaton had -1 states and ocurred in iteration -1.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 0 mSolverCounterUnknown, 166646 SdHoareTripleChecker+Valid, 1937.3s IncrementalHoareTripleChecker+Time, 0 mSdLazyCounter, 166258 mSDsluCounter, 131048 SdHoareTripleChecker+Invalid, 1916.6s Time, 0 mProtectedAction, 0 SdHoareTripleChecker+Unchecked, 0 IncrementalHoareTripleChecker+Unchecked, 76085 mSDsCounter, 65852 IncrementalHoareTripleChecker+Valid, 0 mProtectedPredicate, 259653 IncrementalHoareTripleChecker+Invalid, 325505 SdHoareTripleChecker+Unknown, 0 mSolverCounterNotChecked, 65852 mSolverCounterUnsat, 55119 mSDtfsCounter, 259653 mSolverCounterSat, 3.1s SdHoareTripleChecker+Time, 0 IncrementalHoareTripleChecker+Unknown	LassoAnalysisResults: nont1 unkn0 SFLI2 SFLT0 conc0 concLT0 SILN0 SILU9 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	InitialAbstractionConstructionTime: 0.0s
  - LTLInfiniteCounterExampleResult [Line: 1137]: Violation of LTL property !((( [](((_p4ltl_9 == true && _p4ltl_8 == true) && (_p4ltl_7 == true || _p4ltl_6 == true))) )) && (( ( ( ( ( []((pit_table_0.isApplied == true && _p4ltl_10 == true ==> pit_table_0.isApplied == true && readPit(updatePit_table_0.isApplied == true && _p4ltl_13 == true ==> updatePit_table_0.isApplied == true && _drop_6.isApplied == true)ntry.isApplied == true)) ) && ( []((pit_table_0.isApplied == true && _p4ltl_11 == true ==> pit_table_0.isApplied == true && cleanPit(updatePit_table_0.isApplied == true && _p4ltl_13 == true ==> updatePit_table_0.isApplied == true && _drop_6.isApplied == true)ntry.isApplied == true)) ) ) && ( []((updatePit_table_0.isApplied == true && _p4ltl_12 == true ==> updatePit_table_0.isApplied == true && updatePit_entry.isApplied == true)) ) ) && ( []((updatePit_table_0.isApplied == true && _p4ltl_13 == true ==> updatePit_table_0.isApplied == true && _drop_6.isApplied == true)) ) ) && ( []((routeData_table_0.isApplied == true && _p4ltl_15 == true ==> (routeData_table_0.isApplied == true && setOutput((_p4ltl_5 == true && _p4ltl_4 == true) && _p4ltl_3 == true)face.isApplied == true) && _p4ltl_14 == true)) ) ))) || ( ( [](( ((_p4ltl_5 == true && _p4ltl_4 == true) && _p4ltl_3 == true) ==> ( ( []((_p4ltl_2 == true && drop)) ) || ( (_p4ltl_1 == true && drop) U (_p4ltl_0 == true) ) ) )) ))
    Found an infinite, lasso-shaped execution that violates the LTL property !((( [](((_p4ltl_9 == true && _p4ltl_8 == true) && (_p4ltl_7 == true || _p4ltl_6 == true))) )) && (( ( ( ( ( []((pit_table_0.isApplied == true && _p4ltl_10 == true ==> pit_table_0.isApplied == true && readPit(updatePit_table_0.isApplied == true && _p4ltl_13 == true ==> updatePit_table_0.isApplied == true && _drop_6.isApplied == true)ntry.isApplied == true)) ) && ( []((pit_table_0.isApplied == true && _p4ltl_11 == true ==> pit_table_0.isApplied == true && cleanPit(updatePit_table_0.isApplied == true && _p4ltl_13 == true ==> updatePit_table_0.isApplied == true && _drop_6.isApplied == true)ntry.isApplied == true)) ) ) && ( []((updatePit_table_0.isApplied == true && _p4ltl_12 == true ==> updatePit_table_0.isApplied == true && updatePit_entry.isApplied == true)) ) ) && ( []((updatePit_table_0.isApplied == true && _p4ltl_13 == true ==> updatePit_table_0.isApplied == true && _drop_6.isApplied == true)) ) ) && ( []((routeData_table_0.isApplied == true && _p4ltl_15 == true ==> (routeData_table_0.isApplied == true && setOutput((_p4ltl_5 == true && _p4ltl_4 == true) && _p4ltl_3 == true)face.isApplied == true) && _p4ltl_14 == true)) ) ))) || ( ( [](( ((_p4ltl_5 == true && _p4ltl_4 == true) && _p4ltl_3 == true) ==> ( ( []((_p4ltl_2 == true && drop)) ) || ( (_p4ltl_1 == true && drop) U (_p4ltl_0 == true) ) ) )) )).
Stem:
[L680]   CALL        call mainProcedure();
[L1136]  COND TRUE   true
[L1137]  CALL        call main();
[L1101]  CALL        call havocProcedure();
[L827]               drop := false;
[L828]               forward := false;
[L829]               standard_metadata.instance_type := 0;
[L830]               standard_metadata.packet_length := 0;
[L831]               standard_metadata.enq_timestamp := 0;
[L832]               standard_metadata.enq_qdepth := 0;
[L833]               standard_metadata.deq_timedelta := 0;
[L834]               standard_metadata.deq_qdepth := 0;
[L835]               standard_metadata.ingress_global_timestamp := 0;
[L836]               standard_metadata.egress_global_timestamp := 0;
[L837]               standard_metadata.mcast_grp := 0;
[L838]               standard_metadata.egress_rid := 0;
[L839]               standard_metadata.checksum_error := 0;
[L840]               standard_metadata.priority := 0;
[L841]               meta.comp_metadata.c1 := 0;
[L842]               meta.comp_metadata.c2 := 0;
[L843]               meta.comp_metadata.c3 := 0;
[L844]               meta.comp_metadata.c4 := 0;
[L845]               meta.flow_metadata.isInPIT := 0;
[L846]               meta.flow_metadata.hasFIBentry := 0;
[L847]               meta.flow_metadata.packetType := 0;
[L848]               meta.name_metadata.name_hash := 0;
[L849]               meta.name_metadata.namesize := 0;
[L850]               meta.name_metadata.namemask := 0;
[L851]               meta.name_metadata.tmp := 0;
[L852]               meta.name_metadata.components := 0;
[L853]               meta.pit_metadata.tmp := 0;
[L854]               hdr.big_content.valid := false;
[L855]               emit[hdr.big_content] := false;
[L856]               havoc hdr.big_content.tl_code;
[L857]               assume 0 <= hdr.big_content.tl_code && hdr.big_content.tl_code <= 256;
[L858]               havoc hdr.big_content.tl_len_code;
[L859]               assume 0 <= hdr.big_content.tl_len_code && hdr.big_content.tl_len_code <= 256;
[L860]               havoc hdr.big_content.tl_length;
[L861]               assume 0 <= hdr.big_content.tl_length && hdr.big_content.tl_length <= 4294967296;
[L862]               hdr.big_name.valid := false;
[L863]               emit[hdr.big_name] := false;
[L864]               havoc hdr.big_name.tl_code;
[L865]               assume 0 <= hdr.big_name.tl_code && hdr.big_name.tl_code <= 256;
[L866]               havoc hdr.big_name.tl_len_code;
[L867]               assume 0 <= hdr.big_name.tl_len_code && hdr.big_name.tl_len_code <= 256;
[L868]               havoc hdr.big_name.tl_length;
[L869]               assume 0 <= hdr.big_name.tl_length && hdr.big_name.tl_length <= 4294967296;
[L870]               hdr.big_tlv0.valid := false;
[L871]               emit[hdr.big_tlv0] := false;
[L872]               havoc hdr.big_tlv0.tl_code;
[L873]               assume 0 <= hdr.big_tlv0.tl_code && hdr.big_tlv0.tl_code <= 256;
[L874]               havoc hdr.big_tlv0.tl_len_code;
[L875]               assume 0 <= hdr.big_tlv0.tl_len_code && hdr.big_tlv0.tl_len_code <= 256;
[L876]               havoc hdr.big_tlv0.tl_length;
[L877]               assume 0 <= hdr.big_tlv0.tl_length && hdr.big_tlv0.tl_length <= 4294967296;
[L878]               hdr.ethernet.valid := false;
[L879]               emit[hdr.ethernet] := false;
[L880]               havoc hdr.ethernet.dstAddr;
[L881]               assume 0 <= hdr.ethernet.dstAddr && hdr.ethernet.dstAddr <= 281474976710656;
[L882]               havoc hdr.ethernet.srcAddr;
[L883]               assume 0 <= hdr.ethernet.srcAddr && hdr.ethernet.srcAddr <= 281474976710656;
[L884]               havoc hdr.ethernet.etherType;
[L885]               assume 0 <= hdr.ethernet.etherType && hdr.ethernet.etherType <= 65536;
[L886]               hdr.huge_content.valid := false;
[L887]               emit[hdr.huge_content] := false;
[L888]               havoc hdr.huge_content.tl_code;
[L889]               assume 0 <= hdr.huge_content.tl_code && hdr.huge_content.tl_code <= 256;
[L890]               havoc hdr.huge_content.tl_len_code;
[L891]               assume 0 <= hdr.huge_content.tl_len_code && hdr.huge_content.tl_len_code <= 256;
[L892]               havoc hdr.huge_content.tl_length;
[L893]               assume 0 <= hdr.huge_content.tl_length && hdr.huge_content.tl_length <= 1125899906842624 * 16384;
[L894]               hdr.huge_name.valid := false;
[L895]               emit[hdr.huge_name] := false;
[L896]               havoc hdr.huge_name.tl_code;
[L897]               assume 0 <= hdr.huge_name.tl_code && hdr.huge_name.tl_code <= 256;
[L898]               havoc hdr.huge_name.tl_len_code;
[L899]               assume 0 <= hdr.huge_name.tl_len_code && hdr.huge_name.tl_len_code <= 256;
[L900]               havoc hdr.huge_name.tl_length;
[L901]               assume 0 <= hdr.huge_name.tl_length && hdr.huge_name.tl_length <= 1125899906842624 * 16384;
[L902]               hdr.huge_tlv0.valid := false;
[L903]               emit[hdr.huge_tlv0] := false;
[L904]               havoc hdr.huge_tlv0.tl_code;
[L905]               assume 0 <= hdr.huge_tlv0.tl_code && hdr.huge_tlv0.tl_code <= 256;
[L906]               havoc hdr.huge_tlv0.tl_len_code;
[L907]               assume 0 <= hdr.huge_tlv0.tl_len_code && hdr.huge_tlv0.tl_len_code <= 256;
[L908]               havoc hdr.huge_tlv0.tl_length;
[L909]               assume 0 <= hdr.huge_tlv0.tl_length && hdr.huge_tlv0.tl_length <= 1125899906842624 * 16384;
[L910]               hdr.isha256.valid := false;
[L911]               emit[hdr.isha256] := false;
[L912]               havoc hdr.isha256.tlv_code;
[L913]               assume 0 <= hdr.isha256.tlv_code && hdr.isha256.tlv_code <= 256;
[L914]               havoc hdr.isha256.tlv_length;
[L915]               assume 0 <= hdr.isha256.tlv_length && hdr.isha256.tlv_length <= 256;
[L916]               havoc hdr.isha256.tlv_value;
[L917]               hdr.lifetime.valid := false;
[L918]               emit[hdr.lifetime] := false;
[L919]               havoc hdr.lifetime.tlv_code;
[L920]               assume 0 <= hdr.lifetime.tlv_code && hdr.lifetime.tlv_code <= 256;
[L921]               havoc hdr.lifetime.tlv_length;
[L922]               assume 0 <= hdr.lifetime.tlv_length && hdr.lifetime.tlv_length <= 256;
[L923]               havoc hdr.lifetime.tlv_value;
[L924]               hdr.medium_content.valid := false;
[L925]               emit[hdr.medium_content] := false;
[L926]               havoc hdr.medium_content.tl_code;
[L927]               assume 0 <= hdr.medium_content.tl_code && hdr.medium_content.tl_code <= 256;
[L928]               havoc hdr.medium_content.tl_len_code;
[L929]               assume 0 <= hdr.medium_content.tl_len_code && hdr.medium_content.tl_len_code <= 256;
[L930]               havoc hdr.medium_content.tl_length;
[L931]               assume 0 <= hdr.medium_content.tl_length && hdr.medium_content.tl_length <= 65536;
[L932]               hdr.medium_name.valid := false;
[L933]               emit[hdr.medium_name] := false;
[L934]               havoc hdr.medium_name.tl_code;
[L935]               assume 0 <= hdr.medium_name.tl_code && hdr.medium_name.tl_code <= 256;
[L936]               havoc hdr.medium_name.tl_len_code;
[L937]               assume 0 <= hdr.medium_name.tl_len_code && hdr.medium_name.tl_len_code <= 256;
[L938]               havoc hdr.medium_name.tl_length;
[L939]               assume 0 <= hdr.medium_name.tl_length && hdr.medium_name.tl_length <= 65536;
[L940]               hdr.medium_ndnlp.valid := false;
[L941]               emit[hdr.medium_ndnlp] := false;
[L942]               havoc hdr.medium_ndnlp.total;
[L943]               assume 0 <= hdr.medium_ndnlp.total && hdr.medium_ndnlp.total <= 1125899906842624 * 1125899906842624 * 17592186044416;
[L944]               hdr.medium_tlv0.valid := false;
[L945]               emit[hdr.medium_tlv0] := false;
[L946]               havoc hdr.medium_tlv0.tl_code;
[L947]               assume 0 <= hdr.medium_tlv0.tl_code && hdr.medium_tlv0.tl_code <= 256;
[L948]               havoc hdr.medium_tlv0.tl_len_code;
[L949]               assume 0 <= hdr.medium_tlv0.tl_len_code && hdr.medium_tlv0.tl_len_code <= 256;
[L950]               havoc hdr.medium_tlv0.tl_length;
[L951]               assume 0 <= hdr.medium_tlv0.tl_length && hdr.medium_tlv0.tl_length <= 65536;
[L952]               hdr.metainfo.valid := false;
[L953]               emit[hdr.metainfo] := false;
[L954]               havoc hdr.metainfo.tlv_code;
[L955]               assume 0 <= hdr.metainfo.tlv_code && hdr.metainfo.tlv_code <= 256;
[L956]               havoc hdr.metainfo.tlv_length;
[L957]               assume 0 <= hdr.metainfo.tlv_length && hdr.metainfo.tlv_length <= 256;
[L958]               havoc hdr.metainfo.tlv_value;
[L959]               hdr.nonce.valid := false;
[L960]               emit[hdr.nonce] := false;
[L961]               havoc hdr.nonce.tlv_code;
[L962]               assume 0 <= hdr.nonce.tlv_code && hdr.nonce.tlv_code <= 256;
[L963]               havoc hdr.nonce.tlv_length;
[L964]               assume 0 <= hdr.nonce.tlv_length && hdr.nonce.tlv_length <= 256;
[L965]               havoc hdr.nonce.tlv_value;
[L966]               hdr.signature_info.valid := false;
[L967]               emit[hdr.signature_info] := false;
[L968]               havoc hdr.signature_info.tlv_code;
[L969]               assume 0 <= hdr.signature_info.tlv_code && hdr.signature_info.tlv_code <= 256;
[L970]               havoc hdr.signature_info.tlv_length;
[L971]               assume 0 <= hdr.signature_info.tlv_length && hdr.signature_info.tlv_length <= 256;
[L972]               havoc hdr.signature_info.tlv_value;
[L973]               hdr.signature_value.valid := false;
[L974]               emit[hdr.signature_value] := false;
[L975]               havoc hdr.signature_value.tlv_code;
[L976]               assume 0 <= hdr.signature_value.tlv_code && hdr.signature_value.tlv_code <= 256;
[L977]               havoc hdr.signature_value.tlv_length;
[L978]               assume 0 <= hdr.signature_value.tlv_length && hdr.signature_value.tlv_length <= 256;
[L979]               havoc hdr.signature_value.tlv_value;
[L980]               hdr.small_content.valid := false;
[L981]               emit[hdr.small_content] := false;
[L982]               havoc hdr.small_content.tl_code;
[L983]               assume 0 <= hdr.small_content.tl_code && hdr.small_content.tl_code <= 256;
[L984]               havoc hdr.small_content.tl_length;
[L985]               assume 0 <= hdr.small_content.tl_length && hdr.small_content.tl_length <= 256;
[L986]               hdr.small_name.valid := false;
[L987]               emit[hdr.small_name] := false;
[L988]               havoc hdr.small_name.tl_code;
[L989]               assume 0 <= hdr.small_name.tl_code && hdr.small_name.tl_code <= 256;
[L990]               havoc hdr.small_name.tl_length;
[L991]               assume 0 <= hdr.small_name.tl_length && hdr.small_name.tl_length <= 256;
[L992]               hdr.small_ndnlp.valid := false;
[L993]               emit[hdr.small_ndnlp] := false;
[L994]               havoc hdr.small_ndnlp.total;
[L995]               assume 0 <= hdr.small_ndnlp.total && hdr.small_ndnlp.total <= 1125899906842624 * 1125899906842624 * 4096;
[L996]               hdr.small_tlv0.valid := false;
[L997]               emit[hdr.small_tlv0] := false;
[L998]               havoc hdr.small_tlv0.tl_code;
[L999]               assume 0 <= hdr.small_tlv0.tl_code && hdr.small_tlv0.tl_code <= 256;
[L1000]              havoc hdr.small_tlv0.tl_length;
[L1001]              assume 0 <= hdr.small_tlv0.tl_length && hdr.small_tlv0.tl_length <= 256;
[L1002]              hdr.components.last.valid := false;
[L1003]              emit[hdr.components.last] := false;
[L1004]              havoc hdr.components.last.tlv_code;
[L1005]              assume 0 <= hdr.components.last.tlv_code && hdr.components.last.tlv_code <= 256;
[L1006]              havoc hdr.components.last.tlv_length;
[L1007]              assume 0 <= hdr.components.last.tlv_length && hdr.components.last.tlv_length <= 256;
[L1008]              havoc hdr.components.last.tlv_value;
[L1009]              hdr.components.0.valid := false;
[L1010]              emit[hdr.components.0] := false;
[L1011]              havoc hdr.components.0.tlv_code;
[L1012]              assume 0 <= hdr.components.0.tlv_code && hdr.components.0.tlv_code <= 256;
[L1013]              havoc hdr.components.0.tlv_length;
[L1014]              assume 0 <= hdr.components.0.tlv_length && hdr.components.0.tlv_length <= 256;
[L1015]              havoc hdr.components.0.tlv_value;
[L1016]              hdr.components.1.valid := false;
[L1017]              emit[hdr.components.1] := false;
[L1018]              havoc hdr.components.1.tlv_code;
[L1019]              assume 0 <= hdr.components.1.tlv_code && hdr.components.1.tlv_code <= 256;
[L1020]              havoc hdr.components.1.tlv_length;
[L1021]              assume 0 <= hdr.components.1.tlv_length && hdr.components.1.tlv_length <= 256;
[L1022]              havoc hdr.components.1.tlv_value;
[L1023]              hdr.components.2.valid := false;
[L1024]              emit[hdr.components.2] := false;
[L1025]              havoc hdr.components.2.tlv_code;
[L1026]              assume 0 <= hdr.components.2.tlv_code && hdr.components.2.tlv_code <= 256;
[L1027]              havoc hdr.components.2.tlv_length;
[L1028]              assume 0 <= hdr.components.2.tlv_length && hdr.components.2.tlv_length <= 256;
[L1029]              havoc hdr.components.2.tlv_value;
[L1030]              hdr.components.3.valid := false;
[L1031]              emit[hdr.components.3] := false;
[L1032]              havoc hdr.components.3.tlv_code;
[L1033]              assume 0 <= hdr.components.3.tlv_code && hdr.components.3.tlv_code <= 256;
[L1034]              havoc hdr.components.3.tlv_length;
[L1035]              assume 0 <= hdr.components.3.tlv_length && hdr.components.3.tlv_length <= 256;
[L1036]              havoc hdr.components.3.tlv_value;
[L1037]              hdr.components.4.valid := false;
[L1038]              emit[hdr.components.4] := false;
[L1039]              havoc hdr.components.4.tlv_code;
[L1040]              assume 0 <= hdr.components.4.tlv_code && hdr.components.4.tlv_code <= 256;
[L1041]              havoc hdr.components.4.tlv_length;
[L1042]              assume 0 <= hdr.components.4.tlv_length && hdr.components.4.tlv_length <= 256;
[L1043]              havoc hdr.components.4.tlv_value;
[L1044]              tmp_hdr_6.valid := false;
[L1045]              tmp_hdr_7.valid := false;
[L1046]              tmp_hdr_8.valid := false;
[L1047]              tmp_hdr_9.valid := false;
[L1048]              tmp_hdr_10.valid := false;
[L1049]              tmp_hdr_11.valid := false;
[L1050]              tmp_hdr_12.valid := false;
[L1051]              NoAction_0.isApplied := false;
[L1052]              NoAction_7.isApplied := false;
[L1053]              NoAction_8.isApplied := false;
[L1054]              NoAction_9.isApplied := false;
[L1055]              NoAction_10.isApplied := false;
[L1056]              NoAction_11.isApplied := false;
[L1057]              storeNumOfComponents.isApplied := false;
[L1058]              _drop.isApplied := false;
[L1059]              _drop_4.isApplied := false;
[L1060]              _drop_5.isApplied := false;
[L1061]              _drop_6.isApplied := false;
[L1062]              set_egr.isApplied := false;
[L1063]              computeStoreTablesIndex.isApplied := false;
[L1064]              readPitEntry.isApplied := false;
[L1065]              cleanPitEntry.isApplied := false;
[L1066]              setOutputIface.isApplied := false;
[L1067]              updatePit_entry.isApplied := false;
[L1068]              count_table_0.isApplied := false;
[L1069]              havoc count_table_0.storeNumOfComponents.total;
[L1070]              fib_table_0.isApplied := false;
[L1071]              havoc fib_table_0.set_egr.egress_spec;
[L1072]              hashName_table_0.isApplied := false;
[L1073]              pit_table_0.isApplied := false;
[L1074]              routeData_table_0.isApplied := false;
[L1075]              havoc routeData_table_0.setOutputIface.out_iface;
[L1076]              updatePit_table_0.isApplied := false;
[L1101]  RET         call havocProcedure();
[L1102]  CALL        call _parser_ParserImpl();
[L723]   CALL        call start();
[L1572]  CALL        call parse_ethernet();
[L1217]              hdr.ethernet.valid := true;
[L1218]              tmp_5 := hdr.ethernet.etherType;
[L1219]              havoc tmp_7;
[L1220]              tmp_6 := tmp_7;
[L1221]  COND FALSE  !(tmp_5 % 65535 == 34340 && tmp_6 % 255 == 80)
[L1224]  COND TRUE   tmp_5 % 65535 == 34340 && true
[L1225]  CALL        call parse_ndn();
[L1344]              havoc tmp_15;
[L1345]              tmp_14 := (tmp_15 - tmp_15 % 1) / 1 % 256;
[L1346]  COND TRUE   tmp_14 == 253
[L1347]  CALL        call parse_medium_tlv0();
[L1308]              hdr.medium_tlv0.valid := true;
[L1309]              meta.flow_metadata.packetType := hdr.medium_tlv0.tl_code;
[L1310]  CALL        call parse_tlv0();
[L1443]              havoc tmp_24;
[L1444]              tmp_23 := tmp_24;
[L1445]  COND FALSE  !(tmp_23 == 7)
[L1310]  RET         call parse_tlv0();
[L1347]  RET         call parse_medium_tlv0();
[L1225]  RET         call parse_ndn();
[L1572]  RET         call parse_ethernet();
[L723]   RET         call start();
[L1102]  RET         call _parser_ParserImpl();
[L1103]  CALL        call verifyChecksum();
[L1103]  RET         call verifyChecksum();
[L1104]  CALL        call ingress();
[L1083]  CALL        call count_table_0.apply();
[L778]               count_table_0.isApplied := true;
[L779]   COND TRUE   count_table_0.action_run == count_table_0.action.storeNumOfComponents
[L780]   CALL        call storeNumOfComponents(count_table_0.storeNumOfComponents.total);
[L1580]              storeNumOfComponents.isApplied := true;
[L1581]              meta.name_metadata.components := total;
[L780]   RET         call storeNumOfComponents(count_table_0.storeNumOfComponents.total);
[L1083]  RET         call count_table_0.apply();
[L1084]  COND TRUE   meta.name_metadata.components != 0
[L1085]  CALL        call hashName_table_0.apply();
[L819]               hashName_table_0.isApplied := true;
[L820]   COND TRUE   hashName_table_0.action_run == hashName_table_0.action.computeStoreTablesIndex
[L821]   CALL        call computeStoreTablesIndex();
[L751]               computeStoreTablesIndex.isApplied := true;
[L753]               havoc meta.name_metadata.name_hash;
[L754]               assume meta.name_metadata.name_hash >= 0 && 65536 >= meta.name_metadata.name_hash;
[L756]               havoc meta.comp_metadata.c1;
[L757]               assume meta.comp_metadata.c1 >= 0 && 65536 >= meta.comp_metadata.c1;
[L759]               havoc meta.comp_metadata.c2;
[L760]               assume meta.comp_metadata.c2 >= 0 && 65536 >= meta.comp_metadata.c2;
[L762]               havoc meta.comp_metadata.c3;
[L763]               assume meta.comp_metadata.c3 >= 0 && 65536 >= meta.comp_metadata.c3;
[L765]               havoc meta.comp_metadata.c4;
[L766]               assume meta.comp_metadata.c4 >= 0 && 65536 >= meta.comp_metadata.c4;
[L821]   RET         call computeStoreTablesIndex();
[L1085]  RET         call hashName_table_0.apply();
[L1086]  CALL        call pit_table_0.apply();
[L1464]              pit_table_0.meta.flow_metadata.packetType := meta.flow_metadata.packetType;
[L1466]              pit_table_0.isApplied := true;
[L1467]  COND FALSE  !(pit_table_0.action_run == pit_table_0.action.readPitEntry)
[L1470]  COND TRUE   pit_table_0.action_run == pit_table_0.action.cleanPitEntry
[L1471]  CALL        call cleanPitEntry();
[L734]               cleanPitEntry.isApplied := true;
[L736]               meta.flow_metadata.isInPIT := pit_r[meta.name_metadata.name_hash];
[L738]   CALL        call pit_r.write(meta.name_metadata.name_hash, 0);
[L1453]              pit_r[index] := value;
[L738]   RET         call pit_r.write(meta.name_metadata.name_hash, 0);
[L1471]  RET         call cleanPitEntry();
[L1086]  RET         call pit_table_0.apply();
[L1087]  COND FALSE  !(meta.flow_metadata.packetType == 5)
[L1094]  CALL        call routeData_table_0.apply();
[L1496]              routeData_table_0.meta.flow_metadata.isInPIT := meta.flow_metadata.isInPIT;
[L1498]              routeData_table_0.isApplied := true;
[L1499]  COND TRUE   routeData_table_0.action_run == routeData_table_0.action.setOutputIface
[L1500]  CALL        call setOutputIface(routeData_table_0.setOutputIface.out_iface);
[L1515]              setOutputIface.isApplied := true;
[L1516]              standard_metadata.egress_spec := out_iface;
[L1517]              standard_metadata.egress_port := out_iface;
[L1518]              forward := true;
[L1500]  RET         call setOutputIface(routeData_table_0.setOutputIface.out_iface);
[L1094]  RET         call routeData_table_0.apply();
[L1104]  RET         call ingress();
[L1105]  CALL        call egress();
[L1105]  RET         call egress();
[L1106]  CALL        call computeChecksum();
[L1106]  RET         call computeChecksum();
[L1107]  COND FALSE  !(forward == false)
[L1110]              _p4ltl_0 := meta.flow_metadata.packetType == 5;
[L1111]              _p4ltl_1 := meta.flow_metadata.packetType == 6;
[L1112]              _p4ltl_2 := meta.flow_metadata.packetType == 6;
[L1113]              _p4ltl_3 := meta.flow_metadata.isInPIT == 0;
[L1114]              _p4ltl_4 := meta.flow_metadata.packetType == 6;
[L1115]              _p4ltl_5 := pit_r[_p4ltl_free_a] == 0;
[L1116]              _p4ltl_6 := meta.flow_metadata.packetType == 6;
[L1117]              _p4ltl_7 := meta.flow_metadata.packetType == 5;
[L1118]              _p4ltl_8 := meta.name_metadata.name_hash == _p4ltl_free_a;
[L1119]              _p4ltl_9 := meta.name_metadata.components != 0;
[L1120]              _p4ltl_10 := pit_table_0.meta.flow_metadata.packetType == 5;
[L1121]              _p4ltl_11 := pit_table_0.meta.flow_metadata.packetType == 6;
[L1122]              _p4ltl_12 := updatePit_table_0.meta.flow_metadata.hasFIBentry == 1;
[L1123]              _p4ltl_13 := updatePit_table_0.meta.flow_metadata.hasFIBentry == 0;
[L1124]              _p4ltl_14 := routeData_table_0.setOutputIface.out_iface == 0;
[L1125]              _p4ltl_15 := routeData_table_0.meta.flow_metadata.isInPIT == 2;
[L1137]  RET         call main();
Loop:
[L1136]  COND TRUE   true
[L1137]  CALL        call main();
[L1101]  CALL        call havocProcedure();
[L827]               drop := false;
[L828]               forward := false;
[L829]               standard_metadata.instance_type := 0;
[L830]               standard_metadata.packet_length := 0;
[L831]               standard_metadata.enq_timestamp := 0;
[L832]               standard_metadata.enq_qdepth := 0;
[L833]               standard_metadata.deq_timedelta := 0;
[L834]               standard_metadata.deq_qdepth := 0;
[L835]               standard_metadata.ingress_global_timestamp := 0;
[L836]               standard_metadata.egress_global_timestamp := 0;
[L837]               standard_metadata.mcast_grp := 0;
[L838]               standard_metadata.egress_rid := 0;
[L839]               standard_metadata.checksum_error := 0;
[L840]               standard_metadata.priority := 0;
[L841]               meta.comp_metadata.c1 := 0;
[L842]               meta.comp_metadata.c2 := 0;
[L843]               meta.comp_metadata.c3 := 0;
[L844]               meta.comp_metadata.c4 := 0;
[L845]               meta.flow_metadata.isInPIT := 0;
[L846]               meta.flow_metadata.hasFIBentry := 0;
[L847]               meta.flow_metadata.packetType := 0;
[L848]               meta.name_metadata.name_hash := 0;
[L849]               meta.name_metadata.namesize := 0;
[L850]               meta.name_metadata.namemask := 0;
[L851]               meta.name_metadata.tmp := 0;
[L852]               meta.name_metadata.components := 0;
[L853]               meta.pit_metadata.tmp := 0;
[L854]               hdr.big_content.valid := false;
[L855]               emit[hdr.big_content] := false;
[L856]               havoc hdr.big_content.tl_code;
[L857]               assume 0 <= hdr.big_content.tl_code && hdr.big_content.tl_code <= 256;
[L858]               havoc hdr.big_content.tl_len_code;
[L859]               assume 0 <= hdr.big_content.tl_len_code && hdr.big_content.tl_len_code <= 256;
[L860]               havoc hdr.big_content.tl_length;
[L861]               assume 0 <= hdr.big_content.tl_length && hdr.big_content.tl_length <= 4294967296;
[L862]               hdr.big_name.valid := false;
[L863]               emit[hdr.big_name] := false;
[L864]               havoc hdr.big_name.tl_code;
[L865]               assume 0 <= hdr.big_name.tl_code && hdr.big_name.tl_code <= 256;
[L866]               havoc hdr.big_name.tl_len_code;
[L867]               assume 0 <= hdr.big_name.tl_len_code && hdr.big_name.tl_len_code <= 256;
[L868]               havoc hdr.big_name.tl_length;
[L869]               assume 0 <= hdr.big_name.tl_length && hdr.big_name.tl_length <= 4294967296;
[L870]               hdr.big_tlv0.valid := false;
[L871]               emit[hdr.big_tlv0] := false;
[L872]               havoc hdr.big_tlv0.tl_code;
[L873]               assume 0 <= hdr.big_tlv0.tl_code && hdr.big_tlv0.tl_code <= 256;
[L874]               havoc hdr.big_tlv0.tl_len_code;
[L875]               assume 0 <= hdr.big_tlv0.tl_len_code && hdr.big_tlv0.tl_len_code <= 256;
[L876]               havoc hdr.big_tlv0.tl_length;
[L877]               assume 0 <= hdr.big_tlv0.tl_length && hdr.big_tlv0.tl_length <= 4294967296;
[L878]               hdr.ethernet.valid := false;
[L879]               emit[hdr.ethernet] := false;
[L880]               havoc hdr.ethernet.dstAddr;
[L881]               assume 0 <= hdr.ethernet.dstAddr && hdr.ethernet.dstAddr <= 281474976710656;
[L882]               havoc hdr.ethernet.srcAddr;
[L883]               assume 0 <= hdr.ethernet.srcAddr && hdr.ethernet.srcAddr <= 281474976710656;
[L884]               havoc hdr.ethernet.etherType;
[L885]               assume 0 <= hdr.ethernet.etherType && hdr.ethernet.etherType <= 65536;
[L886]               hdr.huge_content.valid := false;
[L887]               emit[hdr.huge_content] := false;
[L888]               havoc hdr.huge_content.tl_code;
[L889]               assume 0 <= hdr.huge_content.tl_code && hdr.huge_content.tl_code <= 256;
[L890]               havoc hdr.huge_content.tl_len_code;
[L891]               assume 0 <= hdr.huge_content.tl_len_code && hdr.huge_content.tl_len_code <= 256;
[L892]               havoc hdr.huge_content.tl_length;
[L893]               assume 0 <= hdr.huge_content.tl_length && hdr.huge_content.tl_length <= 1125899906842624 * 16384;
[L894]               hdr.huge_name.valid := false;
[L895]               emit[hdr.huge_name] := false;
[L896]               havoc hdr.huge_name.tl_code;
[L897]               assume 0 <= hdr.huge_name.tl_code && hdr.huge_name.tl_code <= 256;
[L898]               havoc hdr.huge_name.tl_len_code;
[L899]               assume 0 <= hdr.huge_name.tl_len_code && hdr.huge_name.tl_len_code <= 256;
[L900]               havoc hdr.huge_name.tl_length;
[L901]               assume 0 <= hdr.huge_name.tl_length && hdr.huge_name.tl_length <= 1125899906842624 * 16384;
[L902]               hdr.huge_tlv0.valid := false;
[L903]               emit[hdr.huge_tlv0] := false;
[L904]               havoc hdr.huge_tlv0.tl_code;
[L905]               assume 0 <= hdr.huge_tlv0.tl_code && hdr.huge_tlv0.tl_code <= 256;
[L906]               havoc hdr.huge_tlv0.tl_len_code;
[L907]               assume 0 <= hdr.huge_tlv0.tl_len_code && hdr.huge_tlv0.tl_len_code <= 256;
[L908]               havoc hdr.huge_tlv0.tl_length;
[L909]               assume 0 <= hdr.huge_tlv0.tl_length && hdr.huge_tlv0.tl_length <= 1125899906842624 * 16384;
[L910]               hdr.isha256.valid := false;
[L911]               emit[hdr.isha256] := false;
[L912]               havoc hdr.isha256.tlv_code;
[L913]               assume 0 <= hdr.isha256.tlv_code && hdr.isha256.tlv_code <= 256;
[L914]               havoc hdr.isha256.tlv_length;
[L915]               assume 0 <= hdr.isha256.tlv_length && hdr.isha256.tlv_length <= 256;
[L916]               havoc hdr.isha256.tlv_value;
[L917]               hdr.lifetime.valid := false;
[L918]               emit[hdr.lifetime] := false;
[L919]               havoc hdr.lifetime.tlv_code;
[L920]               assume 0 <= hdr.lifetime.tlv_code && hdr.lifetime.tlv_code <= 256;
[L921]               havoc hdr.lifetime.tlv_length;
[L922]               assume 0 <= hdr.lifetime.tlv_length && hdr.lifetime.tlv_length <= 256;
[L923]               havoc hdr.lifetime.tlv_value;
[L924]               hdr.medium_content.valid := false;
[L925]               emit[hdr.medium_content] := false;
[L926]               havoc hdr.medium_content.tl_code;
[L927]               assume 0 <= hdr.medium_content.tl_code && hdr.medium_content.tl_code <= 256;
[L928]               havoc hdr.medium_content.tl_len_code;
[L929]               assume 0 <= hdr.medium_content.tl_len_code && hdr.medium_content.tl_len_code <= 256;
[L930]               havoc hdr.medium_content.tl_length;
[L931]               assume 0 <= hdr.medium_content.tl_length && hdr.medium_content.tl_length <= 65536;
[L932]               hdr.medium_name.valid := false;
[L933]               emit[hdr.medium_name] := false;
[L934]               havoc hdr.medium_name.tl_code;
[L935]               assume 0 <= hdr.medium_name.tl_code && hdr.medium_name.tl_code <= 256;
[L936]               havoc hdr.medium_name.tl_len_code;
[L937]               assume 0 <= hdr.medium_name.tl_len_code && hdr.medium_name.tl_len_code <= 256;
[L938]               havoc hdr.medium_name.tl_length;
[L939]               assume 0 <= hdr.medium_name.tl_length && hdr.medium_name.tl_length <= 65536;
[L940]               hdr.medium_ndnlp.valid := false;
[L941]               emit[hdr.medium_ndnlp] := false;
[L942]               havoc hdr.medium_ndnlp.total;
[L943]               assume 0 <= hdr.medium_ndnlp.total && hdr.medium_ndnlp.total <= 1125899906842624 * 1125899906842624 * 17592186044416;
[L944]               hdr.medium_tlv0.valid := false;
[L945]               emit[hdr.medium_tlv0] := false;
[L946]               havoc hdr.medium_tlv0.tl_code;
[L947]               assume 0 <= hdr.medium_tlv0.tl_code && hdr.medium_tlv0.tl_code <= 256;
[L948]               havoc hdr.medium_tlv0.tl_len_code;
[L949]               assume 0 <= hdr.medium_tlv0.tl_len_code && hdr.medium_tlv0.tl_len_code <= 256;
[L950]               havoc hdr.medium_tlv0.tl_length;
[L951]               assume 0 <= hdr.medium_tlv0.tl_length && hdr.medium_tlv0.tl_length <= 65536;
[L952]               hdr.metainfo.valid := false;
[L953]               emit[hdr.metainfo] := false;
[L954]               havoc hdr.metainfo.tlv_code;
[L955]               assume 0 <= hdr.metainfo.tlv_code && hdr.metainfo.tlv_code <= 256;
[L956]               havoc hdr.metainfo.tlv_length;
[L957]               assume 0 <= hdr.metainfo.tlv_length && hdr.metainfo.tlv_length <= 256;
[L958]               havoc hdr.metainfo.tlv_value;
[L959]               hdr.nonce.valid := false;
[L960]               emit[hdr.nonce] := false;
[L961]               havoc hdr.nonce.tlv_code;
[L962]               assume 0 <= hdr.nonce.tlv_code && hdr.nonce.tlv_code <= 256;
[L963]               havoc hdr.nonce.tlv_length;
[L964]               assume 0 <= hdr.nonce.tlv_length && hdr.nonce.tlv_length <= 256;
[L965]               havoc hdr.nonce.tlv_value;
[L966]               hdr.signature_info.valid := false;
[L967]               emit[hdr.signature_info] := false;
[L968]               havoc hdr.signature_info.tlv_code;
[L969]               assume 0 <= hdr.signature_info.tlv_code && hdr.signature_info.tlv_code <= 256;
[L970]               havoc hdr.signature_info.tlv_length;
[L971]               assume 0 <= hdr.signature_info.tlv_length && hdr.signature_info.tlv_length <= 256;
[L972]               havoc hdr.signature_info.tlv_value;
[L973]               hdr.signature_value.valid := false;
[L974]               emit[hdr.signature_value] := false;
[L975]               havoc hdr.signature_value.tlv_code;
[L976]               assume 0 <= hdr.signature_value.tlv_code && hdr.signature_value.tlv_code <= 256;
[L977]               havoc hdr.signature_value.tlv_length;
[L978]               assume 0 <= hdr.signature_value.tlv_length && hdr.signature_value.tlv_length <= 256;
[L979]               havoc hdr.signature_value.tlv_value;
[L980]               hdr.small_content.valid := false;
[L981]               emit[hdr.small_content] := false;
[L982]               havoc hdr.small_content.tl_code;
[L983]               assume 0 <= hdr.small_content.tl_code && hdr.small_content.tl_code <= 256;
[L984]               havoc hdr.small_content.tl_length;
[L985]               assume 0 <= hdr.small_content.tl_length && hdr.small_content.tl_length <= 256;
[L986]               hdr.small_name.valid := false;
[L987]               emit[hdr.small_name] := false;
[L988]               havoc hdr.small_name.tl_code;
[L989]               assume 0 <= hdr.small_name.tl_code && hdr.small_name.tl_code <= 256;
[L990]               havoc hdr.small_name.tl_length;
[L991]               assume 0 <= hdr.small_name.tl_length && hdr.small_name.tl_length <= 256;
[L992]               hdr.small_ndnlp.valid := false;
[L993]               emit[hdr.small_ndnlp] := false;
[L994]               havoc hdr.small_ndnlp.total;
[L995]               assume 0 <= hdr.small_ndnlp.total && hdr.small_ndnlp.total <= 1125899906842624 * 1125899906842624 * 4096;
[L996]               hdr.small_tlv0.valid := false;
[L997]               emit[hdr.small_tlv0] := false;
[L998]               havoc hdr.small_tlv0.tl_code;
[L999]               assume 0 <= hdr.small_tlv0.tl_code && hdr.small_tlv0.tl_code <= 256;
[L1000]              havoc hdr.small_tlv0.tl_length;
[L1001]              assume 0 <= hdr.small_tlv0.tl_length && hdr.small_tlv0.tl_length <= 256;
[L1002]              hdr.components.last.valid := false;
[L1003]              emit[hdr.components.last] := false;
[L1004]              havoc hdr.components.last.tlv_code;
[L1005]              assume 0 <= hdr.components.last.tlv_code && hdr.components.last.tlv_code <= 256;
[L1006]              havoc hdr.components.last.tlv_length;
[L1007]              assume 0 <= hdr.components.last.tlv_length && hdr.components.last.tlv_length <= 256;
[L1008]              havoc hdr.components.last.tlv_value;
[L1009]              hdr.components.0.valid := false;
[L1010]              emit[hdr.components.0] := false;
[L1011]              havoc hdr.components.0.tlv_code;
[L1012]              assume 0 <= hdr.components.0.tlv_code && hdr.components.0.tlv_code <= 256;
[L1013]              havoc hdr.components.0.tlv_length;
[L1014]              assume 0 <= hdr.components.0.tlv_length && hdr.components.0.tlv_length <= 256;
[L1015]              havoc hdr.components.0.tlv_value;
[L1016]              hdr.components.1.valid := false;
[L1017]              emit[hdr.components.1] := false;
[L1018]              havoc hdr.components.1.tlv_code;
[L1019]              assume 0 <= hdr.components.1.tlv_code && hdr.components.1.tlv_code <= 256;
[L1020]              havoc hdr.components.1.tlv_length;
[L1021]              assume 0 <= hdr.components.1.tlv_length && hdr.components.1.tlv_length <= 256;
[L1022]              havoc hdr.components.1.tlv_value;
[L1023]              hdr.components.2.valid := false;
[L1024]              emit[hdr.components.2] := false;
[L1025]              havoc hdr.components.2.tlv_code;
[L1026]              assume 0 <= hdr.components.2.tlv_code && hdr.components.2.tlv_code <= 256;
[L1027]              havoc hdr.components.2.tlv_length;
[L1028]              assume 0 <= hdr.components.2.tlv_length && hdr.components.2.tlv_length <= 256;
[L1029]              havoc hdr.components.2.tlv_value;
[L1030]              hdr.components.3.valid := false;
[L1031]              emit[hdr.components.3] := false;
[L1032]              havoc hdr.components.3.tlv_code;
[L1033]              assume 0 <= hdr.components.3.tlv_code && hdr.components.3.tlv_code <= 256;
[L1034]              havoc hdr.components.3.tlv_length;
[L1035]              assume 0 <= hdr.components.3.tlv_length && hdr.components.3.tlv_length <= 256;
[L1036]              havoc hdr.components.3.tlv_value;
[L1037]              hdr.components.4.valid := false;
[L1038]              emit[hdr.components.4] := false;
[L1039]              havoc hdr.components.4.tlv_code;
[L1040]              assume 0 <= hdr.components.4.tlv_code && hdr.components.4.tlv_code <= 256;
[L1041]              havoc hdr.components.4.tlv_length;
[L1042]              assume 0 <= hdr.components.4.tlv_length && hdr.components.4.tlv_length <= 256;
[L1043]              havoc hdr.components.4.tlv_value;
[L1044]              tmp_hdr_6.valid := false;
[L1045]              tmp_hdr_7.valid := false;
[L1046]              tmp_hdr_8.valid := false;
[L1047]              tmp_hdr_9.valid := false;
[L1048]              tmp_hdr_10.valid := false;
[L1049]              tmp_hdr_11.valid := false;
[L1050]              tmp_hdr_12.valid := false;
[L1051]              NoAction_0.isApplied := false;
[L1052]              NoAction_7.isApplied := false;
[L1053]              NoAction_8.isApplied := false;
[L1054]              NoAction_9.isApplied := false;
[L1055]              NoAction_10.isApplied := false;
[L1056]              NoAction_11.isApplied := false;
[L1057]              storeNumOfComponents.isApplied := false;
[L1058]              _drop.isApplied := false;
[L1059]              _drop_4.isApplied := false;
[L1060]              _drop_5.isApplied := false;
[L1061]              _drop_6.isApplied := false;
[L1062]              set_egr.isApplied := false;
[L1063]              computeStoreTablesIndex.isApplied := false;
[L1064]              readPitEntry.isApplied := false;
[L1065]              cleanPitEntry.isApplied := false;
[L1066]              setOutputIface.isApplied := false;
[L1067]              updatePit_entry.isApplied := false;
[L1068]              count_table_0.isApplied := false;
[L1069]              havoc count_table_0.storeNumOfComponents.total;
[L1070]              fib_table_0.isApplied := false;
[L1071]              havoc fib_table_0.set_egr.egress_spec;
[L1072]              hashName_table_0.isApplied := false;
[L1073]              pit_table_0.isApplied := false;
[L1074]              routeData_table_0.isApplied := false;
[L1075]              havoc routeData_table_0.setOutputIface.out_iface;
[L1076]              updatePit_table_0.isApplied := false;
[L1101]  RET         call havocProcedure();
[L1102]  CALL        call _parser_ParserImpl();
[L723]   CALL        call start();
[L1572]  CALL        call parse_ethernet();
[L1217]              hdr.ethernet.valid := true;
[L1218]              tmp_5 := hdr.ethernet.etherType;
[L1219]              havoc tmp_7;
[L1220]              tmp_6 := tmp_7;
[L1221]  COND FALSE  !(tmp_5 % 65535 == 34340 && tmp_6 % 255 == 80)
[L1224]  COND TRUE   tmp_5 % 65535 == 34340 && true
[L1225]  CALL        call parse_ndn();
[L1344]              havoc tmp_15;
[L1345]              tmp_14 := (tmp_15 - tmp_15 % 1) / 1 % 256;
[L1346]  COND TRUE   tmp_14 == 253
[L1347]  CALL        call parse_medium_tlv0();
[L1308]              hdr.medium_tlv0.valid := true;
[L1309]              meta.flow_metadata.packetType := hdr.medium_tlv0.tl_code;
[L1310]  CALL        call parse_tlv0();
[L1443]              havoc tmp_24;
[L1444]              tmp_23 := tmp_24;
[L1445]  COND FALSE  !(tmp_23 == 7)
[L1310]  RET         call parse_tlv0();
[L1347]  RET         call parse_medium_tlv0();
[L1225]  RET         call parse_ndn();
[L1572]  RET         call parse_ethernet();
[L723]   RET         call start();
[L1102]  RET         call _parser_ParserImpl();
[L1103]  CALL        call verifyChecksum();
[L1103]  RET         call verifyChecksum();
[L1104]  CALL        call ingress();
[L1083]  CALL        call count_table_0.apply();
[L778]               count_table_0.isApplied := true;
[L779]   COND TRUE   count_table_0.action_run == count_table_0.action.storeNumOfComponents
[L780]   CALL        call storeNumOfComponents(count_table_0.storeNumOfComponents.total);
[L1580]              storeNumOfComponents.isApplied := true;
[L1581]              meta.name_metadata.components := total;
[L780]   RET         call storeNumOfComponents(count_table_0.storeNumOfComponents.total);
[L1083]  RET         call count_table_0.apply();
[L1084]  COND TRUE   meta.name_metadata.components != 0
[L1085]  CALL        call hashName_table_0.apply();
[L819]               hashName_table_0.isApplied := true;
[L820]   COND TRUE   hashName_table_0.action_run == hashName_table_0.action.computeStoreTablesIndex
[L821]   CALL        call computeStoreTablesIndex();
[L751]               computeStoreTablesIndex.isApplied := true;
[L753]               havoc meta.name_metadata.name_hash;
[L754]               assume meta.name_metadata.name_hash >= 0 && 65536 >= meta.name_metadata.name_hash;
[L756]               havoc meta.comp_metadata.c1;
[L757]               assume meta.comp_metadata.c1 >= 0 && 65536 >= meta.comp_metadata.c1;
[L759]               havoc meta.comp_metadata.c2;
[L760]               assume meta.comp_metadata.c2 >= 0 && 65536 >= meta.comp_metadata.c2;
[L762]               havoc meta.comp_metadata.c3;
[L763]               assume meta.comp_metadata.c3 >= 0 && 65536 >= meta.comp_metadata.c3;
[L765]               havoc meta.comp_metadata.c4;
[L766]               assume meta.comp_metadata.c4 >= 0 && 65536 >= meta.comp_metadata.c4;
[L821]   RET         call computeStoreTablesIndex();
[L1085]  RET         call hashName_table_0.apply();
[L1086]  CALL        call pit_table_0.apply();
[L1464]              pit_table_0.meta.flow_metadata.packetType := meta.flow_metadata.packetType;
[L1466]              pit_table_0.isApplied := true;
[L1467]  COND FALSE  !(pit_table_0.action_run == pit_table_0.action.readPitEntry)
[L1470]  COND TRUE   pit_table_0.action_run == pit_table_0.action.cleanPitEntry
[L1471]  CALL        call cleanPitEntry();
[L734]               cleanPitEntry.isApplied := true;
[L736]               meta.flow_metadata.isInPIT := pit_r[meta.name_metadata.name_hash];
[L738]   CALL        call pit_r.write(meta.name_metadata.name_hash, 0);
[L1453]              pit_r[index] := value;
[L738]   RET         call pit_r.write(meta.name_metadata.name_hash, 0);
[L1471]  RET         call cleanPitEntry();
[L1086]  RET         call pit_table_0.apply();
[L1087]  COND FALSE  !(meta.flow_metadata.packetType == 5)
[L1094]  CALL        call routeData_table_0.apply();
[L1496]              routeData_table_0.meta.flow_metadata.isInPIT := meta.flow_metadata.isInPIT;
[L1498]              routeData_table_0.isApplied := true;
[L1499]  COND TRUE   routeData_table_0.action_run == routeData_table_0.action.setOutputIface
[L1500]  CALL        call setOutputIface(routeData_table_0.setOutputIface.out_iface);
[L1515]              setOutputIface.isApplied := true;
[L1516]              standard_metadata.egress_spec := out_iface;
[L1517]              standard_metadata.egress_port := out_iface;
[L1518]              forward := true;
[L1500]  RET         call setOutputIface(routeData_table_0.setOutputIface.out_iface);
[L1094]  RET         call routeData_table_0.apply();
[L1104]  RET         call ingress();
[L1105]  CALL        call egress();
[L1105]  RET         call egress();
[L1106]  CALL        call computeChecksum();
[L1106]  RET         call computeChecksum();
[L1107]  COND FALSE  !(forward == false)
[L1110]              _p4ltl_0 := meta.flow_metadata.packetType == 5;
[L1111]              _p4ltl_1 := meta.flow_metadata.packetType == 6;
[L1112]              _p4ltl_2 := meta.flow_metadata.packetType == 6;
[L1113]              _p4ltl_3 := meta.flow_metadata.isInPIT == 0;
[L1114]              _p4ltl_4 := meta.flow_metadata.packetType == 6;
[L1115]              _p4ltl_5 := pit_r[_p4ltl_free_a] == 0;
[L1116]              _p4ltl_6 := meta.flow_metadata.packetType == 6;
[L1117]              _p4ltl_7 := meta.flow_metadata.packetType == 5;
[L1118]              _p4ltl_8 := meta.name_metadata.name_hash == _p4ltl_free_a;
[L1119]              _p4ltl_9 := meta.name_metadata.components != 0;
[L1120]              _p4ltl_10 := pit_table_0.meta.flow_metadata.packetType == 5;
[L1121]              _p4ltl_11 := pit_table_0.meta.flow_metadata.packetType == 6;
[L1122]              _p4ltl_12 := updatePit_table_0.meta.flow_metadata.hasFIBentry == 1;
[L1123]              _p4ltl_13 := updatePit_table_0.meta.flow_metadata.hasFIBentry == 0;
[L1124]              _p4ltl_14 := routeData_table_0.setOutputIface.out_iface == 0;
[L1125]              _p4ltl_15 := routeData_table_0.meta.flow_metadata.isInPIT == 2;
[L1137]  RET         call main();
End of lasso representation.
RESULT: Ultimate proved your program to be incorrect!
Received shutdown request...
